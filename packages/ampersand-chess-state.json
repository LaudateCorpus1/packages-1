{
  "name": "ampersand-chess-state",
  "description": "An evented chess library for movement, validation and result detection built on Ampersand.js.",
  "version": "1.0.1",
  "author": {
    "name": "Luke Karrys",
    "email": "luke@lukekarrys.com"
  },
  "dependencies": {
    "ampersand-state": "^5.0.2",
    "chess.js": "^0.10.2",
    "raf": "^3.2.0"
  },
  "devDependencies": {
    "browserify": "^13.1.0",
    "electron-prebuilt": "^1.3.2",
    "jshint": "^2.9.2",
    "precommit-hook": "^3.0.0",
    "run-browser": "^2.0.2",
    "tap-spec": "^4.1.1",
    "tape": "^4.6.0",
    "tape-run": "^2.1.4"
  },
  "homepage": "https://github.com/lukekarrys/ampersand-chess-state",
  "keywords": [
    "ampersand",
    "chess",
    "chessboard"
  ],
  "license": "MIT",
  "main": "ampersand-chess-state.js",
  "pre-commit": [
    "lint",
    "test",
    "validate"
  ],
  "repository": {
    "user": "lukekarrys",
    "repo": "ampersand-chess-state",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/lukekarrys/ampersand-chess-state/tarball/master",
    "clone_url": "https://github.com/lukekarrys/ampersand-chess-state",
    "https_url": "https://github.com/lukekarrys/ampersand-chess-state",
    "travis_url": "https://travis-ci.org/lukekarrys/ampersand-chess-state",
    "zip_url": "https://github.com/lukekarrys/ampersand-chess-state/archive/master.zip",
    "api_url": "https://api.github.com/repos/lukekarrys/ampersand-chess-state"
  },
  "scripts": {
    "lint": "jshint .",
    "start": "run-browser test/* --port 3001",
    "test": "browserify test/*.js | tape-run | tap-spec",
    "validate": "npm ls"
  },
  "gitHead": "45be019df0d7ce8b89b0da0a0eaa84943b939f2c",
  "_npmVersion": "3.10.5",
  "_nodeVersion": "5.12.0",
  "dist": {
    "shasum": "97d57728dddd79b8b796fa3541dc576ecbe089ff",
    "tarball": "http://registry.npmjs.org/ampersand-chess-state/-/ampersand-chess-state-1.0.1.tgz"
  },
  "versions": [
    {
      "number": "0.0.0",
      "date": "2015-01-20T06:08:53.515Z"
    },
    {
      "number": "0.0.1",
      "date": "2015-01-20T06:09:07.909Z"
    },
    {
      "number": "0.1.0",
      "date": "2015-01-20T06:35:22.272Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-01-20T06:50:45.179Z"
    },
    {
      "number": "0.1.2",
      "date": "2015-01-20T07:45:41.501Z"
    },
    {
      "number": "0.1.3",
      "date": "2015-01-20T07:57:21.933Z"
    },
    {
      "number": "0.1.4",
      "date": "2015-01-21T01:29:53.414Z"
    },
    {
      "number": "0.1.5",
      "date": "2015-01-24T18:32:32.273Z"
    },
    {
      "number": "0.1.6",
      "date": "2015-03-31T21:54:28.547Z"
    },
    {
      "number": "0.1.7",
      "date": "2015-05-13T03:34:10.320Z"
    },
    {
      "number": "1.0.0",
      "date": "2015-05-13T03:34:32.466Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-08-06T05:35:25.014Z"
    }
  ],
  "created": "2015-01-20T06:08:53.515Z",
  "modified": "2016-08-06T05:35:25.014Z",
  "lastPublisher": {
    "name": "lukekarrys",
    "email": "luke@lukekarrys.com"
  },
  "owners": [
    {
      "name": "lukekarrys",
      "email": "luke@lukekarrys.com"
    }
  ],
  "readme": "ampersand-chess-state\n-------------------------\n\n[![Build Status](https://travis-ci.org/lukekarrys/ampersand-chess-state.png?branch=master)](https://travis-ci.org/lukekarrys/ampersand-chess-state)\n[![NPM](https://nodei.co/npm/ampersand-chess-state.png)](https://nodei.co/npm/ampersand-chess-state/)\n\n\n## Install\n`npm install ampersand-chess-state`\n\n\n## What?\n\n`ampersand-chess-state` is an [`ampersand-state`](https://npmjs.org/ampersand-state) wrapper around the awesome [`chess.js`](https://npmjs.org/chess.js) library.\n\nThe main reason for the wrapper is to allow for listening to changes in properties like `checkmate` or `check` when moving pieces without needing to call the synchronous chess.js methods like `chess.in_checkmate()` or `chess.in_check()`.\n\nThis also adds a few other conveniences not found in `chess.js`:\n\n- A `redo/last/first` methods to go along with `undo`\n- Optionally keeping time for each side\n- Getting the pgn as an array with the active ply flagged\n- A helper derived property for getting the reason for an ended game\n- The ability to \"freeze\" certain properties based on their end state when replaying a game\n\n\n## Example\n\n**Load a starting position and listen for pgn/fen changes and moves**\n```js\nvar Chess = require('../ampersand-chess-state');\nvar chess = new Chess();\nvar log = function (prefix, model, value) { console.log(prefix, JSON.stringify(value)); };\n\nchess.on('change:fen', log.bind(null, 'FEN'));\nchess.on('change:pgn', log.bind(null, 'PGN'));\nchess.on('change:move', log.bind(null, 'MOVE'));\n\n// Use the move method\nchess.move('e4');\n// FEN \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\"\n// PGN \"1. e4\"\n// MOVE {\"color\":\"w\",\"from\":\"e2\",\"to\":\"e4\",\"flags\":\"b\",\"piece\":\"p\",\"san\":\"e4\"}\n\nchess.move('e5');\n// FEN \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\"\n// PGN \"1. e4 e5\"\n// MOVE {\"color\":\"b\",\"from\":\"e7\",\"to\":\"e5\",\"flags\":\"b\",\"piece\":\"p\",\"san\":\"e5\"}\n\n// Or append to the pgn property\nchess.pgn += ' 2. f4';\n// FEN \"rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq f3 0 2\"\n// MOVE {\"color\":\"w\",\"from\":\"f2\",\"to\":\"f4\",\"flags\":\"b\",\"piece\":\"p\",\"san\":\"f4\"}\n// PGN \"1. e4 e5 2. f4\"\n```\n\n\n## API\n\n### `props`\n\n#### `fen` (string)\n#### `pgn` (string)\n\nEither of these can be set as strings on the state object, but only one may be set on initialization. If neither is set, it default to normal starting position.\n\nSetting `fen` will wipe out all previous move and pgn history.\n\nAppending a new move to `pgn` will not cause any history to be lost and will instead call `move()` with the newest move. But making a wholesale `pgn` change will reset all history.\n\n#### `blackTime` (number)\n#### `whiteTime` (number)\n\nA number in milliseconds to start with for the time for that color. This number will decrease (using requestAnimationFrame) while it is that color's turn.\n\n#### `freezeOnFinish` (boolean, false)\n\nThis is a flag that if `true` will cause certain properties to be \"frozen\" once a game has been finished. This allows for the position to be changed (by `undo/redo` for example) but still have the properties keep the same value that they did at the end of the game. See the freezable tag on the derived property documentation for which ones will be frozen.\n\nYou're most likely going to want to set this to `true` for legal games but leave it as the default for things like analysis boards, etc.\n\n\n### `derived`\n\n#### `future` (array)\n#### `history` (array)\n#### `canUndo` (boolean)\n#### `canRedo` (boolean)\n`history` and `future` are arrays containing any previous or future moves relative to the current position when replaying a game which can be done with the `undo`, `redo`, `first`, `last` methods.\n\n`canUndo` and `canRedo` are booleans which trigger based on if the corresponding array has `length > 0`.\n\n#### `valid` (boolean)\n#### `errorMessage` (string)\nThese contain information about whether the position is valid and the possible resulting error message when setting the `fen` or `pgn`. These won't be triggered when using any of the methods such as `move`. Those will instead return `null` if they move was invalid.\n\n#### `start` (boolean, freezable)\nTriggers whenever the board is in the starting position.\n\n#### `empty` (boolean, freezable)\nTriggers whenever the board is empty. This wouldn't ever get triggered during a legal game.\n\n#### `turn` (string, [\"black\", \"white\"], freezable)\nTriggers with the color whose turn it is.\n\n#### `checkmate` (boolean, freezable)\n#### `check` (boolean, freezable)\n#### `draw` (boolean, freezable)\n#### `stalemate` (boolean, freezable)\n#### `threefoldRepetition` (boolean, freezable)\n#### `insufficientMaterial` (boolean, freezable)\n#### `lostOnTime` (boolean, freezable)\n#### `gameOver` (boolean, freezable)\nEach of these trigger when the resulting condition is met in the position.\n\n#### `winner` (string, [\"black\", \"white\", \"\"], freezable)\nReturns the winning color based on `checkmate` or if one side `lostOnTime`.\n\n#### `ascii` (string)\nAn ascii representation of the board. Pop it in `<pre></pre>` and you're halfway to ascii chess.\n\n#### `moves` (array)\nAn array of valid moves based on the current position.\n\n#### `pgnArray` (array)\nAn array of each pgn move in the following format. The `active` flag will be updated based on the `history` which can be used to highlight the active ply when replaying a game.\n\nExample:\n```\n// Black's turn in the second move\n[{\n    move: 1,\n    ply1: {san: 'e4'},\n    ply2 {san: 'e5'}\n}, {\n    move: 2,\n    ply1: {san: 'f4', active: true},\n    ply2: {san: ''}\n}]\n```\n\n#### `endResult` (string, freezable)\nTriggers when the game is over with one of the following values:\n\n```\nLost on time\nCheckmate\nDraw - Stalemate\nDraw - Threefold Repetition\nDraw - Insufficient Material\n```\n\n\n### Methods\n\nAll these methods change the position in someway and will trigger changes in `fen` and `pgn`. They take an `options` object as the last parameter which will be passed along when `set` is called on `fen` and/or `pgn`.\n\n#### `load(fen, options)`\n#### `loadPgn(pgn, newlineChar, options)`\nThese methods will load a new `fen` or `pgn`. These exist for convenience when wanting to use the options or newlineChar parameters. Most of the time you'll want to do `chess.fen = newFen` or `chess.pgn = newPgn`.\n\nAlso note that loading a new `fen` or `pgn` will result in lost history. You should normally use the `move()` method. In the case of appending a new valid move to `pgn` this will call `move(appendedMove)` under the hood.\n\n#### `move(move, options)`\nThis method will make the move requested. If the move is invalid it will return `null`.\n\n#### `random(options)`\nMake a random but valid move. Returns the move.\n\n#### `put(piece, square, options)`\n#### `remove(square, options)`\n#### `reset(options)`\n#### `clearEngine(options)`\nThese methods are used mostly in analysis style situations since they allow adding or removing pieces from the board. See the [`chess.js`](https://npmjs.org/chess.js) docs for more info about them.\n\n#### `undo(options)`\n#### `redo(options)`\n#### `first(options)`\n#### `last(options)`\nThese will change to the previous or next move in the history, or to the first or last move in the history. They will return the move to be played or `null` if no such move exists.\n\n\n## Tests\nRun `npm test` for the command line tests (using phantomjs) or `npm start` to open a browser with the tests.\n\n\n## LICENSE\nMIT"
}