{
  "name": "luma.gl",
  "version": "2.8.0",
  "description": "A WebGL JavaScript visualization library.",
  "license": "MIT",
  "author": {
    "name": "Ib Green",
    "email": "ib@uber.com"
  },
  "contributors": [
    {
      "name": "Nicolas Belomonte",
      "email": "nico@uber.com"
    },
    {
      "name": "Rye Terrell"
    },
    {
      "name": "Shan He",
      "email": "shan@uber.com"
    },
    {
      "name": "Mikola Lysenko"
    },
    {
      "name": "Wesam Manassra",
      "email": "manassra@uber.com"
    }
  ],
  "repository": null,
  "keywords": [
    "webgl",
    "w3c",
    "visualization",
    "canvas",
    "animation",
    "3d"
  ],
  "main": "dist/index.js",
  "files": [
    "dist",
    "shaderlib",
    "src",
    "headless.js",
    "node-io.js"
  ],
  "dependencies": {
    "autobind-decorator": "^1.3.3",
    "babel-core": "^6.7.7",
    "babel-polyfill": "^6.5.0",
    "canvas-to-blob": "0.0.0",
    "filesaver.js": "^0.2.0",
    "gl-constants": "^1.0.0",
    "gl-format-compiler-error": "^1.0.2",
    "glsl-shader-name": "^1.0.0",
    "glslify": "^5.0.2",
    "through": "^2.3.8",
    "webgl-debug": "^1.0.2"
  },
  "devDependencies": {
    "babel-cli": "^6.3.15",
    "babel-eslint": "^6.0.0",
    "babel-plugin-glslify": "^1.0.0",
    "babel-plugin-transform-builtin-extend": "^1.1.0",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-stage-2": "^6.3.13",
    "babelify": "^7.2.0",
    "bl": "^1.1.2",
    "blue-tape": "^0.2.0",
    "browserify": "^13.0.0",
    "budo": "^8.0.3",
    "cookie-cutter": "^0.1.1",
    "d3-format": "^1.0.0",
    "disc": "^1.3.2",
    "electron-prebuilt": "^0.37.2",
    "eslint": "^2.0",
    "eslint-config-uber-es2015": "^2.0.0",
    "faucet": "0.0.1",
    "get-pixels": "^3.3.0",
    "gl": "^4.0.2",
    "husky": "^0.10.2",
    "mkdirp": "^0.5.1",
    "ndarray": "^1.0.18",
    "save-pixels": "^2.3.2",
    "tap-browser-color": "^0.1.2",
    "tape-catch": "^1.0.4",
    "tape-promise": "^1.1.0",
    "testron": "^1.2.0",
    "uglify-js": "^2.6.1"
  },
  "scripts": {
    "build": "npm run build-clean && npm run build-compile && npm run build-script",
    "build-clean": "rm -fr dist/*",
    "build-compile": "babel src -d dist --source-maps inline --copy-files",
    "build-script": "browserify src/bundle.js --debug -o dist/lumagl.js -t babelify -t glslify && cat dist/lumagl.js | uglifyjs > dist/lumagl.min.js",
    "docs": "npm run docs-build && open ./_docs/index.html",
    "docs-build": "rm -fr _docs/* && jekyll build --config=docs/_config.yml --layouts docs/_layouts",
    "docs-gh-pages": "git subtree push --prefix _docs origin gh-pages",
    "docs-gh-pages-force": "git push origin `git subtree split --prefix _docs dev`:gh-pages --force",
    "docs-publish": "npm run docs-build && git add _docs -f && git commit -m 'UPDATE DOCS' --no-verify && npm run docs-gh-pages",
    "lint": "eslint src",
    "precommit": "npm test",
    "prepublish": "npm run build",
    "test": "npm run lint && npm run test-headless && npm run test-headless-nowebgl",
    "test-headless": "babel-node --include='' test/headless.js | faucet",
    "test-headless-nowebgl": "babel-node --include='' test/headless-nowebgl.js | faucet",
    "test-browser": "budo test/browser.js:build/test-bundle.js --dir test --live --open --port 3001 --watch-glob '**/*.{html,css,js,glsl}' -- -t babelify -t glslify",
    "test-electron": "browserify test/electron.js | testron | faucet",
    "profile-disc": "browserify src/bundle.js --full-paths -t babelify -t glslify | discify --open",
    "start": "budo src/bundle.js:dist/lumagl.js --live --open --port 3000 --watch-glob '**/*.{html,css,js,glsl}' -- -t babelify -t glslify"
  },
  "eslintConfig": {
    "parser": "babel-eslint",
    "extends": [
      "eslint-config-uber-es2015"
    ],
    "rules": {
      "guard-for-in": 0
    }
  },
  "gitHead": "31e9c934f54944d0ebb51b6e31e664b369a6be7c",
  "_npmVersion": "3.10.5",
  "_nodeVersion": "0.12.13",
  "dist": {
    "shasum": "60954da42ca49b080942c426f32b05c871cb32f7",
    "tarball": "http://registry.npmjs.org/luma.gl/-/luma.gl-2.8.0.tgz"
  },
  "versions": [
    {
      "number": "2.0.4-0",
      "date": "2016-04-12T22:44:54.944Z"
    },
    {
      "number": "2.0.0-beta1",
      "date": "2016-05-19T22:38:20.758Z"
    },
    {
      "number": "2.0.0-beta2",
      "date": "2016-05-19T23:21:01.410Z"
    },
    {
      "number": "2.0.0-beta3",
      "date": "2016-05-24T16:38:14.776Z"
    },
    {
      "number": "2.0.0-beta4",
      "date": "2016-05-24T17:04:56.977Z"
    },
    {
      "number": "2.0.0-beta5",
      "date": "2016-05-24T17:15:53.590Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-06-01T03:00:58.376Z"
    },
    {
      "number": "2.0.0-beta6",
      "date": "2016-06-03T22:58:58.281Z"
    },
    {
      "number": "2.0.0-beta7",
      "date": "2016-07-02T17:15:46.413Z"
    },
    {
      "number": "2.0.0-beta8",
      "date": "2016-07-05T15:56:00.117Z"
    },
    {
      "number": "2.1.0",
      "date": "2016-07-05T16:09:57.411Z"
    },
    {
      "number": "2.2.0",
      "date": "2016-07-05T16:26:08.920Z"
    },
    {
      "number": "2.3.0",
      "date": "2016-07-11T22:35:46.243Z"
    },
    {
      "number": "2.3.1",
      "date": "2016-07-13T02:19:16.158Z"
    },
    {
      "number": "2.4.0",
      "date": "2016-07-13T16:38:37.927Z"
    },
    {
      "number": "2.4.1",
      "date": "2016-07-13T18:31:58.529Z"
    },
    {
      "number": "2.4.2",
      "date": "2016-07-13T19:38:56.282Z"
    },
    {
      "number": "3.0.0-beta1",
      "date": "2016-09-06T23:29:51.601Z"
    },
    {
      "number": "2.5.0",
      "date": "2016-09-09T23:11:56.226Z"
    },
    {
      "number": "2.5.1",
      "date": "2016-09-10T18:12:07.515Z"
    },
    {
      "number": "2.5.2",
      "date": "2016-09-12T23:22:29.672Z"
    },
    {
      "number": "2.5.3",
      "date": "2016-09-16T22:25:14.465Z"
    },
    {
      "number": "2.5.4",
      "date": "2016-09-19T18:23:50.478Z"
    },
    {
      "number": "2.6.0",
      "date": "2016-09-26T19:13:13.534Z"
    },
    {
      "number": "2.7.0",
      "date": "2016-09-27T16:37:04.735Z"
    },
    {
      "number": "3.0.0-beta2",
      "date": "2016-09-27T19:21:47.440Z"
    },
    {
      "number": "2.8.0",
      "date": "2016-09-30T04:33:05.287Z"
    }
  ],
  "created": "2016-04-12T22:44:54.944Z",
  "modified": "2016-09-30T04:33:05.287Z",
  "lastPublisher": {
    "name": "ibgreen",
    "email": "ib.green.home@gmail.com"
  },
  "owners": [
    {
      "name": "gnavvy",
      "email": "gnavvy@gmail.com"
    },
    {
      "name": "heshan0131",
      "email": "heshan0131@gmail.com"
    },
    {
      "name": "ibgreen",
      "email": "ib.green.home@gmail.com"
    }
  ],
  "readme": "luma.gl: A JavaScript WebGL Framework for Data Visualization\n============================================================\n\n## Overview\n\nluma.gl's primary focus is to provide a set of efficient and easy-to-use\nWebGL building blocks enabling high-performance browser-based data\nvisualizations.\n\nSee\n[**Examples**](http://uber.github.io/luma.gl/) and\n[**Documentation**](http://uber.github.io/luma.gl/docs/).\n[**Change Log**](https://github.com/uber/luma.gl/blob/master/CHANGELOG.md).\n\n\n## luma.gl Design Goals\n\nHigh Level Design Goals\n- Focus on data visualization. While generic in nature, luma.gl\n  will prioritize features that enable efficient rendering of\n  large sets of data or that support improved visualization techniques.\n- Provide a modern, easy-to-use API built from small independent classes,\n  that simplifies WebGL usage without hiding WebGL from the programmer.\n\nTechnical Design Goals:\n- Ensure smooth integration in modern applications by leveraging the\n  latest JavaScript language standards (ES6+) and build technologies\n  (browserify/babel/npm etc).\n- Facilitate Shader Programming - Adapts techniques (such as\n  [glslify](https://www.npmjs.com/package/glslify) that\n  help developers efficiently create, organize and debug shader code.\n- No \"magic\" global state that gets in the way of interoperability. All\n  components work with a standard `WebGLRenderingContext` and can used\n  together with components from other frameworks (e.g. stackgl).\n- Built in support for WebGL and Shader debugging and profiling.\n\n\n### Running luma.gl in Node.js\n\nIf `headless-gl` is installed and properly configured on your system\n(it can often autodetect your configuration),\nyou should be able to run luma.gl in Node.js from the console,\neven machines that do not have GPUs.\n\nTo do this, your application should import 'luma.gl/headless':\n```js\nimport {createGLContext, Model, ...} from 'luma.gl/headless';\n\nconst gl = createGLContext({width, height, ...});\n```\n\nAll luma.gl unit tests are run under Node.js in this configuration so it\nshould work out of the box. For more information, see\n[headless-gl](https://www.npmjs.com/package/gl) and\n[luma.gl documentation](http://uber.github.io/luma.gl/context.html#createGLContext).\n\n\n## Compatibility\n\n### [ndarray](https://www.npmjs.com/package/ndarray)\n\"Strided\" `ndarrays` are returned by a number of good image-loading\nnpm modules and are also quite useful on their own.\n- `Buffer`s and `Texture`s can accept `ndarray`s as long as they are backed by\n  a typed javascript array. Note that if your `ndarray` is not \"packed\" you\n  may need to transform it to a \"packed\" format `ndarray` first.\n- Note: luma.gl has no direct dependencies on any of the ndarray npm modules.\n  luma.gl uses \"soft\" detection techniques to decide if a data object is an\n  `ndarray`.\n\n\n## Usage\n\n* [deck.gl](https://github.com/uber/deck.gl) builds 3D map visualization\n  overlays on luma.gl.\n\n\n## History\n\nluma.gl started out as a fork of\n[PhiloGL](https://github.com/philogb/philogl) however no effort has been\nmade to maintain compatibility with PhiloGL-based applications.\n\n\n# Installation\n\n```sh\nnpm install luma.gl --save\n```\n\n# Documentation, Lessons and Examples\n\nLuma.gl comes with 16 lessons, a number of examples, and a full set of\nreference documenation.\n\nTo run examples:\n```sh\ngit clone git@github.com:uber/luma.gl.git\ncd luma.gl\nnpm install\nnpm start\n```\nThis builds the luma.gl bundle, starts a small local server, and opens a browser window on a welcome page, allowing you to run to all lessons and examples.\n\n## Quickstart\n\nThe following code sample illustrates the \"flavor\" of the luma.gl API.\n```javascript\nimport {createGLContext, Program, Buffer, PerspectiveCamera} from 'luma.gl';\n\n// Initialize WebGL context\nconst canvas = document.getElementById('lesson01-canvas');\n\nconst gl = createGLContext({canvas});\nconst camera = new PerspectiveCamera({aspect: canvas.width/canvas.height});\n\nconst program = new Program(gl);\ncamera.view.$translate(new Vec3(-1.5, 0, -7));\nprogram\n  .setBuffers({\n    aVertexPosition: new Buffer(gl).setData({\n      data: new Float32Array([0, 1, 0, -1, -1, 0, 1, -1, 0]),\n      size: 3\n    })\n  })\n  .setUniforms({\n    uMVMatrix: camera.view.\n    uPMatrix: camera.projection\n  })\n  .use();\n\n// Draw Triangle\ngl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\ngl.drawArrays(gl.TRIANGLES, 0, 3);\n```\n\n# Developing\n\nUse `npm start` to run the test server, it will open a web page from which\nyou can access the examples and lessons, and automatically update when you\nsave modified source files.\n\n\n## Testing\n\n**Master**\n[![Build Status](https://travis-ci.org/uber/luma.gl.svg?branch=master)](https://travis-ci.org/uber/luma.gl)\n**Dev**\n[![Build Status](https://travis-ci.org/uber/luma.gl.svg?branch=dev)](https://travis-ci.org/uber/luma.gl)\n\nTesting is performed on Travis CI and using a precommit hook. Local testing is\nsupported on three environments\n* `npm test` - runs `npm run test-headless`\n* `npm run test-headless` - Tests using headless-gl (Node.js, without jsdom).\n* `npm run test-electron` - Tests using electron (a browser run-time).\n* `npm run test-browser` - Tests in your browser, may be helpful\n  to quickly debug test case failures since it autoreloads on changes and\n  gives you full access to your browser's debugger.\n\nWhen adding new features, or modifying existing ones, carefully consider if\nunit testing can be provided.\n\n## Publishing\n\nBefore publishing run\n```\nnpm run prepublish\n```\nto generate the static bundles, the optional pretranspiled ES5 distribution,\nand the documention.\n\n## Building Documentation\n\nTo run the static site generation, you need to install the\n`jekyll` and `pygments` ruby gems which can be done with the following command:\n```sh\ngem install jekyll pygments.rb\n```\nOnce that's done, you can rebuild the static site using\nthe following npm script:\n```\nnpm run build-docs\n```\nThis will create a folder called `_docs` in the root directory\nwhich contains all the static content for the site.  To view\nthe docs locally, run this command:\n```\nnpm run docs\n```\n\nTo publish the documentation to the `gh-pages` branch, run the following command\non a clean brach:\n```\nnpm run docs-publish\n```\n\n"
}