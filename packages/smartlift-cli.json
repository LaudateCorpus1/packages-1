{
  "name": "smartlift-cli",
  "description": "commandline tool for managing the smartlift application",
  "version": "1.0.10",
  "author": {
    "name": "Stefan DÃ¼hring | Autarc",
    "email": "autarc@gmail.com"
  },
  "bin": {
    "smartlift": "./bin/smartlift"
  },
  "dependencies": {
    "babel-runtime": "^5.8.20",
    "chalk": "^1.1.1",
    "commander": "^2.8.1",
    "configstore": "^1.2.1",
    "fs-extra": "^0.24.0",
    "gitlab": "^1.4.1",
    "glob": "^5.0.14",
    "inquirer": "^0.9.0",
    "pm2": "^0.14.7",
    "pretty-error": "^1.2.0",
    "progress": "^1.1.8",
    "shelljs": "^0.5.3",
    "source-map-support": "^0.3.2",
    "update-notifier": "^0.5.0",
    "user-home": "^2.0.0"
  },
  "devDependencies": {
    "babel-loader": "^5.3.2",
    "json-loader": "^0.5.2",
    "webpack": "^1.12.0",
    "yaml-loader": "^0.1.0"
  },
  "license": "ISC",
  "repository": {
    "user": "Autarc",
    "repo": "smartlift-cli",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/Autarc/smartlift-cli/tarball/master",
    "clone_url": "https://github.com/Autarc/smartlift-cli",
    "https_url": "https://github.com/Autarc/smartlift-cli",
    "travis_url": "https://travis-ci.org/Autarc/smartlift-cli",
    "zip_url": "https://github.com/Autarc/smartlift-cli/archive/master.zip",
    "api_url": "https://api.github.com/repos/Autarc/smartlift-cli"
  },
  "scripts": {
    "build": "node build",
    "check": "npm outdated -depth 0",
    "start": "node ./bin/smartlift"
  },
  "gitHead": "30d877a20a4441dd46e1770ad29729da3208a57d",
  "homepage": "https://github.com/Autarc/smartlift-cli#readme",
  "_npmVersion": "2.11.1",
  "_nodeVersion": "2.3.0",
  "dist": {
    "shasum": "d8bedcc47c6966b70545914032a7cebbc1d37bfc",
    "tarball": "http://registry.npmjs.org/smartlift-cli/-/smartlift-cli-1.0.10.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-08-28T13:49:50.904Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-08-28T13:56:14.180Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-08-28T14:04:56.222Z"
    },
    {
      "number": "1.0.5",
      "date": "2015-08-28T15:13:19.736Z"
    },
    {
      "number": "1.0.6",
      "date": "2015-08-31T08:13:35.834Z"
    },
    {
      "number": "1.0.7",
      "date": "2015-08-31T08:47:06.870Z"
    },
    {
      "number": "1.0.8",
      "date": "2015-08-31T08:51:11.241Z"
    },
    {
      "number": "1.0.9",
      "date": "2015-08-31T09:29:52.540Z"
    },
    {
      "number": "1.0.10",
      "date": "2015-08-31T09:36:32.230Z"
    }
  ],
  "created": "2015-08-28T13:49:50.904Z",
  "modified": "2015-08-31T09:36:32.230Z",
  "lastPublisher": {
    "name": "autarc",
    "email": "autarc@gmail.com"
  },
  "owners": [
    {
      "name": "autarc",
      "email": "autarc@gmail.com"
    }
  ],
  "readme": "SmartLift CLI\n=============\n\nCommandline tool for managing the smartlift application\n\n\nThis project uses [JavaScript Standard Style](http://standardjs.com/).\n\n\ncare that 'node_modules' excludes itself each file .... ||\n\n- build commandline tool\n\n  ->\n\n\nPath of the current executeable:\n\n  /home/autarc/.nvm/versions/io.js/v2.3.0/lib/node_modules/smartlift-cli\n\n\n  ERROR in ./src/main.js\n  Module parse failed: /home/autarc/.nvm/versions/io.js/v2.3.0/lib/node_modules/smartlift-cli/src/main.js Line 9: Unexpected token\n  You may need an appropriate loader to handle this file type.\n  |  */\n  |\n  | import Configstore from 'configstore'\n  | import updateNotifier from 'update-notifier'\n  |\n\n  -> ignores as in node modules directiy\n\n\n1.) Only regular depencies get installed after a package is loaded -> devDependencies not\n    -> include everthing required during the runtime\n\n2.) carefull about building something in the /node_modules/ folder, as pattern can\n    therefore also include even the basic files ... (therfore include directly the '/bin')\n\n3.) dont re-build on the client side, as path etc. differ and can't be controlled,\n    ship with an executable and merely modify it for the enviornment !\n\n\n\n\n\n\noptional dependencies\n    \"rf-release\": \"^0.4.0\"\n\n\n\n    \"rf-release\": \"^0.4.0\"\n\n\t\tsetup steps for\n\n\n\nThe commandline tool to manage and run the SmartLift application. It helps to setup the environment\nby handling the (core) modules and runtime.\n\n\n// message.push('Update available: ' + chalk.green.bold(notifier.update.latest) + chalk.gray(' (current: ' + notifier.update.current + ')'))\n// message.push('Run ' + chalk.magenta('npm install -g ' + pkg.name) + ' to update.');\n// console.log(yosay(message.join(' '), {maxLength: stringLength(message[0])}));\n\n\n// https://github.com/Automattic/cli-table\n\n\nCurrently the different configurations in the build scripts are not optimized for production but can be modified later !\n\n- add explanation on each step whats happening, so the user sees the progress better ...\n\n\nfor now allowing to set the credentials in there -> or should the server self use his crdentials ?\n\t-> shoudl e enoughn as the lift is limited !\n\n\n\nthink about a better configuration, setting systems -> each module should add itself, provide\nconfiguration by itself -> creating the general overview ?!\n\n\ncheck option for presets - using the settings confoguration tof fogure out which module to install\n\n\n\n\n\n\n\nnext steps:\n\n\n-> create basic server !\n-> create basic electron\n\n-> creaete basic client !\n\t-> split modules\n\n\n-> for simplicty now, create new repository ....\n\n\n\n.... module for the smartlift application\n\n\n\nusing the same structure for easier orientation\n\n\n\n\nCommands:\n\n- toggle for enable/disable a module ?\n\n\nto checK:\n\n\nnpm scopes\n\nhttps://docs.npmjs.com/misc/scope\n\n\n\n\n\nCommmon settings defined: {\n\tROOT_DIRECTORY: '',\n\tSERVER_PORT: ''\n\tGITLAB_TOKEN: ''\n}\n\n\n\nTODO:\n\n- talk with andre about gitlab/token exchange, best experience so far () ...\n\n\n\n\nsmartlift stop, stops the currently running process\nsmartlift update (name) - updates modules\nSmartlift install name@\n\n\n\n\n\nconvention over configuration\n\n-> using the smartlift name dependency to handle further requirements\n-> if a build step is required, define alias using npm run build\n\n\n-> don't store settings/configurations if not required -> the complete listing etc.\n\t happens during the runtime, doesn't take to long in most csaes\n\n\n\n\n\n\nDefinin a new commands follows:\n\n\naction(params, cli, smartlift)\n\n\n\n// share store settings between applications, e.g. port\n\n\n\nBasic approaches:\n\n\n- using a global 'Configstore' (key: smartlift) to access settings a cross different applications\n\t-> stored in the system configuration directory\n\n\n\n\n\n\nhttps://github.com/ryanflorence/rf-release\nhttps://github.com/ryanflorence/rf-changelog\n\n## Usae Cases\n- setup a local smartlift instance to run\n- load existing modules to run\n- create a new module which can be easily integrated\n\n\n\n\nas the server hooks up the script -> no additional built step is required, althought could be refenreced\ntoo if wishesd ...\n\n\nhttp://blog.npmjs.org/post/118810260230/building-a-simple-command-line-tool-with-npm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function will be invoked -> descroption adn command is sotred inside for better encapsulation !\n\n//\n// // const commands = {\n// \t['configure', 'change the settings of local smartlift instance'\n// // }\n\n//\n// var argv = yargs\n// \t.usage(`\n// \t\t/ ___| _ __ ___   __ _ _ __| |_| |   (_)/ _| |_\n// \t\t\\___ \\| '_ ' _ \\ / _' | '__| __| |   | | |_| __|\n// \t\t___) | | | | | | (_| | |  | |_| |___| |  _| |_\n// \t\t|____/|_| |_| |_|\\__,_|_|   \\__|_____|_|_|  \\__|\n// \t`)\n// \t// .demand(['w','h'])\n// \t.argv\n\n\n// this[command](params, options)\n\n\n\n\n\nhttp://blog.npmjs.org/post/118810260230/building-a-simple-command-line-tool-with-npm\n\n\n\n\n\n\n// console.log(argv);\n\n// program\n// \t.version(pkg.version)\n// \t.command('configure <file>', 'change the settings of local smartlift instance')\n// \t\t// .option() // '-c, --configure <n>',\n// \t// .command('list', '')\n// \t\t// .option() // --remote\t|| --local\t|| filters -> else both !\n// \t.command('start', 'runs the local smartlift application')\n// \t.parse(process.argv)\n//\n\n\n\n\n//\n//\n//\n// \tsmartlift configure\t\t\t\t\t\t\t|| -> changes the local settings which are initially defined during the\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetup process\n//\n// \tsmartlift start\t\t\t\t\t\t\t\t\t||\t\truns the smartlift applications (can us optional params for configuration)\n//\n// \t\t\t\t\t\t\t\t--dev\t\t\t\t\t\t\t|| original runs as production, but can toggle dev mode\n//\n// \tsmartlift list \t\t\t\t\t\t\t\t\t||\t\tlists all installed available modules (remotly available +\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel which are installed locally)\n//\n// \tsmartlift install\t<module>\t\t\t|| \t\tinstalls an existing module\n// \tsmartlift uninstall <module>\t\t||\n//\n// \tsmartlift new\t<module>\t\t\t\t\t||\t\tcreates a new smartlift module\n\n\n\n\n\n\n\n\n\n\n\n//\n// \tsmartlift version\t\t\t\t\t\t\t\t|| \t\tshows a list of all local available version\n//\n// \tsmartlift help \t\t\t\t\t\t\t\t\t||\t\tshows information about tool (e.g. commands)\n\n\n// help, version \t\t\t|| default, not\n\n\n\n\n\n//\n//\n//\n//\n// const smartlift = new SmartLift()\n//\n//\n//\n// console.log(pkg)\n//\n//\n// // check for updates on start\n//\n// // check if already conffigure - installed\n//\n//\n//\n// // steps:\n// // - define propmt, show commands available and install\n// // - setup basic modules for client + server + runtime (electron)\n//\n//\n// // bin will be generated\n\n\n\n## API\n\n\n// shows\n\n\n\n\n.d$b.  .d$b.  .d$$$$$$b.    .d$$$$$$b.  .d$$$$$$b.  .d$b..d$$$$$$$$b.\n$$$$$..$$$$$.$$$$$$$$$$$b .$$$$$$$$$$$b $$$$$$$$$$b $$$$$$$$$$$$$$$P'\n$$$$$$$$$$$$d$$$$$$$$$$$$bd$$$$$$$$$$$$b$$$$$$$$$$$b$$$$$$$$$$$$$$$b.\n$$$$$$$$$$$$Q$$$$$$$$$$$$PQ$$$$$$$$$$$$P$$$$$$$$$$$P$$$$$$$$$$$$$$$P'\n$$$$$Â´`$$$$$'$$$$$$$$$$$$''$$$$$$$$$$$$'$$$$$$$$$$P $$$$$$$$$$$$$$$b.\n'Q$P'  'Q$P'  'Q$$$$$$P'    'Q$$$$$$P'  'Q$$$$$$$P  'Q$P''Q$$$$$$$$P'\n\nVersion: 0.6.3 (node v2.3.0, npm 2.13.5, platform: linux)\n\n\n\nsmartlift configure\t\t\t\t\t\t\t|| -> changes the local settings which are initially defined during the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetup process\n\nsmartlift start\t\t\t\t\t\t\t\t\t||\t\truns the smartlift applications (can us optional params for configuration)\n\n\t\t\t\t\t\t\t--dev\t\t\t\t\t\t\t|| original runs as production, but can toggle dev mode\n\nsmartlift list \t\t\t\t\t\t\t\t\t||\t\tlists all installed available modules (remotly available +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel which are installed locally)\n\nsmartlift install\t<module>\t\t\t|| \t\tinstalls an existing module\nsmartlift uninstall <module>\t\t||\n\nsmartlift new\t<module>\t\t\t\t\t||\t\tcreates a new smartlift module\n\nsmartlift version\t\t\t\t\t\t\t\t|| \t\tshows a list of all local available version\n\nsmartlift help \t\t\t\t\t\t\t\t\t||\t\tshows information about tool (e.g. commands)\n\n\nOptions:\n-v\t--verbose\t\t\t\tverbose output\n\n\n// just the name shows the commands, similar like --help\n\n\n// directly on installation (or first time usage - lets see), defines the setup for the basic application\n(as only needed once)\n\n\nsmartlift init\t\t\t\t\t\t\t\t\t||\t\tsetups up the basic smartlift enviroement with client/server module\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-> starts a procdure which guids and ask for path, credentials etc.\n\n\nhttps://github.com/hoodiehq/hoodie\n\n\n\nreferences:\n\nhoodie-cli\nember-cli\n\nhttp://hood.ie/intro/#get-started\n\n\n// logo- reference:\n\nhttp://patorjk.com/software/taag/#p=display&f=Standard&t=SmartLift\n\n____                       _   _     _  __ _\n/ ___| _ __ ___   __ _ _ __| |_| |   (_)/ _| |_\n\\___ \\| '_ ` _ \\ / _` | '__| __| |   | | |_| __|\n___) | | | | | | (_| | |  | |_| |___| |  _| |_\n|____/|_| |_| |_|\\__,_|_|   \\__|_____|_|_|  \\__|\n"
}