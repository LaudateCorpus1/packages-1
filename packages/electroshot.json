{
  "name": "electroshot",
  "version": "1.0.0",
  "description": "Capture website screenshots with optional device and network emulation as jpg, png or pdf (with web fonts!) using Electron / Chrome.",
  "main": "test.js",
  "bin": {
    "electroshot": "./bin/electroshot.js"
  },
  "scripts": {
    "test": "mocha -R spec --bail ./test/*.test.js"
  },
  "repository": {
    "user": "mixu",
    "repo": "electroshot",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mixu/electroshot/tarball/master",
    "clone_url": "https://github.com/mixu/electroshot",
    "https_url": "https://github.com/mixu/electroshot",
    "travis_url": "https://travis-ci.org/mixu/electroshot",
    "zip_url": "https://github.com/mixu/electroshot/archive/master.zip",
    "api_url": "https://api.github.com/repos/mixu/electroshot"
  },
  "author": {
    "name": "Mikito Takada",
    "email": "mikito.takada@gmail.com",
    "url": "http://mixu.net/"
  },
  "license": "BSD-3-Clause",
  "dependencies": {
    "chromium-emulated-devices": "~1.0.0",
    "chromium-emulated-networks": "~1.0.0",
    "cookie": "~0.2.2",
    "electron-prebuilt": "~0.33.6",
    "es6-template": "~1.0.3",
    "express": "~4.13.3",
    "file-fixture": "0.0.2",
    "log-symbols": "~1.0.2",
    "minilog": "~2.0.8",
    "miniq": "~1.0.0",
    "sanitize-filename": "~1.4.5",
    "subarg": "~1.0.0",
    "tough-cookie": "~2.2.0",
    "xtend": "~4.0.0"
  },
  "gitHead": "963b7c52a7fa2b15d949b9e842628549883c5d3c",
  "homepage": "https://github.com/mixu/electroshot#readme",
  "_npmVersion": "2.11.2",
  "_nodeVersion": "0.12.6",
  "dist": {
    "shasum": "e30dc9cf82fc379332090cdcc97cd0da548c2d49",
    "tarball": "http://registry.npmjs.org/electroshot/-/electroshot-1.0.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-10-17T20:49:43.137Z"
    }
  ],
  "created": "2015-10-17T20:49:43.137Z",
  "modified": "2015-10-17T20:49:43.137Z",
  "lastPublisher": {
    "name": "mixu",
    "email": "mixu@mixu.net"
  },
  "owners": [
    {
      "name": "mixu",
      "email": "mixu@mixu.net"
    }
  ],
  "readme": "# electroshot\n\nCapture website screenshots with optional device and network emulation as JPG, PNG or PDF (with web fonts!) using Electron / Chrome.\n\n# Features\n\n- Webfonts! `electroshot` uses Electron, which offers the most recent stable version of Chrome (rather than one from years ago); this means that pages render as they would in a browser, including web fonts!\n- Electron is also much faster to install, as it has prebuilt binaries that install thru npm on Ubuntu/OSX/Windows.\n- You can capture screenshots from:\n  - local file paths: these are served up over http by default, eliminating the hassles that come with `file://` protocol CORS security settings (etc.)\n  - http and https URLs\n  - as a timelapse using multiple `--delay`s\n- You can capture PNG, JPG or PDF screenshots:\n  - cropped to a specific size\n  - full-page screenshots at a particular width (e.g. for testing CSS)\n  - a single element matched by a specific CSS selector\n  - ... after either waiting for the page to render, or after a custom timeout\n- Supports Chrome's powerful options for device emulation\n  - ... which make it easy to emulate a specific device, like the iPhone, with the right user agent settings, device pixel ratio and screen resolution\n- Supports Chrome's network condition emulation options (RTT latency and bandwidth throttling)\n  - ... which (with `--delay`) make it easy to produce a page load timeline\n\n## Quickstart\n\nInstall `electroshot` via npm (to get npm, just [install Node.js](http://nodejs.org/download/)):\n\n    sudo npm install -g electroshot\n\n## Usage\n\nSpecify urls and screen resolutions as arguments - urls first. The CLI design was strongly influenced by the excellent [pageres-cli](https://github.com/sindresorhus/pageres-cli) CLI.\n\n```\nelectroshot <url> <resolution | device preset>\n\nelectroshot google.com 1024x768\nelectroshot google.com 1024x768 1366x768 # 2 screenshots\nelectroshot google.com yahoo.com 1024x768 # 2 screenshots\nelectroshot google.com yahoo.com 1024x768 1366x768 # 4 screenshots\n```\n\nYou can also capture screenshots with device emulation on. Device presets work just like resolutions:\n\n```\nelectroshot google.com \"iPhone 6\"\nelectroshot google.com \"horizontal iPhone 6\" \"Nexus 6\" # 2 screenshots\nelectroshot google.com yahoo.com 1024x768 \"Nokia N9\" # 4 screenshots\n```\n\nTo list all the device presets, run `electroshot --list-devices`. Prepending \"horizontal\" to the device name switches it to horizontal (landscape) orientation.\n\nTo use a custom device, set `--device <json>`, where the value is a JSON blob that defines a custom device, similar to how devices are listed in [chromium-emulated-devices](https://github.com/mixu/chromium-emulated-devices) under `extensions.device` in `index.json`.\n\nYou can also pass in file paths. By default, file paths are served through an Express static file server on localhost to avoid the hassles that come with the `file://` protocol. By default, the directory that contains the file becomes the webroot of the server.\n\n```\nelectroshot /path/index.html 1024x768 # mounts /path onto localhost:3000/\nelectroshot file:///path/index.html 1024x768 # skips mounting, and loads a file:// url\n```\n\nYou can capture a local file directly without a static file server by explicitly starting files with the `file://` protocol.\n\nYou can set the web server root by setting `--root /path` explicitly.\n\n```\nelectroshot /foo/bar/index.html 1024 --root /foo\n```\n\n## Cropping\n\nBy default, what you say is what you get - the screenshots are clipped to the specified size. To generate a screenshot of the whole page (e.g. as tall needed for the page), just leave out the height:\n\n```\nelectroshot google.com 800x\nelectroshot google.com 800 # also works\nelectroshot google.com \"cropped iPhone 6\" # cropped to iPhone 6 screen height\nelectroshot google.com \"iPhone6\"x800 # cropped to 800 px tall\n```\n\nEmulated devices can also be cropped. Prepending \"cropped\" to the device name will produce a screenshot that is the size of a single screen for that device. You can also set a specific pixel height as shown in the example above.\n\n## Capture groups\n\nYou can group arguments with square brackets:\n\n```\nelectroshot [ <url> <resolution> ] [ <url> <resolution> ]\nelectroshot [ <url> <resolution> ... ]\n\n# Mix grouped and single arguments\nelectroshot [ google.com 1024x768 1600x900 ] google.com 1366x768\n\n# Options defined inside a group will override the outer ones.\nelectroshot [ google.com 1024x --format png ] google.com 1366x --format jpg\n```\n\n## Capture options\n\n### Location and file name\n\nYou can set the output directory by setting `--out <dir>` (default: process.cwd).\n\nYou can explicitly set the full path for each screenshot using `--filename <path>`. Relative paths in file names are relative to `--out`, full paths are preserved as-is.\n\n```\nelectroshot google.com 1024 --out /foo/bar\n# -> writes /foo/bar/screenshot.png\nelectroshot google.com 1024 --out /foo/bar --filename \"screenshot.png\"\n# -> writes /foo/bar/google.com-linux.png\nelectroshot google.com 1024 --filename \"/foo/bar/{name}-{platform}{format}\"\n```\n\nYou can also use the following tokens to specify a template for filenames. The default template is `{name}-{size}.{format}`; if you set a `--delay`, it is `{name}-{size}-at-{delay}ms.{format}`.\n\n- `{crop}`: `-cropped` if the height is not set\n- `{date}`: a date like `2015-10-21`\n- `{time}`: a time like `17:00:50`\n- `{delay}`: the `--delay` value used for the screenshot (`''` if 0)\n- `{name}`:\n  - for http/https urls, this is a filename-safe version of the URL (no protocol), e.g.\n    - `google.com` -> `google.com`\n    - `https://github.com/mixu/gr#features?foo=bar` -> `github.com-mixu-gr-features-foo-bar`\n  - for local files:\n    - when there is a single target, this is the filename without an extenstion e.g. `/foo/bar/index.html` -> `index`\n    - when there are multiple targets, this the full path to the file, excluding  any shared extensions and paths, e.g. `/foo/bar/index.html`, `/foo/baz/index.html` -> `bar-index`, `baz-index`\n- `{size}`: if a device is emulated, this is the name of device (e.g. `iphone-6`); otherwise this is equivalent to `{width}x{height}`.\n- `{width}`: the current width, e.g. `1024`\n- `{height}`: the current height, e.g. `768`\n- `{platform}`: the current operating system as returned by [`os.platform()`](https://nodejs.org/api/os.html#os_os_platform)\n- `{format}`: `.png` or `.jpg`\n\nIf the generated filenames are not unique, a number will be appended to the paths, e.g. `foo.com-1024x768-1.png` and `foo.com-1024x768-2.png`.\n\n### Page rendering: delay, selector, zoom-factor\n\nYou can capture a specific DOM element via `--selector <expr>`. The selector is passsed to [`document.querySelector`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector). The screenshot is cropped and sized to match the element as it appears on the page.\n\nYou can set the default zoom factor of the page using `--zoom-factor <n>`. 1.0 represents 100% and 3.0 represents 300%.\n\nOn OSX, you should also be aware of the Chrome flag `--force-device-scale-factor <n>` which forces Chrome to use a specific high dpi scale factor. You can pass Chrome flags to `electroshot` and they will be passed through to Electron / Chrome.\n\nTo introduce a delay to the page capture, specify `--delay <ms>`. The default value is `0`, which simply waits until two [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) calls have passed. This is usually enough time to capture something reasonable.\n\nYou can set multiple `--delay`s to capture the page(s) at multiple points in time. Combined with `--emulate-network`, this can produce a full timeline of loading a specific page under slow network access.\n\n```\nelectroshot --emulate-network \"Good 3G\" theverge.com \"cropped Nexus 6\" --delay 1000 --delay 3000 --delay 5000 --delay 6000 --delay 8000 --delay 0\n```\n\nNote that there are some limitations when using `--delay`. Specifically:\n\n- you need to explicitly specify the height of the screen capture and\n- you cannot specify `--selector` or `--zoom-factor`\n\nThis is because those features require `electroshot` to inject a content script, and Electron's `executeJavaScript` API waits until the page is fully loaded before executing injected scripts - so I had to pick between having those features available or having accurate timing information. Let me know if you can figure out a better way to handle those features.\n\n### Format-specific options\n\nYou can capture screenshots as JPG, PNG, or PDF by setting `--format <png|jpg|pdf>`. The following options control format-specific options.\n\n- `--quality <0..100>`: Sets the jpg quality parameter (default: 75).\n- `--pdf-margin <default|none|minimum>`: Sets the PDF margin.\n- `--pdf-page-size <size>`: Sets the PDF page size. Valid values are `A4`, `A3`, `legal`, `letter`, `tabloid`\n- `--pdf-background`:   Whether to print CSS backgrounds. (false by default)\n- `--pdf-orientation <orientation>`: Sets the PDF orientation. Valid values are `landscape` and `portrait`.\n\n## Network emulation\n\nTo list all the known network condition presets, run `electroshot --list-networks`.\n\nUse `--emulate-network <preset>` to set a specific network profile.\n\n```\nelectroshot --emulate-network \"Good 3G\" theverge.com \"cropped iPhone 6\"\n```\n\nYou can also set the network parameters individually:\n\n- `--latency <ms>`: RTT in ms.\n- `--download <Bps>`: Download rate in Bps.\n- `--upload <Bps>`: Upload rate in Bps.\n\n## Capturing using an headless server / vagrant / docker\n\nMost headless (e.g. no X11) environments will need some additional packages to be installed for `electroshot` to work. Here's one example snippet:\n\n```\n# Install dependencies\napt-get update &&\\\n    apt-get install -y libgtk2.0-0 libgconf-2-4 \\\n    libasound2 libxtst6 libxss1 libnss3 xvfb\n\n# Start Xvfb\nXvfb -ac -screen scrn 1280x2000x24 :9.0 &\nexport DISPLAY=:9.0\n```\n\nRelated issue on Electron: https://github.com/atom/electron/issues/228\n\n## HTTP options\n\nYou can set a custom user agent using `--user-agent <string>`.\n\nYou can set a custom cookie using `--cookie <cookie>`. This can be set multiple times.\n\nThe local file server starts on `localhost` port `3000` by default if you pass in local file paths. You can set the hostname and port using `--host <hostname>` and `--port <port>`. As discussed earlier, you can control the mount point by setting `--root <dir>`.\n\nIf you need to ignore SSL errors, you can set the Chrome flag `--ignore-certificate-errors`.\n\n## Content injection\n\nYou can inject CSS and JS into the page using the following options:\n\n- `--css <str>`: Inserts a string of CSS onto the page. Can be set multiple times.\n- `--js <str>`: Inserts a string of JS onto the page. Can be set multiple times.\n\n## Misc\n\n- `--help, -h`: Shows the builtin help.\n- `--debug`: Enables debugging mode, which shows additional logging information and renders the screenshots in a visible window.\n- `--version`: Shows version info for `electroshot` as well as the Chrome and Electron version used.\n\n### Passing thru Chrome flags\n\n`electroshot` passes any unknown flags on to Chrome via Electron. Here are three useful flags:\n\n- `--ignore-certificate-errors`: Ignores certificate related errors.\n- `--force-device-scale-factor <n>`: Forces Chrome to use a specific hidpi scale factor.\n- `--proxy-server <address:port>`: Use a specified proxy server. Only affects HTTP and HTTPS requests.\n\nFor more, see: https://github.com/atom/electron/blob/master/docs/api/chrome-command-line-switches.md and\nhttp://peter.sh/experiments/chromium-command-line-switches/.\n\n## API\n\nTODO for now; will probably look something like:\n\n- resolve args\n- resolve mountpoints\n- run server\n- run electron\n"
}