{
  "name": "swarmbot",
  "version": "1.8.3",
  "description": "mirroring for a p2p mesh of swarmlogs",
  "main": "index.js",
  "bin": {
    "swarmbot": "cmd.js"
  },
  "keywords": [
    "swarm",
    "webrtc",
    "p2p",
    "swarmlog",
    "daemon",
    "connection pool"
  ],
  "author": {
    "name": "substack"
  },
  "license": "BSD",
  "dependencies": {
    "auto-daemon": "^2.5.0",
    "chloride": "^2.0.1",
    "defined": "^1.0.0",
    "duplexify": "^3.4.2",
    "electron-prebuilt": "^0.37.1",
    "electron-spawn": "^4.1.0",
    "has": "^1.0.1",
    "homedir": "^0.6.0",
    "hyperlog-index": "^5.0.0",
    "inherits": "^2.0.1",
    "level": "^1.4.0",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "once": "^1.3.3",
    "pump": "^1.0.1",
    "resolve": "^1.1.7",
    "ssb-keys": "^4.0.10",
    "subleveldown": "^2.1.0",
    "swarmlog": "^1.4.0",
    "through2": "^2.0.1",
    "tree-kill": "^1.0.0",
    "xtend": "^4.0.1"
  },
  "devDependencies": {
    "memdb": "^1.3.1",
    "tape": "^4.4.0"
  },
  "repository": {
    "user": "substack",
    "repo": "swarmbot",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/substack/swarmbot/tarball/master",
    "clone_url": "https://github.com/substack/swarmbot",
    "https_url": "https://github.com/substack/swarmbot",
    "travis_url": "https://travis-ci.org/substack/swarmbot",
    "zip_url": "https://github.com/substack/swarmbot/archive/master.zip",
    "api_url": "https://api.github.com/repos/substack/swarmbot"
  },
  "homepage": "https://github.com/substack/swarmbot#readme",
  "gitHead": "969f74fb8a294d42280cf8be672cd01171bb2be7",
  "scripts": {},
  "_npmVersion": "3.7.1",
  "_nodeVersion": "5.5.0",
  "dist": {
    "shasum": "ab7ee1cc1c8e4dcf4f4349112765001ece6d6821",
    "tarball": "http://registry.npmjs.org/swarmbot/-/swarmbot-1.8.3.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-02-16T06:51:52.013Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-02-23T08:32:59.527Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-02-23T11:34:06.189Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-02-23T12:14:04.377Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-02-25T01:08:10.940Z"
    },
    {
      "number": "1.3.2",
      "date": "2016-02-25T02:25:33.767Z"
    },
    {
      "number": "1.3.3",
      "date": "2016-02-25T05:39:50.219Z"
    },
    {
      "number": "1.3.4",
      "date": "2016-02-25T07:02:20.916Z"
    },
    {
      "number": "1.3.5",
      "date": "2016-02-25T10:08:44.657Z"
    },
    {
      "number": "1.3.6",
      "date": "2016-02-25T11:33:48.422Z"
    },
    {
      "number": "1.4.0",
      "date": "2016-02-26T01:11:50.587Z"
    },
    {
      "number": "1.4.1",
      "date": "2016-02-26T03:09:45.784Z"
    },
    {
      "number": "1.4.2",
      "date": "2016-02-26T03:13:27.374Z"
    },
    {
      "number": "1.5.0",
      "date": "2016-02-26T03:15:50.777Z"
    },
    {
      "number": "1.5.1",
      "date": "2016-02-27T01:51:37.778Z"
    },
    {
      "number": "1.5.2",
      "date": "2016-02-27T05:50:07.549Z"
    },
    {
      "number": "1.6.0",
      "date": "2016-02-27T08:06:00.778Z"
    },
    {
      "number": "1.7.0",
      "date": "2016-02-27T08:12:13.975Z"
    },
    {
      "number": "1.8.0",
      "date": "2016-02-27T09:48:00.398Z"
    },
    {
      "number": "1.8.1",
      "date": "2016-02-27T10:37:50.701Z"
    },
    {
      "number": "1.8.2",
      "date": "2016-02-27T12:23:48.570Z"
    },
    {
      "number": "1.8.3",
      "date": "2016-03-25T07:45:49.708Z"
    }
  ],
  "created": "2016-02-16T06:51:52.013Z",
  "modified": "2016-03-25T07:45:49.708Z",
  "lastPublisher": {
    "name": "substack",
    "email": "substack@gmail.com"
  },
  "owners": [
    {
      "name": "substack",
      "email": "substack@gmail.com"
    }
  ],
  "readme": "# swarmbot\n\nmirroring for a p2p mesh of [swarmlogs][1]\n\nswarmbots are useful for improving the availability of a swarmlog by running\ndedicated mirroring peers for a list of public keys.\n\nThis tool consists of 4 parts:\n\n* swarmbot api\n* swarmbot rpc interface\n* swarmbot command\n* swarmbot daemon\n\nHeavily inspired by [scuttlebot][6].\n\nMake sure to use node 5 when installing swarmbot from npm.\n\n# command-line usage\n\nOn a system with high uptime, it's useful to set up a swarmbot to mirror other\nnodes on poor connections or in other geographic locations for redundancy.\n\nThis is easiest to do with the swarmbot command.\n\nFirst, you should configure one or more signalhubs to use:\n\n```\n$ swarmbot hubs add https://signalhub.mafintosh.com\n```\n\nNow you can start mirroring swarmlog pubkeys:\n\n```\n$ swarmbot mirror U8fatVWlxT4bfCmgIw917pEoHakQs9P/l3VDNfuIm68=.ed25519\n```\n\n## usage\n\n```\nswarmbot id\n  Print PUBKEY for the swarmbot mirror feed.\n\nswarmbot mirror PUBKEY\n  Mirror a PUBKEY.\n\nswarmbot unmirror PUBKEY\n  Stop mirroring a PUBKEY.\n\nswarmbot mirroring\n  Show mirroring PUBKEYs.\n\nswarmbot server\n  Listen in the foreground.\n\nswarmbot pid\n  Print the background daemon process id.\n\nswarmbot stop\n  Kill the daemon process.\n\nswarmbot restart\n  Stop the background process and start a new process in its place.\n\nswarmbot hubs\n  Print the list of signalhubs.\n\nswarmbot hubs add HUB\n  Add a signalhub to the configuration.\n\nswarmbot hubs remove HUB\n  Remove a signalhub from the configuration.\n\nswarmbot plugins\n  Print the list of installed plugins.\n\nswarmbot plugins add PLUGIN\n  Add an already-installed plugin to the config.\n\nswarmbot plugins remove PLUGIN\n  Remove an installed plugin from the config.\n\nswarmbot plugins install PLUGIN\n  Install a plugin from npm then add it to the config.\n\n```\n\n# rpc usage\n\nApplications that write to a swarmlog might want to register their keys with the\nswarmlog daemon on the local system. If the daemon isn't running, the rpc\nendpoint will automatically spawn it.\n\n``` js\nvar RPC = require('swarmbot/rpc')\n```\n\n## var rpc = RPC(opts)\n\nCreate new `rpc` handle from:\n\n* `opts.dir` - directory to use for pid/sock/db files. default: `~/.config/swarmbot`\n* `opts.hubs` - array of [signalhub][2] URL strings\n* `opts.plugins` - array of module paths to use as plugins\n\n## rpc.id(cb)\n\nGet the public key of the swarmbot as `cb(err, id)`.\n\n## rpc.mirror(id, cb)\n\nMirror the public key `id`.\n\n## rpc.unmirror(id, cb)\n\nStop mirroring the public key `id`.\n\n## rpc.mirroring(cb)\n\nList the public keys being mirrored as `cb(err, ids)`.\n\n## rpc.configFile(cb)\n\nGet the configuration file as `cb(err, configfile)`.\n\n## rpc.readConfig(cb)\n\nRead the configuration file contents as `cb(err, config)`.\n\n## rpc.writeConfig(config, cb)\n\nWrite the configuration in a `config` object to the config file.\n\n## rpc.pid(cb)\n\nGet the process id as `cb(err, pid)`.\n\n## rpc.emitEvent(name, args...)\n\nEmit an event `name` with `args...` on the swarmbot instance.\n\n## rpc.replicateStream(id, cb)\n\nOpen a replication stream with the log at `id`.\n\n`cb(err)` fires when there is an error or the replication finishes successfully.\n\n# api example\n\nUsing the API directly\n\nFirst, we will generate cryptographic keypairs for a publisher and a mirror\nnode:\n\n```\n$ node -pe \"JSON.stringify(require('ssb-keys').generate())\" > publish.json\n$ node -pe \"JSON.stringify(require('ssb-keys').generate())\" > mirror.json\n```\n\nNow we can create a swarmlog publisher:\n\n``` js\nvar swarmlog = require('swarmlog')\nvar level = require('level')\nvar chloride = require('chloride/browser')\n\nvar log = swarmlog({\n  db: level('/tmp/publish.db'),\n  hubs: ['https://signalhub.mafintosh.com'],\n  sodium: chloride,\n  valueEncoding: 'json',\n  keys: require('./publish.json')\n})\n\nsetInterval(function () {\n  log.append({\n    msg: 'HELLOx' + Math.floor((Date.now()/1000) % 1000)\n  })\n}, 1000)\n```\n\nand run the publisher:\n\n```\n$ electron-spawn publish.js\n```\n\nNext we can create a swarmbot mirror:\n\n``` js\nvar swarmbot = require('swarmbot')\nvar level = require('level')\nvar chloride = require('chloride/browser')\n\nvar bot = swarmbot({\n  db: level('/tmp/mirror.db'),\n  hubs: ['https://signalhub.mafintosh.com'],\n  sodium: chloride,\n  keys: require('./mirror.json')\n})\n\nvar argv = process.argv.slice(2)\nif (argv[0] === 'mirror') {\n  bot.mirror(argv[1], function (err) {\n    if (err) console.error(err)\n    else console.log('ok')\n  })\n} else if (argv[0] === 'mirroring') {\n  bot.mirroring(function (err, ids) {\n    ids.forEach(function (x) { console.log(x.id) })\n  })\n} else if (argv[0] === 'log') {\n  bot.open(argv[1]).createReadStream({ live: true })\n    .on('data', function (row) { console.log(row.value) })\n}\n```\n\nWe can mirror the publisher public key:\n\n```\n$ json public < publish.json\nd9h38QqCVLjmCTdB5vNHF5s/QrLmMYbm0B8UoYazZbg=.ed25519\n$ electron-spawn mirror.js mirror d9h38QqCVLjmCTdB5vNHF5s/QrLmMYbm0B8UoYazZbg=.ed25519\nok\n^c\n$ electron-spawn mirror.js mirroring\nd9h38QqCVLjmCTdB5vNHF5s/QrLmMYbm0B8UoYazZbg=.ed25519\n^c\n```\n\nand from the mirror node, we can log all the data from the publisher:\n\n```\n$ electron-spawn mirror.js log d9h38QqCVLjmCTdB5vNHF5s/QrLmMYbm0B8UoYazZbg=.ed25519\n{ msg: 'HELLOx998' }\n{ msg: 'HELLOx999' }\n{ msg: 'HELLOx0' }\n{ msg: 'HELLOx1' }\n{ msg: 'HELLOx2' }\n^c\n```\n\n# api\n\n``` js\nvar swarmbot = require('swarmbot')\n```\n\n## var bot = swarmbot(opts)\n\nCreate a swarmbot mirror from `opts`:\n\n* `opts.keys` - keypair data from `require('ssb-keys').generate()`\n* `opts.hubs` - array of [signalhub][2] URL strings\n* `opts.sodium` - sodium cryptographic API\n(`require('chloride')` or `require('chloride/browser')`)\n* `opts.wrtc` - provide a [webrtc][5] instance to use webrtc outside of the\nbrowser\n\nYou can specify a single data store:\n\n* `opts.db` - [leveldb][3] instance (use [level-browserify][4] in the browser)\n\nor you can specify each data store separately:\n\n* `opts.logdb` - [leveldb][3] instance for the logdb\n* `opts.idb` - [leveldb][4] instance for indexing\n\nSeparating the data stores can be useful for upgrades and plugins where the log\nserves as the source of truth and the indexes present materialized views on the\nlog that can be rebuilt when the index requirements change.\n\n## bot.mirror(id, opts={}, cb)\n\nMirror the swarmlog that has the public key `id`, remembering `id` when the\nswarmbot starts up in the future.\n\n## bot.unmirror(id, opts={}, cb)\n\nStop mirroring the swarmlog at `id` and stop mirroring automatically in the\nfuture.\n\n## var stream = bot.mirroring(cb)\n\nReturn a readable object `stream` with all the nodes that are currently being mirrored.\n\nEach mirror object `row` in the object stream has:\n\n* `row.id` - the public key of the remote swarmlog\n* `row.key` - the key of the document that first initialized the mirroring\n\nOptionally read the data as `cb(err, mirrors)`.\n\n## var log = bot.open(id, opts={})\n\nOpen a [swarmlog][1] to `id`.\n\n## bot.close(id)\n\nClose the connection for `id`.\n\n## bot.destroy()\n\nClose all open connections.\n\n## bot.on('open', function (id, log) {})\n\nWhen a swarmlog is opened, this event fires with the `id` and `log`.\n\n## bot.on('close', function (id, log) {})\n\nWhen a swarmlog is closed, this event fires with the `id` and `log`.\n\n## var db = bot.db(name)\n\nRequest a prefixed database handle `db` for a plugin called `name`.\n\n# plugin api\n\nPlugins are modules that receive a swarmbot instance as their first argument and\ncommand-line options as their second argument.\n\nFor example, this plugin will print messages when a log is opened or closed:\n\n``` js\nmodule.exports = function (bot, opts) {\n  bot.on('open', function (id, log) { console.log('OPEN', id) })\n  bot.on('close', function (id, log) { console.log('CLOSE', id) })\n}\n```\n\n# install\n\nThis library currently works only with node 5.\n\nMake sure to run node 5 when running npm install.\n\nTo get the library:\n\n```\nnpm install swarmbot\n```\n\nTo get the swarmbot command:\n\n```\nnpm install -g swarmbot\n```\n\n# license\n\nBSD\n\n[1]: https://npmjs.com/package/swarmlog\n[2]: https://npmjs.com/package/signalhub\n[3]: https://npmjs.com/package/level\n[4]: https://npmjs.com/package/level-browserify\n[5]: https://npmjs.com/package/wrtc\n[6]: https://www.npmjs.com/package/scuttlebot\n"
}