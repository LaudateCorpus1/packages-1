{
  "name": "async-chainable-nightmare",
  "version": "1.3.0",
  "description": "Plugin for async-chainable that wraps Nightmare",
  "main": "index.js",
  "repository": {
    "user": "hash-bang",
    "repo": "async-chainable-nightmare",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/hash-bang/async-chainable-nightmare/tarball/master",
    "clone_url": "https://github.com/hash-bang/async-chainable-nightmare",
    "https_url": "https://github.com/hash-bang/async-chainable-nightmare",
    "travis_url": "https://travis-ci.org/hash-bang/async-chainable-nightmare",
    "zip_url": "https://github.com/hash-bang/async-chainable-nightmare/archive/master.zip",
    "api_url": "https://api.github.com/repos/hash-bang/async-chainable-nightmare"
  },
  "license": "MIT",
  "keywords": [
    "async",
    "async-chainable",
    "nightmare"
  ],
  "author": {
    "name": "Matt Carter",
    "email": "m@ttcarter.com"
  },
  "homepage": "https://github.com/hash-bang/async-chainable-nightmare",
  "scripts": {
    "coverage": "istanbul cover node_modules/.bin/_mocha",
    "test": "mocha test"
  },
  "devDependencies": {
    "async-chainable": "^2.0.0",
    "async-chainable-log": "^1.1.1",
    "chai": "^3.5.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.0.2",
    "mocha-istanbul": "^0.3.0",
    "mocha-logger": "^1.0.4",
    "temp": "^0.8.3"
  },
  "dependencies": {
    "nightmare": "^2.7.0",
    "q": "^1.4.1"
  },
  "gitHead": "06a2376849ea69f9adcd5167c142fb462f265fd2",
  "_npmVersion": "3.10.7",
  "_nodeVersion": "4.4.7",
  "dist": {
    "shasum": "e5d857c6b0ccf03549f959cd37d8164bac0ab502",
    "tarball": "http://registry.npmjs.org/async-chainable-nightmare/-/async-chainable-nightmare-1.3.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-04-27T00:32:48.871Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-04-27T01:16:20.913Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-05-27T00:38:34.686Z"
    },
    {
      "number": "1.1.1",
      "date": "2016-06-21T05:48:11.808Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-07-01T06:45:15.327Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-09-22T01:21:12.523Z"
    }
  ],
  "created": "2016-04-27T00:32:48.871Z",
  "modified": "2016-09-22T01:21:12.523Z",
  "lastPublisher": {
    "name": "hash-bang",
    "email": "m@ttcarter.com"
  },
  "owners": [
    {
      "name": "hash-bang",
      "email": "m@ttcarter.com"
    }
  ],
  "readme": "async-chainable-nightmare\n=========================\nPlugin for [async-chainable](https://github.com/hash-bang/async-chainable) that wraps [Nightmare](https://github.com/segmentio/nightmare#readme)\n\n\nThis plugin patches many of the somewhat odd behaviours of the Nightmare module including:\n\n* All async calls that need to be wrapped in Promises (e.g. `resolve`, `type` etc.) are done so automatically\n* Some inconsiquential error messages that would otherwise abort the sequence chain are ignoerd (e.g. typing into an input box that doesn't raise the `blur` event)\n\n\n```javascript\nvar asyncChainable = require('async-chainable');\nvar asyncChainableNightmare = require('async-chainable-nightmare');\n\nasyncChainable()\n\t.use(asyncChainableNightmare)\n\t.nightmare({show: true})\n\n\t.nightmareOn('console', function() {\n\t\tvar args = Array.prototype.slice.call(arguments, 0);\n\t\tconsole.log('Page Console>', args);\n\t})\n\n\t.nightmareGoto('http://google.com')\n\t.then(function(cb) { console.log('Navigated'); cb() })\n\n\t.then(function(cb) { console.log('Typing into `input[name=\"q\"]`'); cb() })\n\t.nightmareType('input[name=\"q\"]', 'github async-chainable-nightmare')\n\t.then(function(cb) { console.log('Typed'); cb() })\n\n\t.then(function(cb) { console.log('Clicking `input[name=\"btnK\"]'); cb() })\n\t.nightmareClick('input[name=\"btnK\"]')\n\t.then(function(cb) { console.log('Clicked'); cb() })\n\n\t.then(function(cb) { console.log('Waiting for `.content`'); cb() })\n\t.nightmareWait('.content')\n\t.then(function(cb) { console.log('Main content area found'); cb() })\n\n\t.then(function(cb) { console.log('Evaluating `#resultStats`'); cb() })\n\t.nightmareEvaluate('result', function () {\n\t\treturn document.querySelector('#resultStats').innerHTML;\n\t})\n\t.then(function(cb) { console.log('Evaluated'); cb() })\n\n\t.then(function(cb) { console.log('All done'); cb() })\n\t.end();\n```\n\n\nAPI\n===\nThe async-chainable-nightmare API follows the specification of the main [Nightmare](https://github.com/segmentio/nightmare#readme). The Nightmare instance must be first initialized by a call to `nightmare([options])` followed by subsequent calls to any `nightmare` prefixed function.\n\nasync-chainable-nightmare provides the following functions:\n\n| Function                             | Description                                                                                                                     |\n|--------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| `nightmare([options])`               | Initialize a Nightmare instance and store it as `nightmare` in the async-chainable context                                      |\n| `nightmareClick(selector)`           | Simulate a mouse click event on a given selector                                                                                |\n| `nightmareEvaluate([key], function)` | Execute the given function within the context of the page and, optionally, store the result in the named key within the context |\n| `nightmareGoto(url)`                 | Navigate the Nightmare instance to the given URL                                                                                |\n| `nightmareOn(event, function)`       | Bind to a Nightmare event                                                                                                       |\n| `nightmarePdf(path, [options])`      | Take a PDF screenshot and save it to the given file. [PDF options are specified here](https://github.com/atom/electron/blob/v0.35.2/docs/api/web-contents.md#webcontentsprinttopdfoptions-callback). |\n| `nightmarePDF(path, [options])`      | Alias of `nightmarePdf`.                                                                                                        |\n| `nightmareScreenshot([path])`        | Take a screenshot. if path is provided that file will be written (must end in `.png`), if no path is provided a buffer is returned into the `screenshot` key within the context |\n| `nightmareType(selector, text)`      | Enter the given text into the input box specified by the selector                                                               |\n| `nightmareWait(selector | timeout)`  | Wait for a given selector to appear or a given number of milliseconds                                                           |\n\n\nDebugging\n---------\nThis module uses [debug](https://github.com/visionmedia/debug) for internal debugging so setting the `DEBUG=async-chainable-nightmare` environment variable will show additional messages:\n\n\tDEBUG=async-chainable-nightmare node myScript.js\n\n\nTimeouts\n--------\nYou can set the default Nightmare timeouts by passing `waitTimeout` (default: 30s), `gotoTimeout` (default: 30s), `loadTimeout` (default: infinite) into the initial `nightmare(options)` call.\n\nShould any subsequent event timeout the `NIGHTMARE-TIMEOUT` error response will be passed to `end()`.\n\nFor example in the following code the module is asked to load a page and wait for an element which will never load. Since the timeout is set for 1 second Nightmare will give up after that time and immediately throw an error, skipping to the `end()` call.\n\n\t\tasyncChainable()\n\t\t\t.use(require('async-chainable-nightmare'))\n\t\t\t.nightmare({waitTimeout: 1000}) // Give up waiting after 1 second\n\t\t\t.nightmareGoto('http://somewhere.com')\n\t\t\t.nightmareWait('#someImpossibleElement')\n\t\t\t... Do other things ...\n\t\t\t.end(function(err) {\n\t\t\t\t// Err will be 'NIGHTMARE-TIMEOUT' here\n\t\t\t});\n"
}