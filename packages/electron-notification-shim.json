{
  "name": "electron-notification-shim",
  "version": "1.1.0",
  "description": "Get Notification API events in Electron main-process. Perfect for adding Notification toasters in Windows with node-notifier or other solution.",
  "repository": {
    "user": "seriema",
    "repo": "electron-notification-shim",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/seriema/electron-notification-shim/tarball/master",
    "clone_url": "https://github.com/seriema/electron-notification-shim",
    "https_url": "https://github.com/seriema/electron-notification-shim",
    "travis_url": "https://travis-ci.org/seriema/electron-notification-shim",
    "zip_url": "https://github.com/seriema/electron-notification-shim/archive/master.zip",
    "api_url": "https://api.github.com/repos/seriema/electron-notification-shim"
  },
  "author": {
    "name": "John-Philip Johansson",
    "email": "seriema@gmail.com",
    "url": "http://johansson.jp"
  },
  "contributors": [
    {
      "name": "Martin Sandström",
      "email": "maartiin_91@hotmail.com",
      "url": "http://martinsandstrom.github.io"
    },
    {
      "name": "Esbjörn Ekberg",
      "email": "oakninja@gmail.com",
      "url": "http://oak.ninja/"
    },
    {
      "name": "Alex Buznik",
      "email": "shu@buznik.net",
      "url": "http://buznik.com/"
    }
  ],
  "scripts": {
    "start": "electron test.js",
    "test": "xo"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "electron",
    "app",
    "dev",
    "notification",
    "notify",
    "toaster",
    "shim"
  ],
  "license": "MIT",
  "homepage": "https://github.com/seriema/electron-notification-shim#readme",
  "devDependencies": {
    "electron-prebuilt": "^0.37.8",
    "xo": "^0.15.0"
  },
  "xo": {
    "esnext": true,
    "rules": {
      "linebreak-style": 0,
      "no-native-reassign": [
        2,
        {
          "exceptions": [
            "Notification"
          ]
        }
      ]
    },
    "globals": [
      "Notification:true"
    ],
    "envs": [
      "node",
      "browser"
    ]
  },
  "gitHead": "64993237e08459edea4e810aaf8d85ef4bfac6f0",
  "_npmVersion": "3.3.12",
  "_nodeVersion": "5.1.0",
  "dist": {
    "shasum": "5a33ae43a8750ea52c701ea7144d5fd7b6c9793a",
    "tarball": "http://registry.npmjs.org/electron-notification-shim/-/electron-notification-shim-1.1.0.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-11-07T23:40:57.476Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-04-30T10:36:02.373Z"
    }
  ],
  "created": "2015-11-07T23:40:57.476Z",
  "modified": "2016-04-30T10:36:02.373Z",
  "lastPublisher": {
    "name": "seriema",
    "email": "seriema@gmail.com"
  },
  "owners": [
    {
      "name": "seriema",
      "email": "seriema@gmail.com"
    }
  ],
  "readme": "# electron-notification-shim [![Build Status](https://travis-ci.org/seriema/electron-notification-shim.svg?branch=master)](https://travis-ci.org/seriema/electron-notification-shim)\n\n> Get Notification API events in Electron main-process. Perfect for adding Notification toasters in Windows with node-notifier or other solution.\n\n## Usage\n\nInclude it in your rendering-view like this:\n\n    require('electron-notification-shim')();\n\nThat's all. Now you'll receive `notification-shim` events in your main-process, like this:\n\n    ipcMain.on('notification-shim', (e, msg) => { ... });\n\nThe `msg` is a simple object: `{ title, options }`, which matches the two parameters sent to [new Notification(title, options)](https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification). You can send an event back with [e.returnValue](http://electron.atom.io/docs/v0.37.8/api/ipc-main/#eventreturnvalue) or [e.sender.send()](http://electron.atom.io/docs/v0.37.8/api/ipc-main/#eventsender) if you want to react to it in the rendering view as well.\n\n### Example code\n\n#### Demos\n\nCheck the [electron-notification-shim-demos](https://github.com/seriema/electron-notification-shim-demos) page for different uses.\n\n#### Sample\n\n```js\n// Main process, main.js\n'use strict';\nconst app = require('app');\nconst ipc = require('ipc');\nconst path = require('path');\nconst BrowserWindow = require('browser-window');\n\napp.on('ready', () => {\n\tconst win = new BrowserWindow({\n\t\t'web-preferences': {\n\t\t\t// Load `electron-notification-shim` in rendering view, by requiring it in your preloaded script.\n\t\t\tpreload: path.join(__dirname, 'browser.js')\n\t\t}\n\t});\n\n\t// Listen for notification events.\n\tipc.on('notification-shim', (e, msg) => {\n\t\tconsole.log(`Title: ${msg.title}, Content: ${msg.options.content}`);\n\t});\n\n\t// Just to test. Don't do this at home, kids. :)\n\twin.loadUrl(`https://google.com`);\n\twin.webContents.on('did-finish-load', () => {\n\t\twin.webContents.executeJavaScript('new Notification(\"Hello!\", {content: \"Notification world!\"})');\n\t});\n});\n```\n\n```js\n// Renderer process, browser.js\nrequire('electron-notification-shim')();\n```\n"
}