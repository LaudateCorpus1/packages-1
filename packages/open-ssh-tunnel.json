{
  "name": "open-ssh-tunnel",
  "version": "0.3.1",
  "description": "Easy ssh2 tunneling",
  "repository": {
    "user": "parro-it",
    "repo": "open-ssh-tunnel",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/parro-it/open-ssh-tunnel/tarball/master",
    "clone_url": "https://github.com/parro-it/open-ssh-tunnel",
    "https_url": "https://github.com/parro-it/open-ssh-tunnel",
    "travis_url": "https://travis-ci.org/parro-it/open-ssh-tunnel",
    "zip_url": "https://github.com/parro-it/open-ssh-tunnel/archive/master.zip",
    "api_url": "https://api.github.com/repos/parro-it/open-ssh-tunnel"
  },
  "license": "MIT",
  "author": {
    "name": "parro-it"
  },
  "scripts": {
    "test": "eslint . && node test | faucet",
    "debug": "DEBUG=open-ssh-tunnel node test || echo failed",
    "lint": "eslint ."
  },
  "bin": {
    "tunnel": "./cli.js"
  },
  "keywords": [
    "ssh",
    "ssh2",
    "sftp",
    "secure",
    "shell",
    "exec",
    "remote",
    "client",
    "tunnel",
    "tcp"
  ],
  "engines": {
    "node": ">=4"
  },
  "eslintConfig": {
    "extends": [
      "js",
      "features"
    ]
  },
  "devDependencies": {
    "eslint": "^1.10.3",
    "eslint-config-features": "^1.1.5",
    "eslint-config-js": "^2.0.2",
    "faucet": "0.0.1",
    "tape": "^4.2.2"
  },
  "files": [
    "index.js",
    "cli.js"
  ],
  "dependencies": {
    "co": "^4.6.0",
    "debug": "^2.2.0",
    "ssh2": "^0.4.12",
    "yargs": "^3.30.0"
  },
  "gitHead": "b9a2b1d7eced1f8eabd733891c420501a1d3125a",
  "homepage": "https://github.com/parro-it/open-ssh-tunnel#readme",
  "_npmVersion": "3.3.6",
  "_nodeVersion": "5.0.0",
  "dist": {
    "shasum": "c7a3e68a3a5c288b6c99810392a66b5f27a5f322",
    "tarball": "http://registry.npmjs.org/open-ssh-tunnel/-/open-ssh-tunnel-0.3.1.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-12-01T19:13:22.230Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-01-11T22:22:57.812Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-02-10T08:27:43.440Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-02-16T20:18:44.719Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-02-22T12:54:27.913Z"
    }
  ],
  "created": "2015-12-01T19:13:22.230Z",
  "modified": "2016-02-22T12:54:27.913Z",
  "lastPublisher": {
    "name": "parroit",
    "email": "andrea.parodi@ebansoftware.net"
  },
  "owners": [
    {
      "name": "parroit",
      "email": "andrea.parodi@ebansoftware.net"
    }
  ],
  "readme": "# open-ssh-tunnel\n\n> Easy ssh tunneling function based on [ssh2 library](https://github.com/mscdex/ssh2)\n\n> Inspired by [tunnel-ssh](https://github.com/Finanzchef24-GmbH/tunnel-ssh), but with simplified, more modern code.\n\n[![Travis Build Status](https://img.shields.io/travis/parro-it/open-ssh-tunnel.svg)](http://travis-ci.org/parro-it/open-ssh-tunnel)\n[![NPM module](https://img.shields.io/npm/v/open-ssh-tunnel.svg)](https://npmjs.org/package/open-ssh-tunnel)\n[![NPM downloads](https://img.shields.io/npm/dt/open-ssh-tunnel.svg)](https://npmjs.org/package/open-ssh-tunnel)\n\n## Installation\n\n```bash\nnpm install --save open-ssh-tunnel\n```\n\n## Usage\n\n```js\n  const openSshTunnel = require('open-ssh-tunnel');\n  async function openATunnel() {\n    const server = await openSshTunnel({\n      host: 'your.server.address.com',\n      username: 'you',\n      password: 'secret',\n      srcPort: 3306,\n      srcAddr: '127.0.0.1',\n      dstPort: 3306,\n      dstAddr: '127.0.0.1',\n      readyTimeout: 1000,\n      forwardTimeout: 1000,\n      localPort: 3306,\n      localAddr: '127.0.0.1'\n    });\n\n    // you can now connect to your\n    // forwarded tcp port!\n\n    // later, when you want to close the tunnel\n    server.close();\n  }\n\n```\n\n## API\n\nThe module exports `openSshTunnel` function. It return a promise that resolve\nto a node net server instance if tunnel is opened, otherwise is rejected with an error.\n\n### Options\n\n* __srcIP__ and __srcPort__ as the originating address and port and __dstIP__ and __dstPort__ as the remote destination address and port. These are options passed to [ssh2 `Client.forwardOut` method](https://github.com/mscdex/ssh2/blob/master/README.md#api).\n\n* forwardTimeout - How many millisecond to wait before reject with a timeout error.\n\n* __localAddr__ and __localPort__ are the address and port of the local endpoint of the tunnel on your machine. They are passed to net server connect method.\n\n* All other options are passed to [ssh2 `Client.connect` method](https://github.com/mscdex/ssh2/blob/master/README.md#api).\n\n\n## Related\n\n* [electron-tunnel](https://github.com/parro-it/tunnels) - Awesome Electron app to manage your ssh tunnels - powered by this module.\n\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 parro-it\n"
}