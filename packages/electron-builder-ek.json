{
  "name": "electron-builder-ek",
  "description": "A complete solution to package and build a ready for distribution Electron app for MacOS, Windows and Linux with “auto update” support out of the box",
  "version": "7.14.2-hotfix2",
  "main": "out/index.js",
  "files": [
    "out",
    "templates",
    "certs/root_certs.keychain"
  ],
  "bin": {
    "build": "./out/build-cli.js",
    "cleanup": "./out/cleanup.js",
    "install-app-deps": "./out/install-app-deps.js",
    "node-gyp-rebuild": "./out/node-gyp-rebuild.js"
  },
  "scripts": {
    "compile": "ts-babel . nsis-auto-updater test",
    "lint": "tslint 'src/**/*.ts' 'test/src/**/*.ts' 'nsis-auto-updater/src/**/*.ts'",
    "pretest": "yarn run compile && yarn run lint",
    "check-deps": "node ./test/out/helpers/checkDeps.js",
    "test": "node ./test/out/helpers/runTests.js",
    "test-linux": "docker run --rm -ti -v ${PWD}:/project -v ${PWD##*/}-node-modules:/project/node_modules -v ~/.electron:/root/.electron electronuserland/electron-builder:wine /test.sh",
    "pack-updater": "cd nsis-auto-updater && yarn --production && cd ..",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "//": "Update wiki if docs changed. Update only if functionalily are generally available (latest release, not next)",
    "update-wiki": "git subtree split -b wiki --prefix docs/ && git push -f wiki wiki:master",
    "whitespace": "whitespace 'src/**/*.ts'",
    "docker-images": "docker/build.sh",
    "precommit": "validate-commit-msg"
  },
  "repository": {
    "user": "ekalinichev",
    "repo": "electron-builder-ek",
    "branch": "master",
    "host": "github.com",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/ekalinichev/electron-builder-ek/tarball/master",
    "clone_url": "https://github.com/ekalinichev/electron-builder-ek",
    "https_url": "https://github.com/ekalinichev/electron-builder-ek",
    "travis_url": "https://travis-ci.org/ekalinichev/electron-builder-ek",
    "zip_url": "https://github.com/ekalinichev/electron-builder-ek/archive/master.zip",
    "api_url": "https://api.github.com/repos/ekalinichev/electron-builder-ek"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "keywords": [
    "electron",
    "builder",
    "build",
    "installer",
    "install",
    "packager",
    "pack",
    "nsis",
    "app",
    "dmg",
    "msi",
    "exe",
    "setup",
    "Windows",
    "OS X",
    "MacOS",
    "Mac"
  ],
  "author": {
    "name": "Stefan Judis"
  },
  "license": "MIT",
  "homepage": "https://gitlab.acrobits.cz/ekalinichev/electron-builder-ek",
  "dependencies": {
    "7zip-bin": "^2.0.4",
    "ansi-escapes": "^1.4.0",
    "archiver": "^1.1.0",
    "archiver-utils": "^1.3.0",
    "asar-electron-builder": "^0.13.5",
    "bluebird-lst-c": "^1.0.2",
    "chalk": "^1.1.3",
    "chromium-pickle-js": "^0.2.0",
    "cli-cursor": "^1.0.2",
    "cuint": "^0.2.2",
    "debug": "^2.2.0",
    "electron-download": "2.1.2",
    "electron-osx-sign-tf": "^1.0.1",
    "fs-extra-p": "^2.0.3",
    "hosted-git-info": "^2.1.5",
    "ini": "^1.3.4",
    "isbinaryfile": "^3.0.1",
    "js-yaml": "^3.6.1",
    "lodash.template": "^4.4.0",
    "mime": "^1.3.4",
    "minimatch": "^3.0.3",
    "normalize-package-data": "^2.3.5",
    "parse-color": "^1.0.0",
    "plist": "^2.0.1",
    "pretty-ms": "^2.1.0",
    "progress": "^1.1.8",
    "progress-stream": "^1.2.0",
    "read-installed": "^4.0.3",
    "sanitize-filename": "^1.6.1",
    "semver": "^5.3.0",
    "source-map-support": "^0.4.5",
    "tunnel-agent": "^0.4.3",
    "update-notifier": "^1.0.2",
    "uuid-1345": "^0.99.6",
    "yargs": "^6.3.0"
  },
  "devDependencies": {
    "@develar/semantic-release": "^6.3.13",
    "@types/ini": "^1.3.29",
    "@types/js-yaml": "^3.5.28",
    "@types/source-map-support": "^0.2.28",
    "ava-tf": "^0.16.4",
    "babel-plugin-array-includes": "^2.0.3",
    "babel-plugin-transform-async-to-module-method": "^6.16.0",
    "babel-plugin-transform-es2015-destructuring": "^6.18.0",
    "babel-plugin-transform-es2015-parameters": "^6.18.0",
    "babel-plugin-transform-es2015-spread": "^6.8.0",
    "babel-plugin-transform-inline-imports-commonjs": "^1.2.0",
    "decompress-zip": "^0.3.0",
    "depcheck": "^0.6.4",
    "diff": "^3.0.1",
    "husky": "^0.11.9",
    "json8": "^0.9.2",
    "path-sort": "^0.1.0",
    "ts-babel": "^1.1.3",
    "tslint": "^4.0.0-dev.0",
    "typescript": "^2.1.0-dev.20161025",
    "validate-commit-msg": "^2.8.2",
    "whitespace": "^2.1.0"
  },
  "babel": {
    "plugins": [
      [
        "transform-async-to-module-method",
        {
          "module": "bluebird-lst-c",
          "method": "coroutine"
        }
      ],
      "transform-es2015-parameters",
      "transform-es2015-spread",
      "transform-es2015-destructuring",
      "array-includes",
      "transform-inline-imports-commonjs"
    ]
  },
  "ava": {
    "verbose": true,
    "cache": false,
    "files": [
      "test/out/*.js"
    ]
  },
  "release": {
    "verifyConditions": []
  },
  "typings": "./out/electron-builder.d.ts",
  "publishConfig": {
    "tag": "next"
  },
  "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Loopline Systems\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
  "dist": {
    "shasum": "bca627b4f0bc11b0156fc439a7aac2fdf861fe80",
    "tarball": "http://registry.npmjs.org/electron-builder-ek/-/electron-builder-ek-7.14.2-hotfix2.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-10-27T20:10:26.885Z"
    },
    {
      "number": "7.14.2-hotfix1",
      "date": "2016-10-27T20:11:35.307Z"
    },
    {
      "number": "7.14.2-hotfix2",
      "date": "2016-10-27T20:47:00.415Z"
    },
    {
      "number": "7.14.2-hotfix3",
      "date": "2016-10-27T20:57:18.806Z"
    },
    {
      "number": "7.14.2-hotfix4",
      "date": "2016-10-27T20:58:22.584Z"
    },
    {
      "number": "0.0.0-semantic-release",
      "date": "2016-11-01T13:37:20.097Z"
    }
  ],
  "created": "2016-10-27T20:10:26.885Z",
  "modified": "2016-11-01T13:37:20.097Z",
  "lastPublisher": {
    "name": "ekalinichev",
    "email": "egork92@gmail.com"
  },
  "owners": [
    {
      "name": "ekalinichev",
      "email": "egork92@gmail.com"
    }
  ],
  "readme": "# electron-builder [![npm version](https://img.shields.io/npm/v/electron-builder.svg)](https://npmjs.org/package/electron-builder) [![donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=W6V79R2RGCCHL)\nA complete solution to package and build a ready for distribution Electron app for MacOS, Windows and Linux with “auto update” support out of the box.\n\n* NPM packages management:\n  * [Native application dependencies](http://electron.atom.io/docs/latest/tutorial/using-native-node-modules/) compilation (only if the [two-package.json project structure](#two-packagejson-structure) is used).\n  * Development dependencies are never included. You don't need to ignore them explicitly.\n* [Code Signing](https://github.com/electron-userland/electron-builder/wiki/Code-Signing) on a CI server or development machine.\n* [Auto Update](#auto-update) ready application packaging.\n* [Build version management](https://github.com/electron-userland/electron-builder/wiki/Options#build-version-management).\n* Numerous target formats:\n  * All platforms: `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir` (unpacked directory).\n  * [MacOS](https://github.com/electron-userland/electron-builder/wiki/Options#MacOptions-target): `dmg`, `mas`.\n  * [Linux](https://github.com/electron-userland/electron-builder/wiki/Options#LinuxBuildOptions-target): `AppImage`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`.\n  * [Windows](https://github.com/electron-userland/electron-builder/wiki/Options#WinBuildOptions-target): NSIS, Squirrel.Windows.\n* [Publishing artifacts](https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts) to GitHub Releases and Bintray.\n\n_Note: Platform specific `7zip-bin-*` packages are `optionalDependencies`, which may require manual install if you have npm configured to [not install optional deps by default](https://docs.npmjs.com/misc/config#optional)._\n\nReal project example — [onshape-desktop-shell](https://github.com/develar/onshape-desktop-shell).\n\nConsider to use `nsis` target for Windows ([auto-update](https://github.com/electron-userland/electron-builder/issues/529) will be implemented this month) for new projects.\n\n# Two package.json structure\n\nWe recommend to use two package.json files (it is not required, you can build your project with any structure).\n\n1. For development (`./package.json`)\n\n   The `package.json` resides in the root of your project. Here you declare the dependencies for your development environment and build scripts (`devDependencies`).\n\n2. For your application (`./app/package.json`)\n\n   The `package.json` resides in the `app` directory. Declare your application dependencies (`depencencies`) here. *Only this directory is distributed with the final, packaged application.*\n\nWhy?\n\n1. Native npm modules (those written in C, not JavaScript) need to be compiled and here we have two different compilation targets for them. Those used within the application need to be compiled against the electron runtime and all `devDependencies` need to be compiled against your local node.js environment. Thanks to the two `package.json` structure, this is trivial (see [#39](https://github.com/electron-userland/electron-builder/issues/39)).\n2. No need to specify which [files](https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files) to include in the app (because development files reside outside the `app` directory).\n\nPlease see [Loading App Dependencies Manually](https://github.com/electron-userland/electron-builder/wiki/Loading-App-Dependencies-Manually) and [#379](https://github.com/electron-userland/electron-builder/issues/379#issuecomment-218503881).\n\n# Configuration\n\nSee [options](https://github.com/electron-userland/electron-builder/wiki/Options) for a full reference but consider following the simple guide outlined below first.\n\nFor an app that will be shipped to production, you should sign your application. See [Where to buy code signing certificates](https://github.com/electron-userland/electron-builder/wiki/Code-Signing#where-to-buy-code-signing-certificate).\n\n## Quick Setup Guide\n\n1. Specify the standard fields in the application `package.json` — [name](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata-name), `description`, `version` and [author](https://docs.npmjs.com/files/package.json#people-fields-author-contributors).\n\n2. Specify the [build](https://github.com/electron-userland/electron-builder/wiki/Options#build) configuration in the development `package.json` as follows:\n    ```json\n    \"build\": {\n      \"appId\": \"your.id\",\n      \"mac\": {\n        \"category\": \"your.app.category.type\",\n      },\n      \"win\": {\n        \"iconUrl\": \"(windows-only) https link to icon\"\n      }\n    }\n    ```\n   See [all options](https://github.com/electron-userland/electron-builder/wiki/Options).\n\n3. Create a directory [build](https://github.com/electron-userland/electron-builder/wiki/Options#MetadataDirectories-buildResources) in the root of the project and save a `background.png` (macOS DMG background), `icon.icns` (macOS app icon) and `icon.ico` (Windows app icon) into it.\n\n   <a id=\"user-content-linuxIcon\" class=\"anchor\" href=\"#linuxIcon\" aria-hidden=\"true\"></a>The Linux icon set will be generated automatically based on the macOS `icns` file (or you can put them into the `build/icons` directory if you want to specify them yourself. The filename must contain the size (e.g. `32x32.png`) of the icon).\n\n4. Add the [scripts](https://docs.npmjs.com/cli/run-script) key to the development `package.json`:\n    ```json\n    \"scripts\": {\n      \"pack\": \"build --dir\",\n      \"dist\": \"build\"\n    }\n    ```\n    Then you can run `npm run dist` (to package in a distributable format (e.g. dmg, windows installer, deb package)) or `npm run pack` (only generates the package directory without really packaging it. This is useful for testing purposes).\n\n    If you use the [two-package.json project structure](#two-packagejson-structure), you'll only have your `devDependencies` in your development `package.json` and your `dependencies` in your app `package.json`. To ensure your dependencies are always updated based on both files, simply add `\"postinstall\": \"install-app-deps\"` to your development `package.json`. This will basically automatically trigger an `npm install` within your app directory so you don't have to do this work everytime you install/update your dependencies.\n\t\n\n5. If you have native addons of your own that are part of the application (not as a dependency), add `\"nodeGypRebuild\": true` to the `build` section of your development `package.json`.  \n   :bulb: Don't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use [node-gyp-rebuild](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241488783) bin instead.\n\n   \n6. Installing the [required system packages](https://github.com/electron-userland/electron-builder/wiki/Multi-Platform-Build).\n\nPlease note that everything is packaged into an asar archive [by default](https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-asar).\n\n# Auto Update\n`electron-builder` produces all required artifacts:\n\n* `.dmg`: macOS installer, required for the initial installation process on macOS.\n* `-mac.zip`: required for Squirrel.Mac.\n* `.exe` and `-ia32.exe`: Windows installer, required for the initial installation process on Windows. Please note that [your app must handle Squirrel.Windows events](https://github.com/electronjs/windows-installer#handling-squirrel-events). See [real world example](https://github.com/develar/onshape-desktop-shell/blob/master/src/WinSquirrelStartupEventHandler.ts).\n* `.full-nupkg`: required for Squirrel.Windows.\n\nTo benefit from auto updates, you have to implement and configure Electron's [`autoUpdater`](http://electron.atom.io/docs/latest/api/auto-updater/) module ([example](https://github.com/develar/onshape-desktop-shell/blob/master/src/AppUpdater.ts)).\nYou also need to deploy your releases to a server.\nConsider using [Nuts](https://github.com/GitbookIO/nuts) (uses GitHub as a backend to store the assets), [Electron Release Server](https://github.com/ArekSredzki/electron-release-server) or [Squirrel Updates Server](https://github.com/Aluxian/squirrel-updates-server).\nSee the [Publishing Artifacts](https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts) section of the [Wiki](https://github.com/electron-userland/electron-builder/wiki) for more information on how to configure your CI environment for automated deployments.\n\nFor Windows consider only [distributing 64-bit versions](https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130). Or use NSIS.\n\n# CLI Usage\nExecute `node_modules/.bin/build --help` to get the actual CLI usage guide.\n```\nBuilding:\n  --mac, -m, -o, --osx, --macos  Build for MacOS, accepts target list (see\n                                 https://goo.gl/HAnnq8).                 [array]\n  --linux, -l                    Build for Linux, accepts target list (see\n                                 https://goo.gl/O80IL2)                  [array]\n  --win, -w, --windows           Build for Windows, accepts target list (see\n                                 https://goo.gl/dL4i8i)                  [array]\n  --x64                          Build for x64                         [boolean]\n  --ia32                         Build for ia32                        [boolean]\n  --dir                          Build unpacked dir. Useful to test.   [boolean]\n  --extraMetadata, --em          Inject properties to application package.json\n\nPublishing:\n  --publish, -p  Publish artifacts (to GitHub Releases), see\n                 https://goo.gl/WMlr4n\n                           [choices: \"onTag\", \"onTagOrDraft\", \"always\", \"never\"]\n  --draft        Create a draft (unpublished) release                  [boolean]\n  --prerelease   Identify the release as a prerelease                  [boolean]\n\nDeprecated:\n  --platform  The target platform (preferred to use --mac, --win or --linux)\n               [choices: \"mac\", \"osx\", \"win\", \"linux\", \"darwin\", \"win32\", \"all\"]\n  --arch      The target arch (preferred to use --x64 or --ia32)\n                                                 [choices: \"ia32\", \"x64\", \"all\"]\n\nOther:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n\nExamples:\n  build -mwl                build for MacOS, Windows and Linux\n  build --linux deb tar.xz  build deb and tar.xz for Linux\n  build --win --ia32        build for Windows ia32\n  build --em.foo=bar        set application package.json property `foo` to `bar`\n```\n\n# Programmatic Usage\nSee `node_modules/electron-builder/out/electron-builder.d.ts`. [Typings](https://github.com/Microsoft/TypeScript/wiki/Typings-for-npm-packages) is supported.\n\n```js\n\"use strict\"\n\nconst builder = require(\"electron-builder\")\nconst Platform = builder.Platform\n\n// Promise is returned\nbuilder.build({\n  targets: Platform.MAC.createTarget(),\n  devMetadata: {\n    \"//\": \"build and other properties, see https://goo.gl/5jVxoO\"\n  }\n})\n  .then(() => {\n    // handle result\n  })\n  .catch((error) => {\n    // handle error\n  })\n```\n\n# Donations\n\n[Donate with PayPal.](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=W6V79R2RGCCHL)\n\n# Further Reading\nSee the [Wiki](https://github.com/electron-userland/electron-builder/wiki) for more documentation.\n\n\n"
}