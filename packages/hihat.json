{
  "name": "hihat",
  "version": "2.6.4",
  "description": "local Node/Browser development with Chrome DevTools",
  "main": "index.js",
  "license": "MIT",
  "author": {
    "name": "Matt DesLauriers",
    "email": "dave.des@gmail.com",
    "url": "https://github.com/mattdesl"
  },
  "dependencies": {
    "browserify": "^11.0.0",
    "concat-stream": "^1.4.8",
    "debounce": "^1.0.0",
    "duplexer2": "0.0.2",
    "ecstatic": "^0.8.0",
    "electron-prebuilt": "^0.36.3",
    "events": "^1.0.2",
    "find-node-modules": "^1.0.1",
    "getport": "^0.1.0",
    "globby": "~3.0.1",
    "is-dom": "^1.0.5",
    "lodash.defaults": "^3.1.2",
    "minimist": "^1.1.1",
    "normalize-file-to-url-path": "^1.0.0",
    "object-assign": "^3.0.0",
    "once": "^1.3.2",
    "path-is-absolute": "^1.0.0",
    "process": "^0.11.1",
    "routes-router": "^4.1.2",
    "serializerr": "^1.0.1",
    "simple-html-index": "^1.0.1",
    "sliced": "^1.0.1",
    "split2": "^1.0.0",
    "through2": "^0.6.5",
    "watchify": "^3.3.0"
  },
  "devDependencies": {
    "async-each-series": "^1.0.0",
    "brfs": "^1.4.0",
    "electron-canvas-to-buffer": "^1.0.2",
    "standard": "^4.2.0",
    "tap-dev-tool": "^1.3.0",
    "tap-spec": "^3.0.0",
    "tape": "^4.0.0"
  },
  "scripts": {
    "test": "standard && node test/run-tests.js",
    "example": "./bin/cmd.js demo/canvas.js --node --exec > canvas.png"
  },
  "keywords": [
    "chrome",
    "app",
    "dev",
    "tools",
    "nodemon",
    "browser",
    "window",
    "chromium",
    "blink",
    "webgl",
    "test",
    "testing",
    "node",
    "mon",
    "monitor",
    "live",
    "reload",
    "local",
    "development",
    "reloading",
    "hot",
    "fast",
    "rapid"
  ],
  "repository": {
    "user": "Jam3",
    "repo": "hihat",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/Jam3/hihat/tarball/master",
    "clone_url": "https://github.com/Jam3/hihat",
    "https_url": "https://github.com/Jam3/hihat",
    "travis_url": "https://travis-ci.org/Jam3/hihat",
    "zip_url": "https://github.com/Jam3/hihat/archive/master.zip",
    "api_url": "https://api.github.com/repos/Jam3/hihat"
  },
  "homepage": "https://github.com/Jam3/hihat",
  "bin": {
    "hihat": "./bin/cmd.js"
  },
  "gitHead": "f754bdcaa4cdb335a0e305d474a6a046e4b87143",
  "_npmVersion": "2.14.2",
  "_nodeVersion": "4.0.0",
  "dist": {
    "shasum": "845dfde1f03ad959f9849c17cc5dc96bea3fe862",
    "tarball": "http://registry.npmjs.org/hihat/-/hihat-2.6.4.tgz"
  },
  "stars": 4,
  "versions": [
    {
      "number": "0.0.0",
      "date": "2015-06-01T23:42:01.314Z"
    },
    {
      "number": "0.0.1",
      "date": "2015-06-01T23:42:31.595Z"
    },
    {
      "number": "0.0.2",
      "date": "2015-06-01T23:42:50.077Z"
    },
    {
      "number": "0.0.3",
      "date": "2015-06-01T23:43:59.699Z"
    },
    {
      "number": "0.0.4",
      "date": "2015-06-02T15:33:21.097Z"
    },
    {
      "number": "0.0.5",
      "date": "2015-06-03T21:58:42.080Z"
    },
    {
      "number": "0.0.6",
      "date": "2015-06-03T22:57:28.586Z"
    },
    {
      "number": "0.0.7",
      "date": "2015-06-04T00:56:34.060Z"
    },
    {
      "number": "0.0.8",
      "date": "2015-06-04T16:25:35.651Z"
    },
    {
      "number": "1.0.0",
      "date": "2015-06-12T14:51:16.400Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-06-12T15:22:31.715Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-06-15T15:44:03.349Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-06-15T15:57:28.480Z"
    },
    {
      "number": "1.1.2",
      "date": "2015-06-15T15:59:31.879Z"
    },
    {
      "number": "1.2.1",
      "date": "2015-06-16T15:37:59.536Z"
    },
    {
      "number": "2.0.0",
      "date": "2015-07-27T17:47:11.386Z"
    },
    {
      "number": "2.0.1",
      "date": "2015-07-27T18:40:15.681Z"
    },
    {
      "number": "2.1.0",
      "date": "2015-07-27T18:59:00.824Z"
    },
    {
      "number": "2.2.0",
      "date": "2015-07-27T20:26:37.863Z"
    },
    {
      "number": "2.2.1",
      "date": "2015-07-27T20:39:41.196Z"
    },
    {
      "number": "2.3.0",
      "date": "2015-07-28T00:59:44.926Z"
    },
    {
      "number": "2.4.0",
      "date": "2015-07-28T14:51:08.912Z"
    },
    {
      "number": "2.4.1",
      "date": "2015-07-29T13:35:21.422Z"
    },
    {
      "number": "2.4.2",
      "date": "2015-08-27T14:52:55.930Z"
    },
    {
      "number": "2.4.3",
      "date": "2015-08-27T14:53:09.282Z"
    },
    {
      "number": "2.5.0",
      "date": "2015-10-26T03:09:31.644Z"
    },
    {
      "number": "2.6.0",
      "date": "2016-01-08T15:21:26.166Z"
    },
    {
      "number": "2.6.1",
      "date": "2016-01-08T16:27:18.037Z"
    },
    {
      "number": "2.6.2",
      "date": "2016-01-10T17:26:57.246Z"
    },
    {
      "number": "2.6.3",
      "date": "2016-01-19T21:56:39.407Z"
    },
    {
      "number": "2.6.4",
      "date": "2016-01-21T17:15:08.232Z"
    }
  ],
  "created": "2015-06-01T23:42:01.314Z",
  "modified": "2016-01-21T17:15:08.232Z",
  "lastPublisher": {
    "name": "mattdesl",
    "email": "dave.des@gmail.com"
  },
  "owners": [
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    },
    {
      "name": "timoxley",
      "email": "secoif@gmail.com"
    }
  ],
  "readme": "# hihat\n\n![hihat](http://i.imgur.com/Sqpbjzl.gif)\n\n> local Node/Browser development with Chrome DevTools\n\nRuns a source file in a Chrome DevTools process. Saving the file will reload the tab. \n\nThis is useful for locally unit testing browser code with the full range of Web APIs (WebGL, WebAudio, etc). It provides access to profiling, debugger statements, network requests, and so forth. \n\nIt can also be used to develop typical Node projects, or as a generic [Node REPL](#repl). For example, instead of using [nodemon](https://www.npmjs.com/package/nodemon) during development, you can use `hihat` to make use of a debugger.\n\nSince it provides Browser and Node APIs, it can also be used for some simple CLI tooling, like [saving a Canvas2D to a PNG file](#save-canvas-2d-to-png-image).\n\nUnder the hood, this uses [electron](https://github.com/atom/electron), [browserify](https://github.com/substack/node-browserify) and [watchify](https://github.com/substack/watchify).\n\n---\n\n#### Update: Jan 2016\n\nA lot of new efforts are going toward [devtool](https://github.com/Jam3/devtool), a very similar project but without `browserify` and `watchify` under the hood. In many ways it replaces `hihat`, but not all. Both tools will continue to exist, although `devtool` will probably receive more regular enhancements and maintenance.\n\n## Install\n\n[![NPM](https://nodei.co/npm/hihat.png)](https://www.npmjs.com/package/hihat)\n\nThis project is currently best suited as a global install. Use `npm` to install it like so:\n\n```sh\nnpm install hihat -g\n```\n\n## Basic Examples\n\nSimplest case is just to run `hihat` on any source file that can be browserified (Node/CommonJS).\n\n```sh\nhihat index.js\n```\n\nAny options after `--` will be passed to browserify. For example:\n\n```sh\n# transpile ES6 files\nhihat tests/*.js -- --transform babelify\n```\n\nYou can use `--print` to redirect `console` logging into your terminal:\n\n```sh\nhihat test.js --print | tap-spec\n```\n\nThe process will stay open until you call `window.close()` from the client code. Also see the `--quit` and `--timeout` options in [Usage](#usage).\n\n## Usage\n\nUsage:\n\n```sh\nhihat [entries] [options] -- [browserifyOptions]\n```\n\nOptions:\n\n- `--port` (default `9541`)\n  - the port to host the local server on\n- `--host` (default `'localhost'`)\n  - the host for the local development server\n- `--dir` (default `process.cwd()`)\n  - the root directory to serve static files from\n- `--print`\n  - `console.log` and `console.error` will print to `process.stdout` and `process.stderr`\n- `--quit`\n  - uncaught errors (like syntax) will cause the application to exit (useful for unit testing)\n- `--frame` (default `'0,0,0,0'`)\n  - a comma-separated string for `x,y,width,height` window bounds\n  - if only two numbers are passed, treated as `width,height`\n  - if `true` is passed, uses the native default size\n- `--no-devtool`\n  - do not open a DevTools window when running\n- `--raw-output`\n  - do not silence Chromium debug logs on stdout/stderr\n- `--node`\n  - enables Node integration (see [node](#node))\n- `--no-electron-builtins`\n  - when `--node` is enabled, makes it behave more like Node by ignoring Electron builtins\n- `--timeout` (default 0)\n  - a number, will close the process after this duration. Use 0 for no timeout\n- `--exec`\n  - an alias for `--print`, `--no-devtool` and `--quit` options. Useful for headless executions\n- `--index=path/to/index.html`\n  - optional `index.html` file to override the default (see [HTML index](#html-index))\n- `--serve`\n  - what to serve your bundle entry point as\n  - defaults to file name if possible, otherwise 'bundle.js'\n- `--browser-field`\n  - Can specify `true` or `false` to force enable/disable the `\"browser\"` field resolution, independently of the `--node` option\n\nBy default, browserify will use source maps. You can change this with `--no-debug` as a browserify option:\n\n```sh\nhihat test.js -- --no-debug\n```\n\n## Node\n\n> **Note:** Users seeking the Node.js features may be more interested in [devtool](https://github.com/Jam3/devtool) â€“ very similar to `hihat` but better architected to deal with large Node applications.\n\nhihat can also be used for developing *simple* Node modules. The `--node` flag will disable the `\"browser\"` field resolution and use actual Node modules for `process`, `Buffer`, `\"os\"`, etc. It also exposes `require` statement outside of the bundle, so you can use it in the Chrome Console while developing.\n\nFor example, `foobar.js`\n\n```js\nvar fs = require('fs')\n\nfs.readdir(process.cwd(), function (err, files) {\n  if (err) throw err\n  debugger\n  console.log(files)\n})\n```\n\nNow we can run the following on our file:\n\n```sh\nhihat foobar.js --node\n```\n\n![screenshot](http://i.imgur.com/jZdEcxC.png)\n\nBy default, enabling `--node` will also enable the Electron builtins. You can pass `--no-electron-builtins` to disable Electron modules and make the source behave more like Node.\n\n#### Limitations\n\nThere are some known limitations with this approach.\n\n- Modules that use native addons (like [node-canvas](https://github.com/Automattic/node-canvas)) are not supported.\n- Unlike a typical Node.js program, you will need to explicitly quit the application with `window.close()`\n- Since the source is run through browserify, the initial build time is slow and features like `require.resolve` are not yet supported. [#21](https://github.com/Jam3/hihat/issues/21)\n- Some features like `process.stdin` are not possible. [#12](https://github.com/Jam3/hihat/issues/12)\n- Since this runs Electron instead of a plain Node.js runtime, it may produce some unusual results\n\n\n## REPL\n\nIf you specify `hihat` without any entry files, it will not invoke browserify or watchify. For example, you can use this as a generic alternative to the Node REPL, but with better debugging and various Web APIs.\n\n```sh\nhihat --node\n```\n\nExample:\n\n![repl](http://i.imgur.com/Xns0gGT.png)\n\n## HTML index\n\nBy default, hihat will serve a [simple HTML `index.html`](https://www.npmjs.com/package/simple-html-index) file. You can use `--index` for an alternative. The path is relative to your current working directory.\n\n```sh\nhihat test.js --index=foo.html\n```\n\nAnd the following `foo.html`:\n\n```html\n<!doctype html>\n<head>\n  <title>FOO</title>\n  <meta charset=\"utf-8\">\n  </head>\n<body>\n  <script src=\"test.js\"></script> \n</body>\n</html>\n```\n\nYou can also specify a `--serve` option to force a certain entry point for your bundle. For example:\n\n```sh\nhihat test.js --index=foo.html --serve=bundle.js\n```\n\nWith this, your script tag would be:\n\n```html\n<script src=\"bundle.js\"></script> \n```\n\nIn most cases, `--serve` will default to the file name of your entry file. In complex cases, such as absolute paths or `'.'`, it may default to `'bundle.js'`.\n\n## Advanced Examples\n\nSome more advanced uses of hihat.\n\n- [prettify TAP in console](prettify-tap-in-console)\n- [write clipboard to `stdout`](write-clipboard-to-stdout)\n- [save Canvas 2D to PNG image](save-canvas-2d-to-png-image)\n\n#### prettify TAP in console\n\nYou can use the browserify plugin [tap-dev-tool](https://github.com/Jam3/tap-dev-tool) to pretty-print TAP output in the console.\n\n```sh\n# install it locally\nnpm install tap-dev-tool --save-dev\n\n# now run it as a plugin\nhihat test.js -- -p tap-dev-tool\n```\n\nFiles that use [tap](https://www.npmjs.com/package/tap) or [tape](https://www.npmjs.com/package/tape) will be logged like so:\n\n![tap-dev-tool](http://i.imgur.com/LS014oR.png)\n\n#### write clipboard to `stdout`\n\nUsing the `clipboard` module in Electron, we can write it to stdout like so.\n\n`paste.js`:\n\n```js\nvar clipboard = require('clipboard')\nprocess.stdout.write(clipboard.readText() + '\\n')\nwindow.close()\n```\n\nThen run:\n\n```sh\nhihat paste.js --node --exec > clipboard.txt\n```\n\nThis will write the clipboard contents to a new file, `clipboard.txt`.\n\n#### save Canvas 2D to PNG image\n\nHere is an example which writes a Canvas2D element into a new PNG image, using [electron-canvas-to-buffer](https://github.com/mattdesl/electron-canvas-to-buffer).\n\n`render.js`\n\n```js\nvar toBuffer = require('electron-canvas-to-buffer')\n\nvar canvas = document.createElement('canvas')\nvar context = canvas.getContext('2d')\nvar width = canvas.width\nvar height = canvas.height\n\nvar gradient = context.createLinearGradient(0, 0, width, 0)\ngradient.addColorStop(0, '#f39821')\ngradient.addColorStop(1, '#f321b0')\n\ncontext.fillStyle = gradient\ncontext.fillRect(0, 0, width, height)\n\nprocess.stdout.write(toBuffer(canvas, 'image/png'))\nwindow.close()\n```\n\nNow run the following:\n\n```sh\nhihat render.js --node --exec > image.png\n```\n\nAnd the result of `image.png` will be:\n\n![image](http://i.imgur.com/whDkS67.png)\n\n## See Also\n\n- [devtool](https://github.com/Jam3/devtool) - a similar tool, but built specifically for Node and without the browserify/watchify cruft\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/Jam3/hihat/blob/master/LICENSE.md) for details.\n"
}