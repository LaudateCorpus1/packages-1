{
  "name": "lovelock",
  "version": "0.1.1",
  "author": {
    "name": "Michael B",
    "email": "michaelpb@gmail.com"
  },
  "description": "End-to-end testing system for Electron or NW.js applications",
  "contributors": [
    {
      "name": "Michael Bethencourt",
      "email": "michaelpb@gmail.com"
    }
  ],
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "testing",
    "electron",
    "nw",
    "test-bridge",
    "end-to-end"
  ],
  "repository": {
    "type": "git",
    "url": "https://bitbucket.com/michaelb/lovelock.git"
  },
  "dependencies": {
    "tree-kill": "0.1.1"
  },
  "devDependencies": {
    "nodeunit": "*",
    "mockery": "*"
  },
  "license": "LGPL-3.0",
  "engines": {
    "node": ">=0.10"
  },
  "gitHead": "040fb4772adf2eec074578f26b01b88e3afd973c",
  "_npmVersion": "1.4.21",
  "dist": {
    "shasum": "5234c387150ca431abe5d5fae606abeef5c9effd",
    "tarball": "http://registry.npmjs.org/lovelock/-/lovelock-0.1.1.tgz"
  },
  "versions": [
    {
      "number": "0.1.1",
      "date": "2015-06-24T16:53:55.128Z"
    }
  ],
  "created": "2015-06-24T16:53:55.128Z",
  "modified": "2015-06-24T16:53:55.128Z",
  "lastPublisher": {
    "name": "michaelb",
    "email": "michaelpb@gmail.com"
  },
  "owners": [
    {
      "name": "michaelb",
      "email": "michaelpb@gmail.com"
    }
  ],
  "readme": "Lovelock.js\n===========\n\n[![Build Status](https://drone.io/bitbucket.org/michaelb/lovelock/status.png)](https://drone.io/bitbucket.org/michaelb/lovelock/latest)\n\nLovelock consists of a few handy utilities for writing end-to-end tests for\n[Electron JS](http://electron.atom.io/) desktop applications.\n\nGiven that its for poking at Electron JS applications, I named it after\n[James Lovelock](https://en.wikipedia.org/wiki/James_Lovelock), who, among many\nother things, invented the electron capture detector.\n\n**Note:** It's still under development, and the API might change.\n\n## Installation\n\n   npm install lovelock\n\n## Scope\n\n* Lovelock was written to be used for Electron, but I'm sure it could easily be\n  used for NW.js or many other application frameworks.\n\n* It is completely test framework and UI library agnostic: it merely a sort of\n  RPC-type bridge between your unit test and the browser process.  This means\n  that you need still to get a test framework set up, and a library on the\n  front end to facilitate DOM traversal, such as jQuery!\n\n\n## Getting started\n\nThe only requirement is including the following line somewhere within your\nElectron browser-process JS code:\n\n```javascript\nrequire('lovelock').try_server(window);\n```\n\nIf you want your tests to wait until page load, then consider putting it after\neverything is set up. Note that this function does nothing unless it detects\nthe environmental variables set by Lovelock.\n\nNow, somewhere in your unit tests, use `lovelock.launch_electron` to spawn a\ncopy of the electron editor, and perform tests.\n\nHere is an example NodeUnit test case, leveraging jQuery on the front-end to\nsimulate clicks and gather data:\n\n```javascript\nvar lovelock = require('lovelock');\n\nexports.test_start_click = function (test) {\n    lovelock.launch_electron(function (window, teardown) {\n        window.$('#start_button').trigger('click')._wait(100)._end();\n        window.$('#message').text()._get(function (text) {\n            test.equal(\"Ready to go!\", text);\n            teardown();\n            test.done();\n        });\n    });\n};\n```\n\n**Important:** If you get an error about Proxy, and are using Node.js to run the\nunit tests, make sure to use `--harmony_proxies` flag when running node in\norder to enable the ES6 `Proxy` feature!\n\n\n## How it works\n\nThe `launch_electron` method runs electron as a child process. The electron\nbrowser process runs a little RPC server based on `httpserver`. Every \"chain\"\nof commands from within the unit tests is \"fired off\" as soon as it gets to a\n`_get` function. It then sends the chain of commands to the browser-process\nserver, which then runs them and returns the result.\n\nThe `chain` syntax is possible with ES6's Proxy feature.\n\n# API\n\n## Browser\n\n* **try_server(obj, [callback])** - Start server if env variables are found,\n  returning `true` if a server will be started, `false` otherwise. `obj`\n  (typically window) will be exposed for manipulation to the client.\n\n\n## Unit test\n\n* **launch(opts, callback)** - Spawn a server and set up bridge. Callback is\n  called with a placeholder for `window` (or whatever object you pass in the\n  front end), and a `teardown` function which will kill the child process.\n  Options are listed below:\n\n    - **path** [required] - path to binary to spawn\n    - **args** [required] - args to pass to binary\n    - **noisy** [default: false] - echo stdout and stderr\n    - **port** [default: 9797] - \n    - **host** [default: localhost] -  \n    - **env** [default: {}] - extra env settings\n    - **cwd** [default: null] - specify a custom directory\n\n* **launch_electron([opts], callback)** - Shortcut for above. Uses `which` to\n  find the Electron binary, and includes `.` as the first arg (assuredly, the\n  location of the Electron binary). `args` can be specified for additional CLI\n  arguments.\n\n\n* **connect_remote(opts)** - Connects to a remote server. Same options as\n  above, excluding `path` and `args`. Synchronous: returns a ready-to-use fake\n  window object.\n\n\n## Chaining\n\nThe fake window objects use Proxy to seemingly possess every property.  They\nalso have built-in functions, as follows:\n\n* **_wait(t)** - Pauses for `t` milliseconds before continuing the chain (pause\n  occurs asynchronously within browser process)\n\n* **_get(callback)** - Sends off the full chain to the server. When successful,\n  call `callback` with a single argument being the last value in the chain.\n\n* **_collect(name)** - Store the last value of the chain in an obj. If any\n  number of `_collect` is present in the chain, then `_get` will return instead\n  an object containing all collected values, instead of a single value.\n\n* **_end()** -  Reset chain back to root element, e.g. resetting back to\n  window, or a base element created with `new` (see below).\n\n## Constructor\n\n**new ([chain])** - Constructor syntax allows you to \"freeze\" portions of the\nchain to be re-usable. Example below, also demonstrating how `_collect` and\n`_end` can be used effectively to reduce round-trips:\n\n```javascript\n// get various properties about the paragraph\nvar $para = new (window.$('#main').find('p:first'));\n$para.text()._collect('text')._end();\n$para.height()._collect('height')._end();\n$para.offset()._collect('offset')._end();\n$para._get(function (results) {\n    test.equal(\"A paragraph\", results.text, \"correct text\");\n    test.ok(results.height > 15, \"taller than 15\")\n    test.ok(results.offset.top > 100, \"more than 100 from the top\");\n    test.ok(results.offset.left > 40, \"more than 40 from the left\");\n});\n```\n\nDevelopment\n===========\n\nPlease report bugs and make any contributions to [the BitBucket repo](http://bitbucket.org/michaelb/lovelock/).\n\nAnti-features\n-------------\n\n* Documentation needs work, until then check out `tests.js`\n\n* Unit tests don't cover full electron-spin up, only a mocked version of it\n\n"
}