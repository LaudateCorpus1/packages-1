{
  "name": "uupaa.speech.js",
  "version": "0.0.1",
  "description": "Speech Synthesis and Recognition.",
  "url": "https://github.com/uupaa/Speech.js",
  "keywords": [
    "speech",
    "synthesis",
    "recognition",
    "uupaa",
    "WebModule",
    "Unstable"
  ],
  "repository": {
    "user": "uupaa",
    "repo": "Speech.js",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/uupaa/Speech.js/tarball/master",
    "clone_url": "https://github.com/uupaa/Speech.js",
    "https_url": "https://github.com/uupaa/Speech.js",
    "travis_url": "https://travis-ci.org/uupaa/Speech.js",
    "zip_url": "https://github.com/uupaa/Speech.js/archive/master.zip",
    "api_url": "https://api.github.com/repos/uupaa/Speech.js"
  },
  "scripts": {
    "sync": "node ../WebModule/run/sync.js; npm update; node ../WebModule/run/page.js",
    "wiki": "node ../WebModule/run/wiki.js",
    "min": "node ../WebModule/run/minify.js --verbose --strict --keep --pretty",
    "build": "node ../WebModule/run/minify.js --verbose --strict --keep --release",
    "watch": "node ../WebModule/run/watch.js --verbose --run lint",
    "page": "node ../WebModule/run/page.js --verbose",
    "test": "npm run min; npm run node; npm run browser",
    "node": "NODE_ENV=production NODE_PATH=lib node test/node/index.js",
    "noded": "NODE_ENV=production NODE_PATH=lib node --debug-brk test/node/index.js",
    "browser": "open http://localhost:8000/Speech.js/test/browser/index.html",
    "el": "electron test/el",
    "nw": "nw test/nw",
    "add-src": "node ../WebModule/run/add-src.js",
    "add-subclass": "node ../WebModule/run/add-subclass.js",
    "sim": "node ../WebModule/run/sim.js http://localhost:8000/Speech.js/test/browser/index.html",
    "simx": "node ../WebModule/run/sim.js stop",
    "lint": "eslint lib/*.js",
    "score": "node ../WebModule/run/score.js; open lint/plato/index.html",
    "patch": "node ../WebModule/run/patch.js",
    "setup": "node ../WebModule/run/setup.js",
    "start": "cd ../; Python -m SimpleHTTPServer 8000 &",
    "stop": "killall -- Python -m SimpleHTTPServer 8000; exit 0"
  },
  "webmodule": {
    "develop": false,
    "label": [
      "@dev"
    ],
    "browser": {
      "output": "release/Speech.b.min.js",
      "source": [
        "lib/Speech.js"
      ]
    },
    "nw": {
      "output": "release/Speech.nw.min.js",
      "source": [
        "lib/Speech.js"
      ]
    },
    "el": {
      "output": "release/Speech.el.min.js",
      "source": [
        "lib/Speech.js"
      ]
    }
  },
  "dependencies": {},
  "devDependencies": {},
  "lib": "./lib/",
  "main": "./index.js",
  "author": {
    "name": "uupaa"
  },
  "license": "MIT",
  "contributors": [],
  "gitHead": "31efeeb70aa33e9794f5b561ea35b2d24f863600",
  "homepage": "https://github.com/uupaa/Speech.js#readme",
  "_npmVersion": "3.3.12",
  "_nodeVersion": "5.3.0",
  "dist": {
    "shasum": "81e6ec335e2a7a6f70e45f69d51542c85a92d9fe",
    "tarball": "http://registry.npmjs.org/uupaa.speech.js/-/uupaa.speech.js-0.0.1.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-01-14T06:16:45.785Z"
    }
  ],
  "created": "2016-01-14T06:16:45.785Z",
  "modified": "2016-01-14T06:16:45.785Z",
  "lastPublisher": {
    "name": "uupaa",
    "email": "uupaa.js@gmail.com"
  },
  "owners": [
    {
      "name": "uupaa",
      "email": "uupaa.js@gmail.com"
    }
  ],
  "readme": "# Speech.js [![Build Status](https://travis-ci.org/uupaa/Speech.js.svg)](https://travis-ci.org/uupaa/Speech.js)\n\n[![npm](https://nodei.co/npm/uupaa.speech.js.svg?downloads=true&stars=true)](https://nodei.co/npm/uupaa.speech.js/)\n\nSpeech Synthesis and Recognition.\n\nThis module made of [WebModule](https://github.com/uupaa/WebModule).\n\n## Documentation\n- [Spec](https://github.com/uupaa/Speech.js/wiki/)\n- [API Spec](https://github.com/uupaa/Speech.js/wiki/Speech)\n\n## Browser, NW.js and Electron\n\n```js\n<script src=\"<module-dir>/lib/WebModule.js\"></script>\n<script src=\"<module-dir>/lib/Speech.js\"></script>\n<script>\n\nvar speech = new Speech().load({ name: /Kyoko/i, lang: /ja/i });\nvar recognizer = new Speech().createRecognizer();\nvar voiceCommandMap = {\n    \"clear\":    _clearBuffer,\n    \"stop\":     _stopRecognition,\n    \"クリア\":   _clearBuffer,\n    \"ストップ\": _stopRecognition,\n    \"終了\":     _stopRecognition,\n    \"しゅうりょう\": _stopRecognition,\n};\n\nfunction _startRecognition() {\n    console.info(\"start\");\n    if (speech.ready) { speech.say(\"お話しください\"); }\n\n    recognizer.start(function(event) {\n        switch (event.type) {\n        case \"result\":\n            if (this.ended) {\n                console.log(\"ok: \", this.result.join(\",\"));\n                _processVoiceCommand(this.result[this.result.length - 1].trim(), voiceCommandMap);\n                alert(this.result.join(\",\"));\n            } else {\n                console.log(\"...\", this.buffer.join(\",\"));\n            }\n            break;\n        }\n    });\n}\n\nfunction _processVoiceCommand(command, voiceCommandMap) {\n    for (var keyword in voiceCommandMap) {\n        if (keyword === command) {\n            var fn = voiceCommandMap[keyword];\n            if (fn) {\n                fn();\n            }\n        }\n    }\n}\nfunction _stopRecognition() {\n    if (speech.ready) { speech.say(\"音声認識を終了しました\"); }\n    recognizer.stop();\n    console.info(\"stopped\");\n}\nfunction _clearBuffer() {\n    if (speech.ready) { speech.say(\"バッファをクリアしました\"); }\n    recognizer.clear();\n    console.info(\"buffer cleared\");\n}\n\n</script>\n```\n\n"
}