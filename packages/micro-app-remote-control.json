{
  "name": "micro-app-remote-control",
  "version": "0.9.0",
  "description": "Remote control in node",
  "main": "lib/server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node lib/server.js"
  },
  "dependencies": {
    "micro-app-framework": "^0.1.1",
    "socket.io": "~1.3.7",
    "mqtt": "~1.6.3"
  },
  "repository": {
    "user": "mhdawson",
    "repo": "micro-app-remote-control",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mhdawson/micro-app-remote-control/tarball/master",
    "clone_url": "https://github.com/mhdawson/micro-app-remote-control",
    "https_url": "https://github.com/mhdawson/micro-app-remote-control",
    "travis_url": "https://travis-ci.org/mhdawson/micro-app-remote-control",
    "zip_url": "https://github.com/mhdawson/micro-app-remote-control/archive/master.zip",
    "api_url": "https://api.github.com/repos/mhdawson/micro-app-remote-control"
  },
  "keywords": [
    "iot",
    "mqtt",
    "dashboard",
    "micro-app",
    "sensor",
    "remote",
    "remote control"
  ],
  "author": {
    "name": "Michael Dawson"
  },
  "license": "MIT",
  "homepage": "https://github.com/mhdawson/micro-app-remote-control#readme",
  "contributors": [
    {
      "name": "Michael Dawson",
      "email": "mdawson@devrus.com"
    }
  ],
  "gitHead": "bc2bf8b471ddfed4aefb5eb65794410764669294",
  "_npmVersion": "2.14.12",
  "_nodeVersion": "4.3.2",
  "dist": {
    "shasum": "4955f6fbe8290dfa0d0d8518fb5af963bb4173fd",
    "tarball": "http://registry.npmjs.org/micro-app-remote-control/-/micro-app-remote-control-0.9.0.tgz"
  },
  "versions": [
    {
      "number": "0.9.0",
      "date": "2016-04-10T17:22:29.654Z"
    }
  ],
  "created": "2016-04-10T17:22:29.654Z",
  "modified": "2016-04-10T17:22:29.654Z",
  "lastPublisher": {
    "name": "mhdawson1",
    "email": "mdawson@devrus.com"
  },
  "owners": [
    {
      "name": "mhdawson1",
      "email": "mdawson@devrus.com"
    }
  ],
  "readme": "# micro-app-remote-control - mqtt based remote control\n\nThis remote control provides a remote control GUI that\ncan be used to control devices that can be signaled through\nmqtt.  This can be be used with X10 based devices, 433Mhz\ndevices as well as IR controlled devices through\nthe [micro-app-mqtt-x10-bridge]\n(https://github.com/mhdawson/micro-app-mqtt-x10-bridge),\n[arduino-sensors/ACRemote/]\n(https://github.com/mhdawson/arduino-sensors/tree/master/ACRemote),\nand [PI433WirelessTXManager]\n(https://github.com/mhdawson/PI433WirelessTXManager)\nprojects. It can also be used with any other device\nwhich an be controlled through mqtt.\n\nThe buttons on the remote control are fully customizable\nin terms of location, size, color and what mqtt topic/message\nis invoked when the button is pressed.\n\nThe remote can be realized as a browser window by simply\npointing a browser at the appropriate server/port or as\na native\ndesktop application or native mobile app using the\n[micro-app-electron-launcher]\n(https://github.com/mhdawson/micro-app-electron-launcher), or\n[micro-app-cordova-launcher]\n(https://github.com/mhdawson/micro-app-cordova-launcher) \nprojects.\n\nThese are examples of my initial remote as a browser\nwindow and native android application:\n\n![remote control browser]\n(https://raw.githubusercontent.com/mhdawson/micro-app-remote-control/master/pictures/browser-remote.jpg)\n\n![remote control phone]\n(https://raw.githubusercontent.com/mhdawson/micro-app-remote-control/master/pictures/phone-remote.jpg)\n\nRight now I've configured it to allow me to turn on/off lights\nin our living room and dining room, turn off all lights at once\nand to turn on/off the split air conditioner in our bedroom.\n\n# Usage\n\nAfter installation modify ../lib/config.json to match your configuration.\n\nThe configuration entries that must be updated include:\n\n* title - title for the remote (optional)\n* mqttServerUrl - url of the mqtt server to connect to.  This can either start\n  with tcp:// or mqtts://. If it starts with mqtts://  there must be a subdirectory\n  in the lib directory called mqttclient which contains ca.cert, client.cert,\n  client.key which contain the key and associated certificates for a client\n  which is authorized to connect to the mqtt server.\n* serverPort - port on which the dashboard listens for connections\n* size - object with x and y fields that define the size used for the remote window\n* buttons - array in which each entry defines a button on the remote.  Each entry\n  is an object with the following values:\n  * label - text to be shown on the button\n  * size - object with x and y fields for the sizes of the button\n  * position - object with x and y fields for the position of the button\n  * color - color for the button\n  * commands - array of objects which define the message(s) to be sent when the\n  button is pressed.  Each object has the following values:\n    * topic - topic on which message wil be sent when button is pressed\n    * message -  message sent on topic when button is pressed\n    * delay - delay after the button is pressed when the message is sent.  \n    Often when a button invokes multiple actions you will need to have a delay\n    in order to avoid conflicts (for example sending X10 messages to close together\n    can mess things up).\n\nAs a micro-app the dashboard also supports other options like authentication and\ntls for the connection to the GUI.  See the documentation for the [micro-app-framework]\n(https://github.com/mhdawson/micro-app-framework) for additional details.\n\nThe following is an example configuration file:\n\n<PRE>\n{\n  \"title\": \"Remote Control\",\n  \"size\": {\"x\": 252, \"y\": 264},\n  \"serverPort\": 3000,\n  \"mqttServerUrl\": \"tcp://10.1.1.186:1883\",\n  \"buttons\": [ { \"label\": \"LR ON\", \"size\": {\"x\": 60, \"y\": 60}, \"position\": {\"x\":  126, \"y\": 2}, \"color\": \"green\", \"commands\": [ {\"topic\": \"house/x10\" , \"message\": \"A,1,1\" }] },\n               { \"label\": \"LR OFF\", \"size\": {\"x\": 60, \"y\": 60}, \"position\": {\"x\":  188, \"y\": 2}, \"color\": \"green\", \"commands\": [ {\"topic\": \"house/x10\" , \"message\": \"A,1,0\" }] },\n               { \"label\": \"LL ON\", \"size\": {\"x\": 60, \"y\": 60}, \"position\": {\"x\":  2, \"y\": 2}, \"color\": \"green\", \"commands\": [ {\"topic\": \"house/x10\" , \"message\": \"A,2,1\" }] },\n               { \"label\": \"LL OFF\", \"size\": {\"x\": 60, \"y\": 60}, \"position\": {\"x\":  64, \"y\": 2}, \"color\": \"green\", \"commands\": [ {\"topic\": \"house/x10\" , \"message\": \"A,2,0\" }] },\n               { \"label\": \"D ON\", \"size\": {\"x\": 60, \"y\": 60}, \"position\": {\"x\": 2, \"y\": 64}, \"color\": \"green\", \"commands\": [ {\"topic\": \"house/x10\" , \"message\": \"A,5,1\" }] },\n               { \"label\": \"D OFF\", \"size\": {\"x\": 60, \"y\": 60}, \"position\": {\"x\": 64, \"y\": 64}, \"color\": \"green\", \"commands\": [ {\"topic\": \"house/x10\" , \"message\": \"A,5,0\" }] },\n               { \"label\": \"ALL OFF\", \"size\": {\"x\": 246, \"y\": 60}, \"position\": {\"x\": 2, \"y\": 126}, \"color\": \"red\",  \"commands\": [ { \"delay\": 0, \"topic\": \"house/x10\" , \"message\": \"A,5,0\" },\n                                                                                                                                 { \"delay\": 1000, \"topic\": \"house/x10\" , \"message\": \"A,1,0\" },\n                                                                                                                                 { \"delay\": 2000, \"topic\": \"house/x10\" , \"message\": \"A,2,0\" }] },\n               { \"label\": \"AC ON\", \"size\": {\"x\": 122, \"y\": 60}, \"position\": {\"x\": 2, \"y\": 202}, \"color\": \"green\", \"commands\": [ {\"topic\": \"home/2272\" , \"message\": \"0F0FFFFF0110\" }] },\n               { \"label\": \"AC OFF\", \"size\": {\"x\": 122, \"y\": 60}, \"position\": {\"x\": 126, \"y\": 202}, \"color\": \"green\", \"commands\": [ {\"topic\": \"home/2272\" , \"message\": \"0F0FFFFF0101\" }] }\n             ]\n}\n</PRE>\n\n# Installation\n\nSimply run:\n\n<PRE>\nnpm install micro-app-remote-control\n</PRE>\n\nand then configure as described in the section above. Alternatively you\ncan clone the github repo and then run \"npm install\" from the directory\nfor the project.\n\n# Running\n\nTo run the micro-app-remote-control app, add node.js to your path (currently requires 4.x or better) and\nthen run:\n\n<PRE>\nnpm start\n</PRE>\n\nfrom the directory in the micro-app-remote-control was installed.\n\nOnce the server is started. Point your browser at the host/port for the server.\nIf you have configured your browser to allow javascript to close the current page\nthe original window will be closed and one with the correct size of the\nalert-dashboard app page will be created.\n\n# Key Depdencies\n\n## micro-app-framework\nAs a micro-app the micro-app-remote-control app depends on the micro-app-framework:\n\n* [micro-app-framework npm](https://www.npmjs.com/package/micro-app-framework)\n* [micro-app-framework github](https://github.com/mhdawson/micro-app-framework)\n\nSee the documentation on the micro-app-framework for more information on general\nconfigurtion options that are availble (ex using tls, authentication, serverPort, etc)\n"
}