{
  "name": "chillout",
  "version": "3.1.2",
  "description": "Reduce CPU usage in JavaScript",
  "main": "dist/chillout.js",
  "dependencies": {},
  "devDependencies": {
    "babel-preset-es2015": "^6.9.0",
    "babelify": "^7.3.0",
    "bannerify": "^1.0.1",
    "browserify": "^13.0.1",
    "es6-shim": "^0.35.1",
    "karma": "^0.13.22",
    "karma-chrome-launcher": "^1.0.1",
    "karma-detect-browsers": "^2.1.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-ie-launcher": "^1.0.0",
    "karma-mocha": "^1.0.1",
    "karma-mocha-reporter": "^2.0.4",
    "karma-safari-launcher": "^1.0.0",
    "mocha": "^2.5.3",
    "pidusage": "^1.0.1",
    "power-assert": "^1.4.1",
    "uglify-js": "^2.6.2",
    "uglifyify": "^3.0.2",
    "watchify": "^3.7.0"
  },
  "scripts": {
    "compile": "browserify src/index.js -o dist/chillout.js -s chillout -t [ babelify --presets [ es2015 ] ] -p [ bannerify --file src/banner.js ] --no-bundle-external --bare",
    "watch": "watchify src/index.js -o dist/chillout.js -s chillout -t [ babelify --presets [ es2015 ] ] -p [ bannerify --file src/banner.js ] --no-bundle-external --bare --poll=200 -v",
    "minify": "uglifyjs dist/chillout.js -o dist/chillout.min.js --comments -c warnings=false -m -b ascii-only=true,beautify=false",
    "build": "npm run compile && npm run minify",
    "test": "npm run build && mocha test/test-node && karma start karma.conf.js",
    "travis": "npm run build && mocha test/test-node && karma start karma.conf.js --single-run",
    "benchmark": "node test/benchmark"
  },
  "repository": {
    "user": "polygonplanet",
    "repo": "chillout",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/polygonplanet/chillout/tarball/master",
    "clone_url": "https://github.com/polygonplanet/chillout",
    "https_url": "https://github.com/polygonplanet/chillout",
    "travis_url": "https://travis-ci.org/polygonplanet/chillout",
    "zip_url": "https://github.com/polygonplanet/chillout/archive/master.zip",
    "api_url": "https://api.github.com/repos/polygonplanet/chillout"
  },
  "keywords": [
    "cpu",
    "async",
    "iterate",
    "iterator",
    "promise",
    "setimmediate"
  ],
  "author": {
    "name": "polygon planet",
    "email": "polygon.planet.aqua@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/polygonplanet/chillout",
  "_npmVersion": "3.9.5",
  "_nodeVersion": "6.2.1",
  "dist": {
    "shasum": "55239810354e37caa2f3f8ecc4a16d3d1812901e",
    "tarball": "http://registry.npmjs.org/chillout/-/chillout-3.1.2.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-01-06T01:30:39.190Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-01-06T10:08:13.834Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-01-15T04:36:39.205Z"
    },
    {
      "number": "1.1.2",
      "date": "2016-01-25T12:30:09.196Z"
    },
    {
      "number": "1.1.3",
      "date": "2016-01-29T08:27:13.367Z"
    },
    {
      "number": "1.1.4",
      "date": "2016-02-08T14:27:24.151Z"
    },
    {
      "number": "1.1.5",
      "date": "2016-02-11T15:35:54.735Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-03-11T17:25:04.577Z"
    },
    {
      "number": "2.0.2",
      "date": "2016-03-11T17:49:37.550Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-04-30T15:03:17.690Z"
    },
    {
      "number": "3.1.1",
      "date": "2016-06-07T13:03:28.194Z"
    },
    {
      "number": "3.1.2",
      "date": "2016-06-19T05:14:14.505Z"
    }
  ],
  "created": "2016-01-06T01:30:39.190Z",
  "modified": "2016-06-19T05:14:14.505Z",
  "lastPublisher": {
    "name": "polygonplanet",
    "email": "polygon.planet.aqua@gmail.com"
  },
  "owners": [
    {
      "name": "polygonplanet",
      "email": "polygon.planet.aqua@gmail.com"
    }
  ],
  "readme": "chillout.js\n===========\n\n[**README (日本語)**](README-ja.md)\n\nReduce JavaScript CPU usage by asynchronous iteration.\n\n[![Build Status](https://travis-ci.org/polygonplanet/chillout.svg?branch=master)](https://travis-ci.org/polygonplanet/chillout)\n\nProvides asynchronous iteration functions that have a **Promise based** interface and it can execute with low CPU usage.\nEach iteration adds delay if the processing is heavy to maintain the CPU stability.\nIterate without delay if processing is fast.\nTherefore, it will realize friendly processing for your machine.\nIt can execute JavaScript without \"Warning: Unresponsive Script\" alert in the browser.\n\nYou can use it in any JavaScript environment (Browser, Electron, Node.js).\n\n## Installation\n\nAvailable on `npm` as **chillout**.\n\n```bash\n$ npm install chillout --save\n```\n\nThis can also be installed with `Bower`.\n\n```bash\n$ bower install chillout\n```\n\n```javascript\nvar chillout = require('chillout');\nchillout.forEach(...)\n```\n\nObject **chillout** will be defined in the global scope if running in the browser window.\n\n\n## Compatibility\n\nThe limiting factor for browser/node support is the use of `Promise`.  \nYou can use [es6-shim](https://github.com/paulmillr/es6-shim) or other `Promise` polyfills.\n\n## Benchmarks\n\nBenchmarks the **ForStatement** and `chillout.repeat`.\n\n```javascript\nfunction heavyProcess() {\n  var v;\n  for (var i = 0; i < 5000; i++) {\n    for (var j = 0; j < 5000; j++) {\n      v = i * j;\n    }\n  }\n  return v;\n}\n```\n\n### ForStatement\n\n```javascript\nvar time = Date.now();\nfor (var i = 0; i < 1000; i++) {\n  heavyProcess();\n}\nvar processingTime = Date.now() - time;\nconsole.log(processingTime);\n```\n\n![CPU usage without chillout](https://raw.github.com/wiki/polygonplanet/chillout/images/benchmark-cpu-usage-without-chillout.png)\n\n* Processing time: 107510ms.\n* CPU usage on Node process (Average): **97.13%**\n\n### chillout.repeat\n\n\n```javascript\nvar time = Date.now();\nchillout.repeat(1000, function(i) {\n  heavyProcess();\n}).then(function() {\n  var processingTime = Date.now() - time;\n  console.log(processingTime);\n});\n```\n\n![CPU usage with chillout](https://raw.github.com/wiki/polygonplanet/chillout/images/benchmark-cpu-usage-using-chillout.png)\n\n* Processing time: 138432ms.\n* CPU usage on Node process (Average): **73.88%**\n\n\n### Benchmark Result\n\n![CPU usage with chillout](https://raw.github.com/wiki/polygonplanet/chillout/images/benchmark-cpu-usage-compare.png)\n\n| &nbsp;                               | ForStatement | chillout.repeat |\n| ------------------------------------ | ------------:| ---------------:|\n| Processing time                      |    107510ms. |       138432ms. |\n| CPU usage on Node process (Average)  |   **97.13%** |      **73.88%** |\n\n\nYou can confirm that `chillout.repeat` is running on a more low CPU usage than **ForStatement**.\n\nchillout.js can run JavaScript in a natural speed with low CPU usage, but processing speed will be a bit slow.\n\nOne of the most important thing of performance in JavaScript, that is not numeric speed, but is to execute without causing stress to the user experience.\n\n\n*(Benchmarks: Windows8.1 / Intel(R) Atom(TM) CPU Z3740 1.33GHz)*\n\n### Run Benchmark\n\nYou can test benchmark with `npm run benchmark`.\n\n----\n\n## Iteration Functions\n\n### forEach\n\nExecutes a provided function once per array or object element.  \nThe iteration will break if the callback function returns `false`, or an error occurs.\n\n* chillout.**forEach** ( obj, callback [, context ] )  \n  @param {_Array|Object_} _obj_ Target array or object.  \n  @param {_Function_} *callback* Function to execute for each element, taking three arguments:  \n  - value: The current element being processed in the array/object.\n  - key: The key of the current element being processed in the array/object.\n  - obj: The array/object that `forEach` is being applied to.\n\n  @param {_Object_} [_context_] Value to use as `this` when executing callback.  \n  @return {_Promise_} Return new Promise.\n\nExample of array iteration:\n```javascript\nvar sum = 0;\nchillout.forEach([1, 2, 3], function(value, i) {\n  sum += value;\n}).then(function() {\n  console.log(sum); // 6\n});\n```\n\nExample of object iteration:\n```javascript\nvar result = '';\nchillout.forEach({ a: 1, b: 2, c: 3 }, function(value, key) {\n  result += key + value;\n}).then(function() {\n  console.log(result); // 'a1b2c3'\n});\n```\n\n### repeat\n\nExecutes a provided function the specified number times.  \nThe iteration will break if the callback function returns `false`, or an error occurs.\n\n* chillout.**repeat** ( count, callback [, context ] )  \n  @param {_number|Object_} _count_ The number of times or object for execute the function.  \n  Following parameters are available if specify object:\n  - start: The number of start.\n  - step: The number of step.\n  - end: The number of end.\n\n  @param {_Function_} _callback_ Function to execute for each times, taking one argument:\n  - i: The current number.\n\n  @param {_Object_} [_context_] Value to use as `this` when executing callback.  \n  @return {_Promise_} Return new Promise.\n\nExample of specify number:\n\n```javascript\nchillout.repeat(5, function(i) {\n  console.log(i);\n}).then(function() {\n  console.log('end');\n});\n// 0\n// 1\n// 2\n// 3\n// 4\n// end\n```\n\nExample of specify object:\n\n```javascript\nchillout.repeat({ start: 10, step: 2, end: 20 }, function(i) {\n  console.log(i);\n}).then(function() {\n  console.log('end');\n});\n// 10\n// 12\n// 14\n// 16\n// 18\n// end\n```\n\n### till\n\nExecutes a provided function until the `callback` returns `false`, or an error occurs.\n\n* chillout.**till** ( callback [, context ] )  \n  @param {_Function_} _callback_ The function that is executed for each iteration.  \n  @param {_Object_} [_context_] Value to use as `this` when executing callback.  \n  @return {_Promise_} Return new Promise.\n\n```javascript\nvar i = 0;\nchillout.till(function() {\n  console.log(i);\n  i++;\n  if (i === 5) {\n    return false; // stop iteration\n  }\n}).then(function() {\n  console.log('end');\n});\n// 0\n// 1\n// 2\n// 3\n// 4\n// end\n```\n\n### forOf\n\nIterates the iterable objects, similar to the `for-of` statement.  \nExecutes a provided function once per element.  \nThe iteration will break if the callback function returns `false`, or an error occurs.\n\n* chillout.**forOf** ( iterable, callback [, context ] )  \n  @param {_Array|string|Object_} _iterable_ Target iterable objects.  \n  @param {_Function_} _callback_ Function to execute for each element, taking one argument:\n  - value: A value of a property on each iteration.\n\n  @param {_Object_} [_context_] Value to use as `this` when executing callback.  \n  @return {_Promise_} Return new Promise.\n\nExample of iterate array:\n\n```javascript\nchillout.forOf([1, 2, 3], function(value) {\n  console.log(value);\n}).then(function() {\n  console.log('end');\n});\n// 1\n// 2\n// 3\n// end\n```\n\nExample of iterate string:\n\n```javascript\nchillout.forOf('abc', function(value) {\n  console.log(value);\n}).then(function() {\n  console.log('end');\n});\n// a\n// b\n// c\n// end\n```\n\n## Comparison Table\n\nYou can reduce the CPU load by changing your JavaScript iteration to the chillout iteration.\n\n\nExamples:\n\n| JavaScript Statement                 | chillout                                                                      |\n| -------------------------------------|-------------------------------------------------------------------------------|\n| [1, 2, 3].forEach(function(v, i) {}) | chillout.forEach([1, 2, 3], function(v, i) {})                                |\n| for (i = 0; i < 5; i++) {}           | chillout.repeat(5, function(i) {})                                            |\n| for (i = 10; i < 20; i += 2) {}      | chillout.repeat({ start: 10, step: 2, end: 20 }, function(i) {})              |\n| while (true) {}                      | chillout.till(function() {})                                                  |\n| while (cond()) {}                    | chillout.till(function() {<br>&nbsp;&nbsp;if (!cond()) return false;<br>})    |\n| for (value of [1, 2, 3]) {}          | chillout.forOf([1, 2, 3], function(value) {})                                 |\n\n## Contributing\n\nI'm waiting for your pull requests and issues.\nDon't forget to execute `npm test` before requesting.\nAccepted only requests without errors.\n\n\n## License\n\nMIT\n"
}