{
  "name": "electron-window-state",
  "version": "3.0.3",
  "description": "Simple module that helps to save and restore size and position of Electron windows.",
  "license": "MIT",
  "repository": {
    "user": "mawie81",
    "repo": "electron-window-state",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mawie81/electron-window-state/tarball/master",
    "clone_url": "https://github.com/mawie81/electron-window-state",
    "https_url": "https://github.com/mawie81/electron-window-state",
    "travis_url": "https://travis-ci.org/mawie81/electron-window-state",
    "zip_url": "https://github.com/mawie81/electron-window-state/archive/master.zip",
    "api_url": "https://api.github.com/repos/mawie81/electron-window-state"
  },
  "main": "index.js",
  "author": {
    "name": "Marcel Wiehle"
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "keywords": [
    "electron"
  ],
  "files": [
    "index.js"
  ],
  "dependencies": {
    "deep-equal": "^1.0.1",
    "jsonfile": "^2.2.3",
    "mkdirp": "^0.5.1",
    "object-assign": "^4.0.1"
  },
  "devDependencies": {
    "ava": "^0.7.0",
    "mockery": "^1.4.0",
    "sinon": "^1.17.2",
    "xo": "^0.11.2"
  },
  "xo": {
    "space": true,
    "rules": {
      "brace-style": [
        2,
        "1tbs",
        {
          "allowSingleLine": true
        }
      ]
    }
  },
  "gitHead": "a98cf0d68727690ffe9474ca21ec0c0b2a759243",
  "homepage": "https://github.com/mawie81/electron-window-state#readme",
  "_npmVersion": "3.6.0",
  "_nodeVersion": "5.7.0",
  "dist": {
    "shasum": "5d7887a0a50161e955a174ade6482ee360af7f8e",
    "tarball": "http://registry.npmjs.org/electron-window-state/-/electron-window-state-3.0.3.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-10-31T16:02:05.643Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-12-01T16:28:26.172Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-12-01T17:25:56.961Z"
    },
    {
      "number": "1.0.0",
      "date": "2015-12-02T07:16:23.475Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-12-03T18:50:29.933Z"
    },
    {
      "number": "2.0.0",
      "date": "2015-12-13T16:19:19.330Z"
    },
    {
      "number": "2.1.0",
      "date": "2016-04-28T15:21:08.977Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-05-11T15:07:26.560Z"
    },
    {
      "number": "3.0.1",
      "date": "2016-05-11T18:17:10.498Z"
    },
    {
      "number": "3.0.2",
      "date": "2016-05-11T18:24:53.560Z"
    },
    {
      "number": "3.0.3",
      "date": "2016-05-12T06:49:32.883Z"
    }
  ],
  "created": "2015-10-31T16:02:05.643Z",
  "modified": "2016-05-12T06:49:32.883Z",
  "lastPublisher": {
    "name": "mawie81",
    "email": "mawieh@googlemail.com"
  },
  "owners": [
    {
      "name": "mawie81",
      "email": "mawieh@googlemail.com"
    }
  ],
  "readme": "# electron-window-state [![Build Status](https://travis-ci.org/mawie81/electron-window-state.svg)](https://travis-ci.org/mawie81/electron-window-state)\n\n> A library to store and restore window sizes and positions for your\n[Electron](http://electron.atom.io) app\n\n*Heavily influenced by the implementation in [electron-boilerplate](https://github.com/szwacz/electron-boilerplate).*\n\n## Install\n\n```\n$ npm install --save electron-window-state\n```\n\n## Usage\n\n```js\nconst windowStateKeeper = require('electron-window-state');\nlet win;\n\napp.on('ready', function () {\n  // Load the previous state with fallback to defaults\n  let mainWindowState = windowStateKeeper({\n    defaultWidth: 1000,\n    defaultHeight: 800\n  });\n\n  // Create the window using the state information\n  win = new BrowserWindow({\n    'x': mainWindowState.x,\n    'y': mainWindowState.y,\n    'width': mainWindowState.width,\n    'height': mainWindowState.height\n  });\n\n  // Let us register listeners on the window, so we can update the state\n  // automatically (the listeners will be removed when the window is closed)\n  // and restore the maximized or full screen state\n  mainWindowState.manage(win);\n});\n```\n\n## API\n\n#### windowStateKeeper(opts)\n\nNote: Don't call this function before the `ready` event is fired.\n\n##### opts\n\n`defaultWidth` - *Number*\n\n  The width that should be returned if no file exists yet. Defaults to `800`.\n\n`defaultHeight` - *Number*\n\n  The height that should be returned if no file exists yet. Defaults to `600`.\n\n`path` - *String*\n\n  The path where the state file should be written to. Defaults to\n  `app.getPath('userData')`\n\n`file` - *String*\n\n  The name of file. Defaults to `window-state.json`\n\n`maximize` - *Boolean*\n\n  Should we automatically maximize the window, if it was last closed\n  maximized. Defaults to `true`\n\n`fullScreen` - *Boolean*\n\n  Should we automatically restore the window to full screen, if it was last\n  closed full screen. Defaults to `true`\n\n### state object\n\n```js\nconst windowState = windowStateKeeper({\n  defaultWidth: 1000,\n  defaultHeight: 800\n});\n```\n\n`x` - *Number*\n\n  The saved `x` coordinate of the loaded state. `undefined` if the state has not\n  been saved yet.\n\n`y` - *Number*\n\n  The saved `y` coordinate of the loaded state. `undefined` if the state has not\n  been saved yet.\n\n`width` - *Number*\n\n  The saved `width` of loaded state. `defaultWidth` if the state has not been\n  saved yet.\n\n`height` - *Number*\n\n  The saved `heigth` of loaded state. `defaultHeight` if the state has not been\n  saved yet.\n\n`isMaximized` - *Boolean*\n\n  `true` if the window state was saved while the the window was maximized.\n  `undefined` if the state has not been saved yet.\n\n`isFullScreen` - *Boolean*\n\n  `true` if the window state was saved while the the window was in full screen\n  mode. `undefined` if the state has not been saved yet.\n\n`manage(window)` - *Function*\n\n  Register listeners on the given `BrowserWindow` for events that are\n  related to size or position changes (`resize`, `move`). It will also restore\n  the window's maximized or full screen state.\n  When the window is closed we automatically remove the listeners and save the\n  state.\n\n`unmanage` - *Function*\n\n  Removes all listeners of the managed `BrowserWindow` in case it does not\n  need to be managed anymore.\n\n`saveState(window)` - *Function*\n\n  Saves the current state of the given `BrowserWindow`. This exists mostly for\n  legacy purposes, and in most cases it's better to just use `manage`.\n\n## License\n\nMIT Â© [Marcel Wiehle](http://marcel.wiehle.me)\n"
}