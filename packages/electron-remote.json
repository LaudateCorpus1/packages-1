{
  "name": "electron-remote",
  "version": "1.0.3",
  "description": "Execute JavaScript in remote Electron processes, but more betterer",
  "scripts": {
    "doc": "esdoc -c ./esdoc.json",
    "compile": "git clean -xdf ./lib && babel -d lib/ src/ && cp ./src/*.html ./lib/",
    "prepublish": "npm run compile",
    "test-renderer": "electron-mocha --renderer --require ./test/support.js ./test",
    "test-browser": "electron-mocha --require ./test/support.js ./test/renderer-require",
    "test": "npm run test-renderer && npm run test-browser",
    "node": "cross-env ELECTRON_RUN_AS_NODE=1 ./node_modules/electron-prebuilt-compile/node_modules/.bin/electron"
  },
  "repository": {
    "user": "paulcbetts",
    "repo": "electron-remote",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/paulcbetts/electron-remote/tarball/master",
    "clone_url": "https://github.com/paulcbetts/electron-remote",
    "https_url": "https://github.com/paulcbetts/electron-remote",
    "travis_url": "https://travis-ci.org/paulcbetts/electron-remote",
    "zip_url": "https://github.com/paulcbetts/electron-remote/archive/master.zip",
    "api_url": "https://api.github.com/repos/paulcbetts/electron-remote"
  },
  "keywords": [
    "remote",
    "electron",
    "rx"
  ],
  "author": {
    "name": "Paul Betts",
    "email": "paul@paulbetts.org"
  },
  "license": "MIT",
  "main": "lib/index.js",
  "homepage": "https://github.com/paulcbetts/electron-remote",
  "dependencies": {
    "debug": "^2.2.0",
    "debug-electron": "0.0.1",
    "node-uuid": "^1.4.7",
    "pify": "^2.3.0",
    "rxjs": "^5.0.0-beta.12",
    "xmlhttprequest": "^1.8.0"
  },
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-eslint": "^7.0.0",
    "babel-plugin-transform-async-to-generator": "^6.16.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2016-node5": "^1.1.2",
    "babel-register": "^6.16.3",
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "cross-env": "^3.0.0",
    "electron-mocha": "^3.1.1",
    "electron-prebuilt-compile": "1.4.1",
    "esdoc": "^0.4.8",
    "esdoc-es7-plugin": "0.0.3",
    "esdoc-plugin-async-to-sync": "^0.5.0",
    "eslint": "^3.7.1"
  },
  "gitHead": "3c9eea06a9fa9e593a339b74f10a635ef0841b1f",
  "_npmVersion": "3.10.8",
  "_nodeVersion": "6.6.0",
  "dist": {
    "shasum": "e54c3cf9cd5ed9977046a406fbb0f55e571a143f",
    "tarball": "http://registry.npmjs.org/electron-remote/-/electron-remote-1.0.3.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.5.0",
      "date": "2016-04-28T18:01:06.498Z"
    },
    {
      "number": "0.5.1",
      "date": "2016-05-02T22:31:08.817Z"
    },
    {
      "number": "0.5.2",
      "date": "2016-05-24T21:55:55.590Z"
    },
    {
      "number": "0.5.3",
      "date": "2016-05-24T23:06:24.764Z"
    },
    {
      "number": "0.5.4",
      "date": "2016-05-25T04:34:05.952Z"
    },
    {
      "number": "0.5.5",
      "date": "2016-06-03T23:53:22.849Z"
    },
    {
      "number": "0.5.6",
      "date": "2016-06-04T00:06:01.762Z"
    },
    {
      "number": "0.5.7",
      "date": "2016-07-28T22:13:31.602Z"
    },
    {
      "number": "0.5.8",
      "date": "2016-07-28T22:29:02.910Z"
    },
    {
      "number": "0.5.9",
      "date": "2016-07-28T23:57:07.022Z"
    },
    {
      "number": "0.5.10",
      "date": "2016-07-29T22:40:32.633Z"
    },
    {
      "number": "0.6.0",
      "date": "2016-08-10T00:46:41.873Z"
    },
    {
      "number": "0.6.1",
      "date": "2016-08-10T01:03:08.227Z"
    },
    {
      "number": "0.6.2",
      "date": "2016-08-15T23:14:32.005Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-10-04T00:04:19.503Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-10-04T00:14:48.808Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-10-04T19:36:20.942Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-10-04T20:00:16.456Z"
    }
  ],
  "created": "2016-04-28T18:01:06.498Z",
  "modified": "2016-10-04T20:00:16.456Z",
  "lastPublisher": {
    "name": "paulcbetts",
    "email": "paul@paulbetts.org"
  },
  "owners": [
    {
      "name": "paulcbetts",
      "email": "paul@paulbetts.org"
    }
  ],
  "readme": "# electron-remote: an asynchronous 'remote', and more\n\n![](https://img.shields.io/npm/dm/electron-remote.svg) <a href=\"http://paulcbetts.github.io/electron-remote/docs\">![](http://paulcbetts.github.io/electron-remote/docs/badge.svg)</a>\n\n\nelectron-remote provides an alternative to Electron's `remote` module based around Promises instead of synchronous execution. It also provides an automatic way to use BrowserWindows as \"background processes\" that auto-scales based on usage, similar to Grand Central Dispatch or the .NET TPL Taskpool.\n\n## The Quickest of Quick Starts\n\n###### Calling code in other windows\n\n```js\nimport { createProxyForRemote } from 'electron-remote';\n\n// myWindowJs is now a proxy object for myWindow's `window` global object\nconst myWindowJs = createProxyForRemote(myWindow);\n\n// Functions suffixed with _get will read a value\nuserAgent = await myWindowJs.navigator.userAgent_get()\n```\n\n###### Renderer Taskpool\n\n```js\nimport { requireTaskPool } from 'electron-remote';\n\nconst myCoolModule = requireTaskPool(require.resolve('./my-cool-module'));\n\n// This method will run synchronously, but in a background BrowserWindow process\n// so that your app will not block\nlet result = await myCoolModule.calculateDigitsOfPi(100000);\n```\n\n## But I like Remote!\n\nRemote is super convenient! But it also has some downsides - its main downside is that its action is **synchronous**. This means that both the main and window processes will _wait_ for a method to finish running. Even for quick methods, calling it too often can introduce scroll jank and generally cause performance problems. \n\nelectron-remote is a version of remote that, while less ergonomic, guarantees that it won't block the calling thread.\n\n## Using createProxyForRemote\n\n`createProxyForRemote` is a replacement for places where you would use Electron's `executeJavaScript` method on BrowserWindow or WebView instances - however, it works a little differently. Using a new feature in ES2015 called [proxy objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy), we create an object which represents the `window` object on a remote context, and all method calls get sent as messages to that remote instead of being run immediately, which feels very similar to the `remote` Electron module.\n\nThis provides a number of very important advantages:\n\n* `createProxyForRemote` uses asynchronous IPC instead of blocking\n* Parameters are serialized directly, so you don't have to try to build strings that can be `eval`d, which is a dangerous endeavor at best.\n* Calling methods on objects is far more convenient than trying to poke at things via a remote eval.\n\n#### How do I get properties if everything is a Promise tho???\n\nAstute observers will note, that getting the value of a property is always a synchronous operation - to facilitate that, any method with `_get()` appended to it will let you fetch the value for the property.\n\n```js\nimport { createProxyForRemote } from 'electron-remote';\n\n// myWindowJs is now a proxy object for myWindow's `window` global object\nconst myWindowJs = createProxyForRemote(myWindow);\n\n// Functions suffixed with _get will read a value\nmyWindowJs.navigator.userAgent_get()\n  .then((agent) => console.log(`The user agent is ${agent}`));\n```\n\n#### But do this first!\n\nBefore you use `createProxyForRemote`, you **must** call `initializeEvalHandler()` in the target window on startup. This sets up the listeners that electron-remote will use.\n\n#### Bringing it all together\n\n```js\n// In my window's main.js\ninitializeEvalHandler();\nwindow.addNumbers = (a,b) => a + b;\n\n\n// In my main process\nlet myWindowProxy = createProxyForRemote(myWindow);\nmyWindowProxy.addNumbers(5, 5)\n  .then((x) => console.log(x));\n  \n>>> 10\n```\n\n## Here Be Dragons\n\nelectron-remote has a number of significant caveats versus the remote module that you should definitely be aware of:\n\n* Remote values must be Serializable\n\nObjects that you return to the calling process must be serializable (i.e. you can call `JSON.stringify` on it and get a valid thing)- this means that creating Classes won't work, nor will return objects like BrowserWindows or other Electron objects. For example:\n\n```js\nlet myWindowProxy = createProxyForRemote(myWindow);\n\n// XXX: BAD - HTML elements aren't serializable\nlet obj = myWindowProxy.document.createElement('h1');\n```\n\n* Remote event listeners aren't supported\n\nAnything that involves an event handler isn't going to work:\n\n```js\n// XXX: BAD - You can't add event handlers\nmyWindowProxy.document.addEventListener('onBlur', (e) => console.log(\"Blur!\"));\n```\n\n## The Renderer Taskpool\n\nRenderer Taskpools provide an automatic way to use BrowserWindows as \"background processes\" that auto-scales based on usage, similar to Grand Central Dispatch or the .NET TPL Taskpool. This works by allowing you to provide a Module that you'd like to load in the remote processes, which will be loaded and unloaded on the fly according to demand.\n\nLet's look at the example again:\n\n```js\nimport { requireTaskPool } from 'electron-remote';\n\nconst myCoolModule = requireTaskPool(require.resolve('./my-cool-module'));\n\n// This method will run synchronously, but in a background BrowserWindow process\n// so that your app will not block\nlet result = await myCoolModule.calculateDigitsOfPi(100000);\n```\n\nBy default, `requireTaskPool` will create up to four background processes to concurrently run JS code on. As these processes become busy, requests will be queued to different processes and wait in line implicitly.\n\n##### More Dragons\n\nSince `requireTaskPool` will create and destroy processes as needed, this means that global variables or other state will be destroyed as well. You can't rely on setting a global variable and having it persist for a period of time longer than one method call.\n\n## The remote-ajax module\n\nOne module that is super useful to have from the main process is a way to make network requests using Chromium's networking stack, which correctly does things such as respecting the system proxy settings. To this end, electron-remote comes with a convenient wrapper around Rx-DOM's AJAX methods called `remote-ajax`.\n\n```js\nimport { requireTaskPool } from 'electron-remote';\n\nconst remoteAjax = requireTaskPool(require.resolve('electron-remote/remote-ajax'));\n\n// Result is the object that XmlHttpRequest gives you\nlet result = await remoteAjax.get('https://httpbin.org/get');\nconsole.log(result.url)\n\n>>> 'https://httpbin.org/get'\n```\n\nSee the documentation for [Rx-DOM](https://github.com/Reactive-Extensions/RxJS-DOM/blob/master/modules/main-ajax/readme.md) for how these methods work.\n\nAnother method that is included is `downloadFileOrUrl`, which lets you download a file to a target:\n\n```js\n/**\n * Downloads a path as either a file path or a HTTP URL to a specific place\n *\n * @param  {string} pathOrUrl   Either an HTTP URL or a file path.\n * @return {string}             The contents as a UTF-8 decoded string.\n */\nfunction downloadFileOrUrl(pathOrUrl, target)\n```\n"
}