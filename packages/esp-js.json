{
  "name": "esp-js",
  "version": "1.1.5",
  "description": "Evented State Processor (ESP) adds specific processing workflow around changes to a model's state",
  "keywords": [
    "state processor",
    "evented state processor",
    "reactive",
    "rx",
    "event loop",
    "complex state processor",
    "router",
    "event router"
  ],
  "scripts": {
    "start": "npm run test",
    "test": "karma start",
    "test:ci": "karma start --single-run",
    "build": "npm run build:dev && npm run build:prod",
    "build:dev": "webpack --config webpack.dev.config.js",
    "build:prod": "webpack -p --config webpack.prod.config.js"
  },
  "main": "dist/esp.js",
  "author": {
    "name": "Dev Shop Limited"
  },
  "license": "Apache-2.0",
  "repository": {
    "user": "esp",
    "repo": "esp-js",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/esp/esp-js/tarball/master",
    "clone_url": "https://github.com/esp/esp-js",
    "https_url": "https://github.com/esp/esp-js",
    "travis_url": "https://travis-ci.org/esp/esp-js",
    "zip_url": "https://github.com/esp/esp-js/archive/master.zip",
    "api_url": "https://api.github.com/repos/esp/esp-js"
  },
  "typings": "./esp.d.ts",
  "devDependencies": {
    "babel-core": "^6.4.5",
    "babel-loader": "^6.2.1",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-plugin-transform-flow-strip-types": "^6.5.0",
    "babel-plugin-transform-runtime": "^6.4.3",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "copy-webpack-plugin": "^1.1.1",
    "eslint": "^1.10.3",
    "eslint-loader": "^1.2.1",
    "inject-loader": "^2.0.1",
    "jasmine-core": "^2.3.4",
    "karma": "^0.13.19",
    "karma-chrome-launcher": "^0.2.2",
    "karma-jasmine": "^0.3.7",
    "karma-spec-reporter": "0.0.23",
    "karma-webpack": "^1.7.0",
    "source-map-loader": "^0.1.5",
    "webpack": "^1.12.12",
    "webpack-dev-server": "^1.14.1"
  },
  "gitHead": "f4b712018c1ec33e94c8ca79ddf54acac26da9cd",
  "homepage": "https://github.com/esp/esp-js#readme",
  "_npmVersion": "3.10.2",
  "_nodeVersion": "5.12.0",
  "dist": {
    "shasum": "60dda65fef8d7a49ebea473dbce605f4254821fc",
    "tarball": "http://registry.npmjs.org/esp-js/-/esp-js-1.1.5.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-03-13T22:38:17.238Z"
    },
    {
      "number": "0.0.1",
      "date": "2015-03-13T22:40:26.894Z"
    },
    {
      "number": "0.0.3",
      "date": "2015-06-13T10:31:50.086Z"
    },
    {
      "number": "0.0.4",
      "date": "2015-06-13T17:05:18.174Z"
    },
    {
      "number": "0.0.5",
      "date": "2015-06-18T18:42:32.754Z"
    },
    {
      "number": "0.0.6",
      "date": "2015-06-18T21:35:11.943Z"
    },
    {
      "number": "0.0.7",
      "date": "2015-06-20T10:30:54.583Z"
    },
    {
      "number": "0.0.8",
      "date": "2015-06-20T12:01:20.181Z"
    },
    {
      "number": "0.0.9",
      "date": "2015-06-28T12:10:45.742Z"
    },
    {
      "number": "0.0.10",
      "date": "2015-07-16T16:01:53.969Z"
    },
    {
      "number": "0.0.11",
      "date": "2015-07-18T02:17:21.433Z"
    },
    {
      "number": "0.0.12",
      "date": "2015-09-30T17:59:23.187Z"
    },
    {
      "number": "0.0.13",
      "date": "2015-10-03T10:15:54.312Z"
    },
    {
      "number": "0.0.14",
      "date": "2015-10-04T17:18:00.710Z"
    },
    {
      "number": "0.1.0",
      "date": "2015-10-04T18:05:41.252Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-10-04T18:37:05.256Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-10-06T21:31:49.718Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-10-06T21:40:40.897Z"
    },
    {
      "number": "0.2.2",
      "date": "2015-10-06T21:46:27.733Z"
    },
    {
      "number": "0.2.3",
      "date": "2015-10-07T09:45:51.333Z"
    },
    {
      "number": "0.2.4",
      "date": "2015-10-07T10:57:41.221Z"
    },
    {
      "number": "0.2.5",
      "date": "2015-10-07T21:41:29.655Z"
    },
    {
      "number": "0.2.6",
      "date": "2015-10-07T21:42:17.357Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-10-08T07:10:20.477Z"
    },
    {
      "number": "0.3.1",
      "date": "2015-10-08T17:30:57.653Z"
    },
    {
      "number": "0.3.2",
      "date": "2015-10-08T20:23:16.747Z"
    },
    {
      "number": "0.4.0",
      "date": "2015-10-16T21:11:05.891Z"
    },
    {
      "number": "0.5.0",
      "date": "2015-10-26T08:58:36.332Z"
    },
    {
      "number": "0.5.1",
      "date": "2015-10-26T20:49:16.094Z"
    },
    {
      "number": "0.5.2",
      "date": "2015-12-06T14:05:35.979Z"
    },
    {
      "number": "0.5.3",
      "date": "2015-12-18T09:34:14.307Z"
    },
    {
      "number": "0.5.4",
      "date": "2016-01-10T18:55:20.294Z"
    },
    {
      "number": "0.5.5",
      "date": "2016-01-10T20:23:11.048Z"
    },
    {
      "number": "0.5.6",
      "date": "2016-01-16T20:37:41.541Z"
    },
    {
      "number": "0.5.7",
      "date": "2016-02-04T23:30:09.484Z"
    },
    {
      "number": "0.5.7-beta",
      "date": "2016-02-04T23:33:56.316Z"
    },
    {
      "number": "0.5.8-beta",
      "date": "2016-02-04T23:37:25.049Z"
    },
    {
      "number": "0.5.9-beta",
      "date": "2016-02-04T23:40:29.533Z"
    },
    {
      "number": "0.5.10",
      "date": "2016-02-05T10:33:30.776Z"
    },
    {
      "number": "0.5.11",
      "date": "2016-02-05T15:33:05.465Z"
    },
    {
      "number": "0.5.12",
      "date": "2016-02-05T19:08:17.282Z"
    },
    {
      "number": "0.5.13",
      "date": "2016-02-05T19:26:13.673Z"
    },
    {
      "number": "0.5.14",
      "date": "2016-02-06T10:23:21.437Z"
    },
    {
      "number": "0.5.15",
      "date": "2016-02-09T12:01:06.639Z"
    },
    {
      "number": "0.5.16",
      "date": "2016-02-20T17:03:26.464Z"
    },
    {
      "number": "0.6.0",
      "date": "2016-02-20T17:58:23.599Z"
    },
    {
      "number": "0.6.1",
      "date": "2016-02-24T13:56:00.228Z"
    },
    {
      "number": "0.7.0",
      "date": "2016-03-01T16:18:46.113Z"
    },
    {
      "number": "0.7.1",
      "date": "2016-03-05T14:32:46.146Z"
    },
    {
      "number": "0.7.2",
      "date": "2016-03-15T16:53:10.250Z"
    },
    {
      "number": "0.7.3",
      "date": "2016-04-06T11:59:07.648Z"
    },
    {
      "number": "0.7.4",
      "date": "2016-04-12T16:59:06.040Z"
    },
    {
      "number": "0.7.5",
      "date": "2016-04-14T15:08:31.697Z"
    },
    {
      "number": "0.7.6",
      "date": "2016-04-19T15:44:22.874Z"
    },
    {
      "number": "0.7.7",
      "date": "2016-05-08T20:26:02.262Z"
    },
    {
      "number": "0.7.8",
      "date": "2016-05-10T15:48:01.722Z"
    },
    {
      "number": "0.7.9",
      "date": "2016-05-12T08:03:23.824Z"
    },
    {
      "number": "0.7.10",
      "date": "2016-05-12T08:25:05.131Z"
    },
    {
      "number": "0.7.11",
      "date": "2016-05-13T11:58:55.352Z"
    },
    {
      "number": "0.7.12",
      "date": "2016-05-14T19:10:36.170Z"
    },
    {
      "number": "0.8.0",
      "date": "2016-07-06T20:09:25.590Z"
    },
    {
      "number": "0.8.1",
      "date": "2016-07-07T12:16:20.406Z"
    },
    {
      "number": "0.8.2",
      "date": "2016-07-07T21:57:36.273Z"
    },
    {
      "number": "0.8.3",
      "date": "2016-07-08T21:20:27.516Z"
    },
    {
      "number": "0.8.4",
      "date": "2016-08-10T08:47:28.756Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-08-17T06:36:27.381Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-08-18T14:00:51.002Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-08-18T14:14:35.846Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-08-23T14:10:03.939Z"
    },
    {
      "number": "1.1.1",
      "date": "2016-08-24T22:53:35.109Z"
    },
    {
      "number": "1.1.2",
      "date": "2016-08-30T08:06:42.698Z"
    },
    {
      "number": "1.1.3",
      "date": "2016-09-16T16:52:28.081Z"
    },
    {
      "number": "1.1.4",
      "date": "2016-09-29T22:04:20.963Z"
    },
    {
      "number": "1.1.5",
      "date": "2016-10-12T10:05:22.448Z"
    }
  ],
  "created": "2015-03-13T22:38:17.238Z",
  "modified": "2016-10-12T10:05:22.448Z",
  "lastPublisher": {
    "name": "sonic78",
    "email": "keithwoods@live.com"
  },
  "owners": [
    {
      "name": "sonic78",
      "email": "keithwoods@live.com"
    }
  ],
  "readme": "[![Build Status](https://travis-ci.org/esp/esp-js.svg?branch=master)](https://travis-ci.org/esp/esp-js)\r\n[![npm](https://img.shields.io/npm/v/esp-js.svg)](https://www.npmjs.com/package/esp-js)\r\n[![Join the chat at https://gitter.im/esp/chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/esp/chat?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n**[Installation](#installation)** |\r\n**[Examples](#examples)** |\r\n**[ESP Talk](#esp-at-the-react-london-meetup-group)** |\r\n**[Basic Usage](#basic-usage)** |\r\n**[Help Topics](#help-topics)** \r\n\r\n# Evented State Processor (ESP)\r\n\r\nESP gives you the ability to manage changes to a model in a deterministic event driven manner.\r\nIt does this by adding specific processing workflow around changes to a model's state. \r\nIt was born out of the need to manage complex UI and/or server state.\r\n\r\nAt its core is a `Router` which sits between event publishers and the model.\r\nThose wanting to change the model publish events to the `Router`.\r\nThe model observes the events and applies the changes.\r\nThe model is then dispatched to model observers so new state can be applied.\r\nIt's lightweight, easy to apply and puts the model at the forefront of your design.\r\n\r\nGet the source from [github](https://github.com/esp/esp-js) and the packages from [npm](https://www.npmjs.com/package/esp-js).\r\n\r\n# Installation\r\nInstall from npm: `npm install esp-js --save`.\r\n\r\nIf you're using ES6 with a package manager such as [webpack](https://webpack.github.io) you can import `esp` like this:\r\n\r\n```javascript\r\nimport esp from 'esp-js';\r\nvar router = new esp.Router();\r\n```\r\n\r\nAlternatively you can reference `dist\\esp.js` or `dist\\esp.min.js` via a `script` tag. These files expose `esp` using the Universal Module Definition (UMD) format. \r\n\r\nIf you're using TypeScript [esp.d.ts](esp.d.ts) is referenced via the `typings` property in [package.json](package.json) so the TS compiler can discover it.\r\n\r\n# Examples\r\n\r\nYou can find several [examples](./examples) with the source.\r\nIt's suggested you take a look at the [agile board](./examples/esp-js-react-agile-board) to get started (don't forget to read the [docs](#help-topics) first). \r\n\r\n## ESP Agile board\r\n\r\n[This example](./examples/esp-js-react-agile-board/README.md) demonstrates a simple agile planning board.\r\nIt uses both [esp-js](https://www.npmjs.com/package/esp-js) and [esp-js-react](https://www.npmjs.com/package/esp-js-react) to build a unidirectional, model first application.\r\n\r\n![ESP Agile board Example](./docs/images/esp-agile-demo.gif)\r\n\r\n## Reactive Trader Cloud\r\n\r\n[Reactive Trader Cloud](https://github.com/AdaptiveConsulting/ReactiveTraderCloud) is a more elaborate and comprehensive reference implementation done by [Adaptive Financial](http://weareadaptive.com/). \r\nThe GUI state is modeled using [esp-js](https://www.npmjs.com/package/esp-js) with dynamic view resolution done using [esp-js-react](https://www.npmjs.com/package/esp-js-react).\r\n\r\n![ESP Agile board Example](./docs/images/esp-rt-electron.gif)\r\n\r\n# ESP at the React London Meetup group\r\nWatch [this](https://youtu.be/Pj-RakjfHDI?t=5m33s) 25min talk on using ESP with React at the [React London meetup](https://meetup.react.london/).\r\nSlides for the talk are available [here](http://goo.gl/40jie4).\r\n\r\n[![React London Talk](./docs/images/esp-talk-thumb.png)](https://youtu.be/Pj-RakjfHDI?t=5m33s \"ESP React London Meetup Talk\")\r\n\r\n# Basic Usage\r\n\r\nRun the below example on codepen: http://codepen.io/KeithWoods/pen/yJWLQk?editors=1012\r\n\r\nCreate an ES6 style model\r\n\r\n```js\r\nclass LoginModel {\r\n  constructor(modelId, router) {\r\n    this._modelId = modelId;\r\n    this._router = router;\r\n    this.username = 'anonymous';\r\n  }\r\n  // observe events using decorators \r\n  @esp.observeEvent('setUsername')\r\n  _onSetUsername(event) {\r\n    this.username = event.username;\r\n  }\r\n  registerWithRouter() {\r\n    // register the model with the router\r\n    this._router.addModel(this._modelId, this);\r\n    // instruct the router to hook up decorated event observation methods \r\n    this._router.observeEventsOn(this._modelId, this);      \r\n  }\r\n}\r\n```\r\n\r\nCreate an app wide router.\r\n\r\n```js\r\nlet router = new esp.Router();  \r\n```\r\n\r\n\r\nAll models are identified by an ID so let's create one.\r\n\r\n```js\r\nlet loginModelId = 'loginModelId';\r\n```\r\n\r\n\r\nCreate an instance of your model.\r\n\r\n```js\r\nlet loginModel = new LoginModel(loginModelId, router); \r\n// instruct it to register itself with the router\r\nloginModel.registerWithRouter();\r\n```\r\n\r\nObserve the model for changes, typically done in a view.\r\n\r\n```js\r\nlet subscription = router\r\n  .getModelObservable(loginModelId)\r\n  // the router has a built-in observable API with basic methods, where(), do(), map(), take() \r\n  .do(model =>  { /* gets invoked on each update */ })\r\n  .subscribe(model => {\r\n      console.log(`Updating view. Username is: ${model.username}`);\r\n      // ... update the view \r\n    }\r\n  );\r\n```\r\n\r\n\r\nPublish an event to change the models state, typically done from a view.\r\nThe router will fan-out delivery of the event to observers in your model using an [event workflow](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/complete-event-workflow.html).\r\nWhen event processing is finished the router will fan-out deliver of the model to observers.\r\n\r\n```js\r\nrouter.publishEvent(loginModelId, 'setUsername', {username:'ben'});\r\n```\r\n\r\nStop observing the model\r\n```js\r\nsubscription.dispose();      \r\n```\r\n\r\nOutput\r\n\r\n```\r\n\"Updating view. Username is: anonymous\"\r\n\"Updating view. Username is: ben\"\r\n```\r\n\r\n# Help Topics\r\n\r\n[Documentation Home](https://www.gitbook.com/book/keithwoods/esp-js/details)\r\n\r\n* [Getting Started](https://keithwoods.gitbooks.io/esp-js/content/getting-started/)\r\n  * [Overview](https://keithwoods.gitbooks.io/esp-js/content/getting-started/overview.html)\r\n  * [Installation](https://keithwoods.gitbooks.io/esp-js/content/getting-started/installation.html)\r\n* [Router Api](https://keithwoods.gitbooks.io/esp-js/content/router-api/)\r\n  * [Creating a Router](https://keithwoods.gitbooks.io/esp-js/content/router-api/creating-a-router.html)\r\n  * [Registering a model](https://keithwoods.gitbooks.io/esp-js/content/router-api/registering-a-model.html)\r\n  * [Event Pub/Sub](https://keithwoods.gitbooks.io/esp-js/content/router-api/event-pub-sub.html)\r\n  * [Model Observation](https://keithwoods.gitbooks.io/esp-js/content/router-api/model-observation.html)\r\n  * [Dispatch Loop](https://keithwoods.gitbooks.io/esp-js/content/router-api/dispatch-loop.html)\r\n* [Modelling Approaches](https://keithwoods.gitbooks.io/esp-js/content/modelling-approaches/)\r\n  * [Domain model](https://keithwoods.gitbooks.io/esp-js/content/modelling-approaches/domain-model.html)\r\n  * [Event Processor Domain Model](https://keithwoods.gitbooks.io/esp-js/content/modelling-approaches/event-processor-domain-model.html)\r\n  * [Reactive Domain Model](https://keithwoods.gitbooks.io/esp-js/content/modelling-approaches/reactive-domain-model.html)\r\n* [Using ESP with React](https://keithwoods.gitbooks.io/esp-js/content/esp-js-react/index.html)\r\n* [Advanced Concepts](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/)\r\n  * [Complete Event Workflow](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/complete-event-workflow.html)\r\n  * [Asynchronous Operations](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/asynchronous-operations.html)\r\n  * [Automatic Event Observation](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/auto-event-observation.html)\r\n  * [Model To Model Communications](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/model-to-model-communications.html)\r\n  * [Error Flows](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/error-flows.html)\r\n  * [Bypassing the event queue](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/bypassing-the-event-queue.html)\r\n  * [Anti-Patterns](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/anti-patterns.html)\r\n  * [Reactive API](https://keithwoods.gitbooks.io/esp-js/content/advanced-concepts/reactive-api.html)\r\n* [Examples](https://keithwoods.gitbooks.io/esp-js/content/examples/index.html)\r\n* [Getting Help](https://keithwoods.gitbooks.io/esp-js/content/getting-help/index.html)\r\n* [Contribute](https://keithwoods.gitbooks.io/esp-js/content/contribute/index.html)\r\n* [Licence](https://keithwoods.gitbooks.io/esp-js/content/licence/index.html)"
}