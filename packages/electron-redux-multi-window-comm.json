{
  "name": "electron-redux-multi-window-comm",
  "version": "1.1.0",
  "description": "Simplify communication between multiple Electron windows",
  "main": "lib/index.js",
  "files": [
    "lib",
    "selectors.js",
    "actions.js",
    "constants.js"
  ],
  "scripts": {
    "clean": "rimraf lib dist",
    "test": "cross-env NODE_ENV=test mocha",
    "test:select": "cross-env NODE_ENV=test mocha test/selectTestsOnly.js",
    "test:watch": "cross-env NODE_ENV=test mocha --watch",
    "build:dev": "cross-env NODE_ENV=development babel -d lib/ src/",
    "build": "cross-env NODE_ENV=production babel -d lib/ src/"
  },
  "dependencies": {
    "immutable": "^3.7.6",
    "immutablediff": "^0.4.2",
    "immutablepatch": "^0.2.2",
    "lodash": "^4.6.0",
    "reduce-reducers": "^0.1.1"
  },
  "peerDependencies": {
    "redux-saga": "^0.10.0 || ^0.9.5"
  },
  "devDependencies": {
    "app-module-path": "^1.0.5",
    "babel": "^6.5.0",
    "babel-cli": "^6.6.5",
    "babel-core": "^6.7.0",
    "babel-loader": "^6.2.0",
    "babel-plugin-check-es2015-constants": "^6.7.0",
    "babel-plugin-syntax-flow": "^6.3.13",
    "babel-plugin-transform-flow-strip-types": "^6.7.0",
    "babel-plugin-transform-remove-console": "^6.5.0",
    "babel-plugin-typecheck": "^3.8.0",
    "babel-preset-node5": "^10.9.0",
    "babel-register": "^6.7.0",
    "cross-env": "^1.0.7",
    "expect": "^1.15.0",
    "mocha": "^2.4.5",
    "rimraf": "^2.5.1"
  },
  "author": {
    "name": "Michal Bure≈°"
  },
  "homepage": "https://github.com/MichalBures/electron-redux-multi-window-comm",
  "license": "MIT",
  "repository": {
    "user": "MichalBures",
    "repo": "electron-redux-multi-window-comm",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/MichalBures/electron-redux-multi-window-comm/tarball/master",
    "clone_url": "https://github.com/MichalBures/electron-redux-multi-window-comm",
    "https_url": "https://github.com/MichalBures/electron-redux-multi-window-comm",
    "travis_url": "https://travis-ci.org/MichalBures/electron-redux-multi-window-comm",
    "zip_url": "https://github.com/MichalBures/electron-redux-multi-window-comm/archive/master.zip",
    "api_url": "https://api.github.com/repos/MichalBures/electron-redux-multi-window-comm"
  },
  "gitHead": "546cd2d62e34e0be206fcb52f7db5d650a55006f",
  "_npmVersion": "3.8.7",
  "_nodeVersion": "5.11.0",
  "dist": {
    "shasum": "7b2fbb51e27c1bbfe809d826bc4259ed09798f1a",
    "tarball": "http://registry.npmjs.org/electron-redux-multi-window-comm/-/electron-redux-multi-window-comm-1.1.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-04-14T17:28:40.349Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-04-25T17:22:38.436Z"
    }
  ],
  "created": "2016-04-14T17:28:40.349Z",
  "modified": "2016-04-25T17:22:38.436Z",
  "lastPublisher": {
    "name": "michalbures",
    "email": "hello@bures.io"
  },
  "owners": [
    {
      "name": "michalbures",
      "email": "hello@bures.io"
    }
  ],
  "readme": "# electron-redux-multi-window-comm\r\n\r\nThe aim of this library is to simplify communication between multiple [Electron](https://github.com/electron/electron) windows.\r\n\r\n**Important:** At the moment you have to keep you reducer state in [Immutable.js](https://github.com/facebook/immutable-js \"Immutable.js\") and use `combineReducers` from `redux` for the top reducers in order for this library to work.\r\n\r\n\r\n## Getting Started\r\n\r\n### Installation\r\n\r\n`npm install electron-redux-multi-window-comm --save`\r\n\r\n### Usage\r\n\r\n`electron-redux-multi-window-comm` is built on top of   [redux-saga](https://github.com/yelouafi/redux-saga), [redux](https://github.com/reactjs/redux) and [Immutable.js](https://github.com/facebook/immutable-js \"Immutable.js\")\r\n\r\n**Important:** The `ElectronReduxCommEnhancer` has to be the first argument of `compose`.\r\n\r\n**`redux-saga` up to 0.9.x**\r\n```javascript\r\nimport {\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tcombineReducers,\r\n\tcompose,\r\n} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport {\r\n\tElectronReduxCommSaga,\r\n\tElectronReduxCommReducer,\r\n\tElectronReduxCommEnhancer\r\n} from 'electron-redux-multi-window-comm';\r\n\r\nimport AppReducer from 'path/to/reducer'\r\n\r\nconst store = createStore(\r\n\tcombineReducers({\r\n\t\t\t'ElectronReduxComm': ElectronReduxCommReducer,\r\n\t\t\t'App': AppReducer,\r\n\t\t\t// ...\r\n\t\t}\r\n\t),\r\n\tcompose(\r\n\t\tElectronReduxCommEnhancer({\r\n\t\t\twindowName: 'MyWindow',\r\n\t\t\tsubscribeTo: [\r\n\t\t\t\t{\r\n\t\t\t\t\twindowName: 'MyOtherWindow',\r\n\t\t\t\t\tstateFilter: {\r\n\t\t\t\t\t\tApp: {\r\n\t\t\t\t\t\t\tclickCounter: true,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tactionTypes: [\r\n\t\t\t\t\t\t'ACTION_1',\r\n\t\t\t\t\t\t'ACTION_2',\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}),\r\n\t\tapplyMiddleware(createSagaMiddleware(ElectronReduxCommSaga/*, ...*/)),\r\n\t\t// DevTools.instrument()\r\n\t)\r\n);\r\n```\r\n\r\n**`redux-saga` since 0.10.x**\r\n\r\n```javascript\r\nimport {\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tcombineReducers,\r\n\tcompose,\r\n} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport {\r\n\tElectronReduxCommSaga,\r\n\tElectronReduxCommReducer,\r\n\tElectronReduxCommEnhancer\r\n} from 'electron-redux-multi-window-comm';\r\n\r\nimport AppReducer from 'path/to/reducer'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = createStore(\r\n\tcombineReducers({\r\n\t\t\t'ElectronReduxComm': ElectronReduxCommReducer,\r\n\t\t\t'App': AppReducer,\r\n\t\t\t// ...\r\n\t\t}\r\n\t),\r\n\tcompose(\r\n\t\tElectronReduxCommEnhancer({\r\n\t\t\twindowName: 'MyWindow',\r\n\t\t\tsubscribeTo: [\r\n\t\t\t\t{\r\n\t\t\t\t\twindowName: 'MyOtherWindow',\r\n\t\t\t\t\tstateFilter: {\r\n\t\t\t\t\t\tApp: {\r\n\t\t\t\t\t\t\tclickCounter: true,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tactionTypes: [\r\n\t\t\t\t\t\t'ACTION_1',\r\n\t\t\t\t\t\t'ACTION_2',\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}),\r\n\t\tapplyMiddleware(sagaMiddleware)),\r\n\t\t// DevTools.instrument()\r\n\t)\r\n);\r\n\r\nsagaMiddleware.run(ElectronReduxCommSaga)\r\n```\r\n\r\n### Test app\r\n\r\nYou can see `electron-redux-multi-window-comm` in action in the [test app](https://github.com/MichalBures/electron-redux-multi-window-comm-test-app), which demonstrates simple use of this library.\r\n\r\n### Debugger\r\n\r\nThere is also a simple [debugger](https://github.com/MichalBures/electron-redux-multi-window-comm-debugger), that shows current window subscribers and subscriptions and also several last sent and received **Global Actions**.\r\n\r\n## Global Action\r\n\r\n**Global Action** solves the problem when you need to tell something to another window. There is no need to setup ipc channels or perhaps a websocket connection by yourself. Instead dispatch a **Global Action** the same way as any other action and it will be sent to the desired window.\r\n\r\n**Global Action** is a higher-order action that wraps another action and is then sent to its target window.\r\n\r\n\r\nHere we see an example of dispatching an acton `AN_ACTION` to a `targetWindow`.\r\n\r\n```javascript\r\nimport {makeGlobalAction} from 'electron-redux-multi-window-comm/actions';\r\n\r\nstore.dispatch(makeGlobalAction({type: 'AN_ACTION'}, 'targetWindow'))\r\n```\r\n\r\n*`store.dispatch` here can also be `this.props.dispatch` in connected component or any other way you use to dispatch actions to redux*\r\n\r\n\r\n\r\n## Action Subscription\r\n\r\n**Action Subscription** solves the problem when you have for example a button that dispatches an action on click and you want that action to be both dispatched locally and also sent to another window. Instead of editing the click handler and adding a dispatch of a **Global Action** you use **Action Subscription**.\r\n\r\nOr perhaps you want to know how many times a todo item was added in another window. With **Action Subscription** you do not need to change any code in the todo window, instead you simply subscribe to `ADD_TODO` action and that's it.\r\n\r\nBy subscribing to actions from another window you will receive them all whenever they are dispatched in the target window. \r\n\r\n*Action Subscriptions are also stored locally so if you subscribe to actions from window that't doesn't exist yet it will receive the subscription after its creation.*\r\n\r\n### Subscription via enhancer options\r\n\r\n```javascript\r\nsubscribeTo: [\r\n  {\r\n    windowName: 'targetWindow',\r\n    actionTypes: ['ACTION_TYPE_1', 'ACTION_TYPE_2'],\r\n  }\r\n]\r\n```\r\n\r\n\r\n### Dynamic subscription\r\n\r\n```javascript\r\nimport {\r\n  subscribeToWindowActions,\r\n  unsubscribeFromWindowActions,\r\n} from 'electron-redux-multi-window-comm/actions';\r\n\r\nstore.dispatch(subscribeToWindowActions('targetWindow', ['ACTION_TYPE_1', 'ACTION_TYPE_2']))\r\n\r\n// Now you're subscribed to ACTION_TYPE_1 and ACTION_TYPE_2\r\n\r\n// Notice the **true**\r\nstore.dispatch(subscribeToWindowActions('targetWindow', ['ACTION_TYPE_3'], true))\r\n\r\n// Now you're subscribed to ACTION_TYPE_1, ACTION_TYPE_2 and ACTION_TYPE_3\r\n\r\n// Notice the absence of **true**\r\nstore.dispatch(subscribeToWindowActions('targetWindow', ['ACTION_TYPE_4']))\r\n\r\n// Now you're subscribed to ACTION_TYPE_4\r\n\r\nstore.dispatch(unsubscribeFromWindowActions('targetWindow'))\r\n\r\n// Now you're NOT subscribed to any actions\r\n\r\n```\r\n\r\n\r\n## State Subscription \r\n\r\n**State Subscription** solve the problem when you want some part of another window's state, but you don't want to manage receiving all the relevant actions and you also don't want to duplicate all the needed reducers.\r\n\r\nBy using **State Subscription** you declare what parts of state of another window you want and you will get it. And also whenever that state changes it will be updated locally, too.\r\n\r\n### Subscription via enhancer options\r\n\r\n```javascript\r\nsubscribeTo: [\r\n  {\r\n    windowName: 'targetWindow',\r\n    stateFilter: {\r\n      App: {\r\n        clickCount: true\r\n      }\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n### Dynamic subscription\r\n\r\n\r\n```javascript\r\nimport {\r\n  subscribeToWindowState,\r\n  unsubscribeFromWindowState,\r\n} from 'electron-redux-multi-window-comm/actions';\r\n\r\nlet filter = {\r\n  App: {\r\n    clickCount: true\r\n  }\r\n}\r\n\r\nstore.dispatch(subscribeToWindowState('targetWindow', filter))\r\nstore.dispatch(unsubscribeFromWindowState('targetWindow'))\r\n```\r\n\r\n## Enhancer\r\n\r\n* **windowName** *(required)* - Name of the current window\r\n* **reducerName** *(optional)* - Name used for the lib's reducer in combineReducers *(default is ElectronReduxComm)*\r\n* **subscribeTo** *(optional)* - Array of subscriptions\r\n* **debug**\r\n\t* **enabled** *(optional)* - Enables storing last x Global Actions, so they can be displayed for example by Debugger \r\n\t* **numOfActionsToStore** *(optional)* - Number of Global Actions to store\r\n\r\n\r\n\r\n**Important:** The `ElectronReduxCommEnhancer` has to be the first argument of `compose`.\r\n\r\n```javascript\r\ncompose(\r\n\tElectronReduxCommEnhancer({\r\n\t\twindowName: 'ourWindow',\r\n\t\tdebug: {\r\n\t\t\tenabled: true,\r\n\t\t\tnumOfActionsToStore: 20,\r\n\t\t},\r\n\t\tsubscribeTo: [\r\n\t\t\t{\r\n\t\t\t\twindowName : 'anotherWindow',\r\n\t\t\t\tstateFilter: {\r\n\t\t\t\t\t\r\n\t\t\t\t\tApp: {\r\n\t\t\t\t\t\tclickCounter: true\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tactionTypes: ['ACTION1', 'ACTION2']\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twindowName : 'yetAnotherWindow',\r\n\t\t\t\tactionTypes: ['ACTION3']\r\n\t\t\t}\r\n\t\t]\r\n\t}),\r\n    applyMiddleware(createSagaMiddleware(...RootSaga), thunk),\r\n)\r\n```\r\n\r\n## State Filter\r\n\r\n**Important:** Try the [live playground](https://michalbures.github.io/electron-redux-multi-window-comm/) which also contains several state filter examples.\r\n\r\nState filters can be quite complex, if you have need for more advanced filtering options check the tests folder until there is a better documentation here.\r\n\r\n### Take whole subtree *(true)*\r\n\r\n[Live example](https://michalbures.github.io/?example=Simple)\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    counters: {\r\n      clickCounter: true\r\n    }\r\n  }\r\n}\r\n```\r\n*You can use `false` to don't include that key (same as not writing it down in the first place)*\r\n\r\nWhether `clickCounter` contains a number, array or object, it will be copied to the filtered state:\r\n\r\n```javascript\r\nApp: {\r\n  counters: {\r\n    clickCounter: 8, // [8, 5] or {count: 5} or anything else\r\n  }\r\n}\r\n```\r\n\r\n### Edit key path *(string)*\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combineReducers\r\n  App: {\r\n    counters: {\r\n      clickCounter: 'myOtherWindowClickCounter'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nEdit path is similar to using `true` so that it takes the whole subtree, but the resulting object will have the path modified.\r\n\r\n\r\n```javascript\r\nApp: {\r\n  counters: {\r\n    myOtherWindowClickCounter: 8, // [8, 5] or {count: 5} or anything else\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n### Select keys *(array)*\r\n\r\n**Important:** Keep in mind that js coerces object properties to string, but Immutable.js doesn't. See [Immutable.js readme](https://github.com/facebook/immutable-js#accepts-raw-javascript-objects) or [this issue](https://github.com/facebook/immutable-js/issues/443)\r\n\r\n[Live example](https://michalbures.github.io/?example=SelectKeysSimple)\r\n\r\nImagine this as the state of the `App` reducer:\r\n\r\n```javascript\r\nApp: {\r\n  result: [1, 2],\r\n  selectedArticle: 1,\r\n  entities: {\r\n    articles: {\r\n      1: {\r\n        id: 1,\r\n        title: 'Some Article',\r\n        author: 1\r\n      },\r\n      2: {\r\n        id: 2,\r\n        title: 'Other Article',\r\n        author: 2\r\n      }\r\n    },\r\n    users: {\r\n      1: {\r\n        id: 1,\r\n        name: 'Dan'\r\n      },\r\n      2: {\r\n        id: 2,\r\n        name: 'Frank'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n*This is based on [normalizr](https://github.com/gaearon/normalizr) example*\r\n\r\n#### Example 1\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    entities: {\r\n      articles: ['result']\r\n    }\r\n  }\r\n}\r\n```\r\n*The path is always relative to the reducer, so you don't have to write ['App', 'result']. But otherwise you have to specify the whole path ['entities', 'articles']*\r\n\r\nThis will get all the keys from `articles` that are present in `result` array\r\n\r\n```javascript\r\nApp: {\r\n  entities: {\r\n    articles: {\r\n      1: {\r\n        id: 1,\r\n        title: 'Some Article',\r\n        author: 1\r\n      },\r\n      2: {\r\n        id: 2,\r\n        title: 'Other Article',\r\n        author: 1\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n#### Example 2\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    entities: {\r\n      articles: ['selectedArticle']\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis will get only the `selectedArticle` with key 1.\r\n\r\n```javascript\r\n{\r\n  entities: {\r\n    articles: {\r\n      1: {\r\n        id: 1,\r\n        title: 'Some Article',\r\n        author: 1\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Example 3\r\n\r\nYou can also nest the selectors. Here we are getting the author id from the selected article.\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    entities: {\r\n      users: ['entities', 'articles', ['selectedArticle'], 'author']\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis will first get the `selectedArticle` id and then use it to get the article's author id and finally the user with that id.\r\n\r\n```javascript\r\nApp: {\r\n  entities: {\r\n    users: {\r\n      1: {\r\n        id: 1,\r\n        name: 'Dan'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Example 4\r\n\r\nGet only the first article and its user\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    entities: {\r\n      articles: ['result', 0],\r\n      users: ['entities', 'articles', ['result', 0], 'author']\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis will first get the `selectedArticle` id and then use it to get the article's author id and finally the user with that id.\r\n\r\n```javascript\r\nApp: {\r\n  entities: {\r\n    articles: {\r\n      1: {\r\n        id: 1,\r\n        title: 'Some Article',\r\n        author: 1\r\n      }\r\n    },\r\n    users: {\r\n      1: {\r\n        id: 1,\r\n        name: 'Dan'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Example 5\r\n\r\nOr get only the first two articles and its users\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    entities: {\r\n      articles: ['result', [0, 2]],\r\n      users: ['entities', 'articles', ['result', [0, 2]], 'author']\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHere we are using the same syntax to slice the `result` array as in `sliceList` property of filter object.\r\n\r\n```javascript\r\nApp: {\r\n  entities: {\r\n    articles: {\r\n      1: {\r\n        id: 1,\r\n        title: 'Some Article',\r\n        author: 1\r\n      },\r\n      2: {\r\n        id: 2,\r\n        title: 'Other Article',\r\n        author: 2\r\n      }\r\n    },\r\n    users: {\r\n      1: {\r\n        id: 1,\r\n        name: 'Dan'\r\n      },\r\n      2: {\r\n        id: 2,\r\n        name: 'Frank'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Filter object\r\n\r\nIn situations when you need to use multiple operations sucha as select keys and edit path, you need to use filter object\r\n\r\n```javascript\r\nimport {\r\n\tSHAPE_FILTER_KEY\r\n} from 'electron-redux-multi-window-comm/constants';\r\n\r\n{\r\n  [SHAPE_FILTER_KEY] : true,\r\n  editPath  : 'newName',\r\n  sliceList:  [0, 1]\r\n  selectRoot: ['root', 'path'],\r\n  selectKeys: ['path', 'to', 'list', 'or', 'key'],\r\n  filterByValue: {\r\n    key: ['path', 'to', 'value'],\r\n  },\r\n  filterKeys: ['key1', 'key2'],\r\n}\r\n```\r\n*Setting `[SHAPE_FILTER_KEY]` to false will discard the whole subtree*\r\n\r\nThe order of these operations is the same as in the example above:\r\n\r\n1. editPath\r\n2. selectKeys\r\n3. filterByValue\r\n4. filterKeys\r\n\r\nThat for example means that `filterKeys` runs only on the keys selected by `selectKeys`.\r\n\r\n### Select Root *(filter object)* (used with selectKeys)\r\n\r\n[Live example](https://michalbures.github.io/?example=SelectRoot)\r\n\r\nSince `selectKeys` needs the full path it can become tedious to write repeatedly for nested selectors.\r\n\r\nSay your articles reducer is deeply nested\r\n\r\n```javascript\r\nApp: {\r\n  nested1: {\r\n    nested2: {\r\n      result: [1, 2],\r\n      selectedArticle: 1,\r\n      entities: {\r\n        articles: {\r\n          1: {\r\n            id: 1,\r\n            title: 'Some Article',\r\n            author: 1\r\n          },\r\n          2: {\r\n            id: 2,\r\n            title: 'Other Article',\r\n            author: 2\r\n          }\r\n        },\r\n        users: {\r\n          1: {\r\n            id: 1,\r\n            name: 'Dan'\r\n          },\r\n          2: {\r\n            id: 2,\r\n            name: 'Frank'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNow the full path is long and repeated twice\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    nested1: {\r\n      nested2: {\r\n        entities: {\r\n          users: ['nested1', 'nested2', 'entities', 'articles', ['nested1', 'nested2', 'selectedArticle'], 'author']\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWe can simplify it by using `selectRoot`\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    nested1: {\r\n      nested2: {\r\n        entities: {\r\n          users: {\r\n            [SHAPE_FILTER_KEY]: true,\r\n            selectRoot: ['nested1', 'nested2'],\r\n            selectKeys: ['entities', 'articles', ['selectedArticle'], 'author']\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe `selectRoot` is now prepended to every nested selector.\r\n\r\n### Filter by value *(filter object)*\r\n\r\n[Live example](https://michalbures.github.io/?example=FilterByValue)\r\n\r\nFilters map or list based on given values that are in the form of selectors same as in `selectKeys`.\r\n\r\nYou can have multiple selectors on an object and all of the selectors have to match in order for the object to not be filtered out.\r\n\r\n```javascript\r\nApp: {\r\n  result: [1, 2],\r\n  selectedArticle: 1,\r\n  selectedUser: 2,\r\n  entities: {\r\n    articles: {\r\n      1: {\r\n        id: 1,\r\n        title: 'Some Article',\r\n        author: 1\r\n      },\r\n      2: {\r\n        id: 2,\r\n        title: 'Other Article',\r\n        author: 2\r\n      }\r\n    },\r\n      '3': {\r\n        id    : '3',\r\n        title : 'Yet Another Article',\r\n        author: '2'\r\n      },\r\n    users: {\r\n      1: {\r\n        id: 1,\r\n        name: 'Dan'\r\n      },\r\n      2: {\r\n        id: 2,\r\n        name: 'Frank'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n*This is based on [normalizr](https://github.com/gaearon/normalizr) example*\r\n\r\nHere we select only articles that have the same `author` as `selectedUser`\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    entities: {\r\n      articles: {\r\n        [SHAPE_FILTER_KEY] : true,\r\n        filterByValue: {\r\n          author: ['entities', 'users', ['selectedUser'], 'id'],\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nFirst the selector are evaulated, in this case it results to `author = 2`. Then we filter the object and test whether it has key `author` and if it equals `2`.\r\n\r\n```javascript\r\nApp: {\r\n  entities: {\r\n    articles: {\r\n      2: {\r\n        id: 2,\r\n        title: 'Other Article',\r\n        author: 2\r\n      }\r\n    },\r\n      '3': {\r\n        id    : '3',\r\n        title : 'Yet Another Article',\r\n        author: '2'\r\n      },\r\n}\r\n```\r\n\r\n### Filter keys *(filter object)*\r\n\r\n[Live example](https://michalbures.github.io/?example=FilterKeys)\r\n\r\nKeeps only selected properties of an object or an array of objects\r\n\r\n*Runs `.map()` on the object/array and `.filter()`s the given keys* \r\n\r\n\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    entities: {\r\n      users: {\r\n        [SHAPE_FILTER_KEY] : true,\r\n        filterKeys: ['title'],\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis will give us:\r\n\r\n```javascript\r\nApp: {\r\n  entities: {\r\n    articles: {\r\n      1: {\r\n        title: 'Some Article',\r\n      },\r\n      2: {\r\n        title: 'Other Article',\r\n      },\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nOr if the articles was an array of objects:\r\n\r\n```javascript\r\nApp: {\r\n  entities: {\r\n    articles: [\r\n      {\r\n        title: 'Some Article',\r\n      },\r\n      {\r\n        title: 'Other Article',\r\n      },\r\n    ]\r\n  }\r\n}\r\n```\r\n### Slice List *(filter object)*\r\n\r\n[Live example](https://michalbures.github.io/?example=SliceList)\r\n\r\nApplies `.slice()` on the list with given arguments.\r\n\r\nState:\r\n```javascript\r\nApp: {\r\n  list1: [1, 2, 3, 4, 5],\r\n  list2: [1, 2, 3, 4, 5],\r\n  list3: [1, 2, 3, 4, 5],\r\n}\r\n```\r\n\r\nFilter:\r\n```javascript\r\nconst stateFilter = {\r\n  // The top level key always selects the reducer from combinReducers\r\n  App: {\r\n    list1: {\r\n        [SHAPE_FILTER_KEY] : true,\r\n        sliceList: [1],\r\n    },\r\n    list2: {\r\n        [SHAPE_FILTER_KEY] : true,\r\n        sliceList: [-1],\r\n    },\r\n    list3: {\r\n        [SHAPE_FILTER_KEY] : true,\r\n        sliceList: [1, 4],\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nFiltered state:\r\n```javascript\r\nApp: {\r\n  list1: [2, 3, 4, 5],\r\n  list2: [5],\r\n  list3: [2, 3, 4],\r\n}\r\n```\r\n\r\n## License\r\n\r\nMIT"
}