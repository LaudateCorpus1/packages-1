{
  "name": "neovim-component",
  "version": "0.8.0",
  "description": "Polymer component for Neovim frontend",
  "main": "example/minimal/main.js",
  "repository": {
    "user": "rhysd",
    "repo": "neovim-component",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/rhysd/neovim-component/tarball/master",
    "clone_url": "https://github.com/rhysd/neovim-component",
    "https_url": "https://github.com/rhysd/neovim-component",
    "travis_url": "https://travis-ci.org/rhysd/neovim-component",
    "zip_url": "https://github.com/rhysd/neovim-component/archive/master.zip",
    "api_url": "https://api.github.com/repos/rhysd/neovim-component"
  },
  "scripts": {
    "start": "npm run dep && npm run build && npm run example",
    "build": "tsc --pretty -p src && browserify -o build/index.js src/out/index.js",
    "debug": "ELECTRON_ENABLE_STACK_DUMPING=true NODE_ENV=debug electron .",
    "dep": "npm install && bower install && typings install && mkdir -p build",
    "example": "electron .",
    "lint": "tslint $(git ls-files | grep -E \"\\.ts$\")",
    "watch": "guard --watchdir src test",
    "test": "mocha test/unit/"
  },
  "keywords": [
    "neovim",
    "polymer",
    "WebComponent",
    "Electron",
    "NW.js",
    "editor"
  ],
  "author": {
    "name": "rhysd",
    "email": "lin90162@yahoo.co.jp"
  },
  "license": "MIT",
  "dependencies": {
    "flux": "^2.1.1",
    "loglevel": "^1.4.1",
    "promised-neovim-client": "^2.0.2"
  },
  "devDependencies": {
    "bower": "^1.7.9",
    "browserify": "^13.1.0",
    "canvas": "^1.4.0",
    "chai": "^3.5.0",
    "electron-prebuilt": "^1.3.5",
    "jsdom": "^8.4.0",
    "mocha": "^2.5.3",
    "mocha-generators": "^1.2.0",
    "nightmare": "git+https://github.com/rhysd/nightmare.git#custom-electron-path",
    "tslint": "^3.15.1",
    "typescript": "^2.0.2",
    "typings": "^1.3.3"
  },
  "gitHead": "b8a96acf2dac03e9ed5209cfc434fbbd6914c316",
  "homepage": "https://github.com/rhysd/neovim-component#readme",
  "_npmVersion": "3.9.3",
  "_nodeVersion": "6.2.1",
  "dist": {
    "shasum": "0e0851303b87a339393f87f43ec667e62d184e48",
    "tarball": "http://registry.npmjs.org/neovim-component/-/neovim-component-0.8.0.tgz"
  },
  "versions": [
    {
      "number": "0.0.0",
      "date": "2015-11-25T09:09:50.722Z"
    },
    {
      "number": "0.0.1",
      "date": "2015-11-26T09:49:16.154Z"
    },
    {
      "number": "0.0.2",
      "date": "2015-11-27T09:43:00.244Z"
    },
    {
      "number": "0.0.3",
      "date": "2015-11-29T17:30:50.524Z"
    },
    {
      "number": "0.1.0",
      "date": "2015-12-10T17:17:30.851Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-12-10T17:25:26.313Z"
    },
    {
      "number": "0.1.2",
      "date": "2015-12-13T15:49:59.603Z"
    },
    {
      "number": "0.1.3",
      "date": "2015-12-14T04:09:40.965Z"
    },
    {
      "number": "0.1.4",
      "date": "2015-12-14T12:25:13.133Z"
    },
    {
      "number": "0.1.5",
      "date": "2015-12-16T07:53:58.178Z"
    },
    {
      "number": "0.1.6",
      "date": "2015-12-17T10:36:20.944Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-12-22T05:58:15.474Z"
    },
    {
      "number": "0.2.2",
      "date": "2015-12-23T13:39:23.835Z"
    },
    {
      "number": "0.2.3",
      "date": "2015-12-29T18:30:21.813Z"
    },
    {
      "number": "0.2.4",
      "date": "2015-12-29T18:45:01.337Z"
    },
    {
      "number": "0.2.5",
      "date": "2015-12-30T20:39:45.083Z"
    },
    {
      "number": "0.2.6",
      "date": "2016-01-03T05:10:30.976Z"
    },
    {
      "number": "0.2.7",
      "date": "2016-01-04T08:24:01.369Z"
    },
    {
      "number": "0.2.8",
      "date": "2016-01-07T23:16:22.326Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-01-16T10:11:19.791Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-01-16T18:44:58.081Z"
    },
    {
      "number": "0.3.5",
      "date": "2016-01-20T16:03:53.269Z"
    },
    {
      "number": "0.3.6",
      "date": "2016-01-20T16:26:39.279Z"
    },
    {
      "number": "0.3.7",
      "date": "2016-01-21T16:31:56.203Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-01-28T10:51:21.383Z"
    },
    {
      "number": "0.4.1",
      "date": "2016-01-30T08:03:28.053Z"
    },
    {
      "number": "0.4.2",
      "date": "2016-02-12T01:51:37.097Z"
    },
    {
      "number": "0.4.3",
      "date": "2016-02-23T15:47:23.054Z"
    },
    {
      "number": "0.4.4",
      "date": "2016-03-03T08:31:43.834Z"
    },
    {
      "number": "0.5.0",
      "date": "2016-03-05T05:32:53.259Z"
    },
    {
      "number": "0.5.1",
      "date": "2016-03-06T09:18:15.710Z"
    },
    {
      "number": "0.5.2",
      "date": "2016-03-17T14:45:17.056Z"
    },
    {
      "number": "0.6.0",
      "date": "2016-07-17T17:49:57.558Z"
    },
    {
      "number": "0.6.1",
      "date": "2016-07-20T00:01:08.441Z"
    },
    {
      "number": "0.6.2",
      "date": "2016-07-20T23:35:47.300Z"
    },
    {
      "number": "0.7.0",
      "date": "2016-08-07T12:57:27.230Z"
    },
    {
      "number": "0.7.1",
      "date": "2016-08-07T13:15:25.276Z"
    },
    {
      "number": "0.7.2",
      "date": "2016-08-08T14:29:18.947Z"
    },
    {
      "number": "0.7.3",
      "date": "2016-08-09T23:20:15.023Z"
    },
    {
      "number": "0.7.4",
      "date": "2016-08-10T02:24:11.758Z"
    },
    {
      "number": "0.7.5",
      "date": "2016-08-12T09:41:15.337Z"
    },
    {
      "number": "0.8.0",
      "date": "2016-09-10T14:21:31.315Z"
    }
  ],
  "created": "2015-11-25T09:09:50.722Z",
  "modified": "2016-09-10T14:21:31.315Z",
  "lastPublisher": {
    "name": "rhysd",
    "email": "lin90162@yahoo.co.jp"
  },
  "owners": [
    {
      "name": "rhysd",
      "email": "lin90162@yahoo.co.jp"
    }
  ],
  "readme": "`<neovim-editor>` Web Component\n===============================\n[![Build Status](https://travis-ci.org/rhysd/neovim-component.svg?branch=master)](https://travis-ci.org/rhysd/neovim-component)\n\n\nThis component provides `<neovim-editor>`, an HTML custom element built on [Polymer](https://github.com/Polymer/polymer) and [flux](https://github.com/facebook/flux).\nIt provides a frontend for the [Neovim editor](https://github.com/neovim/neovim) using Neovim's MessagePack API. It allows you to easily embed a Neovim-backed editor\ninto your application.\n\n**This component assumes you have Node.js installed.**\n\nYou can use this component for modern desktop application frameworks such as [Electron](https://github.com/atom/electron) or [NW.js](https://github.com/nwjs/nw.js).  \nYou can even use it in Electron-based editors such as [Atom](http://atom.io/) or [VS Code](https://github.com/Microsoft/vscode).\n\nThis component is designed around the [Flux architecture](https://facebook.github.io/flux/docs/overview.html).\nYou can access the UI event notifications and can call Neovim APIs directly via `<neovim-editor>`'s APIs.\n\nYou can install this component as an [npm package](https://www.npmjs.com/package/neovim-component).\n\n```\n$ npm install neovim-component\n```\n\nCurrent supported `nvim` version is v0.1.6 or later.\n\n\n## Examples\n\nEach example only takes 100~300 lines.\n\n### [Minimal Example](/example/minimal)\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <script src=\"/path/to/webcomponents-lite.min.js\"></script>\n    <link rel=\"import\" href=\"/path/to/polymer.html\" />\n    <link rel=\"import\" href=\"/path/to/neovim-editor.html\" />\n  </head>\n  <body>\n    <neovim-editor></neovim-editor>\n  </body>\n</html>\n```\n\nMinimal [Electron](https://github.com/atom/electron) app can be found in the [example directory](/example/minimal).  This is a good start point to use this package and it shows how the component works.\n\n![main screenshot](https://raw.githubusercontent.com/rhysd/ss/master/neovim-component/main.gif)\n\nHow to run minimal example is:\n\n```sh\n$ git clone https://github.com/rhysd/neovim-component.git\n$ cd neovim-component\n$ npm start\n```\n\n### [Markdown Editor Example](/example/markdown)\n\nFor a more complicated and realistic example, see the [markdown editor example](/example/markdown).  The markdown previewer is integrated with the Neovim GUI using the `<neovim-editor>` component.\n\n![markdown example screenshot](https://raw.githubusercontent.com/rhysd/ss/master/neovim-component/markdown-example.gif)\n\n### [Image Popup Example](/example/image-popup)\n\nThis is an image popup widget example [here](/example/image-popup).  The `gi` mapping is defined to show an image under the cursor in a tooltip.\n\n![image popup example screenshot](https://raw.githubusercontent.com/rhysd/ss/master/neovim-component/popup-image-example.gif)\n\n### [Mini Browser Example](/example/mini-browser)\n\nThis example shows how to include a mini web-browser using the [`<webview>` tag from Electron](https://github.com/atom/electron/blob/master/docs/api/web-view-tag.md).\n\n![mini browser example screenshot](https://raw.githubusercontent.com/rhysd/ss/master/neovim-component/mini-browser.gif)\n\n\n## Why Did You Create This?\n\nVim has very powerful editing features, but Vim is an editor (see `:help design-not`) and unfortunately lacks support for many graphical tools that writers and programmers like.  NyaoVim adds support for graphical features without losing Vim's powerful text editing abilities.  [Neovim's msgpack APIs](https://neovim.io/doc/user/msgpack_rpc.html) provide a perfect way to add a GUI layer using HTML and CSS.  [NyaoVim](https://github.com/rhysd/NyaoVim) is a GUI frontend as a proof of concept.\n\n\n## Architecture\n\n![data flow](https://raw.githubusercontent.com/rhysd/ss/master/neovim-component/flow.png)\n\n`<neovim-editor>` has an `editor` property to access the internal APIs of the component.\n\n- `editor.screen` is a view of the component (using canvas).  It receives user input and dispatches input actions to the data store.\n- `editor.process` is a process handler to interact with the backing Neovim process via msgpack-rpc APIs.  You can call Neovim's APIs via the Neovim client (`editor.getClient()` helper).\n- `editor.store` is the state of this component.  You can access the current state of the editor through this object.\n\n\n## `<neovim-editor>` Properties\n\nYou can customize `<neovim-editor>` with the following properties:\n\n| Name                | Description                                | Default       |\n| ------------------- | -------------------------------------------| ------------- |\n| `width`             | Width of the editor in pixels.             | `null`        |\n| `height`            | Height of the editor in pixels.            | `null`        |\n| `font`              | Name of the editor's font.                 | `\"monospace\"` |\n| `font-size`         | Font-size in pixels.                       | `12`          |\n| `line-height`       | Line height rate relative to font size.    | `1.3`         |\n| `nvim-cmd`          | Command used to start Neovim.              | `\"nvim\"`      |\n| `argv`              | Arguments passed with the Neovim command.  | `[]`          |\n| `on-quit`           | Callback function to run when Neovim quits.| `null`        |\n| `on-error`          | Callback function for Neovim errors.       | `null`        |\n| `disable-alt-key`   | Do not send alt key input to Neovim.       | `false`       |\n| `disable-meta-key`  | Do not send meta key input to Neovim.      | `false`       |\n| `cursor-draw-delay` | Delay in millisec before drawing cursor.   | `10`          |\n| `no-blink-cursor`   | Blink cursor or not.                       | `false`       |\n| `window-title`      | Specify first window title.                | `\"Neovim\"`    |\n\n\n## `<neovim-editor>` APIs\n\n### Receive internal various events\n\nYou can receive various events (including UI redraw notifications) from the **store**.\nThe `store` is a part of flux architecture. It's a global instance of [EventEmitter](https://nodejs.org/api/events.html).\n\nYou can also access the state of editor via the `store`. Note that all values are read only.\nDo not change the values of the `store` directly, it will break the internal state of the component.\n\n```javascript\nconst neovim_element = document.getElementById('neovim');\nconst Store = neovim_element.editor.store;\n\n// Handle cursor movements\nStore.on('cursor', () => console.log('Cursor is moved to ', Store.cursor));\n\n// Handle mode changes\nStore.on('mode', () => console.log('Mode is changed to ', Store.mode));\n\n// Handle text redraws\nStore.on('put', () => console.log('UI was redrawn'));\n\n// Accessing the state of the editor.\nconst bounds = [ Store.size.lines, Store.size.cols ];\nconst cursor_pos = [ Store.cursor.line, Store.cursor.col ];\n```\n\n\n### Call Neovim APIs\n\nYou can call [Neovim APIs](https://neovim.io/doc/user/msgpack_rpc.html#msgpack-rpc-api) via the **client**.\nWhen you call APIs via the client, it sends the call to the underlying Neovim process via MessagePack RPC and will return a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which resolves to the returned value.\n\n\n`<neovim-component>` uses [promised-neovim-client](https://github.com/rhysd/promised-neovim-client) package.\nYou can see the all API definitions [here](https://github.com/rhysd/promised-neovim-client/blob/promisified/index.d.ts).  If you know further about Neovim APIs, [python client implementation](https://github.com/neovim/python-client) may be helpful.\n\n```javascript\nconst neovim_element = document.getElementById('neovim');\nconst client = neovim_element.editor.getClient();\n\n// Send a command\nclient.command('vsplit');\n\n// Send input\nclient.input('<C-w><C-l>');\n\n// Evaluate a Vimscript expression\nclient.eval('\"aaa\" . \"bbb\"').then(result => console.log(result));\n\n// Get the 'b:foo' variable\nclient.getCurrentBuffer()\n    .then(buf => buf.getVar('foo'))\n    .then(v => console.log(v));\n\n// Query something (windows, buffers, etc.)\n// Move to the neighbor window and show its information.\nclient.getWindows()\n    .then(windows => client.secCurrentWindow(windows[1]))\n    .then(() => client.getCurrentWindow())\n    .then(win => console.log(win));\n\n// Receive an RPC request from Neovim\nclient.on('request', (n, args, res) => console.log(`Name: ${n}, Args: ${JSON.stringify(args)}, Response: ${res}`));\n```\n\n\n### Editor lifecycle\n\nYou can receive notifications related to lifecycle of the editor.\n\n```javascript\nconst neovim_element = document.getElementById('neovim');\n\n// Called when the Neovim background process attaches\nneovim_element.editor.on('process-attached', () => console.log('Neovim process is ready'));\n\n// Called when the Neovim process is disconnected (usually by :quit)\nneovim_element.editor.on('quit', () => console.log('Neovim process died'));\n\n// Called when the <neovim-component> detaches\nneovim_element.editor.on('detach', () => console.log('Element does not exist in DOM.'));\n\n// Called upon experiencing an error in the internal process \nneovim_element.editor.on('error', err => alert(err.message));\n```\n\n\n### View APIs\n\n- Resize screen\n\n```javascript\nconst editor = document.getElementById('neovim').editor;\neditor.screen.resize(80, 100); // Resize screen to 80 lines and 100 columns\neditor.screen.resizeWithPixels(1920, 1080); // Resize screen to 1920px x 1080px\n```\n\n- Change font size\n\n```javascript\nconst editor = document.getElementById('neovim').editor;\neditor.screen.changeFontSize(18); // Change font size to 18px\n```\n\n- Convert pixels to lines/cols.\n\n```javascript\nconst editor = document.getElementById('neovim').editor;\n\nconst loc = editor.screen.convertPositionToLocation(80, 24);\nconsole.log(loc.x, loc.y);  // Coordinates in pixels of (line, col) = (80, 24)\n\nconst pos = editor.screen.convertLocationToPosition(400, 300);\nconst.log(pos.col, pos.line);  // line/col of location (400px, 300px)\n```\n\n- Notify of screen-size changes:\n\nWhen some process has changed the screen-size **you must notify the `screen`**. The internal `<canvas>` element has a fixed size and must update itself if there are size changes.  Call `screen.checkShouldResize()` if the screen size may have changed\nNote that you need not care about `resize` event of `<body>` element.  `<neovim-editor>` component automatically detects this particular resize event and updates automatically. `screen.checkShouldResize()` will simply be ignored if nothing has actually changed.\n\n```javascript\nconst editor = document.getElementById('neovim').editor;\n\nfunction showUpSomeElementInNeovim() {\n    const e = document.getElementById('some-elem');\n\n    // New element shows up!  The screen may be resized by the change.\n    // 'none' -> 'block'\n    e.style.display = 'block';\n\n    // This call tells to editor to adjust itself in the case that it has been resized\n    editor.screen.checkShouldResize();\n}\n```\n\n### Other APIs\n\n- Setting arguments afterwards:\n\nIf your app doesn't use Polymer you can set arguments afterwards using JavaScript\nNote that it is better to use `argv` property of `<neovim-element>` if possible.\n\n```javascript\nconst editor = document.getElementById('neovim').editor;\neditor.setArgv(['README.md']);\n```\n\n- Focusing the editor\n\n`<neovim-editor>` is just a web-component, so it can be focused just like other elements.  \nIf it loses focus the editor won't receive any input events. \nThe `editor` instance has a method to re-focus the editor in JavaScript.\nThe `store` instance contains the current focus state.\n\n```javascript\nconst editor = document.getElementById('neovim').editor;\nconsole.log(editor.store.focused);\neditor.store.on('focus-changed', () => {\n    console.log('Focus was changed: ' + editor.store.focused);\n});\n\n// Refocus the editor to ensure it receives user input.\neditor.focus();\n```\n\n### Log Levels\n\n`<neovim-component>` prints logs in the browser console.  The log level is controlled by the `NODE_ENV` environment variable:\n\n- `NODE_ENV=debug` will log everything.\n- `NODE_ENV=production` ignores all logs except for warnings and errors.\n- Setting `NODE_ENV` to empty string or some other value enables logging for info, warnings, and errors.\n\n\n## TODOs\n\n- [ ] WebGL rendering (using [pixi.js](http://www.pixijs.com/) or [CreateJS](http://www.createjs.com/)). [#2](https://github.com/rhysd/neovim-component/issues/2)\n- [ ] Follow dynamic device pixel ratio change. [#18](https://github.com/rhysd/neovim-component/issues/18)\n"
}