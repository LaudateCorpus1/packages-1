{
  "name": "boscode-learn",
  "version": "1.0.2",
  "description": "Learn javascript using boscode https://www.npmjs.com/package/boscode",
  "main": "lib/index.js",
  "scripts": {},
  "repository": {
    "user": "Quobject",
    "repo": "boscode-learn",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/Quobject/boscode-learn/tarball/master",
    "clone_url": "https://github.com/Quobject/boscode-learn",
    "https_url": "https://github.com/Quobject/boscode-learn",
    "travis_url": "https://travis-ci.org/Quobject/boscode-learn",
    "zip_url": "https://github.com/Quobject/boscode-learn/archive/master.zip",
    "api_url": "https://api.github.com/repos/Quobject/boscode-learn"
  },
  "keywords": [
    "pseudocode"
  ],
  "author": {
    "name": "Matthias Ludwig",
    "email": "mludwig@quobject.io"
  },
  "license": "MIT",
  "homepage": "https://github.com/Quobject/boscode-learn",
  "devDependencies": {},
  "dependencies": {
    "boscode": "~0.0.7",
    "johnny-five": "^0.9.21"
  },
  "gitHead": "a796515d675b667dfaa7f4e862d476d55e85ca71",
  "_npmVersion": "2.11.1",
  "_nodeVersion": "0.12.4",
  "dist": {
    "shasum": "7c282b47288678033c9a8840f17ed800c5b68c17",
    "tarball": "http://registry.npmjs.org/boscode-learn/-/boscode-learn-1.0.2.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-01-20T22:34:28.908Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-01-22T23:39:50.769Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-01-22T23:45:42.054Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-01-26T22:49:06.154Z"
    },
    {
      "number": "0.0.5",
      "date": "2016-02-03T17:52:13.502Z"
    },
    {
      "number": "0.0.7",
      "date": "2016-02-04T18:45:11.441Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-02-17T05:57:15.896Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-02-17T06:15:03.476Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-04-08T03:29:53.747Z"
    }
  ],
  "created": "2016-01-20T22:34:28.908Z",
  "modified": "2016-04-08T03:29:53.747Z",
  "lastPublisher": {
    "name": "mattqs",
    "email": "mludwig@quobject.io"
  },
  "owners": [
    {
      "name": "mattqs",
      "email": "mludwig@quobject.io"
    }
  ],
  "readme": "ï»¿Learn pseudocode with javascript compliant with Board of studies, New South Wales, Australia, Software Design and Development Stage 6, Software and Course Specifications Higher School Certificiate 2012\r\n\r\n\r\n[![NPM](https://nodei.co/npm/boscode-learn.png?downloads=true&downloadRank=true)](https://nodei.co/npm/boscode-learn/)\r\n[![NPM](https://nodei.co/npm-dl/boscode-learn.png?months=6&height=3)](https://nodei.co/npm/boscode-learn/)\r\n\r\nSee also [boscode](https://github.com/Quobject/boscode).\r\n\r\n## Table of Content\r\n[Installation](#installation)  \r\n[Useful bash terminal commands](#useful-bash-terminal-commands)  \r\n\r\n*Example code*  \r\n[01 Console output: Display](#01-console-output-display)  \r\n[02 Console input: Get](#02-console-input-get)  \r\n[03 Creating a sequential file](#03-creating-a-sequential-file)  \r\n[04 Printing the contents of a file using sentinel value](#04-printing-the-contents-of-a-file-using-sentinel-value)  \r\n[05 Printing the contents of a file using EOF (end of file)](#05-printing-the-contents-of-a-file-using-eof-end-of-file)  \r\n[06 Appending rows to an existing sequential file](#06-appending-rows-to-an-existing-sequential-file)  \r\n[07 Creating a relative file](#07-creating-a-relative-file)  \r\n[08 Reading from a relative file](#08-reading-from-a-relative-file)  \r\n[09 Updating records in a relative file](#09-updating-records-in-a-relative-file)  \r\n\r\n*Tasks*  \r\n[01 Variables](#01-variables)  \r\n[02 Strings](#02-strings)  \r\n[03 String length](#03-string-length)  \r\n[04 Revising strings](#04-revising-strings)  \r\n[05 Numbers](#05-numbers)  \r\n[06 Rounding numbers](#06-rounding-numbers)  \r\n[07 Number to string](#07-number-to-string)  \r\n[08 If statement](#08-if-statement)  \r\n[09 For loop](#09-for-loop)  \r\n[10 Arrays](#10-arrays)  \r\n[11 Array filtering](#11-array-filtering)  \r\n[12 Accessing array values](#12-accessing-array-values)  \r\n[13 Looping through arrays](#13-looping-through-arrays)  \r\n[14 Objects](#14-objects)  \r\n[15 Object properties](#15-object-properties)  \r\n[16 Functions](#16-functions)  \r\n[17 Function arguments](#17-function-arguments)  \r\n[18 Sum]( #18-sum )   \r\n[19 Highindex]( #19-highindex )   \r\n[20 Binary sum]( #20-binary-sum )   \r\n[21 Integer addition]( #21-integer-addition )   \r\n[22 Comparing strings]( #22-comparing-strings )   \r\n[23 Digit sum]( #23-digit-sum )   \r\n[24 Highest digit]( #24-highest-digit )   \r\n[25 Test length]( #25-test-length )   \r\n[26 How many e's]( #26-how-many-es )   \r\n[27 Camel case]( #27-camel-case )   \r\n[28 Valid 24 hours]( #28-valid-24-hours )   \r\n[29 AM & PM]( #29-am--pm )   \r\n[30 Word index]( #30-word-index )   \r\n[31 Sorted index]( #31-sorted-index )   \r\n[32 Formatted index]( #32--formatted-index )   \r\n[33 Length conversion]( #33-length-conversion )   \r\n[34 Highest Integer]( #34-highest-integer )   \r\n[35 Multiple words]( #35-multiple-words )   \r\n[36 Odd numbers]( #36-odd-numbers )   \r\n[37 Vowels]( #37-vowels )   \r\n[38 Bar code]( #38-bar-code )   \r\n[39 Runs]( #39-runs )   \r\n[40 Printing numbers]( #40-printing-numbers )   \r\n[41 Average]( #41-average )   \r\n[42 Counting $]( #42-counting- )   \r\n[43 Words and characters]( #43-words-and-characters )   \r\n[44 Kaprekar Numbers]( #44-kaprekar-numbers )   \r\n[45 Digital Roots]( #45-digital-roots )   \r\n[46 Plurals]( #46-plurals )   \r\n[47 Team Counts]( #47-team-counts )   \r\n[48 Staircases]( #48-staircases )   \r\n[49 Two-up]( #49-two-up )   \r\n[50 Rank Generator]( #50-rank-generator )   \r\n\r\n\r\n\r\n*Codecademy Tasks*  \r\n[codecademy tasks](https://github.com/Quobject/boscode-doc/blob/master/doc/codecademy/codecademy-tasks.md)\r\n\r\n*Arduino Tasks*  \r\n[arduino tasks](https://github.com/Quobject/boscode-doc/blob/master/doc/arduino/arduino-tasks.md)\r\n\r\n*Electron Tasks*  \r\n[electron tasks](https://github.com/Quobject/boscode-doc/blob/master/doc/electron/electron-tasks.md)\r\n\r\n*Object oriented paradigm*  \r\n[1 Object oriented paradigm](https://github.com/Quobject/boscode-doc/blob/master/doc/SDD/learning_activities.md#1-object-oriented-paradigm)\r\n\r\n*Google Apps Script Tasks*  \r\n[Google Apps Script Tasks](https://github.com/Quobject/boscode-doc/blob/master/doc/google-apps-script/google-apps-script-tasks.md)\r\n\r\n*Web tasks*  \r\n[Web tasks](https://github.com/Quobject/boscode-doc/blob/master/doc/web/web-tasks.md#web-tasks)\r\n\r\n## Installation\r\n\r\n1. Create a github account: https://github.com/. Use your school email address and set username to stlukes-{first part of school email}. Sign into github.\r\n2. In google chrome open cloud 9 https://c9.io/ and choose sign in with your github account.\r\n3. In c9.io: Create a new workspace: \r\n  * Workspace name: boscode-learn\r\n  * Description: Learning javascript\r\n  * Hosted workspace: Public\r\n  * Clone from Git or Mercurial URL: `https://github.com/Quobject/boscode-learn.git`\r\n  * Choose a template: `Custom`\r\n  * Hit 'Create workspace' button\r\n4. Inside your workspace on the left side right click the folder name 'boscode-learn' and select 'Open Terminal Here'\r\n5. In your terminal type the command \r\n\r\n```bash\r\nnpm install\r\nnpm install -g eslint\r\n```\r\n\r\n## Useful bash terminal commands\r\n\r\n* `pwd`: \r\n```bash\r\n{yourname}:~/workspace (master) $ pwd\r\n/home/ubuntu/workspace\r\n```\r\nprint working directory\r\n\r\n* `ll`:\r\n```bash\r\n{yourname}:~/workspace (master) $ ll\r\ntotal 64\r\ndrwxr-xr-x  7 ubuntu ubuntu 4096 Jan 21 01:57 ./\r\ndrwxr-xr-x 21 ubuntu ubuntu 4096 Jan 21 01:57 ../\r\ndrwxr-xr-x  3 ubuntu ubuntu 4096 Jan 21 01:56 .c9/\r\n-rw-r--r--  1 ubuntu ubuntu  208 Jan 21 01:56 .editorconfig\r\ndrwxr-xr-x  8 ubuntu ubuntu 4096 Jan 21 01:56 .git/\r\n-rw-r--r--  1 ubuntu ubuntu 4290 Jan 21 01:56 .gitignore\r\n-rw-r--r--  1 ubuntu ubuntu  249 Jan 21 01:56 .jshintrc\r\ndrwxr-xr-x  4 ubuntu ubuntu 4096 Jan 21 01:56 .vs/\r\n-rw-r--r--  1 ubuntu ubuntu 1075 Jan 21 01:56 LICENSE\r\n-rw-r--r--  1 ubuntu ubuntu 2284 Jan 21 01:56 README.md\r\n-rw-r--r--  1 ubuntu ubuntu 3850 Jan 21 01:56 boscode-learn.njsproj\r\n-rw-r--r--  1 ubuntu ubuntu  971 Jan 21 01:56 boscode-learn.sln\r\ndrwxr-xr-x  3 ubuntu ubuntu 4096 Jan 21 01:56 code/\r\ndrwxr-xr-x  3 ubuntu ubuntu 4096 Jan 21 01:57 node_modules/\r\n-rw-r--r--  1 ubuntu ubuntu  621 Jan 21 01:56 package.json\r\n```\r\nlist files\r\n\r\n* `cd`:\r\n```bash\r\n{yourname}:~/workspace (master) $ cd code\r\n{yourname}:~/workspace/code (master) $ \r\n```\r\nchange directory\r\n\r\n## Example code\r\n\r\n### 01 Console output: Display\r\n1. Open your cloud 9 workspace (see above). In the file tree open the folder: `~/workspace/code/examples/01`\r\n2. Double click the file `app.js` inside this folder. Observe the code:\r\n\r\n```js    \r\nvar boscode = require('boscode');\r\n\r\nboscode.display('Hello world');\r\n\r\nboscode.display('The answer is ', 4, 'km');\r\n```\r\n3. Double click the file `app.js` and choose `Open Terminal Here`.\r\n4. Type `ll` to see the content of the current directory:\r\n```js\r\n{yourname}:~/workspace/code/examples/01 (master) $ ll\r\ntotal 12\r\ndrwxr-xr-x  2 ubuntu ubuntu 4096 Jan 21 01:56 ./\r\ndrwxr-xr-x 11 ubuntu ubuntu 4096 Jan 21 01:56 ../\r\n-rw-r--r--  1 ubuntu ubuntu  115 Jan 21 01:56 app.js\r\n```\r\n5. Type `node app.js` to run this code:\r\n```bash\r\n{yourname}:~/workspace/code/examples/01 (master) $ node app.js \r\nHello world\r\nThe answer is 4km\r\n```\r\n6. Follow similar procedure to see/run the other code examples.\r\n\r\nSee also: https://github.com/Quobject/boscode#display\r\n\r\n\r\n### 02 Console input: Get\r\n\r\nPseudocode\r\n```\r\nGet firstNumber\r\n```\r\n\r\nJavascript\r\n```js\r\nvar firstNumber = boscode.get();\r\n```\r\n\r\nIn your cloud 9 workspace run the file \r\n[app.js](https://github.com/Quobject/boscode-learn/blob/master/code/examples/02/app.js) `code/examples/02/app.js`. \r\n\r\n\r\n\r\n### 03 Creating a sequential file\r\n\r\nPseudocode\r\n```\r\nBEGIN CreateASequentialFile\r\n  Open FriendsData for output\r\n\r\n  firstName = \"Joe\"\r\n  lastName = \"Bloggs\"\r\n  emailAddress = \"jbloggs@example.com\"\r\n\r\n  Write FriendsData from firstName, lastName, emailAddress\r\n\r\n  firstName = \"Jim\"\r\n  lastName = \"Doe\"\r\n  emailAddress = \"jdoe@example.com\"\r\n\r\n  Write FriendsData from firstName, lastName, emailAddress\r\n\r\n  Close FriendsData\r\nEND CreateASequentialFile\r\n\r\n\r\n```\r\n\r\nJavascript\r\n```js\r\n\r\nvar createASequentialFile = function () {\r\n  var friendsData = boscode.open('friendsData.txt', 'output');\r\n\r\n  var firstName = 'Joe';\r\n  var lastName = 'Bloggs';\r\n  var emailAddress = 'jbloggs@example.com';\r\n\r\n  var row = [firstName, lastName, emailAddress].join(','); // creates a comma separated string\r\n\r\n  friendsData.write(row);  \r\n\r\n  firstName = 'Jim';\r\n  lastName = 'Doe';\r\n  emailAddress = 'jdoe@example.com';\r\n\r\n  row = [firstName, lastName, emailAddress].join(','); // creates a comma separated string\r\n\r\n  friendsData.write(row);\r\n\r\n  friendsData.close();\r\n};\r\n\r\n// content of friendsData.txt:\r\n// Joe,Bloggs,jbloggs@example.com\r\n// Jim,Doe,jdoe@example.com\r\n\r\n```\r\n\r\n\r\nIn your cloud 9 workspace run the file  \r\n[app.js](https://github.com/Quobject/boscode-learn/blob/master/code/examples/03/app.js) `code/examples/03/app.js`.\r\n\r\n\r\n\r\n### 04 Printing the contents of a file using sentinel value\r\n\r\nPseudocode\r\n```\r\nBEGIN DisplayFileContents\r\n  Open FriendsData for input\r\n\r\n  Read firstName, lastName, emailAddress from FriendsData\r\n  âThis is a priming read, performed just before entering the loop to provide\r\n  'the first record (if there is one) for printing\r\n\r\n  WHILE firstName <> âxxxâ\r\n    Display firstName, lastName, emailAddress\r\n    Read firstName, lastName, emailAddress from FriendsData\r\n    âthis reads subsequent records which can then be tested for the sentinel\r\n    'value before they are processed\r\n  END WHILE\r\n\r\n  Close FriendsData\r\nEND DisplayFileContents\r\n\r\n```\r\n\r\nJavascript\r\n```js\r\nvar displayFileContents = function () {\r\n  var friendsData = boscode.open('friendsData.txt', 'input');\r\n\r\n  var row = friendsData.read();\r\n  var tempArray = row.split(',');\r\n  var firstName = tempArray[0];\r\n  var lastName = tempArray[1];\r\n  var emailAddress = tempArray[2];\r\n\r\n  while ( firstName !== 'xxx' ) {\r\n    boscode.display(firstName, lastName, emailAddress);\r\n\r\n    row = friendsData.read();\r\n    tempArray = row.split(',');\r\n    firstName = tempArray[0];\r\n    lastName = tempArray[1];\r\n    emailAddress = tempArray[2];\r\n  }\r\n\r\n  friendsData.close();\r\n};\r\n\r\n\r\n```\r\n\r\nIn your cloud 9 workspace run the file  \r\n[app.js](https://github.com/Quobject/boscode-learn/blob/master/code/examples/04/app.js) `code/examples/04/app.js`.\r\n\r\n\r\n### 05 Printing the contents of a file using EOF (end of file)\r\n\r\nPseudocode\r\n```\r\nBEGIN DisplayFileContents\r\n  Open FriendsData for input\r\n\r\n  Read firstName, lastName, emailAddress from FriendsData\r\n  âThis is a priming read, performed just before entering the loop to provide\r\n  'the first record (if there is one) for printing\r\n\r\n  WHILE not EOF\r\n    Display firstName, lastName, emailAddress\r\n    Read firstName, lastName, emailAddress from FriendsData\r\n    âthis reads subsequent records which can then be tested for the sentinel\r\n    'value before they are processed\r\n  END WHILE\r\n\r\n  Close FriendsData\r\nEND DisplayFileContents\r\n\r\n```\r\n\r\nJavascript\r\n```js\r\nvar displayFileContents = function () {\r\n  var friendsData = boscode.open('friendsData.txt', 'input');\r\n\r\n  var row = friendsData.read();\r\n\r\n  var tempArray, firstName, lastName, emailAddress;\r\n\r\n  while (row !== boscode.EOF) {\r\n    tempArray = row.split(',');\r\n    firstName = tempArray[0];\r\n    lastName = tempArray[1];\r\n    emailAddress = tempArray[2];\r\n    boscode.display(firstName, lastName, emailAddress);\r\n\r\n    row = friendsData.read();\r\n  }\r\n\r\n  friendsData.close();\r\n};\r\n\r\n\r\n```\r\n\r\nIn your cloud 9 workspace run the file  \r\n[app.js](https://github.com/Quobject/boscode-learn/blob/master/code/examples/05/app.js) `code/examples/05/app.js`.\r\n\r\n\r\n### 06 Appending rows to an existing sequential file\r\n\r\nPseudocode\r\n```\r\nBEGIN AppendNewRows\r\n  Open FriendsData for append\r\n\r\n  Display âPlease enter the details for the first new person to be added:â\r\n  Display âEnter xxx for first name to indicate there are no more rows to be added.â\r\n\r\n  Get firstName, lastName, emailAddress\r\n\r\n  WHILE firstName <> âxxxâ\r\n    Write FriendsData from firstName, lastName, emailAddress\r\n\r\n    Display âPlease enter the details for the next new person to be added:â\r\n\r\n    Get firstName, lastName, emailAddress\r\n  END WHILE\r\n\r\n  Close FriendsData\r\nEND AppendNewRows\r\n```\r\n\r\nJavascript\r\n```js\r\nvar appendNewRows = function () {\r\n  var friendsData = boscode.open('friendsData.txt', 'append');\r\n\r\n  boscode.display('Please enter the details for the first new person to be added:');\r\n  boscode.display('Enter xxx for first name to indicate there are no more rows to be added.');\r\n\r\n  var firstName = boscode.get('First Name:');\r\n  var lastName = boscode.get('Last Name:');\r\n  var emailAddress = boscode.get('Email Address:');\r\n  var row = [firstName, lastName, emailAddress].join(',');\r\n\r\n  while (firstName !== 'xxx') {\r\n\r\n    friendsData.write(row);\r\n\r\n    boscode.display('Please enter the details for the next new person to be added:');\r\n\r\n    firstName = boscode.get('First Name:');\r\n    lastName = boscode.get('Last Name:');\r\n    emailAddress = boscode.get('Email Address:');\r\n    row = [firstName, lastName, emailAddress].join(',');\r\n  }\r\n\r\n  friendsData.close();\r\n};\r\n\r\n\r\n```\r\n\r\nIn your cloud 9 workspace run the file  \r\n[app.js](https://github.com/Quobject/boscode-learn/blob/master/code/examples/06/app.js) `code/examples/06/app.js`.\r\n\r\n\r\n### 07 Creating a relative file\r\n\r\nPseudocode\r\n```\r\nBEGIN CreateARelativeFile\r\n  Open ProductData for relative access\r\n\r\n  productNumber = 1\r\n  description = \"Laundry Liquid 2L\"\r\n  quantity = 100\r\n  price = 1.49\r\n\r\n  Write ProductData from productNumber, description, quantity, price using productNumber\r\n\r\n  ânote the use of the variable productNumber as the key field, specifying where this record will be written in the file.\r\n\r\n  productNumber = 2\r\n  description = \"Mate Laundry Liquid 1L\"\r\n  quantity = 300\r\n  price = 3.99\r\n\r\n  Write ProductData from productNumber, description, quantity, price using productNumber\r\n\r\n  Close ProductData\r\nEND CreateARelativeFile\r\n```\r\n\r\nJavascript\r\n```js\r\nvar createARelativeFile = function () {\r\n  var productData = boscode.open('productData.txt', 'relative_access');\r\n\r\n  var productObject = {\r\n    productNumber: 1,\r\n    description: 'Laundry Liquid 2L',\r\n    quantity: 100,\r\n    price: 1.49\r\n  };\r\n\r\n  productData.write(productObject, 'productNumber');\r\n\r\n  productObject = {\r\n    productNumber: 2,\r\n    description: 'Mate Laundry Liquid 1L',\r\n    quantity: 300,\r\n    price: 3.99\r\n  };\r\n\r\n  productData.write(productObject, 'productNumber');\r\n\r\n  productData.close();\r\n};\r\n\r\n\r\n```\r\n\r\nIn your cloud 9 workspace run the file  \r\n[app.js](https://github.com/Quobject/boscode-learn/blob/master/code/examples/07/app.js) `code/examples/07/app.js`.\r\n\r\n\r\n### 08 Reading from a relative file\r\n\r\nPseudocode\r\n```\r\nBEGIN ReadRecordsFromARelativeFile\r\n  Open ProductData for relative access\r\n\r\n  RequiredProdNumber = 1\r\n\r\n  Read ProductData into productNumber, description, quantity, price using RequiredProdNumber\r\n  ânote the use of the variable RequiredProdNumber as the key field, specifying where this record will be found in the file\r\n  \r\n  IF RecordNotFound THEN\r\n    ânote the use of the flag RecordNotFound returned by the operating system \r\n    Display âSorry â no such productâ\r\n  ELSE\r\n    Display productNumber, description, quantity, price\r\n  END IF\r\n  \r\n  Close ProductData\r\nEND ReadRecordsFromARelativeFile\r\n\r\n```\r\n\r\nJavascript\r\n```js\r\nvar readRecordsFromARelativeFile = function () {\r\n  var productData = boscode.open('productData.txt', 'relative_access');\r\n\r\n  var requiredProdNumber = 1;\r\n\r\n  var productRecord = productData.read(requiredProdNumber);\r\n\r\n  if (productRecord === boscode.RECORD_NOT_FOUND) {\r\n    boscode.display('Sorry - no such product');\r\n  } else {\r\n    boscode.display( JSON.stringify(productRecord) );\r\n  }    \r\n\r\n  productData.close();\r\n};\r\n\r\n//{\"productNumber\":1,\"description\":\"Laundry Liquid 2L\",\"quantity\":100,\"price\":1.49}\r\n\r\n```\r\n\r\nIn your cloud 9 workspace run the file  \r\n[app.js](https://github.com/Quobject/boscode-learn/blob/master/code/examples/08/app.js) `code/examples/08/app.js`.\r\n\r\n\r\n### 09 Updating records in a relative file\r\n\r\nPseudocode\r\n```\r\nBEGIN UpdateRecordsInARelativeFile\r\n  Open ProductData for relative access\r\n\r\n  RequiredProdNumber = 1\r\n\r\n  Read ProductData into productNumber, description, quantity, price using RequiredProdNumber\r\n  \r\n  IF RecordNotFound THEN\r\n    'note the use of the flag RecordNotFound returned by the operating system \r\n    Display âSorry â no such productâ\r\n  ELSE\r\n    Display productNumber, description, quantity, price\r\n    newPrice = 1000\r\n\r\n    Write ProductData from productNumber, description, quantity, newPrice using productNumber\r\n    'update record using data for the new price and the existing data in the other fields\r\n\r\n  END IF\r\n  \r\n  Close ProductData\r\nEND UpdateRecordsInARelativeFile\r\n\r\n```\r\n\r\nJavascript\r\n```js\r\nvar updateRecordsInARelativeFile = function () {\r\n  var productData = boscode.open('productData.txt', 'relative_access');\r\n\r\n  var requiredProdNumber = 1;\r\n\r\n  var productRecord = productData.read(requiredProdNumber);\r\n\r\n  if (productRecord === boscode.RECORD_NOT_FOUND) {\r\n    boscode.display('Sorry - no such product');\r\n  } else {\r\n    boscode.display(JSON.stringify(productRecord));\r\n    productRecord.price = 1000;\r\n\r\n    productData.write(productRecord, 'productNumber');\r\n  }\r\n\r\n  productData.close();\r\n};\r\n\r\n\r\n```\r\n\r\nIn your cloud 9 workspace run the file  \r\n[app.js](https://github.com/Quobject/boscode-learn/blob/master/code/examples/09/app.js) `code/examples/09/app.js`.\r\n\r\n\r\n## Tasks\r\n\r\n### 01 Variables\r\n\r\nA variable is a name that can reference a specific value. Variables are declared using `var` followed by the variable's name.\r\n\r\nHere's an example:\r\n\r\n```js\r\nvar example;\r\n```\r\n\r\nThe above variable is **declared**, but it isn't defined (it does not yet reference a specific value).\r\n\r\nHere's an example of defining a variable, making it reference a specific value:\r\n\r\n```js\r\nvar example = 'some string';\r\n```\r\n\r\n###### NOTE \r\n\r\nA variable is **declared** using `var` and uses the equals sign to **define** the value that it references. This is colloquially known as \"Making a variable equal a value\".\r\n\r\n###### The challenge:\r\n\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/01/app.js`.\r\n\r\nIn that file declare a variable named `example`.\r\n\r\nMake the variable `example` equal to the value `'some string'`.\r\n\r\nThen use `boscode.display()` to print the `example` variable to the console.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n___\r\n\r\n### 02 Strings\r\n\r\nA **string** is any value surrounded by quotes.\r\n\r\nIt can be single or double quotes:\r\n\r\n```js\r\n'this is a string'\r\n\r\n\"this is also a string\"\r\n```\r\n\r\n###### NOTE\r\n\r\nTry to stay consistent. In this workshop we'll only use single quotes.\r\n\r\n###### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/02/app.js`.\r\n\r\nIn that file declare a variable named `someString`:\r\n\r\n```js\r\nvar someString = 'this is a string';\r\n```\r\n\r\nUse `boscode.display()` to print the variable **someString** to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n\r\n___\r\n\r\n### 03 String length\r\n\r\nYou will often need to know how many characters are in a string.\r\n\r\nFor this you will use the `.length` property. Here's an example:\r\n\r\n```js\r\nvar example = 'example string';\r\nexample.length\r\n```\r\n\r\n#### NOTE\r\n\r\nMake sure there is a period between `example` and `length`.\r\n\r\nThe above code will return a **number** for the total number of characters in the string.\r\n\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/03/app.js`.\r\n\r\nIn that file, create a variable named `example`.\r\n\r\n**Assign the string `'example string'` to the variable `example`.**\r\n\r\nUse `boscode.display()` to print the **length** of the string to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n\r\n___\r\n\r\n\r\n### 04 Revising strings\r\n\r\nYou will often need to change the contents of a string.\r\n\r\nStrings have built-in functionality that allow you to inspect and manipulate their contents.\r\n\r\nHere is an example using the `.replace()` method:\r\n\r\n```js\r\nvar example = 'this example exists';\r\nexample = example.replace('exists', 'is awesome');\r\nboscode.display(example);\r\n```\r\n\r\nNote that to change the value that the `example` variable references, we need  \r\nto use the equals sign again, this time with the `example.replace()` method to  \r\nthe right of the equals sign.\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/04/app.js`.\r\n\r\nDefine a variable named `pizza` that references this string: `'pizza is alright'`\r\n\r\nUse the `.replace()` method to change `alright` to `wonderful`.\r\n\r\nUse `boscode.display()` to print the results of the `.replace()` method to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n\r\n___\r\n\r\n\r\n### 05 Numbers\r\n\r\nNumbers can be integers, like `2`, `14`, or `4353`, or they can be decimals,  \r\nalso known as floats, like `3.14`, `1.5`, or `100.7893423`.\r\nUnlike Strings, Numbers do not need to have quotes.\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/05/app.js`.\r\n\r\n\r\nIn that file define a variable named `example` that references the integer `123456789`.\r\n\r\nUse `boscode.display()` to print that number to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n\r\n___\r\n### 06 Rounding numbers\r\n\r\nWe can do basic math using familiar operators like `+`, `-`, `*`, `/`, and `%`.\r\n\r\nFor more complex math, we can use the `Math` object.\r\n\r\nIn this challenge we'll use the `Math` object to round numbers.\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/06/app.js`.\r\n\r\n\r\nIn that file define a variable named `roundUp` that references the float `1.5`.\r\n\r\nWe will use the `Math.round()` method to round the number up. This method rounds either up or down to the nearest integer.\r\n\r\nAn example of using `Math.round()`:\r\n\r\n```js\r\nMath.round(0.5);\r\n```\r\n\r\nDefine a second variable named `rounded` that references the output of the `Math.round()` method, passing in the `roundUp` variable as the argument.\r\n\r\nUse `boscode.display()` to print that number to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n\r\n___\r\n\r\n### 07 Number to string\r\n\r\nSometimes you will need to turn a number into a string.\r\n\r\nIn those instances you will use the `.toString()` method. Here's an example:\r\n\r\n```js\r\nvar n = 256;\r\nn = n.toString();\r\n```\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/07/app.js`.\r\n\r\n\r\nIn that file define a variable named `n` that references the number `128`;\r\n\r\nCall the `.toString()` method on the `n` variable.\r\n\r\nUse `boscode.display()` to print the results of the `.toString()` method to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n___\r\n\r\n### 08 If statement\r\n\r\nConditional statements are used to alter the control flow of a program, based on a specified boolean condition.\r\n\r\nA conditional statement looks like this:\r\n\r\n```js\r\nif (n > 1) {\r\n  boscode.display('the variable n is greater than 1.');\r\n} else {\r\n  boscode.display('the variable n is less than or equal to 1.');\r\n}\r\n```\r\n\r\nInside parentheses you must enter a logic statement, meaning that the result of the statement is either true or false. \r\n\r\nThe else block is optional and contains the code that will be executed if the statement is false.\r\n\r\nThe above javascript code in pseudocode (see [also](https://github.com/Quobject/boscode/blob/master/docs/pseudocode.md#binary-selection)):\r\n```\r\nIF n > 1 THEN\r\n  Display \"the variable n is greater than 1.\"\r\nELSE\r\n  Display \"the variable n is less than or equal to 1.\"\r\nENDIF\r\n```\r\n\r\n#### The challenge:\r\n\r\n1) In your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/08/app.js`.\r\n\r\n\r\nIn that file, declare a variable named `fruit`.\r\n\r\nMake the `fruit` variable reference the value **orange** with the type of **String**.\r\n\r\nThen use `boscode.display()` to print \"**The fruit name has more than five characters.\"** if the length of the value of `fruit` is greater than five.\r\nOtherwise, print \"**The fruit name has five characters or less.**\"\r\n\r\nCheck to see if your program is correct.\r\n\r\n2) In your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/08/pseudocode.txt`.\r\n\r\nIn this file write your javascript solution as pseudocode. \r\nNote: Assume LENGTH( varName ) exists that returns the number of characters of a string variable.\r\n___\r\n\r\n### 09 For loop\r\n\r\nFor loops allow you to repeatedly run a block of code a certain number of times. This for loop logs to the console ten times:\r\n\r\n```js\r\nfor (var i = 0; i < 10; i++) {\r\n  // log the numbers 0 through 9\r\n  boscode.display(i)\r\n}\r\n```\r\n\r\nThe first part, `var i = 0`, is run once at the beginning of the loop. The variable `i` is used to track how many times the loop has run.\r\n\r\nThe second part, `i < 10`, is checked at the beginning of every loop iteration before running the code inside the loop. If the statement is true, the code inside the loop is executed. If it is false, then the loop is complete. The statement `i < 10;` indicates that the loop will continue as long as `i` is less than `10`.\r\n\r\nThe final part, `i++`, is executed at the end of every loop. This increases the variable `i` by 1 after each loop. Once `i` reaches `10`, the loop will exit.\r\n\r\nThe above javascript code in pseudocode (see [also](https://github.com/Quobject/boscode/blob/master/docs/pseudocode.md#fornext-or-counted-loop)):\r\n```\r\nFOR i = 1 TO 9 STEP 1\r\n  Display i \r\nNEXT i\r\n```\r\n\r\n#### The challenge:\r\n\r\n1) In your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/09/app.js`.\r\n\r\nIn that file define a variable named `total` and make it equal the number `0`.\r\n\r\nDefine a second variable named `limit` and make it equal the number `10`.\r\n\r\nCreate a for loop with a variable `i` starting at 0 and increasing by 1 each time through the loop. The loop should run as long as `i` is less than `limit`.\r\n\r\nOn each iteration of the loop, add the number `i` to the `total` variable. To do this, you can use this statement (equivalent to total = total + i):\r\n\r\n```js\r\ntotal += i;\r\n```\r\n\r\nAfter the for loop, use `boscode.display()` to print the `total` variable to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n2) In your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/09/pseudocode.txt`.\r\n\r\nIn this file write your javascript solution as pseudocode. \r\n\r\n___\r\n\r\n### 10 Arrays\r\n\r\nAn array is a list of values. Here's an example:\r\n\r\n```js\r\nvar pets = ['cat', 'dog', 'rat'];\r\n\r\n//or\r\n\r\nvar pets = [];\r\n\r\npets[0] = 'cat';\r\npets[1] = 'dog';\r\npets[2] = 'rat';\r\n\r\n```\r\n\r\nThe above javascript code in pseudocode (see [also](https://github.com/Quobject/boscode/blob/master/docs/pseudocode.md#print-array-contents)):\r\n```\r\npets(0) = \"cat\"\r\npets(1) = \"dog\"\r\npets(2) = \"rat\"\r\n\r\n```\r\n\r\n##### The challenge:\r\n\r\n1) In your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/10/app.js`.\r\n\r\n\r\nIn that file define a variable named `pizzaToppings` that references an array that contains three strings in this order: `tomato sauce, cheese, pepperoni`.\r\n\r\nUse `boscode.display()` to print the `pizzaToppings` array to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n2) In your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/10/pseudocode.txt`.\r\n\r\nIn this file write your javascript solution as pseudocode. \r\n\r\n___\r\n\r\n### 11 Array filtering\r\n\r\nThere are many ways to manipulate arrays.\r\n\r\nOne common task is filtering arrays to only contain certain values.\r\n\r\nFor this we can use the `.filter()` method.\r\n\r\nHere is an example:\r\n\r\n```js\r\nvar pets = ['cat', 'dog', 'elephant'];\r\n\r\nvar filtered = pets.filter(function (pet) {\r\n  return (pet !== 'elephant');\r\n});\r\n```\r\n\r\nThe `filtered` variable will now only contain `cat` and `dog`.\r\n\r\n!== is a comparison operator (see [w3schools](http://www.w3schools.com/js/js_comparisons.asp)).\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/11/app.js`.\r\n\r\n\r\nIn that file, define a variable named `numbers` that references this array:\r\n\r\n```js\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n```\r\n\r\nLike above, define a variable named `filtered` that references the result of `numbers.filter()`.\r\n\r\nThe function that you pass to the `.filter()` method will look something like this:\r\n\r\n```js\r\nfunction evenNumbers (number) {\r\n  return number % 2 === 0;\r\n}\r\n```\r\n\r\nUse `boscode.display()` to print the `filtered` array to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n___\r\n\r\n### 12 Accessing array values\r\n\r\nArray elements can be accessed through index number.\r\n\r\nIndex number starts from zero to array's property length minus one.\r\n\r\nHere is an example:\r\n\r\n\r\n```js\r\nvar pets = ['cat', 'dog', 'rat'];\r\n\r\nboscode.display(pets[0]);\r\n```\r\n\r\nThe above code will print the first element of `pets` array - string `cat`.\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/12/app.js`.\r\n\r\n\r\nIn that file, define array `food` :\r\n```js\r\nvar food = ['apple', 'pizza', 'pear'];\r\n```\r\n\r\n\r\nUse `boscode.display()` to print the `second` value of array to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n___\r\n\r\n### 13 Looping through arrays\r\n\r\nFor this challenge we will use a **for loop** to access and manipulate a list of values in an array.\r\n\r\nAccessing array values can be done using an integer.\r\n\r\nEach item in an array is identified by a number, starting at `0`.\r\n\r\nSo in this array `hi` is identified by the number `1`:\r\n\r\n```js\r\nvar greetings = ['hello', 'hi', 'good morning'];\r\n```\r\n\r\nIt can be accessed like this:\r\n\r\n```js\r\ngreetings[1];\r\n```\r\n\r\nSo inside a **for loop** we would use the `i` variable inside the square brackets instead of directly using an integer.\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/13/app.js`.\r\n\r\nIn that file, define a variable named `pets` that references this array:\r\n\r\n```js\r\n['cat', 'dog', 'rat'];\r\n```\r\n\r\nCreate a for loop that changes each string in the array so that they are plural.\r\n\r\nYou will use a statement like this inside the for loop:\r\n\r\n```js\r\npets[i] = pets[i] + 's';\r\n```\r\n\r\nAfter the for loop, use `boscode.display()` to print the `pets` array to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n___\r\n\r\n### 14 Objects\r\n\r\nObjects are lists of values similar to arrays, except values are identified by keys instead of integers.\r\n\r\nHere is an example:\r\n\r\n```js\r\nvar foodPreferences = {\r\n  pizza: 'yum',\r\n  salad: 'gross'\r\n};\r\n```\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/14/app.js`.\r\n\r\nIn that file, define a variable named `pizza` like this:\r\n\r\n```js\r\nvar pizza = {\r\n  toppings: ['cheese', 'sauce', 'pepperoni'],\r\n  crust: 'deep dish',\r\n  serves: 2\r\n};\r\n```\r\n\r\nUse `boscode.display(pizza)` to print the `pizza` object to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n___\r\n\r\n### 15 Object properties\r\n\r\nYou can access and manipulate object properties ââ the keys and values that an object contains ââ using a method very similar to arrays.\r\n\r\nHere's an example using **square brackets**:\r\n\r\n```js\r\nvar example = {\r\n  pizza: 'yummy'\r\n};\r\n\r\nboscode.display(example['pizza']);\r\n```\r\n\r\nThe above code will print the string `'yummy'` to the terminal.\r\n\r\nAlternately, you can use **dot notation** to get identical results:\r\n\r\n```js\r\nexample.pizza;\r\n\r\nexample['pizza'];\r\n```\r\n\r\nThe two lines of code above will both return `yummy`.\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/15/app.js`.\r\n\r\nIn that file, define a variable named `food` like this:\r\n\r\n```js\r\nvar food = {\r\n  types: 'only pizza'\r\n};\r\n```\r\n\r\nUse `boscode.display()` to print the `types` property of the `food` object to the terminal.\r\n\r\nCheck to see if your program is correct.\r\n\r\n___\r\n\r\n\r\n\r\n### 16 Functions\r\n\r\nA function is a block of code that takes input, processes that input, and then produces output.\r\n\r\nHere is an example:\r\n\r\n```js\r\nvar example = function (x) {\r\n  return x * 2;\r\n}\r\n```\r\n\r\nWe can **call** that function like this to get the number 10:\r\n\r\n```js\r\nexample(5)\r\n```\r\n\r\nThe above example assumes that the `example` function will take a number as an argument ââ as input ââ and will return that number multiplied by 2.\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/16/app.js`.\r\n\r\nIn that file, define a function named `eat` that takes an argument named `food`  \r\nthat is expected to be a string.\r\n\r\nInside the function return the `food` argument like this:\r\n\r\n```js\r\nreturn food + ' tasted really good.';\r\n```\r\n\r\nInside of the parentheses of `boscode.display()`, call the `eat()` function with the string `bananas` as the argument.\r\n\r\nCheck to see if your program is correct.\r\n\r\n\r\n___\r\n\r\n### 17 Function arguments\r\n\r\nA function can be declared to receive any number of arguments. Arguments can be from any type. An argument could be a string, a number, an array, an object and even another function.\r\n\r\nHere is an example:\r\n\r\n```js\r\nvar example = function (firstArg, secondArg) {\r\n  boscode.display(firstArg, secondArg);\r\n}\r\n```\r\n\r\nWe can **call** that function with two arguments like this:\r\n\r\n```js\r\nexample('hello', 'world');\r\n```\r\n\r\nThe above example will print to the terminal `hello world`.\r\n\r\n#### The challenge:\r\n\r\nIn your cloud 9 workspace edit the file  `/home/ubuntu/workspace/code/tasks/17/app.js`.\r\n\r\nIn that file, define a function named `math` that takes three arguments. It's important for you to understand that arguments names are only used to reference them.\r\n\r\nName each argument as you like.\r\n\r\nWithin the `math` function, return the value obtained from multiplying the second and third arguments and adding that result to the first argument.\r\n\r\nAfter that, inside the parentheses of `boscode.display()`, call the `math()` function with the number `53` as first argument, the number `61` as second and the number `67` as third argument.\r\n\r\nCheck to see if your program is correct.\r\n\r\n___\r\n\r\n\r\n\r\n### 18 Sum\r\n\r\n1. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/18/app.js`. In that file, write a program that reads in two numbers from the console and adds them up. Print the result to the console.\r\n\r\n2) In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/18/pseudocode.txt`. In this file write your javascript solution as pseudocode. \r\n___\r\n\r\n\r\n### 19 Highindex\r\n\r\n1. Review https://github.com/Quobject/boscode-learn#10-arrays.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/19/app.js`. Create a js function that takes `highIndex` as input parameter and creates an array of integers 0 - highIndex that has every value set to its index. Call the function and display the result to the console.\r\n\r\n3. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/19/pseudocode.txt`. In this file write your javascript solution as pseudocode. \r\n\r\n___\r\n\r\n\r\n### 20 Binary sum\r\n\r\n1. Review: https://github.com/Quobject/boscode#printing-the-contents-of-a-file-using-eof-end-of-file\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/20/app.js`. In this file write a program that reads a text file containing strings made up of zeroes and ones and outputs to the console. The program counts the number of ones per line and outputs the input ` - ` result.\r\n\r\nHint: You might find the JavaScript String split() Method http://www.w3schools.com/jsref/jsref_split.asp useful.\r\n\r\nExample:\r\n\r\n| Input         | Output        | \r\n|---------------|---------------| \r\n| 0011          | 0011 - 2      | \r\n| 0101010       | 0101010 - 3   | \r\n| 01            | 01 - 1        | \r\n| 00000000      | 00000000 - 0  | \r\n| 1111          | 1111 - 4      |\r\n\r\n ___\r\n\r\n\r\n### 21 Integer addition\r\n\r\nThe parseInt() function parses a string and returns an integer http://www.w3schools.com/jsref/jsref_parseint.asp.\r\n\r\n1. Review the JavaScript String split() Method http://www.w3schools.com/jsref/jsref_split.asp.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/21/app.js`. Write a program that reads a text file containing lines of two numbers and a plus character in the middle. The program should add the two numbers (as integers not strings) and print the input, `=` and the result to the console.\r\n\r\nExample:\r\n\r\n| Input         | Output        | \r\n|---------------|---------------| \r\n| 1+1           | 1+1=2         | \r\n| 99+2          | 99+2=101      | \r\n| 1000+0        | 1000+0=1000   | \r\n\r\n\r\n___\r\n\r\n\r\n### 22 Comparing strings\r\n\r\n1. JavaScript Comparison and Logical Operators: read through the information provided at http://www.w3schools.com/js/js_comparisons.asp, especially `Comparing Different Types`.\r\n\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/22/app.js`. In that file write a program that reads in two strings from the console and prints out the string that is alphabetically higher (e.g. B is higher than A)\r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>abc</br>def</td>\r\n    <td>def</td>\r\n  </tr>\r\n  <tr>\r\n    <td>A</br>a</td>\r\n    <td>a</td>\r\n  </tr>\r\n  <tr>\r\n    <td>node</br>javascript</td>\r\n    <td>node</td>\r\n  </tr>\r\n</table>\r\n\r\n3. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/22/pseudocode.txt`. In this file write your javascript solution as pseudocode. \r\n\r\n___\r\n\r\n\r\n### 23 Digit sum\r\n\r\n1. Review the JavaScript String split() Method http://www.w3schools.com/jsref/jsref_split.asp and also `parseInt` http://www.w3schools.com/jsref/jsref_parseint.asp\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/23/app.js`. In that file write a program that reads a text file containing lines of digits. For each line the program should add up all digits and show the result to the console.\r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>11</td>\r\n    <td>2</td>\r\n  </tr>\r\n  <tr>\r\n    <td>10000</td>\r\n    <td>1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>123</td>\r\n    <td>6</td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n\r\n### 24 Highest digit\r\n\r\n1. Review [Find maximum value in an array](https://github.com/Quobject/boscode/blob/master/docs/pseudocode.md#find-maximum-value-in-an-array).\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/24/app.js`. In that file write a program that reads in a line of digits from the console. The program should print out the highest digit to the console.\r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>0000</td>\r\n    <td>0</td>\r\n  </tr>\r\n  <tr>\r\n    <td>10000</td>\r\n    <td>1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>1230</td>\r\n    <td>3</td>\r\n  </tr>\r\n  <tr>\r\n    <td>43216</td>\r\n    <td>6</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n\r\n___\r\n\r\n\r\n### 25 Test length\r\n\r\n1. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/25/app.js`. In that file write a program that reads in two lines from the console. The first input should be an integer indicating a length `l`. The second input should be a word. If the length of the word is less or equal to `l` then the output should be `OK`. If the length of the word is greater than `l` then the output should be `TOO LONG`.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/25/pseudocode.txt`. In this file write your javascript solution as pseudocode. \r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>5<br>cat</td>\r\n    <td>OK</td>\r\n  </tr>\r\n  <tr>\r\n    <td>5<br>kangaroo</td>\r\n    <td>TOO LONG</td>\r\n  </tr>\r\n</table>\r\n___\r\n\r\n\r\n### 26 How many e's\r\n\r\n1. Review the JavaScript String substring() Method: http://www.w3schools.com/jsref/jsref_substring.asp\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/26/app.js`. In that file write a program that reads in words from a text file, one word per line. If the word contains the letter `a`, the first part of the output should be `a-yes` otherwise is should be `a-no`. The second part of the output should count how many times the letter `e` occurs. Every word has only lowercase letters.\r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>text<br>many<br>reads<br>weather</td>\r\n    <td>a-no e-1<br>a-yes e-0<br>a-yes e-1<br>a-yes e-2</td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n\r\n### 27 Camel case\r\n\r\nCamelCase (also camel caps or medial capitals) is the practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter. Camel case may start with a capital or, especially in programming languages, with a lowercase letter.\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/27/app.js`. In the file write a program that converts strings to camel case. Read in rows of words from a text file. Each row convert to camel case and print to the console.\r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Foo Bar</td>\r\n    <td>fooBar</td>\r\n  </tr>\r\n  <tr>\r\n    <td>convert to camel case</td>\r\n    <td>convertToCamelCase</td>\r\n  </tr>\r\n</table>\r\n \r\n \r\n___\r\n\r\n\r\n### 28 Valid 24 hours\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/28/app.js`. The 24-hour system of time uses four digits to represent a time to the nearest minute between midnight (0000) and one minute to midnight on the same day (2359). Write a program that reads 4-digit numbers from a text file and checks if the number is a valid time. The output should be to the console.\r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>0509</td>\r\n    <td>Valid time</td>\r\n  </tr>\r\n  <tr>\r\n    <td>0661</td>\r\n    <td>Invalid time</td>\r\n  </tr>\r\n  <tr>\r\n    <td>2609</td>\r\n    <td>Invalid time</td>\r\n  </tr>\r\n  <tr>\r\n    <td>1125</td>\r\n    <td>Valid time</td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n\r\n### 29 AM & PM\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/29/app.js`. The 24-hour system of time uses four digits to represent a time to the nearest minute between midnight (0000) and one minute to midnight on the same day (2359). Write a program that reads 4-digit numbers from a text file and checks if the time is before or after noon. Print AM or PM to the console.\r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>0509</td>\r\n    <td>AM</td>\r\n  </tr>\r\n  <tr>\r\n    <td>0621</td>\r\n    <td>AM</td>\r\n  </tr>\r\n  <tr>\r\n    <td>2309</td>\r\n    <td>PM</td>\r\n  </tr>\r\n  <tr>\r\n    <td>1259</td>\r\n    <td>AM</td>\r\n  </tr>\r\n  <tr>\r\n    <td>1300</td>\r\n    <td>PM</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n\r\n___\r\n\r\n\r\n### 30 Word index\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/30/app.js`. In that file write a program that generates a simple index from a list of words from a text file, one per line. The index shows each word and the position of the word in the list, counting from 1. Print the index to the console.\r\n\r\nExample:\r\n<table>\r\n\t<tr>\r\n\t<th>Input</th>\r\n\t<th>Output</th>\r\n\t</tr>\r\n<tr><td><pre>Time<br>\r\nflies<br>\r\nlike<br>\r\nan<br>\r\narrow<br>\r\nbut<br>\r\nfruit<br>\r\nflies<br>\r\nlike<br>\r\na<br>\r\nbanana<br>\r\nGroucho<br>\r\nMarx<br>\r\n</pre></td\r\n><td><pre>\r\nTime 1<br>\r\nflies 2<br>\r\nlike 3<br>\r\nan 4<br>\r\narrow 5<br>\r\nbut 6<br>\r\nfruit 7<br>\r\nflies 8<br>\r\nlike 9<br>\r\na 10<br>\r\nbanana 11<br>\r\nGroucho 12<br>\r\nMarx 13<br>\r\n</pre></td></tr> \r\n</table> \r\n\r\n___\r\n\r\n### 31 Sorted index\r\n\r\n1. Review [array sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) and also http://stackoverflow.com/a/9645447/1109316.\r\n\r\n2. Same task as task 30 Word index i.e. write a program that generates a simple index from a list of words from a text file, one per line. The index shows each word and the position of the word in the list, counting from 1. \r\n\r\n3. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/31/app.js`. New in this task: the index should be sorted by word (case-insensitive).\r\n \r\nExample:\r\n<table>\r\n\t<tr>\r\n\t<th>Input</th>\r\n\t<th>Output</th>\r\n\t</tr>\r\n<tr><td><pre>Time<br>\r\nflies<br>\r\nlike<br>\r\nan<br>\r\narrow<br>\r\nbut<br>\r\nfruit<br>\r\nflies<br>\r\nlike<br>\r\na<br>\r\nbanana<br>\r\nGroucho<br>\r\nMarx<br>\r\n</pre></td><td><pre>\r\na 10<br>\r\nan 4<br>\r\narrow 5<br>\r\nbanana 11<br>\r\nbut 6<br>\r\nflies 2<br>\r\nflies 8<br>\r\nfruit 7<br>\r\nGroucho 12<br>\r\nlike 3<br>\r\nlike 9<br>\r\nMarx 13<br>\r\nTime 1<br>\r\n</pre></td></tr>\r\n\r\n</table> \r\n\r\n\r\n___\r\n\r\n\r\n### 32  Formatted index\r\n\r\n1. Same task as task 31 Sorted index i.e. write a program that generates a simple index from a list of words from a text file, one per line. The index shows each word and the position of the word in the list, counting from 1. The index should be sorted by word (case-insensitive).\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/31/app.js`. New in this task: It must be formatted so the word and the position are separated by dots and the last character of the position number is in a fixed column.\r\n\r\nExample:\r\n<table>\r\n\t<tr>\r\n\t<th>Input</th>\r\n\t<th>Output</th>\r\n\t</tr>\r\n<tr><td><pre>Time<br>\r\nflies<br>\r\nlike<br>\r\nan<br>\r\narrow<br>\r\nbut<br>\r\nfruit<br>\r\nflies<br>\r\nlike<br>\r\na<br>\r\nbanana<br>\r\nGroucho<br>\r\nMarx<br>\r\n</pre></td><td><pre>\r\na............10<br>\r\nan............4<br>\r\narrow.........5<br>\r\nbanana.......11<br>\r\nbut...........6<br>\r\nflies.........2<br>\r\nflies.........8<br>\r\nfruit.........7<br>\r\nGroucho......12<br>\r\nlike..........3<br>\r\nlike..........9<br>\r\nMarx.........13<br>\r\nTime..........1<br>\r\n</pre></td></tr>\r\n</table> \r\n___\r\n\r\n\r\n### 33 Length conversion\r\n\r\n1. Review the JavaScript String indexOf() Method http://www.w3schools.com/jsref/jsref_indexof.asp.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/33/app.js`. In that file write a program that converts distances given in km, mm or cm into m. The program should read from the console and output to the console and stop if -1 is the input:\r\n\r\nExample:\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n<tr><td><pre>1m</pre></td><td><pre>1m</pre></td></tr>\r\n<tr><td><pre>1km</pre></td><td><pre>1000m</pre></td></tr>\r\n<tr><td><pre>34cm</pre></td><td><pre>0.34m</pre></td></tr>\r\n<tr><td><pre>900mm</pre></td><td><pre>0.9m</pre></td></tr>\r\n<tr><td><pre>33km</pre></td><td><pre>33000m</pre></td></tr> \r\n<tr><td><pre>-1</pre></td></tr> \r\n</table> \r\n\r\n___\r\n\r\n\r\n### 34 Highest Integer\r\n\r\n1. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/34/app.js`. In that file write a program that reads in three numbers from the console and prints out the highest number to the console.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/34/pseudocode.txt`. In this file write your javascript solution as pseudocode. \r\n\r\n\r\nExamples:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>1</br>2 </br>3</td>\r\n    <td>3</td>\r\n  </tr>\r\n  <tr>\r\n    <td>11</br>5</br>2</td>\r\n    <td>11</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n\r\n\r\n___\r\n\r\n### 35 Multiple words\r\n\r\n1. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/35/app.js`. In that file write a program that reads in one number `n` and one string from the console. The program should print out `n` times the given string.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/35/pseudocode.txt`. In this file write your javascript solution as pseudocode. \r\n\r\nExamples:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>1</br>hello</td>\r\n    <td>hello</td>\r\n  </tr>\r\n  <tr>\r\n    <td>3</br>world</td>\r\n    <td>world</br>world</br>world</td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n### 36 Odd numbers\r\n\r\n1. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/36/app.js`. In that file write a program that produces a table containing numbers printed in three columns and several rows.  \r\n * First column: the row number, starting at 1, then 2, 3, 4, \r\n * Second column: the corresponding odd number, starting at 1, then 3, 5, 7, ....\r\n * Third column: the sum of the numbers in column 2 up to and including that row. So the first row will show 1, then 1+3, then 1+3+5, ...  \r\n The program should stop after the 15th row is displayed.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/36/pseudocode.txt`. In this file write your javascript solution as pseudocode. \r\n \r\nExample:\r\n\r\n```bash\r\n1        1        1\r\n2        3        4\r\n3        5        ?\r\n4        7        ?\r\n5        9        ?  \r\n```\r\n\r\n___\r\n\r\n### 37 Vowels\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/37/app.js`. In that file write a program that given a string, prints it out with the vowels (aeiouAEIOU) and spaces removed. The input needs to be read from a text file and the output should be the console.\r\n\r\nExamples:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Backwards</td>\r\n    <td>Bckwrds</td>\r\n  </tr>\r\n  <tr>\r\n    <td>If at first you don't succeed...</td>\r\n    <td>ftfrstydn'tsccd...</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Aeiouuua</td>\r\n    <td></td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n### 38 Bar code\r\n\r\nItems purchased at supermarkets, bookshops and other retail outlets have a product bar code printed on the packaging. The bar code consists of lines of varying thickness, encoding a 13-digit product identifying number.\r\n\r\nThe number consists of four parts:\r\n\r\n* The first two digits represents a type code (93 is for Australian goods, 97 for books)\r\n* The next five digits is a manufacturer's identifying number (for example, 00652)\r\n* The next five digits is the product number assigned by the manufacturer (01091)\r\n* The last (thirteenth) digit is what is called a check digit.\r\n\r\nThe check digit is used to help detect if an error has occurred during scanning, or by someone incorrectly typing the number. It is chosen such that the sum of the digits in odd positions (the first, third, fifth and so on, including the check digit itself) plus three times the sum of the digits in the even positions is a multiple of 10. This means that if any one digit is misread as a different value, the sum will be inappropriate (not a multiple of 10) and the barcode can be rejected.\r\n\r\nExample:\r\n```\r\n9300652010916\r\n\r\n^ ^ ^ ^ ^ ^ ^ odd sum is 9+0+6+2+1+9+6 = 33\r\n\r\n^ ^ ^ ^ ^ ^ even sum is 3+0+5+0+0+1 = 9\r\n\r\n\r\n33 + 3\\*9 = 60\r\n```\r\n\r\nand the number is valid since 60 mod 10 = 0.\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/38/app.js`. In that file write a program that reads in any number of bar codes and determines whether or not each is valid. The input consists of a sequence of lines, each containing a 13-digit number. The last line contains 13 zeroes to signal the end of input.\r\n\r\nFor each code, print the code and either the string \"OK\" or the string \"INVALID\". The input needs to be read from a text file and the output should got to the console.\r\n\r\n\r\nExample:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n <tr><td><pre>9300652010916<br>\r\n9300652040916<br>\r\n9315626000480<br>\r\n9780805300604<br>\r\n9780803500604<br>\r\n9781875932548<br>\r\n0000000000000</pre></td><td><pre>9300652010916 OK<br>\r\n9300652040916 INVALID<br>\r\n9315626000480 OK<br>\r\n9780805300604 OK<br>\r\n9780803500604 INVALID<br>\r\n9781875932548 INVALID<br> \r\n </pre></td></tr>\r\n</table>\r\n\r\n___\r\n\r\n### 39 Runs\r\n\r\nA run is a list of contiguous numbers that are either all increasing (ups) or all decreasing (downs). Up runs and down runs always alternate, and the last element of one run is the first of the next run.\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/39/app.js`. In that file write a program that counts the number of runs in several lists of numbers. \r\n\r\nExamples:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>4 1 8 12 17</td>\r\n    <td>2</td>\r\n  </tr>\r\n  <tr>\r\n    <td>2 5 9</td>\r\n    <td>1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>-4 -5 -2 0 1 0</td>\r\n    <td>3</td>\r\n  </tr>\r\n</table>\r\n\r\nYou can assume that there are always at least three numbers. The input needs to be read from a text file and the output should go to the console.\r\n___\r\n\r\n### 40 Printing numbers\r\n\r\n1. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/40/app.js`. In that file write a program that reads in two numbers from the console and prints out every number between those two numbers including the two number to the console. You can assume the second number is always greater than the first. \r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/40/pseudocode.txt`. In this file write your javascript solution as pseudocode.\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>1</br>2</td>\r\n    <td>1<br>2</td>\r\n  </tr>\r\n  <tr>\r\n    <td>1</br>3</td>\r\n    <td>1<br>\r\n2<br>\r\n3</td>\r\n  </tr>\r\n  <tr>\r\n    <td>5</br>10</td>\r\n    <td>5<br>\r\n6<br>\r\n7<br>\r\n8<br>\r\n9<br>\r\n10</td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n### 41 Average\r\n\r\n1. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/41/app.js`. In that file write a program that, given a list of numbers calculates the average of those numbers. The list is terminated by a line containing -1 (sentinel value). Don't regard this value, it's there just to make it easy for you to tell that the list is finished. The input needs to be read from a text file and the output should go to the console.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/41/pseudocode.txt`. In this file write your javascript solution as pseudocode.\r\n\r\nExamples:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>1<br>\r\n2<br>\r\n3<br>\r\n4<br>\r\n-1\r\n</td>\r\n    <td>2.5</td>\r\n  </tr>\r\n  <tr>\r\n    <td>3<br>\r\n5<br>\r\n7<br>\r\n2<br>\r\n-1</td>\r\n    <td>4.25</td>\r\n  </tr>\r\n  <tr>\r\n    <td>99.9<br>\r\n100.1<br>\r\n100.2<br>\r\n101.3<br>\r\n200<br>\r\n1000<br>\r\n-1</td>\r\n    <td>266.92</td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n### 42 Counting $\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/42/app.js`. In that file write a program that reads a text file containing strings made up of #$%. The program counts the number of $ for each line.\r\n\r\n\r\nExamples:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>####</td>\r\n    <td>0</td>\r\n  </tr>\r\n  <tr>\r\n    <td>###%%%$</td>\r\n    <td>1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>$$$$$</td>\r\n    <td>5</td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n### 43 Words and characters\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/43/app.js`. In that file write a program that reads a text file containing words per line. The program should count the number of words and the number of characters for each line.\r\n\r\nExamples:\r\n\r\n<table>\r\n  <tr>\r\n    <th>Input</th>\r\n    <th>Output</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Hello world</td>\r\n    <td>2 words, 10 characters</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Lorem ipsum dolor sit amet</td>\r\n    <td>5 words, 22 characters</td>\r\n  </tr>\r\n</table>\r\n\r\n___\r\n\r\n### 44 Kaprekar Numbers\r\n\r\nMr D R Kaprekar (1905â1986), was an Indian schoolteacher and recreational mathematician. Among his many achievements is the discovery of a set of numbers with interesting properties that now bear his name.\r\n\r\nConsider a positive integer k with n digits. Follow these steps:\r\n\r\n1. Square k.\r\n2. Split the result into two pieces, the last n digits and the rest.\r\n3. Add these pieces (if one is empty, treat as zero).\r\n4. If the sum is equal to k, then k is a Kaprekar number, otherwise it's not.\r\n\r\nExample\r\n\r\n1 and 45 are both Kaprekar numbers because\r\n```\r\n1*1 = 1 and 0 + 1 = 1\r\n45*45 = 2025 and 20 + 25 = 45\r\n```\r\n\r\nbut 123 is not since\r\n```\r\n123*123 = 15129 and 15 + 129 is not equal to 123\r\n```\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/44/app.js`. In that file write a program that displays all the Kaprekar numbers less than 10000. A good solution is to write a function that tests an integer to see if it's a Kaprekar number, then use it in a loop that tries all possibilities. If your programming language doesn't support mixing integers and strings, you may need to use a built-in function to convert the number to a string so you can pick off the last n digits. (for javascript see e.g. [JavaScript Number toString() Method](http://www.w3schools.com/jsref/jsref_tostring_number.asp)).\r\n\r\nIf you've just started programming, for partial marks just write a program that reads a number, determines if it's a Kaprekar number or not, and displays a suitable message that includes the number. Test it, one at a time, with each of these numbers\r\n```\r\n45 673 272 2223 7381 7777 9998\r\n```\r\n___\r\n\r\n### 45 Digital Roots\r\n\r\nNumerologists ascribe certain magical properties to numbers, and in turn derive numbers from words or phrases. Nonsense like this can still provide an interesting computational exercise.\r\n\r\nThe two algorithms of interest to us are:\r\n\r\nGiven a positive integer N, add up the digits in its decimal representation. If that sum has more than one digit, add up its digits and so on until only a single digit remains. That's the digital root of N.\r\n\r\n\r\nGiven a phrase containing one or more words, assign a number to each letter equal to its position in the alphabet, so that a is 1, b is 2 and so on to z (26). Capital letters are counted the same as small letters, and non-letters are ignored. Now add up the values and reduce the sum to its digital root, which becomes the digital root of the phrase. This process is called gematria.\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/45/app.js`. In that file write a program that reads in up to 20 lines, preceded by the number of lines from a textfile. For each line, if it contains only a number, calculate and display the digital root, spaces and the number. If it's a phrase, calculate the letter sum, then display the digital root, the sum and the phrase, agsin separated by spaces. Input and calculated numbers are less than a billion and phases are shorter than 100 characters.\r\n\r\nExample\r\nInput:\r\n```\r\n5\r\n123\r\nthe quick brown fox\r\n7823438\r\n\"640 K ought to be enough for anybody\". Bill Gates, 1981.\r\nProgcomp\r\n```\r\nOutput:\r\n```\r\n6       123\r\n4       211     the quick brown fox\r\n8       7823438\r\n1       406     \"640 K ought to be enough for anybody\". Bill Gates, 1981.\r\n4       103     Progcomp\r\n```\r\n\r\n*Test Data*\r\n\r\nYou should test your program on the following data:\r\n\r\n```\r\n14\r\n99999\r\n10000\r\n7\r\n12345678\r\n98765432\r\nJune\r\nUNSW Progcomp Twenty-thirteen\r\nthe second figure thrice\r\n\"Tragedy is when I cut my finger,...\r\nComedy is when you walk into an open sewer and die\" (attributed to Mel Brooks).\r\nthe thirty-sixth triangular number, declared the number of the beast\r\nA Clockwork Orange, Stanley Kubrick: 3*114+1=343\r\n(114 was Kubrick's signature code, it appears in four films as CRM114 or serum 114 or C-rm114.)\r\nNineteen associates attacked the World Trade Center in New York and the Pentagon in Washington.\r\n```\r\n\r\n___\r\n\r\n### 46 Plurals\r\n\r\nHow many times has a computer told you something using phrases like these?\r\n```\r\n3 item(s) in your basket\r\n1 message(s) in your inbox\r\n0 day(s) to go\r\n```\r\n\r\nThat's just lazy programming: the system knows exactly whether you have no items, one item or many items, so why can't it use the right words, like any five-year-old can?\r\n\r\nTo counter this insidious attitude of \"Oh it's too much trouble, the user can work it out,\" this task produces the appropriate phrase based on quantity, assuming the noun isn't one of a number that form irregular plurals (leave that for another time).\r\n\r\nGiven a non-negative integer quantity Q and a word, the correct phrase to print is either\r\n  * \"no\" and the plural of the word, if Q is zero;\r\n  * \"one\" and the singular of the word, if Q is 1; or\r\n  * the quantity as a decimal integer and the plural of the word, otherwise.\r\n\r\nTo form the plural of a word, use the following rules that cover common cases:\r\n  * If the word ends in \"s\", \"x\", \"z\", \"ch\" or \"sh\", append \"es\";\r\n  * If the word ends in \"o\" preceded by a consonant (that is, not \"a\", \"e\", \"i\", \"o\", \"u\" or \"y\" in this context), append \"es\";\r\n  * If the word ends in \"y\" preceded by a consonant, remove the \"y\" and append \"ies\";\r\n  * If the word ends in \"fe\" preceded by a letter other than another \"f\", remove the \"fe\" and append \"ves\";\r\n  * If the word ends in \"f\" preceded by a letter other than another \"f\", remove the \"f\" and append \"ves\"; or\r\n  * append \"s\" otherwise.\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/46/app.js`. In that file write a program that reads a quantity and word from each line of input from a textfle, separated by a space, and displays the appropriate phrase according to the rules above. The first input line contains the number of test cases that follow, which is a maximum of 30. Quantities are less than 10000 and no word is longer than 20 characters. Words are strictly in lower case.\r\n\r\nExample\r\n\r\nInput:\r\n```\r\n5\r\n6 ferry\r\n0 potato\r\n1 camera\r\n2 knife\r\n243 box\r\n```\r\nOutput:\r\n```\r\n6 ferries\r\nno potatoes\r\none camera\r\n2 knives\r\n243 boxes\r\n```\r\n\r\n*Test Data*\r\nYou should test your program on the following data:\r\n```\r\n27\r\n1 caterpillar\r\n101 dalmation\r\n9999 cat\r\n5 bee\r\n0 computer\r\n4 compass\r\n2 bus\r\n0 ibis\r\n8 lynx\r\n15 axe\r\n15 ax\r\n15 adze\r\n4 waltz\r\n7 church\r\n3 wish\r\n12 bath\r\n8 potato\r\n3 toe\r\n6 embryo\r\n6 kangaroo\r\n5 whisky\r\n3 kidney\r\n52 handcuff\r\n2 giraffe\r\n3 dwarf\r\n9 wife\r\n4 handkerchief\r\n```\r\n\r\n\r\n___\r\n\r\n### 47 Team Counts\r\n\r\nThe Progcomp 2011 rules state:\r\n  * In addition to any number of teams of three, each high school will be allowed to register exactly ONE or TWO teams of 2 students. \r\n  * A high school with a single outstanding student may register a team consisting only of that student, but only if no other team is registered from that school.\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/47/app.js`. In that file write a program that, given the number of participants a school has (1 or more), determines exactly how many teams of 3, teams of 2 and teams of 1 the school is allowed to register.\r\n\r\nThe first line of input to the program is the number of schools, followed by the number of participants for each school, each on a separate line. No other information is provided or needed.\r\n\r\nThe program should show the number of participants and how many teams of each size, using singular or plural terms as appropriate (\"team\" vs \"teams\"), and omitting mention of zero cases. Use the format shown below, including a comma to separate items and a full stop at the end. Marks are awarded both for computational correctness and following the format.\r\n\r\nExample\r\n\r\nInput:\r\n```\r\n4\r\n7\r\n9\r\n2\r\n1\r\n```\r\n\r\nOutput:\r\n```\r\n7 participants = 1 team of 3, 2 teams of 2.\r\n9 participants = 3 teams of 3.\r\n2 participants = 1 team of 2.\r\n1 participant = 1 team of 1.\r\n```\r\n\r\nTest Data\r\n\r\nYou should test your program on the following data:\r\n```\r\n9\r\n3\r\n22\r\n1\r\n8\r\n120\r\n121\r\n4\r\n5\r\n2\r\n```\r\n\r\nInput from a textfile and output to the console.\r\n\r\n___\r\n\r\n### 48 Staircases\r\n\r\nA certain integer sequence is constructed as follows: Start with the integer 1. Add 1 to it (giving 2), multiply the result by 1. Then add 2 to that, multiply by 2, add 3, multiply by 3 and so on.\r\n\r\nThe sequence thus begins\r\n```\r\n1  2  2  4  8  11  33  37  148...\r\n```\r\n\r\nBecause you use the same factor to add and then multiply before incrementing it, let's call it the Staircase Sequence.\r\n\r\n1. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/48/app.js`. In that file write a program to print all values of the Staircase Sequence that are less than a million (1,000,000 or 10^6), one per line.\r\n\r\n2. In your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/48/pseudocode.txt`. In this file write your javascript solution as pseudocode.\r\n\r\n\r\n___\r\n\r\n### 49 Two-up\r\n\r\nThe traditional Australian gambling game of two-up can legally be played only on Anzac Day each year. Its rules are simple, especially in the limited form described here. One person, the Spinner, bets Heads (H) or Tails (T). He or she then throws two pennies up in the air. If the pennies land with one head showing and one tail showing, the result is called ODDS and the Spinner throws again. Otherwise the Spinner wins if the pennies (now both Heads or both Tails) match the bet they made, and loses otherwise.\r\n\r\nIf five ODDS are thrown in a row, the Spinner loses too.\r\n\r\nIn your cloud 9 workspace edit the file `/home/ubuntu/workspace/code/tasks/49/app.js`. In that file write a program that scores this version of two-up. The input consists of several lines read from a textfile, each representing a throw, preceded by the number of throws. Each throw consists of a bet (H or T) followed by the result of the throw (two symbols, each H or T). The three letters are separated by a space.\r\n\r\nThe program should repeat the inp"
}