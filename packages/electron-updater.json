{
  "name": "electron-updater",
  "version": "0.3.1",
  "description": "Cross platform auto-updater for electron applications",
  "main": "index.js",
  "author": {
    "name": "Evolve LLC"
  },
  "license": "MIT",
  "keywords": [
    "electron"
  ],
  "homepage": "https://github.com/evolvelabs/electron-updater",
  "repository": {
    "user": "evolvelabs",
    "repo": "electron-updater",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/evolvelabs/electron-updater/tarball/master",
    "clone_url": "https://github.com/evolvelabs/electron-updater",
    "https_url": "https://github.com/evolvelabs/electron-updater",
    "travis_url": "https://travis-ci.org/evolvelabs/electron-updater",
    "zip_url": "https://github.com/evolvelabs/electron-updater/archive/master.zip",
    "api_url": "https://api.github.com/repos/evolvelabs/electron-updater"
  },
  "scripts": {
    "test": "mocha",
    "watch": "mocha --watch"
  },
  "bin": {
    "electron-updater": "./bin/cli",
    "elup": "./bin/cli"
  },
  "dependencies": {
    "appdirectory": "^0.1.0",
    "async": "^0.9.0",
    "commander": "^2.8.1",
    "glob": "^5.0.14",
    "got": "^4.2.0",
    "minimist": "^1.1.1",
    "semver": "^4.3.3",
    "spin": "0.0.1",
    "tar-stream": "^1.1.4",
    "unzip": "^0.1.11"
  },
  "devDependencies": {
    "chai": "^2.3.0",
    "mocha": "^2.2.4",
    "proxyquire": "^1.4.0",
    "sinon": "^1.14.1"
  },
  "gitHead": "1c1e2c57c2db987c04a03a481883a5f5616ccfec",
  "bundleDependencies": [
    "appdirectory",
    "async",
    "glob",
    "got",
    "minimist",
    "semver",
    "spin",
    "tar-stream",
    "unzip"
  ],
  "_npmVersion": "3.8.3",
  "_nodeVersion": "5.10.1",
  "dist": {
    "shasum": "cbac4a66779c40caf0d5102965998fc54cb098dc",
    "tarball": "http://registry.npmjs.org/electron-updater/-/electron-updater-0.3.1.tgz"
  },
  "stars": 12,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-05-01T04:01:19.816Z"
    },
    {
      "number": "0.0.1",
      "date": "2015-05-12T17:53:54.033Z"
    },
    {
      "number": "0.0.2",
      "date": "2015-05-27T20:48:44.934Z"
    },
    {
      "number": "0.0.3",
      "date": "2015-06-01T19:01:39.922Z"
    },
    {
      "number": "0.0.4",
      "date": "2015-06-02T20:01:51.361Z"
    },
    {
      "number": "0.0.5",
      "date": "2015-06-05T21:56:23.820Z"
    },
    {
      "number": "0.0.6",
      "date": "2015-06-06T17:53:53.047Z"
    },
    {
      "number": "0.0.7",
      "date": "2015-06-12T14:10:59.271Z"
    },
    {
      "number": "0.0.8",
      "date": "2015-06-30T23:26:17.915Z"
    },
    {
      "number": "0.0.9",
      "date": "2015-07-08T21:50:05.950Z"
    },
    {
      "number": "0.0.10",
      "date": "2015-07-09T21:34:41.873Z"
    },
    {
      "number": "0.0.11",
      "date": "2015-07-11T16:01:28.491Z"
    },
    {
      "number": "0.0.12",
      "date": "2015-07-13T15:36:11.919Z"
    },
    {
      "number": "0.0.13",
      "date": "2015-07-13T15:49:48.744Z"
    },
    {
      "number": "0.0.14",
      "date": "2015-07-14T13:49:39.000Z"
    },
    {
      "number": "0.0.15",
      "date": "2015-07-15T16:14:52.498Z"
    },
    {
      "number": "0.0.16",
      "date": "2015-07-18T20:04:01.440Z"
    },
    {
      "number": "0.0.17",
      "date": "2015-07-21T19:09:54.237Z"
    },
    {
      "number": "0.0.18",
      "date": "2015-08-05T02:58:18.039Z"
    },
    {
      "number": "0.0.19",
      "date": "2015-08-06T20:30:33.299Z"
    },
    {
      "number": "0.0.20",
      "date": "2015-08-14T21:02:28.003Z"
    },
    {
      "number": "0.0.21",
      "date": "2015-08-17T19:14:28.761Z"
    },
    {
      "number": "0.0.22",
      "date": "2015-08-17T22:39:30.338Z"
    },
    {
      "number": "0.0.23",
      "date": "2015-08-17T23:00:15.909Z"
    },
    {
      "number": "0.1.0",
      "date": "2015-08-19T22:04:49.780Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-08-19T22:30:00.844Z"
    },
    {
      "number": "0.1.3",
      "date": "2015-08-26T22:15:16.177Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-09-20T23:31:44.077Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-10-23T07:34:02.803Z"
    },
    {
      "number": "0.2.2",
      "date": "2015-10-23T08:07:59.658Z"
    },
    {
      "number": "0.2.3",
      "date": "2015-12-07T17:15:52.527Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-02-20T18:19:10.953Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-04-24T19:06:57.280Z"
    }
  ],
  "created": "2015-05-01T04:01:19.816Z",
  "modified": "2016-04-24T19:06:57.280Z",
  "lastPublisher": {
    "name": "justinmchase",
    "email": "justin.m.chase@outlook.com"
  },
  "owners": [
    {
      "name": "evolvelabs",
      "email": "contact@evolvehq.com"
    },
    {
      "name": "justinmchase",
      "email": "justin.m.chase@outlook.com"
    }
  ],
  "readme": "# electron-updater \nCross platform auto-updater for electron apps\n\n[![Build Status](https://travis-ci.org/EvolveLabs/electron-updater.svg?branch=master)](https://travis-ci.org/EvolveLabs/electron-updater)\n\n# NOTE\nThis project is in maintainance only mode. It is recommended that you use the `electron-packager` and `electron-builder` projects to generate complete installable versions of your applications and use either the OS specific stores or some other mechanism for distributing your installers.\n\n# Install\nThere are three main packages that make up the `electron-updater`. \n\n    $ npm install electron-updater --save\n    $ npm install electron-plugins --save\n    $ npm install electron-updater-tools -g\n    \n> **NOTE:** Requires electron version `>=0.33.3`.\n    \nThe [electron-updater](htps://npmjs.org/package/electron-updater) package itself runs in your app's main process and does the actual updating. The [electron-plugins](https://npmjs.org/package/electron-plugins) project specifically loads the plugins downloaded by the updater in the render process. The third project, [electron-updater-tools](https://npmjs.org/package/electron-updater-tools) contains various scripts useful for building native electron addons as well as linking plugins during development time.\n    \n# Usage\nIntegrate the electron-updater into your electron main process. Below is a simplified example of the [Electron Quick Start](http://electron.atom.io/docs/latest/tutorial/quick-start/#write-your-first-electron-app) code with the `electron-updater` mixed in.\n## Example main.js\n```JavaScript\nvar app = require('app'),\n    BrowserWindow = require('browser-window'),\n    updater = require('electron-updater')\n\nvar mainWindow = null\n\napp.on('ready', function() {\n    updater.on('ready', function () {\n        mainWindow = new BrowserWindow({width: 800, height: 600})\n        mainWindow.loadURL('file://' + __dirname + '/index.html')\n        mainWindow.openDevTools({detach:true})        \n        mainWindow.on('closed', function() {\n            mainWindow = null;\n        })\n    })\n    updater.on('updateRequired', function () {        \n        app.quit();\n    })\n    updater.on('updateAvailable', function () {\n        mainWindow.webContents.send('update-available');\n    })\n    updater.start()\n})\n```\n\n## Example index.js (running in render process)\n```JavaScript\nvar plugins = require('electron-plugins'),\n  electron = require('electron'),\n\tipc = electron.ipcRenderer\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\tvar context = { document: document }\n\tplugins.load(context, function (err, loaded) {\n\t\tif(err) return console.error(err)\n\t\tconsole.log('Plugins loaded successfully.')\n\t})\n})\n\nipc.on('update-available', function () {\n\tconsole.log('there is an update available for download')\n})\n```\n\n# Error handling\nBy default errors are logged to both the console and a file. The default log file location is obtained by getting the [AppDirectory.userData()](https://www.npmjs.com/package/appdirectory) folder: `{userData}/logs/updater.log`. Additionally you can replace the default logger or simply handle errors manually with the below optional API's:\n\n```\nupdater.on('error', function (err) {\n  // todo: manually handle errors here in addition to default logger behavior...\n});\n\n// The logger signature is essentially the same as the console.\nvar customLogger = {\n  log: console.log,\n  error: console.error,\n  info: console.info,\n  warn: console.warn,\n  debug: console.debug\n};\nupdater.start(customLogger);\n```\n\n# Publishing Updates\nThere are two kinds of updates you can publish:\n * The Application itself\n * Plugins\n\nBoth kinds of updatable packages are distributed through [npm](http://npmjs.org). This means that publishing updates to your application and plugins are essentially done like this:\n```\n$ npm pack\n$ npm pub\n```\nThe application will periodically check npm for updates to any packages and update them when it can.\n\n## Hosting your own npm server\nIf you are developing a commercial application, or just want to control distribution yourself, you should host your own packages on your own npm server.\n\nAdd a path to your registry in the applications `package.json`:\n```\n  \"registry\": \"http://npm.mycompany.com:4873\",\n```\nTo tell npm to use this registry also, create a [.npmrc file](https://docs.npmjs.com/files/npmrc) in your application root directory containing:\n```\nregistry=http://npm.mycompany.com:4873\n```\n\nFortunately, hosting your own npm server is very easy to do with [sinopia](http://npmjs.org/packages/sinopia).\n```\n$ npm install sinopia -g\n$ sinopia\n```\nTo run sinopia as a service, you can use [forever](http://npmjs.org/packages/forever).\n```\n$ npm install forever -g\n$ forever start sinopia\n```\n\n## Plugins\nPlugins are different than normal dependencies. To establish a link to a plugin, add a `plugins` entry into your applications `package.json`:\n```\n  \"dependencies\": {\n    # ...\n  },\n  \"plugins\": {\n    \"electron-updater-example-plugin\": \"~0.1.0\"\n  },\n```\nWhen your application runs it will download and install these plugins into your users [AppDirectory.userData()](https://www.npmjs.com/package/appdirectory) folder. The main benefits of plugins is:\n * Gauranteed user directory, does not require elevation to update.\n * Supports side-by-side installation, so they can be updated while the app is running.\n * Application can be refreshed instead of restarted to apply updates.\n * Load arbitrary plugins using [electron-plugins](https://npmjs.org/packages/electron-plugins), instead of having fixed dependencies only.\n\nIn the `userData` folder there is also a `.current` file created, which is used to maintain the list of currently installed plugins. You can add items to that file to install non-default plugins.\n\n# Distributing binaries\nUntil there is better documentation on this, see these issues for answers:\n * https://github.com/EvolveLabs/electron-updater/issues/21\n * https://github.com/EvolveLabs/electron-updater/issues/10\n\n### Related\nSee the [`electron-builder`](https://www.npmjs.com/package/electron-builder) project for creating installers for\nvarious platforms.\n"
}