{
  "name": "audio-buffer-range-decoder",
  "version": "2.0.1",
  "description": "Decode specified ranges of PCM Wave and Opus webm files on disk to AudioBuffers. Probably only works with electron.",
  "main": "index.js",
  "scripts": {
    "test": "standard",
    "example": "electron-spawn example.js"
  },
  "repository": {
    "user": "livejs",
    "repo": "audio-buffer-range-decoder",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/livejs/audio-buffer-range-decoder/tarball/master",
    "clone_url": "https://github.com/livejs/audio-buffer-range-decoder",
    "https_url": "https://github.com/livejs/audio-buffer-range-decoder",
    "travis_url": "https://travis-ci.org/livejs/audio-buffer-range-decoder",
    "zip_url": "https://github.com/livejs/audio-buffer-range-decoder/archive/master.zip",
    "api_url": "https://api.github.com/repos/livejs/audio-buffer-range-decoder"
  },
  "keywords": [
    "AudioBuffer",
    "decodeAudioData",
    "range",
    "random",
    "access",
    "waapi",
    "electron",
    "opus",
    "webm"
  ],
  "author": {
    "name": "Matt McKegg"
  },
  "license": "MIT",
  "homepage": "https://github.com/livejs/random-access-audio-buffer",
  "devDependencies": {
    "electron-prebuilt": "^0.37.6",
    "electron-spawn": "^3.0.0",
    "standard": "^5.0.2"
  },
  "dependencies": {
    "ebml": "^2.2.0"
  },
  "gitHead": "148751b6c1f06b3240f2f833c8fd44dff1c23f3f",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.3.1",
  "dist": {
    "shasum": "99b218c9a8a86f9e5afb5ae2c7c5f2a7840434db",
    "tarball": "http://registry.npmjs.org/audio-buffer-range-decoder/-/audio-buffer-range-decoder-2.0.1.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-08-09T08:50:57.587Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-08-09T08:57:38.904Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-08-09T14:17:24.425Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-08-18T05:32:47.170Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-08-01T04:09:36.128Z"
    },
    {
      "number": "2.0.1",
      "date": "2016-08-01T04:22:59.505Z"
    }
  ],
  "created": "2015-08-09T08:50:57.587Z",
  "modified": "2016-08-01T04:22:59.505Z",
  "lastPublisher": {
    "name": "mmckegg",
    "email": "matt@wetsand.co.nz"
  },
  "owners": [
    {
      "name": "mmckegg",
      "email": "matt@wetsand.co.nz"
    }
  ],
  "readme": "audio-buffer-range-decoder\n===\n\nDecode specified ranges of PCM Wave or Opus webm files on disk to AudioBuffers. Probably only works if you are using electron.\n\nUseful for streaming large audio files from disk when you don't want to load the whole thing into memory.\n\n[![NPM](https://nodei.co/npm/audio-buffer-range-decoder.png)](https://nodei.co/npm/audio-buffer-range-decoder/)\n\n## Supported formats\n\n- PCM Wave\n- Opus webm (format generated by [MediaRecorder](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder_API))\n\n**Includes static builds of ffmpeg** for reading the Opus formatted files. Supported platforms: darwin, linux, win32\n\n## API\n\n```js\nvar RangeDecoder = require('audio-buffer-range-decoder')\n```\n\n### `var decodeRange = RangeDecoder(filePath, options, onLoad)`\n\nSpecify `filePath` on disk. Opens the file ready for access.\n\n`onLoad(err, meta)` is called when meta data has loaded.\n\nReturns a `decodeRange` function.\n\n*Options:*\n - `fs`: pass in [fs](https://nodejs.org/api/fs.html) implementation (required)\n - `audio`: instance of `AudioContext` to use for decoding (required)\n\n### `decodeRange(startTime, duration, callback)`\n\nPass in `startTime` and `duration` in seconds. `callback(err, audioBuffer)` will be called when data has been decoded or an error has occurred.\n\n### `decodeRange.close()`\n\nCall this when you are done reading to close the underlying file descriptor.\n"
}