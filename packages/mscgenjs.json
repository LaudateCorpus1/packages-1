{
  "name": "mscgenjs",
  "version": "1.5.2",
  "description": "Implementation of MscGen in JavaScript",
  "main": "index.js",
  "dependencies": {
    "amdefine": "1.0.0",
    "requirejs": "2.3.2"
  },
  "devDependencies": {
    "chai": "3.5.0",
    "chai-xml": "0.3.1",
    "eslint": "3.7.0",
    "istanbul": "0.4.5",
    "js-makedepend": "1.0.4",
    "jsdom": "9.5.0",
    "lodash-cli": "4.16.2",
    "mocha": "3.1.0",
    "npm-check-updates": "2.8.0",
    "nsp": "2.6.1",
    "pegjs": "0.10.0",
    "plato": "1.7.0"
  },
  "scripts": {
    "test": "mocha -R dot --timeout 6000 --recursive test",
    "cover": "istanbul cover node_modules/mocha/bin/_mocha -- --timeout 8000 --recursive test",
    "nsp": "nsp check",
    "plato": "plato -r -d platoreports -x \"parser|test|lib|platoreports|node_modules|coverage|indexAMD|csstemplates\" ./",
    "lint": "eslint index.js index-lazy.js indexAMD.js main parse render test",
    "npm-check-updates": "ncu --upgrade"
  },
  "repository": {
    "user": "sverweij",
    "repo": "mscgenjs-core",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/sverweij/mscgenjs-core/tarball/master",
    "clone_url": "https://github.com/sverweij/mscgenjs-core",
    "https_url": "https://github.com/sverweij/mscgenjs-core",
    "travis_url": "https://travis-ci.org/sverweij/mscgenjs-core",
    "zip_url": "https://github.com/sverweij/mscgenjs-core/archive/master.zip",
    "api_url": "https://api.github.com/repos/sverweij/mscgenjs-core"
  },
  "author": {
    "name": "Sander Verweij"
  },
  "license": "GPL-3.0",
  "keywords": [
    "mscgen",
    "sequence chart",
    "sequence diagram",
    "xu",
    "msgenny"
  ],
  "engines": {
    "node": ">=4.0"
  },
  "homepage": "https://github.com/sverweij/mscgenjs-core",
  "gitHead": "76e0466eb42177283cde56fa1178d9fea94fb1db",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.7.0",
  "dist": {
    "shasum": "78bc5e4f0eda1312471a43983cdbef31ef920066",
    "tarball": "http://registry.npmjs.org/mscgenjs/-/mscgenjs-1.5.2.tgz"
  },
  "versions": [
    {
      "number": "1.2.5",
      "date": "2015-12-16T18:59:43.576Z"
    },
    {
      "number": "1.2.6",
      "date": "2015-12-17T10:31:57.830Z"
    },
    {
      "number": "1.2.7",
      "date": "2015-12-31T16:26:43.171Z"
    },
    {
      "number": "1.2.8",
      "date": "2016-01-03T11:02:15.138Z"
    },
    {
      "number": "1.2.9",
      "date": "2016-01-30T12:58:38.087Z"
    },
    {
      "number": "1.2.10",
      "date": "2016-02-13T14:47:13.573Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-02-27T08:34:14.878Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-03-14T19:43:16.424Z"
    },
    {
      "number": "1.3.2",
      "date": "2016-03-28T10:36:16.148Z"
    },
    {
      "number": "1.3.4",
      "date": "2016-03-29T17:37:52.999Z"
    },
    {
      "number": "1.3.5",
      "date": "2016-04-10T16:52:48.235Z"
    },
    {
      "number": "1.3.6",
      "date": "2016-04-24T16:49:13.330Z"
    },
    {
      "number": "1.3.7",
      "date": "2016-05-19T18:49:13.218Z"
    },
    {
      "number": "1.4.0",
      "date": "2016-06-08T15:50:14.712Z"
    },
    {
      "number": "1.4.1",
      "date": "2016-06-19T14:55:59.647Z"
    },
    {
      "number": "1.4.2",
      "date": "2016-06-26T20:44:45.277Z"
    },
    {
      "number": "1.4.3",
      "date": "2016-07-15T18:33:15.858Z"
    },
    {
      "number": "1.5.0",
      "date": "2016-08-09T20:08:58.026Z"
    },
    {
      "number": "1.5.1",
      "date": "2016-09-02T18:21:02.847Z"
    },
    {
      "number": "1.5.2",
      "date": "2016-10-01T09:38:06.416Z"
    }
  ],
  "created": "2015-12-16T18:59:43.576Z",
  "modified": "2016-10-01T09:38:06.416Z",
  "lastPublisher": {
    "name": "sverweij",
    "email": "sverweij@yandex.com"
  },
  "owners": [
    {
      "name": "sverweij",
      "email": "sverweij@yandex.com"
    }
  ],
  "readme": "# mscgen_js - core package\nImplementation of [MscGen][mscgen] and two derived languages in JavaScript.\n\n> This is the JavaScript _library_ that takes care of parsing and\n> rendering MscGen. You might be looking for one of these in stead:\n> - [**online interpreter** - mscgen_js][mscgenjs.interpreter]\n> - [**atom package** - mscgen-preview][mscgen-preview]\n> - [**command line interface** - mscgenjs-cli][mscgenjs.cli]\n> - [how to **embed MscGen in html**][mscgenjs.embed].\n\n## Features\n- Parses and renders [MscGen][mscgen]\n  - Accepts all valid [MscGen][mscgen] programs and render them correctly.\n  - All valid MscGen programs accepted by mscgen_js are also accepted and\n    rendered correctly by the original `mscgen` command.\n  - If you find proof to the contrary: [tell us][mscgenjs.issues.compliance].\n- Parses and renders [X첫][mscgenjs.doc.xu]    \n  X첫 is a strict superset of MscGen. It adds things like `alt` and\n  `loop`.\n- Parses and renders [MsGenny][mscgenjs.doc.msgenny]    \n  Same as X첫, but with a simpler syntax.\n- Translates between these three languages\n- Spits out svg, GraphViz dot, doxygen and JSON.\n- runs in all modern browsers (and in _Node.js_).\n\n## I'm still here. How can I use this?\n### Prerequisites\nmscgen_js works in anything with an implementation of the document object model\n(DOM). This includes web-browsers, client-side application shells like electron\nand even headless browsers like phantomjs. It does _not_ include nodejs\n(although it is possible to get it sorta to work even there with\n[jsdom](https://github.com/tmpvar/jsdom)).\n\n### Get it\n`npm install mscgenjs`\n\n### Import it\nYou'll have to import the mscgenjs module somehow. There's a commonjs and a\nrequirejs variant, both of which are in the `mscgenjs`\n[npm module](https://www.npmjs.com/package/mscgenjs)\n(repo: [sverweij/mscgenjs-core](https://github.com/sverweij/mscgenjs-core)).\n\n```javascript\n// commonjs\nvar mscgenjs = require('mscgenjs');\n```\n\n```javascript\n// commonjs, but with lazy loading. Useful when you're using it in\n// e.g. an electron shell without a minifier.\nvar mscgenjs = require('mscgenjs/index-lazy');\n```\n\n```javascript\n// requirejs - assuming the module is in your root and you're loading from\n//             node_modules.\ndefine(['./node_modules/mscgenjs/index'], function(mscgenjs){\n    // your code here\n});\n\n// ... or using the alternative notation\ndefine(function(require){\n    var mscgenjs = require(\"./node_modules/mscgenjs/index\");\n    // your code here\n});\n```\n\n### Use it\n\n- **use the root module directly** => recommended    \n  e.g.  atom-mscgen-preview takes that approach. See the samples below\n- **individually do calls to the parse and render steps** => do this when you have\n  special needs.    \n  This is the approach the mscgen_js and mscgenjs-inpage script take. The main\n  reason these aren't using the root module directly is that it did not exist\n  at the time they were written (JUN 2013 and APR 2014 respectively).\n  [Link to where this happens in mscgen_js](https://github.com/sverweij/mscgen_js/blob/master/src/script/interpreter/uistate.js#L242)\n  and one\n  [where it happens in mscgenjs-inpage](https://github.com/mscgenjs/mscgenjs-inpage/blob/master/src/mscgen-inpage.js#L116).\n\nHere's some some samples for using the root module directly:\n```Javascript\n// renders the given script in the (already existing) element with id=yourCoolId\nmscgenjs.renderMsc (\n  'msc { a,b; a=>>b[label=\"render this\"; }',\n  {\n    elementId: \"yourCoolId\"\n  }\n);\n```\n\nIf you want to do error handling, or act on the created svg: provide a callback:\n```javascript\nmscgenjs.renderMsc (\n  'msc { a,b; a=>>b[label=\"render this\"; }',\n  {\n    elementId: \"yourOtherCoolId\"\n  },\n  handleRenderMscResult\n);\n\nfunction handleRenderMscResult(pError, pSuccess) {\n  if (Boolean(pError)){\n    console.log (pError);\n    return;\n  } else if (Boolean(pSuccess)){\n    console.log ('That worked - cool!');\n    return;\n   // the svg is in the pSuccess argument\n  }\n  console.log('Wat! Error nor success?');\n}\n```\n\nThe second parameter in the `renderMsc` call takes some options that influence rendering e.g.\n```javascript\nmscgenjs.renderMsc (\n  'a=>>b:render this;',\n  {\n    elementId: \"yourThirdCoolId\",\n    inputType: \"msgenny\", // language to parse - default \"mscgen\"; other accepted languages: \"xu\", \"msgenny\" and \"json\"\n    mirrorEntitiesOnBottom: true, // draws entities on both top and bottom of the chart - default false\n    additionalTemplate: \"lazy\", // use a predefined template. E.g. \"lazy\" or \"classic\". Default empty\n    includeSource: false, // whether the generated svg should include the source in a desc element\n  },\n```\n\nIn [doc/samples](doc/samples) you'll find a simple dynamic integration using\nwebpack and one using requirejs.\n\n### Transpiling\nYou can use the second function of the root module for transpiling to and from\nmsgenny, mscgen, x첫 and json and for exporting to dot and doxygen. This function\ndoes _not_ depend on the DOM so you can use it not only in browsers &\nbrowser-likes, but also hack-free in node.\n\n```javascript\nmscgenjs.translateMsc(\n    'wordwraparcs=on; you =>> me: can we translate this to Mscgen please?; me >> you: \"yes, you can - use translateMsc\";',\n    {\n        inputType: \"msgenny\", // defaults to mscgen - other accepted formats: msgenny, xu, json\n        outputType: \"mscgen\" // defaults to json - other accepted formats: mscgen, msgenny, xu, dot, doxygen\n    },\n    function(pError, pSuccess){\n        if(Boolean(pError)){\n            console.log(\"error:\", pError);\n            return;\n        }\n        if(Boolean(pSuccess)){\n            // the transpiled result is in pSuccess\n            console.log(pSuccess);\n            return;\n        }\n        console.log(\"Neither success nor failure. I do not even.\");\n    }\n);\n\n// result:\n//\n// msc {\n//   wordwraparcs=true;\n//\n//   you,\n//   me;\n//\n//   you =>> me [label=\"can we translate this to Mscgen please?\"];\n//   me >> you [label=\"yes, you can - use translateMsc\"];\n// }\n```\n\n## Battle tested implementations\n\nSoftware that uses `mscgenjs`:\n\n- the atom package [mscgen-preview][mscgen-preview.source] (CoffeeScript alert)\n  - specifically the [renderer][mscgen-preview.source.render]\n  - ... which is just 6 lines of code\n- the [embedder][mscgenjs.embed.source] (Any modern browser. Using require.js)\n- the [unit tests][mscgenjs.unit] from mscgenjs-core itself:\n  - [parse][mscgenjs.unit.parse] (Node.js)\n  - [render][mscgenjs.unit.render] (Node.js with jsdom)\n- the [on line interpreter][mscgenjs.interpreter.source] (Any modern browser.\n  Using require.js)\n  - ~ [where parsing happens][mscgenjs.interpreter.source.parse]\n  - ~ [where rendering happens][mscgenjs.interpreter.source.render]\n- the [command line interface][mscgenjs.cli.source] (Node.js, PhantomJS and\n  some spit)\n\n## Hacking on mscgenjs itself\n### Building mscgenjs\nSee [build.md][mscgenjs.docbuild].\n\n### How does mscgenjs work?\nYou can start reading about that [over here](doc/readme.md)\n\n## License\nThis software is free software [licensed under GPLv3][mscgenjs.license].\nThis means (a.o.) you _can_ use it as part of other free software, but\n_not_ as part of non free software.\n\n### Dependencies and their licenses\nWe built mscgen_js on various libraries, each of which have their own\nlicense (incidentally all MIT style):\n- mscgen_js uses [requirejs][requirejs.license] and [amdefine][amdefine.license]\n  for modularization.\n- We generated its parsers with [pegjs][pegjs.license].\n- mscgen_js automated tests use [mocha][21], [chai][39],\n  [chai-xml][40] and [jsdom][jsdom.license].\n\nIt uses [istanbul][28], [eslint][22], [plato][23] and [nsp][35] to maintain some\nmodicum of verifiable code quality. You can see the build history in\n[Travis][travis.mscgenjs] and an indication of the shape of the code at\n[Bit Hound][bithound.mscgenjs].\n\n## Thanks\n- [Mike McTernan][mscgen.author] for creating the wonderful\n  MscGen language, the accompanying c implementation and for releasing both\n  to the public domain (the last one under a [GPLv2][mscgen.license] license\n  to be precise).\n- [David Majda][pegjs.author] for cooking and maintaining the fantastic\n  and lightning fast [PEG.js][pegjs] parser generator.\n- [Elijah Insua][jsdom.author] for [jsdom][jsdom], which allows us to\n  test rendering vector graphics in Node.js without having to resort\n  to outlandish hacks.\n\n## Build status\n[![Build Status][travis.mscgenjs.badge]][travis.mscgenjs]\n[![bitHound Overall Score][bithound.mscgenjs.badge]][bithound.mscgenjs]\n[![coverage report](https://gitlab.com/sverweij/mscgenjs-core/badges/master/coverage.svg)](https://gitlab.com/sverweij/mscgenjs-core/commits/master)\n[![Dependency Status][david.mscgenjs.badge]][david.mscgenjs]\n[![devDependencies Status](https://david-dm.org/sverweij/mscgenjs-core/dev-status.svg)](https://david-dm.org/sverweij/mscgenjs-core?type=dev)\n[![npm stable version](https://img.shields.io/npm/v/mscgenjs.svg)](https://npmjs.com/package/mscgenjs)\n[![total downloads on npm](https://img.shields.io/npm/dt/mscgenjs.svg)](https://npmjs.com/package/mscgenjs)\n[![GPL-3.0](https://img.shields.io/badge/license-GPL--3.0-blue.svg)](LICENSE.md)\n\n[amdefine.license]: doc/licenses/license.amdefine.md\n[atom]: https://atom.io\n[bithound.mscgenjs]: https://www.bithound.io/github/sverweij/mscgenjs-core\n[bithound.mscgenjs.badge]: https://www.bithound.io/github/sverweij/mscgenjs-core/badges/score.svg\n[david.mscgenjs]: https://david-dm.org/sverweij/mscgenjs-core\n[david.mscgenjs.badge]: https://david-dm.org/sverweij/mscgenjs-core.svg\n[jsdom]: https://github.com/tmpvar/jsdom\n[jsdom.author]: http://tmpvar.com/\n[jsdom.license]: doc/licenses/license.jsdom.md\n[license.gpl-3.0]: http://www.gnu.org/licenses/gpl.html\n[mscgen]: http://www.mcternan.me.uk/mscgen\n[mscgen.author]: http://www.mcternan.me.uk/mscgen\n[mscgen.license]: http://code.google.com/p/mscgen/source/browse/trunk/COPYING\n[mscgen-preview]: https://atom.io/packages/mscgen-preview\n[mscgen-preview.source]: https://github.com/sverweij/atom-mscgen-preview\n[mscgen-preview.source.render]: https://github.com/sverweij/atom-mscgen-preview/blob/master/lib/renderer.coffee\n[mscgenjs.cli]: https://www.npmjs.com/package/mscgenjs-cli\n[mscgenjs.cli.source]: https://github.com/sverweij/mscgenjs-cli\n[mscgenjs.docbuild]: doc/build.md\n[mscgenjs.docsource]: doc/README.md\n[mscgenjs.embed]: https://sverweij.github.io/mscgen_js/embed.html?utm_source=mscgenjs-core\n[mscgenjs.embed.source]: https://github.com/mscgenjs/mscgenjs-inpage/blob/master/src/mscgen-inpage.js\n[mscgenjs.embedpackage]: https://sverweij.github.io/mscgen_js/embed.html#package\n[mscgenjs.interpreter]: https://sverweij.github.io/mscgen_js/index.html?utm_source=mscgenjs-core\n[mscgenjs.interpreter.source]: https://github.com/sverweij/mscgen_js\n[mscgenjs.interpreter.source.parse]: https://github.com/sverweij/mscgen_js/blob/master/src/script/interpreter/uistate.js#L117\n[mscgenjs.interpreter.source.render]: https://github.com/sverweij/mscgen_js/blob/master/src/script/interpreter/uistate.js#L260\n[mscgenjs.issues.compliance]: https://github.com/sverweij/mscgenjs-core/labels/compliance\n[mscgenjs.unit]: https://github.com/sverweij/mscgenjs-core/tree/master/test\n[mscgenjs.unit.parse]: https://github.com/sverweij/mscgenjs-core/blob/master/test/parse/t_mscgenparser_node.js\n[mscgenjs.unit.render]: https://github.com/sverweij/mscgenjs-core/blob/master/test/render/graphics/t_renderast.js\n[mscgenjs.license]: LICENSE.md\n[mscgenjs.doc.msgenny]: doc/msgenny.md\n[mscgenjs.doc.xu]: doc/xu.md\n[pegjs]: http://pegjs.org\n[pegjs.author]: http://majda.cz/about\n[pegjs.license]: doc/licenses/license.pegjs.md\n[phantomjs]: https://www.npmjs.com/package/phantomjs\n[requirejs.license]: doc/licenses/license.requirejs.md\n[travis.mscgenjs]: https://travis-ci.org/sverweij/mscgenjs-core\n[travis.mscgenjs.badge]: https://travis-ci.org/sverweij/mscgenjs-core.svg?branch=master\n[21]: doc/licenses/license.mocha.md\n[22]: doc/licenses/license.eslint.md\n[23]: doc/licenses/license.plato.md\n[28]: doc/licenses/license.istanbul.md\n[35]: https://nodesecurity.io/\n[39]: https://github.com/chaijs/chai\n[40]: https://github.com/krampstudio/chai-xml\n"
}