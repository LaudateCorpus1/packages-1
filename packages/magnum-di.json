{
  "name": "magnum-di",
  "version": "2.2.0",
  "description": "A super simple Key,Value Dependency Injection framework for NodeJS",
  "main": "index.js",
  "scripts": {
    "test": "NODE_ENV=test tap -R spec --cov test/**/*.js",
    "readme": "jsdoc2md -t docs/readme.hbs lib/**/*.js > Readme.md",
    "example-test": "NODE_ENV=test mocha --ui tdd --reporter spec examples/UserModel_testing/UserModel_test.js",
    "example-server": "node examples/ExpressRoutes/app.js"
  },
  "files": [
    "index.js",
    "lib/",
    "Readme.md",
    "LICENCE"
  ],
  "repository": {
    "user": "PaperElectron",
    "repo": "Magnum-DI",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/PaperElectron/Magnum-DI/tarball/master",
    "clone_url": "https://github.com/PaperElectron/Magnum-DI",
    "https_url": "https://github.com/PaperElectron/Magnum-DI",
    "travis_url": "https://travis-ci.org/PaperElectron/Magnum-DI",
    "zip_url": "https://github.com/PaperElectron/Magnum-DI/archive/master.zip",
    "api_url": "https://api.github.com/repos/PaperElectron/Magnum-DI"
  },
  "keywords": [
    "Dependency Injection",
    "Framework",
    "di"
  ],
  "author": {
    "name": "Jim",
    "email": "monstertke@paperelectron.com",
    "url": "http://paperelectron.com/"
  },
  "license": "MIT",
  "homepage": "https://github.com/PaperElectron/Magnum-DI",
  "dependencies": {
    "debug": "^2.2.0",
    "lodash": "^3.10.1",
    "tap": "^5.4.3"
  },
  "devDependencies": {
    "express": "^4.12.3",
    "jsdoc-to-markdown": "^1.1.1"
  },
  "gitHead": "263a50b5fb00c888c2b51fff6da2a4dc56c9bb9f",
  "_npmVersion": "2.5.1",
  "_nodeVersion": "0.12.0",
  "dist": {
    "shasum": "0d30bd6267a4be9ccfc1bb7c10f44e69ed8e20cd",
    "tarball": "http://registry.npmjs.org/magnum-di/-/magnum-di-2.2.0.tgz"
  },
  "versions": [
    {
      "number": "0.0.0",
      "date": "2015-05-08T14:32:07.735Z"
    },
    {
      "number": "0.0.1",
      "date": "2015-05-08T16:01:31.686Z"
    },
    {
      "number": "0.0.2",
      "date": "2015-05-09T05:19:53.403Z"
    },
    {
      "number": "0.0.3",
      "date": "2015-05-09T17:28:01.145Z"
    },
    {
      "number": "0.0.4",
      "date": "2015-05-22T15:00:02.477Z"
    },
    {
      "number": "0.1.0",
      "date": "2015-06-15T19:55:53.122Z"
    },
    {
      "number": "1.0.0",
      "date": "2015-11-14T04:18:23.241Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-11-21T06:01:51.175Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-12-14T02:10:22.844Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-12-14T02:14:17.184Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-01-01T18:13:58.015Z"
    },
    {
      "number": "1.2.1",
      "date": "2016-01-04T20:05:49.243Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-02-12T18:15:20.767Z"
    },
    {
      "number": "2.1.0",
      "date": "2016-02-12T18:44:01.754Z"
    },
    {
      "number": "2.2.0",
      "date": "2016-04-03T06:02:00.943Z"
    }
  ],
  "created": "2015-05-08T14:32:07.735Z",
  "modified": "2016-04-03T06:02:00.943Z",
  "lastPublisher": {
    "name": "paperelectron",
    "email": "jim.bulkowski@paperelectron.com"
  },
  "owners": [
    {
      "name": "paperelectron",
      "email": "jim.bulkowski@paperelectron.com"
    }
  ],
  "readme": "# Magnum DI\n\n## A super simple Key,Value Dependency Injection framework for NodeJS\n\n[![NPM Version - Seeing this? Shields.io is broken, again.][npm-image]][npm-url]\n[![Linux][travis-image]][travis-url]\n[![Code Coverage][coveralls-image]][coveralls-url]\n```shell\nnpm install --save magnum-di\n```\n\n```javascript\n//Load it up./\nvar injector = require('magnum-di')()\n\n//Register some dependencies.\ninjector.service('MyService', {name: 'Bob', sayName: function(){console.log(this.name)}})\n\n//inject them into your function\ninjector.inject(function(MyService){\n    MyService.sayName() // -> Bob\n})\n```\n# Why Dependency Injection?\n\n* Managing complex applications with many files. Maintaining module dependencies in one location reduces errors\nand makes an application easier to reason about.\n* Procedurally loading files with dependencies becomes much easier.\n* Ease of testing in isolation, mocking module dependencies becomes trivial. No need to use a module to fiddle with the internals of require to get a mocked object into your module. With DI just register a different module with the correct methods\nand you are done mocking.\n\n## Examples\n\n### Express route definitions.\n\nHere we register a dependency in our main application file, and use the injector to call the function\nreturned by the require('./UserModel) call.\n\nRun this with `npm run example-server`\n\n``` javascript\n\n//userRoutes.js\n\nmodule.exports = function(Router, User) {\n\n  //Here Router and User will be injected.\n  Router.get('/', function(req, res, next){\n    User.userDetails('Bob', function(err, data){\n      res.json({user: data})\n    })\n  });\n\n  return {path: '/user', router: Router}\n};\n\n\n//app.js\n\nvar injector = require('magnum-di')();\nvar express = require('express');\nvar Database = require('./Database');\nvar app = express()\nvar http = require('http');\n\n//Register some dependencies.\ninjector.factory('Router', express.Router);\ninjector.service('Database', Database);\n\n//Here we are letting the injector provide the database to our UserModel\n//This will make it simple to mock in our unit tests.\nvar User = injector.inject(require('./UserModel'));\ninjector.service('User', User);\n\nvar userRoute = injector.inject(require('./UserRoutes'));\n\napp.use(userRoute.path, userRoute.router);\n\nhttp.createServer(app).listen(8080);\n```\n\n### Mocking database for testing\n\nFollowing our above example, we use magnum-di to mock out our Database object for testing.\n\nRun this with `npm run example-test`\n\n``` javascript\n\nvar injector = require('magnum-di');\nvar should = require('should');\n\n//Our mock database object\ninjector.service('Database', {\n  User: {\n    users: {George: {name: 'George', age: 30}, Mike: {name: 'Mike', age: 20}},\n    find: function(username, cb) {\n     var user = (this.users[username]) ? this.users[username] : null\n     cb(null, user);\n    }\n  }\n});\n\n//We now have a user model that is using our mock database.\nvar User = injector.inject(require('./UserModel'));\n\ndescribe('Model being tested with a mock Database object', function() {\n\n  it('should not have real data', function(done) {\n    User.userDetails('Bob', function(err, data){\n      should(data).be.null\n      done()\n    })\n  });\n\n  it('should have mock data', function(done) {\n    User.userDetails('George', function(err, data){\n      data.age.should.equal(30)\n      done()\n    })\n  });\n\n});\n\n```\n\n# API\n\n<a name=\"MagnumDI\"></a>\n## MagnumDI\n**Kind**: global class  \n\n* [MagnumDI](#MagnumDI)\n  * [new MagnumDI()](#new_MagnumDI_new)\n  * [.service(name, item)](#MagnumDI#service) ⇒ <code>\\*</code>\n  * [.instance(name, fn)](#MagnumDI#instance) ⇒ <code>function</code>\n  * [.factory(name, fn)](#MagnumDI#factory) ⇒ <code>function</code>\n  * [.merge(name, merge)](#MagnumDI#merge) ⇒ <code>\\*</code>\n  * [.get(name)](#MagnumDI#get) ⇒ <code>\\*</code> &#124; <code>null</code>\n  * [.replace(name, replacement)](#MagnumDI#replace) ⇒ <code>Object</code>\n  * [.unregister(name)](#MagnumDI#unregister) ⇒ <code>boolean</code>\n  * [.inject(fnOrstr, thisArg)](#MagnumDI#inject) ⇒ <code>\\*</code>\n\n<a name=\"new_MagnumDI_new\"></a>\n### new MagnumDI()\nProvides an instance of the Magnum DI injector.\n\n<a name=\"MagnumDI#service\"></a>\n### magnumDI.service(name, item) ⇒ <code>\\*</code>\nRegisters an object, string, number or function.\n\n**Kind**: instance method of <code>[MagnumDI](#MagnumDI)</code>  \n**Returns**: <code>\\*</code> - Returns provided dependency  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>string</code> | Name to be used in the injected function |\n| item | <code>object</code> &#124; <code>array</code> &#124; <code>number</code> &#124; <code>string</code> &#124; <code>function</code> | Item to be injected. |\n\n<a name=\"MagnumDI#instance\"></a>\n### magnumDI.instance(name, fn) ⇒ <code>function</code>\nWhen injected, calls as a constructor with new.\n\n**Kind**: instance method of <code>[MagnumDI](#MagnumDI)</code>  \n**Returns**: <code>function</code> - Returns provided function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>string</code> | Name to be used in the injected function. |\n| fn | <code>function</code> | Function to be called with new. |\n\n<a name=\"MagnumDI#factory\"></a>\n### magnumDI.factory(name, fn) ⇒ <code>function</code>\nWhen injected, calls the passed function. Returns the result of that call.\n\n**Kind**: instance method of <code>[MagnumDI](#MagnumDI)</code>  \n**Returns**: <code>function</code> - Retuens provided function.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>string</code> | Name to be used in the injected function |\n| fn | <code>function</code> | Function to be called by injector. |\n\n<a name=\"MagnumDI#merge\"></a>\n### magnumDI.merge(name, merge) ⇒ <code>\\*</code>\nMerges supplied object into the object registered for <name>, if <name> doesn't exist it will be created.\n\n**Kind**: instance method of <code>[MagnumDI](#MagnumDI)</code>  \n**Returns**: <code>\\*</code> - Returns provided dependency  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Dependency object to modify |\n| merge | <code>Object</code> | Object to merge with existing dependency |\n\n<a name=\"MagnumDI#get\"></a>\n### magnumDI.get(name) ⇒ <code>\\*</code> &#124; <code>null</code>\nReturns the specified dependency.\n\n**Kind**: instance method of <code>[MagnumDI](#MagnumDI)</code>  \n**Returns**: <code>\\*</code> &#124; <code>null</code> - The named dependency item, or null.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>string</code> | Dependency to retrieve. |\n\n<a name=\"MagnumDI#replace\"></a>\n### magnumDI.replace(name, replacement) ⇒ <code>Object</code>\nModifies a registered service object.\n\n**Kind**: instance method of <code>[MagnumDI](#MagnumDI)</code>  \n**Returns**: <code>Object</code> - Replaced dependency  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Dependency object to modify. |\n| replacement | <code>Object</code> | Object to replace current registered object. |\n\n<a name=\"MagnumDI#unregister\"></a>\n### magnumDI.unregister(name) ⇒ <code>boolean</code>\nRemoves the specified dependency.\n\n**Kind**: instance method of <code>[MagnumDI](#MagnumDI)</code>  \n**Returns**: <code>boolean</code> - The result of the operation.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>string</code> | Registered dependency to remove. |\n\n<a name=\"MagnumDI#inject\"></a>\n### magnumDI.inject(fnOrstr, thisArg) ⇒ <code>\\*</code>\nRuns the given function with args injected and with an optional context object.\n\n**Kind**: instance method of <code>[MagnumDI](#MagnumDI)</code>  \n**Returns**: <code>\\*</code> - Returns the result of the called function.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| fnOrstr | <code>function</code> &#124; <code>string</code> | function - inject args and run, string - Return the named dependency. |\n| thisArg | <code>object</code> | Calling context. |\n\n\n\n\n# Contributing\n\n## Check out, add, document, test.\n\nRun tests with `npm test`.\nRegenerate this Readme with `npm run readme`\n\n\n## licence\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/magnum-di.svg\n[npm-url]: https://www.npmjs.com/package/magnum-di\n[travis-image]: https://api.travis-ci.org/PaperElectron/Magnum-DI.svg\n[travis-url]: https://travis-ci.org/PaperElectron/Magnum-DI\n[coveralls-image]: https://coveralls.io/repos/github/PaperElectron/Magnum-DI/badge.svg?branch=master\n[coveralls-url]: https://coveralls.io/github/PaperElectron/Magnum-DI"
}