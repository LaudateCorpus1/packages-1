{
  "name": "electron-winstaller-temp-fork",
  "version": "2.0.5-beta.3",
  "description": "Module to generate Windows installers for Electron apps",
  "main": "./lib/index.js",
  "license": "MIT",
  "repository": {
    "user": "electronjs",
    "repo": "windows-installer",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/electronjs/windows-installer/tarball/master",
    "clone_url": "https://github.com/electronjs/windows-installer",
    "https_url": "https://github.com/electronjs/windows-installer",
    "travis_url": "https://travis-ci.org/electronjs/windows-installer",
    "zip_url": "https://github.com/electronjs/windows-installer/archive/master.zip",
    "api_url": "https://api.github.com/repos/electronjs/windows-installer"
  },
  "scripts": {
    "compile": "babel -d lib/ src/",
    "prepublish": "eslint src && npm run compile",
    "test": "eslint spec && mocha --compilers js:babel-register ./spec/*.js"
  },
  "dependencies": {
    "asar": "~0.10.0",
    "debug": "^2.2.0",
    "fs-extra": "^0.26.5",
    "fs-jetpack": "^0.7.1",
    "lodash": "^4.6.1",
    "temp": "^0.8.3"
  },
  "devDependencies": {
    "babel-cli": "^6.6.4",
    "babel-eslint": "^5.0.0",
    "babel-plugin-transform-async-to-module-method": "^6.5.2",
    "babel-plugin-transform-runtime": "^6.6.0",
    "babel-preset-es2015-node4": "^2.0.3",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.6.0",
    "chai": "^3.5.0",
    "chai-as-promised": "^5.2.0",
    "eslint": "^2.2.0",
    "mocha": "^2.4.5"
  },
  "babel": {
    "presets": [
      "stage-0",
      "es2015-node4"
    ],
    "plugins": [
      [
        "transform-async-to-module-method",
        {
          "module": "bluebird",
          "method": "coroutine"
        }
      ]
    ]
  },
  "gitHead": "ca080678c66e6858f9558e8527cd37be4bf3aeef",
  "homepage": "https://github.com/electronjs/windows-installer#readme",
  "_npmVersion": "3.6.0",
  "_nodeVersion": "5.7.1",
  "dist": {
    "shasum": "74f0fd70aea5ea3e2fe2078aa89b4fb372c945ca",
    "tarball": "http://registry.npmjs.org/electron-winstaller-temp-fork/-/electron-winstaller-temp-fork-2.0.5-beta.3.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-01-29T17:34:11.851Z"
    },
    {
      "number": "2.0.5-beta.0",
      "date": "2016-03-03T12:24:10.319Z"
    },
    {
      "number": "2.0.5-beta.1",
      "date": "2016-03-03T15:38:12.875Z"
    },
    {
      "number": "2.0.5-beta.2",
      "date": "2016-03-03T15:56:44.610Z"
    },
    {
      "number": "2.0.5-beta.3",
      "date": "2016-03-03T17:48:27.006Z"
    }
  ],
  "created": "2016-01-29T17:34:11.851Z",
  "modified": "2016-03-03T17:48:27.006Z",
  "lastPublisher": {
    "name": "develar",
    "email": "develar@gmail.com"
  },
  "owners": [
    {
      "name": "develar",
      "email": "develar@gmail.com"
    }
  ],
  "readme": "# Electron Installer\n\n[![Build status](https://ci.appveyor.com/api/projects/status/nxhep80va4d7afjb?svg=true)](https://ci.appveyor.com/project/kevinsawicki/windows-installer)\n\n\nNPM module that builds Windows installers for\n[Electron](https://github.com/atom/electron) apps using\n[Squirrel](https://github.com/Squirrel/Squirrel.Windows).\n\n## Installing\n\n```sh\nnpm install --save-dev electron-winstaller\n```\n\n## Usage\n\nRequire the package:\n\n```js\nvar electronInstaller = require('electron-winstaller');\n```\n\nThen do a build like so..\n\n```js\nresultPromise = electronInstaller.createWindowsInstaller({\n    appDirectory: '/tmp/build/my-app-64',\n    outputDirectory: '/tmp/build/installer64',\n    authors: 'My App Inc.',\n    exe: 'myapp.exe'\n  });\n  \nresultPromise.then(() => console.log(\"It worked!\"), (e) => console.log(`No dice: ${e.message}`));\n```\n\nAfter running you will have an `.nupkg`, a\n`RELEASES` file, and a `.exe` installer file in the `outputDirectory` folder\nfor each multi task target given under the config entry.\n\nThere are several configuration settings supported:\n\n| Config Name           | Required | Description |\n| --------------------- | -------- | ----------- |\n| `appDirectory`        | Yes      | The folder path of your Electron app |\n| `outputDirectory`     | No       | The folder path to create the `.exe` installer in. Defaults to the `installer` folder at the project root. |\n| `loadingGif`          | No       | The local path to a `.gif` file to display during install. |\n| `authors`             | Yes      | The authors value for the nuget package metadata. Defaults to the `author` field from your app's package.json file when unspecified. |\n| `owners`              | No       | The owners value for the nuget package metadata. Defaults to the `authors` field when unspecified. |\n| `exe`                 | No       | The name of your app's main `.exe` file. This uses the `name` field in your app's package.json file with an added `.exe` extension when unspecified. |\n| `description`         | No       | The description value for the nuget package metadata. Defaults to the `description` field from your app's package.json file when unspecified. |\n| `version`             | No       | The version value for the nuget package metadata. Defaults to the `version` field from your app's package.json file when unspecified. |\n| `title`               | No       | The title value for the nuget package metadata. Defaults to the `productName` field and then the `name` field from your app's package.json file when unspecified. |\n| `certificateFile`     | No       | The path to an Authenticode Code Signing Certificate |\n| `certificatePassword` | No       | The password to decrypt the certificate given in `certificateFile` |\n| `signWithParams`      | No       | Params to pass to signtool.  Overrides `certificateFile` and `certificatePassword`. |\n| `iconUrl`             | No       | A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Atom icon. |\n| `setupIcon`           | No       | The ICO file to use as the icon for the generated Setup.exe |\n| `noMsi`               | No       | Should Squirrel.Windows create an MSI installer? |\n| `remoteReleases`      | No       | A URL to your existing updates. If given, these will be downloaded to create delta updates |\n| `remoteToken`      | No       | Authentication token for remote updates |\n| `log`                 | No       | By default, logging at info and above goes to console. The value `false` will stop all logging. An object with the functions `error`, `warn`, `info`, `debug` will use those for logging. |\n\n## Sign your installer or else bad things will happen\n\nFor development / internal use, creating installers without a signature is okay, but for a production app you need to sign your application. Internet Explorer's SmartScreen filter will block your app from being downloaded, and many anti-virus vendors will consider your app as malware unless you obtain a valid cert.\n\nAny certificate valid for \"Authenticode Code Signing\" will work here, but if you get the right kind of code certificate, you can also opt-in to [Windows Error Reporting](http://en.wikipedia.org/wiki/Windows_Error_Reporting). [This MSDN page](http://msdn.microsoft.com/en-us/library/windows/hardware/hh801887.aspx) has the latest links on where to get a WER-compatible certificate. The \"Standard Code Signing\" certificate is sufficient for this purpose.\n\n## Handling Squirrel Events\n\nSquirrel will spawn your app with command line flags on first run, updates,\nand uninstalls. it is **very** important that your app handle these events as _early_\nas possible, and quit **immediately** after handling them. Squirrel will give your\napp a short amount of time (~15sec) to apply these operations and quit.\n\nYou should handle these events in your app's `main` entry point with something\nsuch as:\n\n```js\nvar app = require('app');\n\nvar handleStartupEvent = function() {\n  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  var squirrelCommand = process.argv[1];\n  switch (squirrelCommand) {\n    case '--squirrel-install':\n    case '--squirrel-updated':\n\n      // Optionally do things such as:\n      //\n      // - Install desktop and start menu shortcuts\n      // - Add your .exe to the PATH\n      // - Write to the registry for things like file associations and\n      //   explorer context menus\n\n      // Always quit when done\n      app.quit();\n\n      return true;\n    case '--squirrel-uninstall':\n      // Undo anything you did in the --squirrel-install and\n      // --squirrel-updated handlers\n\n      // Always quit when done\n      app.quit();\n\n      return true;\n    case '--squirrel-obsolete':\n      // This is called on the outgoing version of your app before\n      // we update to the new version - it's the opposite of\n      // --squirrel-updated\n      app.quit();\n      return true;\n  }\n};\n\nif (handleStartupEvent()) {\n  return;\n}\n```\n"
}