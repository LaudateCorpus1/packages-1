{
  "name": "electron-windows-installer",
  "version": "1.4.4",
  "description": "Build Windows installers for Electron apps using Squirrel. Works with Gulp!",
  "main": "./dist/index.js",
  "license": "MIT",
  "author": {
    "name": "Alexandru Rosianu",
    "email": "me@aluxian.com"
  },
  "keywords": [
    "electron",
    "atom-shell",
    "windows",
    "installer",
    "squirrel",
    "gulpplugin"
  ],
  "files": [
    "dist",
    "vendor",
    "resources"
  ],
  "repository": {
    "user": "Aluxian",
    "repo": "electron-windows-installer",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/Aluxian/electron-windows-installer/tarball/master",
    "clone_url": "https://github.com/Aluxian/electron-windows-installer",
    "https_url": "https://github.com/Aluxian/electron-windows-installer",
    "travis_url": "https://travis-ci.org/Aluxian/electron-windows-installer",
    "zip_url": "https://github.com/Aluxian/electron-windows-installer/archive/master.zip",
    "api_url": "https://api.github.com/repos/Aluxian/electron-windows-installer"
  },
  "scripts": {
    "build": "coffee -c -b -o dist src",
    "pretest": "npm run build",
    "test": "mocha -t 300000 --compilers coffee:coffee-script/register"
  },
  "dependencies": {
    "asar": "0.11.0",
    "bluebird": "^3.1.1",
    "dot": "^1.0.3",
    "fs-extra": "^0.26.3",
    "temp": "^0.8.3"
  },
  "devDependencies": {
    "coffeelint": "^1.13.1",
    "coffee-script": "^1.10.0",
    "mocha": "^2.3.4"
  },
  "gitHead": "bc04f9a784530fe2764517e10eab154a096a34ed",
  "homepage": "https://github.com/Aluxian/electron-windows-installer#readme",
  "_npmVersion": "3.10.6",
  "_nodeVersion": "6.4.0",
  "dist": {
    "shasum": "1be229263530d27496e1a867d16cc91254ee488c",
    "tarball": "http://registry.npmjs.org/electron-windows-installer/-/electron-windows-installer-1.4.4.tgz"
  },
  "stars": 4,
  "versions": [
    {
      "number": "0.33.0",
      "date": "2015-07-02T17:05:08.366Z"
    },
    {
      "number": "1.0.0",
      "date": "2015-07-02T19:38:08.698Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-07-06T10:35:21.535Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-07-06T10:39:10.273Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-07-06T10:40:47.635Z"
    },
    {
      "number": "1.0.4",
      "date": "2015-07-06T11:31:52.450Z"
    },
    {
      "number": "1.0.5",
      "date": "2015-07-13T13:14:43.939Z"
    },
    {
      "number": "1.0.6",
      "date": "2015-07-13T13:32:04.933Z"
    },
    {
      "number": "1.0.7",
      "date": "2015-07-13T13:33:58.659Z"
    },
    {
      "number": "1.0.8",
      "date": "2015-07-14T11:45:15.319Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-07-14T13:30:46.514Z"
    },
    {
      "number": "1.2.0",
      "date": "2015-12-27T08:46:26.499Z"
    },
    {
      "number": "1.2.1",
      "date": "2015-12-27T09:58:16.721Z"
    },
    {
      "number": "1.2.2",
      "date": "2015-12-27T10:16:40.949Z"
    },
    {
      "number": "1.2.3",
      "date": "2016-02-04T09:28:49.616Z"
    },
    {
      "number": "1.2.4",
      "date": "2016-02-05T16:43:01.439Z"
    },
    {
      "number": "1.2.5",
      "date": "2016-03-16T14:19:04.669Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-04-21T19:17:07.552Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-04-21T19:18:24.846Z"
    },
    {
      "number": "1.3.2",
      "date": "2016-04-21T19:20:49.556Z"
    },
    {
      "number": "1.3.3",
      "date": "2016-04-28T17:08:57.907Z"
    },
    {
      "number": "1.4.0",
      "date": "2016-05-16T15:05:45.919Z"
    },
    {
      "number": "1.4.1",
      "date": "2016-06-01T16:44:56.550Z"
    },
    {
      "number": "1.4.2",
      "date": "2016-07-19T16:49:53.345Z"
    },
    {
      "number": "1.4.4",
      "date": "2016-09-04T11:39:43.124Z"
    }
  ],
  "created": "2015-07-02T17:05:08.366Z",
  "modified": "2016-09-04T11:39:43.124Z",
  "lastPublisher": {
    "name": "aluxian",
    "email": "rosian_alex@yahoo.com"
  },
  "owners": [
    {
      "name": "aluxian",
      "email": "rosian_alex@yahoo.com"
    }
  ],
  "readme": "# Electron Windows Installer\n\n[![Build status](https://ci.appveyor.com/api/projects/status/q1i12hq89i73c4ud/branch/master?svg=true)](https://ci.appveyor.com/project/Aluxian/electron-windows-installer/branch/master)\n\nBuild Windows installers for [Electron](https://github.com/atom/electron) apps using [Squirrel.Windows](https://github.com/Squirrel/Squirrel.Windows).\n\n> NOTE! This only works on Windows. If the stars align you might be able to run it with Wine, but ask Google first.\n\n## Installation\n\n[![NPM](https://nodei.co/npm/electron-windows-installer.png)](https://nodei.co/npm/electron-windows-installer/)\n\n```sh\nnpm install --save-dev electron-windows-installer\n```\n\n> Unlike the grunt plugin, this one doesn't support building on non-Windows (with mono and wine).\n\n## Usage\n\nAssuming you have an Electron app built at the given `appDirectory`, you can configure a Gulp task like so:\n\n```js\nvar gulp = require('gulp');\nvar winInstaller = require('electron-windows-installer');\n\ngulp.task('create-windows-installer', function(done) {\n  winInstaller({\n    appDirectory: './build/win32',\n    outputDirectory: './release',\n    arch: 'ia32'\n  }).then(done).catch(done);\n});\n```\n\nThen run `gulp create-windows-installer` and you will have a `.nupkg`, a `RELEASES` file, and a `.exe` installer file in the `outputDirectory` folder.\nLook at the test for inspiration.\n\nThere are several configuration settings supported:\n\n| Config Name           | Required | Description |\n| --------------------- | -------- | ----------- |\n| `arch`                | No       | The arch to build for. Defaults to the current platform's arch. |\n| `appDirectory`        | Yes      | The folder path of your Electron app |\n| `outputDirectory`     | No       | The folder path to create the `.exe` installer in. Defaults to the `installer` folder at the project root. |\n| `loadingGif`          | No       | The local path to a `.gif` file to display during install. |\n| `authors`             | Yes      | The authors value for the nuget package metadata. Defaults to the `author` field from your app's package.json file when unspecified. |\n| `owners`              | No       | The owners value for the nuget package metadata. Defaults to the `authors` field when unspecified. |\n| `exe`                 | No       | The name of your app's main `.exe` file. This uses the `name` field in your app's package.json file with an added `.exe` extension when unspecified. |\n| `setupExe`            | No       | The name of the final setup .exe file. By default it's `<ProductName>Setup.exe`. |\n| `setupMsi`            | No       | The name of the final setup .msi file. By default it's `<ProductName>Setup.msi`. |\n| `description`         | No       | The description value for the nuget package metadata. Defaults to the `description` field from your app's package.json file when unspecified. |\n| `iconUrl`             | No       | A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Atom icon. |\n| `version`             | No       | The version value for the nuget package metadata. Defaults to the `version` field from your app's package.json file when unspecified. |\n| `title`               | No       | The title value for the nuget package metadata. Defaults to the `productName` field and then the `name` field from your app's package.json file when unspecified. |\n| `certificateFile`     | No       | The path to an Authenticode Code Signing Certificate |\n| `certificatePassword` | No       | The password to decrypt the certificate given in `certificateFile` |\n| `signWithParams`      | No       | Params to pass to signtool.  Overrides `certificateFile` and `certificatePassword`. |\n| `setupIcon`           | No       | The ICO file to use as the icon for the generated Setup.exe |\n| `noMsi`               | No       | Should Squirrel.Windows create an MSI installer?\n| `remoteReleases`      | No       | A URL to your existing updates. If given, these will be downloaded to create delta updates |\n\n## Sign your installer or else bad things will happen\n\nFor development / internal use, creating installers without a signature is okay, but for a production app you need to sign your application. Internet Explorer's SmartScreen filter will block your app from being downloaded, and many anti-virus vendors will consider your app as malware unless you obtain a valid cert.\n\nAny certificate valid for \"Authenticode Code Signing\" will work here, but if you get the right kind of code certificate, you can also opt-in to [Windows Error Reporting](http://en.wikipedia.org/wiki/Windows_Error_Reporting). [This MSDN page](http://msdn.microsoft.com/en-us/library/windows/hardware/hh801887.aspx) has the latest links on where to get a WER-compatible certificate. The \"Standard Code Signing\" certificate is sufficient for this purpose.\n\n## Handling Squirrel Events (for [Squirrel Aware](https://github.com/Squirrel/Squirrel.Windows/blob/master/docs/using/custom-squirrel-events-non-cs.md) apps)\n\nSquirrel will spawn your app with command line flags on first run, updates, and uninstalls.\nIt is **very** important that your app handle these events as _early_ as possible, and quit **immediately** after handling them.\nSquirrel will give your app a short amount of time (~15sec) to apply these operations and quit.\n\nYou should handle these events in your app's `main` entry point with something such as:\n\n```js\nvar app = require('app');\n\nvar handleStartupEvent = function() {\n  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  var squirrelCommand = process.argv[1];\n  switch (squirrelCommand) {\n    case '--squirrel-install':\n    case '--squirrel-updated':\n\n      // Optionally do things such as:\n      //\n      // - Install desktop and start menu shortcuts\n      // - Add your .exe to the PATH\n      // - Write to the registry for things like file associations and\n      //   explorer context menus\n\n      // Always quit when done\n      app.quit();\n\n      return true;\n    case '--squirrel-uninstall':\n      // Undo anything you did in the --squirrel-install and\n      // --squirrel-updated handlers\n\n      // Always quit when done\n      app.quit();\n\n      return true;\n    case '--squirrel-obsolete':\n      // This is called on the outgoing version of your app before\n      // we update to the new version - it's the opposite of\n      // --squirrel-updated\n      app.quit();\n      return true;\n  }\n};\n\nif (handleStartupEvent()) {\n  return;\n}\n```\n"
}