{
  "name": "yunodb",
  "version": "0.1.4",
  "description": "portable, persistent, electron compatible fulltext search database",
  "main": "index.js",
  "scripts": {
    "test": "standard && tape test/*.js"
  },
  "bin": {
    "yuno": "./cli.js"
  },
  "repository": {
    "user": "blahah",
    "repo": "yunodb",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/blahah/yunodb/tarball/master",
    "clone_url": "https://github.com/blahah/yunodb",
    "https_url": "https://github.com/blahah/yunodb",
    "travis_url": "https://travis-ci.org/blahah/yunodb",
    "zip_url": "https://github.com/blahah/yunodb/archive/master.zip",
    "api_url": "https://api.github.com/repos/blahah/yunodb"
  },
  "keywords": [
    "fulltext",
    "search",
    "database",
    "json",
    "object",
    "store",
    "leveldb",
    "search-index",
    "electron"
  ],
  "author": {
    "name": "Richard Smith-Unna",
    "email": "rik@fathomlabs.io",
    "url": "@blahah"
  },
  "license": "CC0-1.0",
  "homepage": "https://github.com/blahah/yunodb#readme",
  "dependencies": {
    "JSONStream": "^1.1.1",
    "commander": "^2.9.0",
    "jsonpath-plus": "^0.15.0",
    "leveldown": "^1.4.6",
    "levelup": "^1.3.1",
    "lodash": "^4.11.1",
    "mkdirp": "^0.5.1",
    "natural": "github:blahah/natural",
    "path-exists": "^2.1.0",
    "search-index": "^0.8.12"
  },
  "devDependencies": {
    "rimraf": "^2.5.2",
    "standard": "^6.0.8",
    "tape": "^4.5.1",
    "temporary": "0.0.8"
  },
  "gitHead": "aa44327c3fa9afbfd67113cff2ce739ead0ee2ec",
  "_npmVersion": "3.8.9",
  "_nodeVersion": "6.2.0",
  "dist": {
    "shasum": "ed87b11bc419d0c57ed8408f776c34cf9ab0717e",
    "tarball": "http://registry.npmjs.org/yunodb/-/yunodb-0.1.4.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-04-21T12:33:08.483Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-04-22T12:45:39.656Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-08-06T11:44:27.557Z"
    },
    {
      "number": "0.1.3",
      "date": "2016-08-06T12:05:05.177Z"
    },
    {
      "number": "0.1.4",
      "date": "2016-08-06T12:15:18.728Z"
    }
  ],
  "created": "2016-04-21T12:33:08.483Z",
  "modified": "2016-08-06T12:15:18.728Z",
  "lastPublisher": {
    "name": "blahah",
    "email": "rds45@cam.ac.uk"
  },
  "owners": [
    {
      "name": "blahah",
      "email": "rds45@cam.ac.uk"
    }
  ],
  "readme": "## yunodb\n\nA portable, persistent, electron compatible fulltext search + document store database for node.js. LevelDB underneath.\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard%20js-green.svg?style=flat-square)](https://github.com/feross/standard)  [![Travis](https://img.shields.io/travis/blahah/yunodb.svg?style=flat-square)](https://travis-ci.org/blahah/yunodb)  [![npm](https://img.shields.io/npm/v/yunodb.svg?style=flat-square)](https://www.npmjs.com/package/yunodb)  [![cc-zero](https://img.shields.io/badge/license-CC0%20public%20domain-ff69b4.svg?style=flat-square)](https://github.com/blahah/yunodb#license---cc0)\n\n- [How it works](https://github.com/blahah/yunodb#how-it-works)\n- [Install](https://github.com/blahah/yunodb#install)\n- [Use](https://github.com/blahah/yunodb#use)\n  - [Create / load a database](https://github.com/blahah/yunodb#create--load-a-database)\n    - [Index mapping](https://github.com/blahah/yunodb#index-mapping)\n  - [Add documents](https://github.com/blahah/yunodb#add-documents)\n  - [Delete documents](https://github.com/blahah/yunodb#delete-documents)\n  - [Search](https://github.com/blahah/yunodb#search)\n  - [CLI](https://github.com/blahah/yunodb#cli)\n- [Contributing](https://github.com/blahah/yunodb#contributing)\n- [License - CC0](https://github.com/blahah/yunodb#license---cc0)\n\n## How it works\n\nyuno is a JSON document store with fulltext search. It's meant for embedding in electron apps, focuses solely on text search, and in most cases should handle millions of documents easily.\n\nyuno is pretty basic - it has three components:\n- The document store, which is just the raw JSON objects stored in [leveldb](https://github.com/Level/levelup)\n- The inverted search index, powered by [search-index](https://github.com/fergiemcdowall/search-index)\n- A customisable [natural](https://github.com/NaturalNode/natural) language processing pipeline that is applied to documents before adding them to the index, greatly improving speed and memory usage compared to the vanilla search-index.\n\n**None of this is revolutionary** - actually it's standard in fulltext-search database engines. And all the pieces exist already in the node ecosystem. But I couldn't find a node fulltext search and document store that could handle millions of documents, persisted on disk, didn't have crazy memory requirements and could be easily bundled into an electron app.\n\nLike, db, **y** **u** **no** exist already??\n\n![yuno.jpg](yuno.jpg)\n\n## Install\n\n```\nnpm install --save yunodb\n```\n\n## Use\n\n### Create / load a database\n\n**`yuno(options, callback)`**\n\ne.g.\n\n```\nvar yuno = require('yuno')\n\nvar dbopts = {\n  location: './.yuno',\n  keyField: 'id',\n  indexMap: ['text']\n}\nvar db = yuno(opts, (err, dbhandle) => {\n  if (err) throw err\n\n  // do stuff with the db\n  db = dbhandle\n})\n```\n\n`opts` configures the two persistent datastores. Possible key-value pairs are:\n\n- **location** (String, required) - Base directory in which both datastores will be kept.\n- **keyField** (String, required) - [JSONpath](https://github.com/s3u/JSONPath#syntax-through-examples) specifying the field in each document to be used as a key in the document store.\n- **indexMap** (Array | Object, required) - [JSONpaths](https://github.com/s3u/JSONPath#syntax-through-examples) specifying the fields in each document to index for fulltext searching. See [index mapping](#index-mapping) below for details.\n- **deletable** (Boolean, optional) - Whether documents should be deletable. Setting to true increases index size. Default: false.\n- **ngramLength** (Integer | Array, optional) - ngram length(s) to use when building index.\n\n#### Index mapping\n\nIt is quite rare that all fields in a database should be exposed to the user search. More often, we want to allow the user to search certain fields, but retrieve the full document for each result. The `indexMap` option allows you to specify how to index documents.\n\nThere are two ways to tell `yuno` how to index:\n\n##### 1. Pass an Array of fields\n\nThe simple option - an array of fields to index. The contents of each field will be passed through the default Natural Language Processing pipeline before being added to the search index.\n\n##### 2. Pass an Object mapping fields to processors\n\nTo fine-tune the processing on a per-field basis, pass an Object where each key is a field to index. Values can be one of:\n\n- `true`/`false` whether to apply the default NLP pipeline\n- `function` a custom processing function.\n\nCustom processing take the field value as a single argument, and their return value (either a string or an array) will be tokenised and added to the index.\n\n### Add documents\n\n**`db.add(documents, options, callback)`**\n\n- `documents`, array of JSON-able objects to store\n- `options` optional, can override the database-wide `indexMap` option\n- `callback`, function to call on completion, with a single argument to be passed an error if there was one\n\ne.g.\n\n```js\nvar docs = [\n  { id: 1, text: 'hello '},\n  { id: 2, text: 'goodbye '},\n  { id: 3, text: 'tortoise '}\n]\n\nfunction done (err) {\n  if (err) throw err\n  console.log('successfully added', docs.length, 'documents')\n}\n\ndb.add(docs, done)\n```\n\nor using a custom `indexMap`:\n\n```js\n// trim whitespace\nfunction trim (str) { return str.trim() }\n\ndb.add(docs, { text: trim }, doneAdding)\n```\n\n### Delete documents\n\n**`db.del(documents, callback)`**\n\n- `documents`, document (object), id (string), or array of documents or ids\n- `callback`, function to call on completion, with a single argument to be passed an error if there was one\n\ne.g.\n\n```js\n// document\ndb.del({ id: '1234', otherkey: 'something else' }, done)\n\n// with id\ndb.del('1234', done)\n\n// array\ndb.del(['1234', '1235', '1236'], done)\n```\n\n### Search\n\n**`db.search(query, opts, callback)`**\n\nReturns a cursor that can be used to page through the results. By default the `pageSize` is 50.\n\n- `query`, string search query\n- `opts`, (optional) options object\n- `callback`, function to call on completion. Takes two arguments:\n  - `err` error or `null`\n  - `results` object containing the result metadata and hits\n\ne.g.\n\n```js\nvar cursor = db.search('tortoise', function(err, results) {\n  if (err) throw err\n\n  // first 50 results\n  console.log(results)\n\n  cursor.next(function(err, results) {\n    // next page in here\n  })\n})\n```\n\n### CLI\n\nyuno has a minimal command-line interface that can be used to create a database from a file containing JSON objects.\n\nInstall the CLI:\n\n```bash\nnpm install --global yuno\n```\n\nCreate a new database:\n\n```bash\nyuno create <database path> <JSON data>\n```\n\nThe JSON data file must contain JSON objects, rather than an array. For example:\n\n```json\n{ \"id\": \"1234\", \"title\": \"the coleopterist's handbook\" }\n{ \"id\": \"4321\", \"title\": \"bark and ambrosia beetles of south america\" }\n```\n\nYou can provide database options as a JSON file using the `--opts` argument:\n\n```bash\nyuno create --opts <JSON options> <database path> <JSON data>\n```\n\nWhere the options JSON looks like:\n\n```json\n{\n  \"keyField\": \"id\",\n  \"indexMap\": {\n    \"title\": true,\n  }\n}\n```\n\n## Contributing\n\nyuno is being built to serve my use-case of embedding pre-made databases in electron apps. If you have another use-case and would like features added, please open an issue to discuss it - I'm happy to add things that will be widely useful.\n\nContributions are very welcome. **Please** open an issue to discuss any changes you would like to PR, or mention in an existing issue that you plan to work on it.\n\nIdeas for improving performance are particularly welcome.\n\n## License - CC0\n\nhttps://creativecommons.org/publicdomain/zero/1.0/\n\nyuno is public domain code. Do whatever you want with it. Credit would be appreciated, but it's not required.\n"
}