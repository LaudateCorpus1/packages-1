{
  "name": "electron-cucumber",
  "version": "0.1.0",
  "description": "Cucumber feature testing for Electron applications",
  "keywords": [
    "electron",
    "cucumber",
    "test",
    "testing",
    "tdd",
    "feature"
  ],
  "homepage": "https://github.com/mfcollins3/electron-cucumber",
  "license": "Apache-2.0",
  "author": {
    "name": "Michael F. Collins, III",
    "email": "michael.collins@naked.software",
    "url": "http://www.michaelfcollins3.me"
  },
  "bin": {
    "electron-cucumber": "./bin/electron-cucumber"
  },
  "repository": {
    "user": "mfcollins3",
    "repo": "electron-cucumber",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mfcollins3/electron-cucumber/tarball/master",
    "clone_url": "https://github.com/mfcollins3/electron-cucumber",
    "https_url": "https://github.com/mfcollins3/electron-cucumber",
    "travis_url": "https://travis-ci.org/mfcollins3/electron-cucumber",
    "zip_url": "https://github.com/mfcollins3/electron-cucumber/archive/master.zip",
    "api_url": "https://api.github.com/repos/mfcollins3/electron-cucumber"
  },
  "dependencies": {
    "cucumber": "^0.10.2",
    "fs-extra": "^0.30.0",
    "which": "^1.2.4"
  },
  "devDependencies": {
    "electron-prebuilt": "^0.37.8"
  },
  "gitHead": "6e55d9c75edde67cbb44500b736c4f4fc5307ece",
  "scripts": {},
  "_npmVersion": "3.8.6",
  "_nodeVersion": "5.11.0",
  "dist": {
    "shasum": "12144a0e98e5e1a28c024db146c1d07ac38bd67e",
    "tarball": "http://registry.npmjs.org/electron-cucumber/-/electron-cucumber-0.1.0.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-05-03T22:32:45.834Z"
    }
  ],
  "created": "2016-05-03T22:32:45.834Z",
  "modified": "2016-05-03T22:32:45.834Z",
  "lastPublisher": {
    "name": "mfcollins3",
    "email": "michael.collins@naked.software"
  },
  "owners": [
    {
      "name": "mfcollins3",
      "email": "michael.collins@naked.software"
    }
  ],
  "readme": "Cucumber for Electron\n=====================\nCucumber for Electron allows [Electron](http://electron.atom.io)\napplication developers to build\n[Cucumber.js](https://github.com/cucumber/cucumber-js)-based feature\ntests to test their applications. Cucumber has developed into a valuable\ntool for building automated acceptance tests for many applications and\nthis package hopes to extend this success to Electron applications.\n\nInstalling Cucumber for Electron\n--------------------------------\nCucumber for Electron is available as an [NPM](https://npmjs.com)\nmodule. To install Cucumber for Electron, add it as a development\ndependency to your application:\n\n    $ npm install --save-dev electron-cucumber\n\nIf you are using the [two package-json structure](https://github.com/electron-userland/electron-builder#two-packagejson-structure)\nrecommended by the [electron-builder](https://github.com/electron-userland/electron-builder)\nproject, you should add `electron-cucumber` to the `package.json` file\nin the root directory of your project.\n\nUsage\n-----\nCucumber.js will look for your features specifications in the `features`\nsubdirectory of your project workspace. First, create that directory:\n\n    $ mkdir features\n\nCucumber will look for step definitions and support files in\nsubdirectories of `features`. Create those directories next:\n\n    $ mkdir features/step_definitions\n    $ mkdir features/support\n\nIn your `package.json` file, add the `features` script to automate the\nexecution of your feature tests:\n\n    ...\n    \"scripts\": {\n        \"features\": \"electron-cucumber\"\n    },\n    ...\n\nYou can now run your features by executing the `npm run features`\ncommand on the command line.\n\nDuring text execution, your features are executed within the main\nprocess of the Electron application. It has access to all Electron APIs\nwithin your step definitions and support code. You may find it helpful\nto create helpers within your [World](https://github.com/cucumber/cucumber-js#world)\nfor use by the step definitions and other support code.\n\nFor example, given the following scenario:\n\n    Given I launch the application\n    When I enter my username and password into the form\n    Then I will be given access to the application\n\nYou can create the following step definitions:\n\n    this.Given(/^I launch the application$/, function(callback) {\n      callback(null, 'pending');\n    });\n\n    this.When(/^I enter my username and password into the form$/, function(callback) {\n      callback(null, 'pending');\n    });\n\n    this.Then(/^I will be given access to the application$/, function(callback) {\n      callback(null, 'pending');\n    });\n\nFor the `Given I launch the application` step, you may implement that by\ncreating and displaying a `BrowserWindow` with a sign-in form. In your\n`World`, you will create a helper for creating the window:\n\n    // features/support/world.js\n\n    function World() {\n      const {BrowserWindow} = require('electron');\n\n      this.createWindow = function(options) {\n        return new BrowserWindow(options);\n      };\n    }\n\n    module.exports = function() {\n      this.World = World;\n    };\n\nIn my step definition, you can then use the helper to show the window:\n\n    this.Given(/^I launch the application$/, function(callback) {\n      this.signInWindow = this.createWindow({width: 800, height: 600});\n      this.signInWindow.loadURL('file://' + __dirname + '/signin.html');\n      callback();\n    });\n\nNow that the window is open and visible, you can automate the process of\nfilling in the form fields and submitting the form. Since the feature\nand the step definitions are executing in the main process, you will\nneed to send JavaScript code to be executed in the renderer process for\nthe sign-in form.\n\nThe next helpers that you can add to the World will make use of\nCucumber's and [Node's](https://nodejs.org) support for\n[Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\nThe helper methods will execute JavaScript in the renderer and return a\npromise:\n\n    function succeedOrFail(result, resolve, reject) {\n      if (result.startswith('FAIL:')) {\n        reject(new Error(result.substring(5).trim()));\n      } else {\n        resolve(result);\n      }\n    }\n\n    this.typeText = function(window, id, text) {\n      return new Promise(function(resolve ,reject) {\n        var code = `var input = document.getElementById('${id}');\n          if (!input) {\n            'FAIL: An input element with identifier ${id} was not found';\n          } else {\n            input.value = '${text}';\n          }`\n        window.webContents.executeJavaScript(code, true, function(result) {\n          succeedOrFail(result, resolve, reject);\n        });\n      });\n    };\n\n    this.clickButton = function(window, id) {\n      return new Promise(function(resolve, reject) {\n        var code = `var button = document.getElementById('${id}');\n          if (!button) {\n            'FAIL: A button with identifier ${id} was not found';\n          } else {\n            button.click();\n          };\n        window.webContents.executeJavaScript(code, true, function(result) {\n          succeedOrFail(result, resolve, reject);\n        });\n      });\n    };\n\nThe second step definition can now be updated to usse the helpers:\n\n    this.When(/^I enter my username and password into the form$/, function(callback) {\n      return this.typeText(this.signInWindow, 'username', 'Bob')\n          .then(() => this.typeText(this.signInWindow, 'password', 'password')\n          .then(() => this.clickButton(this.signInWindow, 'signin'));\n    });\n\nFor more information about using Cucumber.js, refer to that project's\n[GitHub website](https://github.com/cucumber/cucumber-js).\n"
}