{
  "name": "levers",
  "version": "0.6.0",
  "description": "A simple settings store for Electron",
  "main": "dist/levers.js",
  "jsnext:main": "dist/levers.mjs",
  "scripts": {
    "prebuild": "eslint lib test",
    "build": "rollup -c",
    "watch": "rollup -c -w",
    "pretest": "npm run build",
    "test": "electron-mocha",
    "prepublish": "npm test"
  },
  "repository": {
    "user": "citycide",
    "repo": "levers",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/citycide/levers/tarball/master",
    "clone_url": "https://github.com/citycide/levers",
    "https_url": "https://github.com/citycide/levers",
    "travis_url": "https://travis-ci.org/citycide/levers",
    "zip_url": "https://github.com/citycide/levers/archive/master.zip",
    "api_url": "https://api.github.com/repos/citycide/levers"
  },
  "keywords": [
    "es6",
    "es2015",
    "es2016",
    "modules",
    "rollup",
    "electron",
    "config",
    "settings",
    "storage"
  ],
  "author": {
    "name": "citycide"
  },
  "license": "MIT",
  "files": [
    "lib",
    "dist"
  ],
  "homepage": "https://github.com/citycide/levers#readme",
  "dependencies": {
    "app-root-path": "^1.3.0",
    "dot-prop": "^3.0.0",
    "env-paths": "^0.3.0",
    "fs-jetpack": "^0.9.2",
    "lodash": "^4.13.1"
  },
  "devDependencies": {
    "babel-eslint": "^6.1.0",
    "babel-plugin-transform-runtime": "^6.9.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-es2015-rollup": "^1.1.1",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.9.0",
    "electron-mocha": "^2.3.1",
    "electron-prebuilt": "^1.3.1",
    "eslint": "^3.0.1",
    "eslint-config-standard": "^5.3.5",
    "eslint-plugin-babel": "^3.3.0",
    "eslint-plugin-promise": "^1.3.2",
    "eslint-plugin-standard": "^1.3.2",
    "rollup": "^0.34.0",
    "rollup-plugin-babel": "^2.5.1",
    "rollup-watch": "^2.5.0"
  },
  "gitHead": "dc703040ffa4b0b17d33a80d23f7a94020b95261",
  "_npmVersion": "3.8.5",
  "_nodeVersion": "6.3.0",
  "dist": {
    "shasum": "0e58220efb465f838b274aaf3876f8a30bcf6710",
    "tarball": "http://registry.npmjs.org/levers/-/levers-0.6.0.tgz"
  },
  "versions": [
    {
      "number": "0.5.0",
      "date": "2016-07-27T08:21:49.476Z"
    },
    {
      "number": "0.6.0",
      "date": "2016-07-31T02:05:14.148Z"
    }
  ],
  "created": "2016-07-27T08:21:49.476Z",
  "modified": "2016-07-31T02:05:14.148Z",
  "lastPublisher": {
    "name": "citycide",
    "email": "thecitycide@gmail.com"
  },
  "owners": [
    {
      "name": "citycide",
      "email": "thecitycide@gmail.com"
    }
  ],
  "readme": "### <p align=\"center\"><b>levers</b></p>\r\n\r\n> ***levers*** is a simple data storage module aimed at Electron apps.\r\n\r\n*note: levers is currently in active development and while it's currently in a high-functioning state, there may be bugs, untested features, and a lack of documentation.*\r\n\r\n## Why?\r\n\r\nElectron doesn't really have a built-in way to manage data storage, aside from the typical browser's `localStorage`. But this is only available in the renderer process. ***levers*** gives you a way to read and write JSON files from both the main and renderer processes, and you can even access nested properties using dot notation, thanks to [dot-prop][dotprop].\r\n\r\n***levers*** is similar to other implementations, especially [conf][conf] from the author of `dot-prop`. In fact a lot of credit for the code herein belongs to @sindresorhus. [See here for more on how these projects relate.](#relation-to-other-projects)\r\n\r\n[dotprop]: https://github.com/sindresorhus/dot-prop\r\n[conf]: https://github.com/sindresorhus/conf\r\n\r\n## Installation\r\n\r\n`npm i levers`\r\n\r\n## Usage\r\n\r\n> COMING SOON\r\n\r\n## Relation to other projects\r\n\r\n### `conf`\r\n\r\nThis module is heavily based on `conf` with a few core differences.\r\n\r\n1. Electron focus\r\n\r\n   ***levers*** is intended to be used in Electron apps. It uses Electron's `app.getPath()` method to track down the storage location ( by default ). `conf` on the other hand is more general and uses the OS environment to store its data in the configuration directory ( by default ). Both allow the path to be configured.\r\n\r\n2. Parent app name inference\r\n\r\n   `conf` uses node's `module.parent` to resolve to the app's root package.json and determine the app or module's name, which is used for file creation ( more on this below ). To make this work reliably, it needs to delete its own `require.cache` to prevent caching.\r\n\r\n   ***levers*** uses Electron's API along with the [app-root-path][approot] module to retrieve the parent app's identifier from its package.json, settling in this order:\r\n\r\n   `productName -> name -> 'Electron'`\r\n\r\n## Contributing\r\n\r\nI am open to input and discussion about the project. Feel free to open an issue or submit a pull request. For large changes, please open an issue to discuss the revisions first.\r\n\r\n## License\r\n\r\nMIT\r\n\r\nUses code also licensed under MIT Â© [Sindre Sorhus](https://sindresorhus.com)\r\n"
}