{
  "name": "node-cmake",
  "author": {
    "name": "Colin Taylor",
    "email": "cjntaylor@gmail.com"
  },
  "version": "1.3.0",
  "description": "A CMake-based build system for node.js native modules",
  "keywords": [
    "cmake",
    "native",
    "module",
    "build"
  ],
  "license": "ISC",
  "main": "index.js",
  "bin": {
    "ncmake": "lib/ncmake.js"
  },
  "dependencies": {
    "lodash": "^4.8.2",
    "mkdirp": "^0.5.1",
    "mothership": "^0.3.0",
    "nan": "*",
    "rimraf": "^2.4.3",
    "which": "^1.1.2"
  },
  "devDependencies": {},
  "repository": {
    "user": "cjntaylor",
    "repo": "node-cmake",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/cjntaylor/node-cmake/tarball/master",
    "clone_url": "https://github.com/cjntaylor/node-cmake",
    "https_url": "https://github.com/cjntaylor/node-cmake",
    "travis_url": "https://travis-ci.org/cjntaylor/node-cmake",
    "zip_url": "https://github.com/cjntaylor/node-cmake/archive/master.zip",
    "api_url": "https://api.github.com/repos/cjntaylor/node-cmake"
  },
  "homepage": "https://github.com/cjntaylor/node-cmake#readme",
  "gitHead": "4b1b8aa6c06928f17d64c687878667a1ea207c23",
  "scripts": {},
  "_npmVersion": "3.9.5",
  "_nodeVersion": "6.2.2",
  "dist": {
    "shasum": "bd4dbc2bfd20c8a024c7d6a7dc2b5f2686be6d74",
    "tarball": "http://registry.npmjs.org/node-cmake/-/node-cmake-1.3.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-10-13T00:21:59.969Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-10-13T00:29:57.826Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-10-13T01:01:20.973Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-10-13T15:12:36.555Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-12-01T03:08:47.688Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-04-07T01:16:08.578Z"
    },
    {
      "number": "1.2.1",
      "date": "2016-05-17T04:53:34.639Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-07-13T15:46:48.418Z"
    }
  ],
  "created": "2015-10-13T00:21:59.969Z",
  "modified": "2016-07-13T15:46:48.418Z",
  "lastPublisher": {
    "name": "cjntaylor",
    "email": "cjntaylor@gmail.com"
  },
  "owners": [
    {
      "name": "cjntaylor",
      "email": "cjntaylor@gmail.com"
    }
  ],
  "readme": "Node CMake\n==========\n\nA CMake-based build system for node.js native modules, for CMake >= v3.1.\n\n## Motivation\n\nThe current build system for node native modules is\n[node-gyp](https://github.com/nodejs/node-gyp), which is based on the google\nproject gyp. While this does provide a consistent build environment in\nline with the node build system, it has its own share of problems:\n\n1. Cross platform library integration. As most node native modules are \ndesigned to expose some system-level interface to an existing library or\nframework, its very common to need to include other libraries and headers\nas dependencies of the module. Under gyp, these must be specified manually\nfor each platform and architecture.\n\n2. Integration with other build systems. Gyp is very much its own system\nand doesn't play nice with existing builds. Common practice is to manually\nconvert the existing build to gyp, adding developer overhead and complexity.\nWhile gyp is designed to generate build files, outside visual studio its\nsupport is limited in the IDE space.\n\n3. Turing completeness. Gyp is a strictly declarative build system. Any\nconditional building is done through supported declarative syntax. For\ncomplicated builds, this adds a lot of complexity and overhead for something\nas simple as handing build conditions outside of architecture and platform (\nOptional libraries, plugin based builds, nested conditions, etc.)\n\n4. Depdencies. Gyp requires python to run, which is non-trival under windows,\nand is a constant source of frustration and configuration issues for those\nusers.\n\nAnd probably the most important of all:\n\n4. Future stability. Google has rapidly been migrating v8 to \n[gn](https://chromium.googlesource.com/chromium/src/tools/gn/), leaving the\nfuture of gyp and its supportability questionable. Its clear that if gyp is \nto remain, node will likely have to take ownership of the project, as all of \ngoogle's resources have been diverted to improving gn. Its also been made \nclear that gn isn't really intended to be used outside of chromium and isn't\nbeing exposed. Throw [bazel](http://bazel.io/) in the mix, and even gn's \nfuture is unstable.\n\nnode-cmake addresses these concerns by providing a node module build system\nbuilt on top of [CMake](https://cmake.org). CMake, like gyp, is a meta-build \nsystem, generating build files for the actual build tools and\nIDEs on each platform. It does this by using its own platform agnostic and\nturing complete syntax for describing the build process in general terms,\nand converting that syntax to the correct build instructions.\n\nCMake has long been a counter-argument and \n[competitor](https://gyp.gsrc.io/docs/GypVsCMake.md) \nto gyp. While the arguments outlined there are well reasoned, there are many\narguments as to why CMake is good build system for cross platform builds:\n\n1. No dependencies. All that is required to use CMake is to install it, and\nwhatever build environment is necessary for your platform (typically,\nvisual studio / xcode / gcc). \n\n2. Library search. CMake provides a cross-platform and standardized way to\nfind and link against external libraries, both those built with CMake and\nthose built with other systems. It provides sensible defaults and looks in\nstandard, correct places on each platform, and can be tuned for specific\nedge cases. If a library builds with CMake, their builds can be combined\nto build dependencies along with the main code.\n\n3. Stability and Integration. CMake has been in development far longer than\ngyp, and strives to maintain backwards compability across releases. Its an\nindependent project that is used by a large number of big name projects\nand will be supported for a long time. It receives regular updates that\nimprove and add functionality to make building more consistent, and to\naddress changes to platform specific variations and complexity. It also\nnicely integrates with visual studio, xcode and especially IDEs like\nJetbrain's CLion IDE and KDevelop, which use CMake as their native build\nenvironment.\n\nThis project is similar in goals to \n[cmake-js](https://www.npmjs.com/package/cmake-js), with one major difference.\nWhere that project has a node-centric focus, node-cmake relies strictly on\nCMake to download and configure node for building native extensions. This\nis done to support capabilites that are hard or impossible to integrate with\n`cmake-js`, namely toolchain support for cross-platform builds, and integration\nwith other cmake projects and build environments (like catkin for ROS), which\ndon't know about or potentially need a node interpreter to build.\n\nnode-cmake is designed to provide full parity with `node-gyp` outside of\nthe names and arguments of binaries; modules will still need to be updated to\nuse it, but all of `node-gyp`'s capabilities are supported.\n\n## Usage\n\nTo use this package, add the module `node-cmake` to your package.json\nas a development dependency:\n\n    npm install --save-dev node-cmake\n\nThen add a `CMakeLists.txt` file to the root of your module that contains\nthe following at a minimum (\\<REPLACE\\> with your own definitions):\n\n```CMake\ncmake_minimum_required(VERSION 3.1)\n\nproject(<NAME OF MODULE>)\n\nlist(APPEND CMAKE_MODULE_PATH \n    ${CMAKE_CURRENT_SOURCE_DIR}/node_modules/node-cmake\n)\n\nfind_package(NodeJS)\n\nadd_nodejs_module(${PROJECT_NAME} <SOURCE AND HEADER FILES GO HERE>)\n```\n\nThe `CMakeLists.txt` file is the main build script for CMake, and has the\nsame purpose as the `binding.gyp` file in `node-gyp`.\n\nThe `list(APPEND ...)` command tells CMake how to find the FindNodeJS.cmake\nscript and must point to the directory containing this file. As written\nthe variable `${CMAKE_CURRENT_SOURCE_DIR}` is a CMake variable referring to\nthe directory that contains the `CMakeLists.txt` file being processed, or in\nthis case, the root directory of your module. Since npm will install the \n`node-cmake` dependency underneath the `node_modules` directory, this tells\nCMake to look in the directory of this module for other scripts.\n\nThe `find_package` command tells CMake that we want to find node as a\ndependency of our project. This command optionally takes arguments which\nare specified below. Typically, these arguments shouldn't be used unless\nnecessary, to provide maximum flexibility for version and variant builds.\n\nDue to the complexity of creating a node module, and the strict requirements\nabout the naming and placement of the shared library, node-cmake provides\na CMake function for creating a node module, `add_nodejs_module`, similar to \nthe `add_executable` and `add_library` commands native to CMake. This command \nensures that the built shared library uses the correct build settings and \nflags on each platform. It creates a shared library `target`, specified by the\nfirst argument, that can be used identically to any other CMake `target`. In\nthe example above, the target will be called '\\<NAME OF MODULE\\>' \n\nCMake has extensive documentation online, which can be\nfound [here](https://cmake.org/documentation) for various versions of CMake.\nnode-cmake REQUIRES CMake >= 3.1, but any newer version is also supported.\n\n## Nan Support\n\nTo simplify building of cross-version node modules, \n[Nan](https://github.com/nodejs/nan) is always included as a project \ndependency. In your module native sources, just\n\n```C++\n#include <nan.h>\n```\n\nAt the top of any header/source file that requires this functionality.\nThe version included with node-cmake will always be the newest available\nversion of Nan. To use your own version, specify it as a dependency of your\nmodule:\n\n    npm install --save-dev nan\n\nThis version will be used instead of the dependency specified by node-cmake.\n\n## Building\n\nnode-cmake can be built by invoking CMake with its usual syntax, optimally\nusing an out-of-source build folder. This involves creating a folder,\nnavigating to that directory, and then running the `cmake` executable, with\nan arugument to the folder containing the root `CMakeLists.txt`:\n\n    mkdir build\n    cd build\n    cmake ..\n\nTo simplify integration with npm, this module provides an executable script\ncalled 'ncmake' that automates this process. Adding the following section:\n\n```JSON\n\"scripts\": {\n    \"install\": \"ncmake --build\"\n}\n```\n\nto your `package.json` is typically all that is required to build. Additonal\nflags and options that can be passed to ncmake are outlined below. If you\nadd additional non-optional arguments to this command, you MUST specify the\nbuild directory as the last argument (typically `out`).\n\nOnce you've added this to your module, just run `npm install` to build.\n\n## Running\n\nnode-cmake also provides a simple javascript module to simplify the \nfinding and loading of the built native module in your own scripts. It exposes\na single function similar to `require` with the same effects. Calling\n\n```JavaScript\nrequire('node-cmake')('<NAME OF MODULE>')\n```\n\nwill return the native module to you if it can be found in the standard\nlocations used by this module for building. This function handles loading\nthe correct module for your platform and architecture, and searches both\nmultiple build paths and mulitple configuration paths to find the\nnative library. Additional options can be passed to this function to control\nthese search parameters; see the `index.js` file in this directory for\nmore information.\n\n## Variants\n\nnode-cmake supports the concept of variants to allow building modules for\nalternate node environments, such as\n\n* [IO.js](https://iojs.org) - Now merged back into node (legacy support)\n* [NW.js](http://nwjs.io)\n* [Electron](http://electron.atom.io)\n\nThese variants can be specified using their short names to `ncmake` using the\n`-s` flag. If a variant is specified, a version MUST also be specified using\nthe `-v` flag.\n\n* Electron = electron\n* IOJS = iojs\n* NW.js = nw\n* Node = node\n\nVariants are stored in the `variants` folder and can be easily added or\nupdated. If you are an owner of a variant and would like to request\nmodifications or removal, or would like to add your own, please issue a\npull request or feature request to that effect.\n\n## Versions\n\nEach variant maintains their own version range, which is handled properly\nby the variant. Versions are specified without the leading 'v' prefix, and\nmust specify all three components:\n\n    [MAJOR].[MINOR].[PATCH]\n\nTwo additional version 'shortcuts' are supported, which\nhave logical effects:\n\n* latest    - Use the latest version for a variant. Requires downloading an \n              additional file to determine this at runtime.\n* installed - Only applies to the default 'node' variant; uses the \n              version of the running node interpreter.\n\n## Example\n\nAn example project is provided in the `example` folder. Follow the directions\nin its README.md to build it correctly.\n\n## NCMake Manual\n\n    ncmake [options] [build_directory]\n\n    Create a build directory for CMake, run the CMake configuration, and\n    optionally build the project.\n\n    This command can non-option arguments. If no non-option arguments are\n    specified, the default build directory is assumed (out). If any\n    non-option arguments are specified, the build directory relative to the\n    current working directory MUST be specified as the last argument.\n\n    Options (All case insensitive):\n\n    --config      Set the build configuration. Can be one of 'MinSizeRel',\n                  'RelWithDebInfo', 'Release' or 'Debug'; or a custom\n                  CMake build type. See the CMake documentation for more\n                  information.\n\n                  Default: MinSizeRel\n\n    --build       Build the project in addition to configuration\n\n    --clean-first Clean the project before building\n\n    --target      Build the specified target. Used for building specific\n                  modules, components and libraries. See the CMake\n                  documentation for more information.\n\n    -C <STD>      Set the C++ standard to <STD> level. Can be one of\n                  (98, 11, 14). \n\n                  Default: Unset, which uses the default level defined by CMake\n                  or the version required by the variant/version being built.\n\n    -Z/-NZ        Force the node sources required for building the module to\n                  be / not be downloaded. Useful if you want to use downloaded\n                  sources instead of the ones included on your platform. On\n                  some platforms/variants, sources must always be downloaded.\n\n    -G <NAME>     Set the CMake generator name. See the CMake documentation for \n                  more information. Used primarily on windows to specify the \n                  version of visual studio to build with (if not the default)\n\n                  Default: Unset\n\n    -T <NAME>     Set the toolset name for the generator. Used by some\n                  generators to configure the compiler used to build the\n                  sources.\n\n                  Default: Unset\n\n    -S <VARIANT>  Set the variant to build the module for. Used when\n                  building the module for variants other than Node.js\n\n                  Default: node\n\n    -V <VERSION>  Set the version of the variant to build against. Must\n                  be specified when the variant is specified. Can also\n                  be the special versions 'installed' and 'latest' when\n                  appropriate.\n\n                  Default: installed\n\n    Advanced Options (All case insensitive):\n\n    -A <ARCH>     Set the target architecture for the node module. Useful\n                  when cross-compiling. Can be any valid output from\n                  'process.arch'\n\n                  Default: process.arch\n\n    -P <PLATFORM> Set the target platform for the node module. Useful when\n                  cross-compiling. Can be any valid output from\n                  'process.platform'\n\n                  Default: process.platform\n\n## find_package Manual\n\nThis is an advanced configuration and is primarily supported for exotic\nbuilds strictly in CMake. Generally, this functionality should not be used,\nrelying on `ncmake` to build via npm.\n\nThe NodeJS find_package command uses the VERSION and COMPONENTS arguments\nto support build-defined versions and variants. \n\nSpecify the version immediately after `NodeJS` to hard-code a version \nrequirement:\n\n```CMake\nfind_package(NodeJS 0.12.7)\n```\n\nTo specify a variant, use ONE of the variant keywords above in all caps:\n\n```CMake\nfind_package(NodeJS 0.12.3 COMPONENTS NWJS)\n```\n\nThe version must always be specified when using a component.\n "
}