{
  "name": "gamevis",
  "version": "0.2.0",
  "main": "background.js",
  "scripts": {
    "start": "electron .",
    "docs": "jsdoc -c jsdoc.json .",
    "sloc": "sloc --exclude '(^(\\.|node_modules|dist|bower_components|vendor|docs))|((\\.(go|ts|html|css|less)$))' --alias vue=js ./"
  },
  "license": "MIT",
  "repository": {
    "user": "saul",
    "repo": "gamevis",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/saul/gamevis/tarball/master",
    "clone_url": "https://github.com/saul/gamevis",
    "https_url": "https://github.com/saul/gamevis",
    "travis_url": "https://travis-ci.org/saul/gamevis",
    "zip_url": "https://github.com/saul/gamevis/archive/master.zip",
    "api_url": "https://api.github.com/repos/saul/gamevis"
  },
  "devDependencies": {
    "babel-core": "^6.4.5",
    "babel-plugin-transform-runtime": "^6.4.3",
    "babel-preset-es2015": "^6.3.13",
    "babel-runtime": "^5.8.35",
    "babelify": "^7.2.0",
    "bower": "^1.7.7",
    "browserify-css": "^0.9.0",
    "docdash": "^0.1.0",
    "gulp": "^3.9.0",
    "gulp-babel": "^6.1.1",
    "gulp-bower": "0.0.11",
    "gulp-less": "^3.0.5",
    "gulp-livereload": "^3.8.1",
    "gulp-sourcemaps": "^1.6.0",
    "gulp-util": "^3.0.7",
    "jsdoc": "^3.4.0",
    "jsdoc-vue": "^0.1.3",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "vue-hot-reload-api": "^1.3.2",
    "vueify": "^8.3.5",
    "vueify-insert-css": "^1.0.0",
    "watchify": "^3.7.0"
  },
  "eslintConfig": {
    "env": {
      "browser": true,
      "node": true,
      "es6": true
    }
  },
  "dependencies": {
    "bluebird": "^3.1.1",
    "db-streamer": "^0.4.0",
    "demofile": "^0.2.1",
    "electron-prebuilt": "^0.36.4",
    "jquery": "^2.2.0",
    "lodash": "^3.10.1",
    "minimist": "^1.2.0",
    "pace": "0.0.4",
    "pg": "^4.4.3",
    "pg-copy-streams": "^0.3.0",
    "pg-native": "^1.10.0",
    "sequelize": "^3.17.3",
    "stats.js": "^1.0.0",
    "three": "^0.74.0",
    "vue": "^1.0.16",
    "xxhash": "^0.2.3"
  },
  "gitHead": "de09477fd4285d29bcc1fa75610dd8cecc80dbf2",
  "description": "[![Gitter](https://badges.gitter.im/saul/gamevis.svg)](https://gitter.im/saul/gamevis?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)",
  "homepage": "https://github.com/saul/gamevis#readme",
  "_npmVersion": "3.3.12",
  "_nodeVersion": "5.4.0",
  "dist": {
    "shasum": "4e2194835980d7ddf0574abfb978f31a8e12220d",
    "tarball": "http://registry.npmjs.org/gamevis/-/gamevis-0.2.0.tgz"
  },
  "versions": [
    {
      "number": "0.2.0",
      "date": "2016-03-25T12:25:56.433Z"
    }
  ],
  "created": "2016-03-25T12:25:56.433Z",
  "modified": "2016-03-25T12:25:56.433Z",
  "lastPublisher": {
    "name": "saulren",
    "email": "saul.rennison@gmail.com"
  },
  "owners": [
    {
      "name": "saulren",
      "email": "saul.rennison@gmail.com"
    }
  ],
  "readme": "# <img src=\"logo.png\" width=\"32\"> Gamevis\n\n[![Gitter](https://badges.gitter.im/saul/gamevis.svg)](https://gitter.im/saul/gamevis?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nGamevis is an open-source [Electron](http://electron.atom.io/) application for visualising gameplay data developed by [Saul Rennison](http://saul.re) as part of his degree dissertation.\n\nGamevis is unopinionated and easily fits many genres of games, and includes importers for Counter-Strike: Global Offensive and Dota 2.\n\n## Screenshot\n\nScreenshot demonstrating two layered heatmap visualisations:\n\n<img src=\"screenshot.png\" width=\"1024\">\n\n## Installation\n\n### 1. Prerequisites\n\nNode & npm are already expected to be installed:\n\n```\nbrew install libpqxx\nnpm install -g gulp # required for building\nnpm install # install app dependencies\ngulp # compile JavaScript and stylesheets\n```\n\n### 2. Database\n\nA Postgres server is by default expected to be running on `localhost`. The `config.json` file can be updated at the root of the project to specify a non-default database IP/port.\n\nBy default the server is expected to have a database named `gamevis` with a username and password of `gamevis`.\n\nNote that no tables need to be generated - the application will automatically generate.\n\n### 3. Run the app\n\nThe application can be started with `npm start`. However, no sessions are available by default. The importers (see below) can be used to import game sessions into the database.\n\n## Visualisations\n\nMultiple visualisations can be show on a single visualisation (as shown in the screenshot):\n\n* Heatmaps\n* Timeline events (e.g., round start)\n* Discontinuous points (e.g., death location)\n* Continuous points (e.g., player movement)\n\n## Importers\n\nGame | Path | Comments\n-----|------|----------\nCounter-Strike: Global Offensive | `importers/csgo` | Run `import.js` with the path to the demo file as the argument.\nDota 2: Reborn | `importers/dota_reborn` | Run `import.go` with the path to the `.dem` replay file as the argument.\n\n## Release log\n\nGamevis is still a work-in-progress and is not expected to be in a production-ready state until Summer 2016. However, changes are committed frequently and any issues should be raised as bugs. Of course pull requests are welcome!\n\n## Database\n\nGamevis expects to connect to a Postgres database of version 9.3 or later due to JSONB querying features. This section details the structure of the database tables, that are automatically generated by the game client.\n\n### session\n\nColumn | Type | Value\n-------|------|-------\ntitle | string, not null | User-friendly session title\nlevel | string, not null | Name of the level/map/world this session was recorded from, e.g., `de_dust2`\ngame | string, not null | Short name of the game this session is associated with, e.g., `csgo`. This name will be used as the subdirectory to find the level overview data.\ndata | JSONB | (Optional) Custom data associated with this session.\n\n### event\n\nThis table represents events that occur throughout a game's session. Events are optionally associated with one or more locations within the game world, and optionally associated with one or more entities.\n\nColumn | Type | Value\n-------|------|-------\nsession_id | foreign key | → session\ntick | int, not null | Game tick that this event occurred\nname | string, not null | Name of the event\ndata | JSONB, not null | Event-specific data. The data keys for a particular event name are expected to be constant across all instances of it being fired in a particular session\nlocations | JSONB | (Optional) All locations associated with this instance of the event. Keys should be a user-friendly string, and the value a `Vector2` object, e.g., `{'player': {'x': 500, 'y': 250}}`\nentities | JSONB | (Optional) All entities associated with this instance of the event. Keys should be a user-friendly string, and the values pointers into the `entity_props` table, e.g., `{'grenade': 175, 'thrower': 11}`\n\n### entity_props\n\nThis table represents the entity properties throughout the recorded session.\n\nColumn | Type | Value\n-------|------|-------\nsession_id | foreign key | → session\nindex | int, not null | Entity index. Does not have unique across an entire session, just for this entity at this tick\ntick | int, not null | Game tick that this update occurred\nprop | string, not null | Name of the property that was updated (e.g., `health`)\nvalue | JSONB, not null | JSON object of the format `{'value': newValue}` representing the new value of the property.\n\n## License\n\nThis project is licensed under the MIT license, see [LICENSE.md](LICENSE.md) for the full legalese.\n\n## Acknowledgements\n\n* Logo derived from Pao Media's gamepad logo, licensed under [Creative Commons (Attribution 3.0 Unported)](https://creativecommons.org/licenses/by/3.0/)."
}