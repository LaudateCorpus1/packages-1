{
  "name": "electron-tail",
  "productName": "Electron-Tail",
  "description": "Application to display the tail end of a text file.",
  "version": "0.1.0",
  "author": {
    "name": "Apps by @roeburg"
  },
  "authorDetails": {
    "name": "Rohit Lakhanpal",
    "handle": "@roeburg",
    "email": "mail@rohitl.com",
    "url": "https://twitter.com/roeburg"
  },
  "copyright": "Â© 2016, Rohit Lakhanpal",
  "sponsor": {
    "name": "Panviva Pty Ltd",
    "handle": "@panviva",
    "url": "https://www.panviva.com"
  },
  "keywords": [
    "tail",
    "electron",
    "electron-tail"
  ],
  "repository": {
    "user": "rohit-lakhanpal",
    "repo": "electron-tail",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/rohit-lakhanpal/electron-tail/tarball/master",
    "clone_url": "https://github.com/rohit-lakhanpal/electron-tail",
    "https_url": "https://github.com/rohit-lakhanpal/electron-tail",
    "travis_url": "https://travis-ci.org/rohit-lakhanpal/electron-tail",
    "zip_url": "https://github.com/rohit-lakhanpal/electron-tail/archive/master.zip",
    "api_url": "https://api.github.com/repos/rohit-lakhanpal/electron-tail"
  },
  "homepage": "https://github.com/rohit-lakhanpal/electron-tail",
  "devDependencies": {
    "asar": "^0.11.0",
    "chai": "^3.5.0",
    "electron-mocha": "^2.0.0",
    "electron-prebuilt": "^1.2.4",
    "fs-jetpack": "^0.9.1",
    "gulp": "^3.9.0",
    "gulp-batch": "^1.0.5",
    "gulp-less": "^3.1.0",
    "gulp-plumber": "^1.1.0",
    "gulp-util": "^3.0.6",
    "gulp-watch": "^4.3.5",
    "gulp-bower": "^0.0.13",
    "q": "^1.4.1",
    "rollup": "^0.26.3",
    "yargs": "^4.2.0"
  },
  "optionalDependencies": {
    "appdmg": "^0.3.2",
    "rcedit": "^0.5.0"
  },
  "scripts": {
    "postinstall": "cd app && npm install",
    "build": "gulp build",
    "build-prod": "gulp build --env=production",
    "release-debug": "npm install && gulp release --env=development",
    "release": "npm install && gulp release --env=production",
    "start": "gulp start",
    "start-prod": "gulp start --env=production",
    "pretest": "gulp build --env=test",
    "test": "electron-mocha build --renderer",
    "install-native": "node ./tasks/install_native_module"
  },
  "gitHead": "cd44f41d36392d09fb7f772cd66515d5844b986e",
  "dependencies": {
    "appdmg": "^0.3.2",
    "rcedit": "^0.5.0"
  },
  "_npmVersion": "3.9.5",
  "_nodeVersion": "6.2.2",
  "dist": {
    "shasum": "7a4e7aba0fa454d83059ac00d4dc9d49d3685bcf",
    "tarball": "http://registry.npmjs.org/electron-tail/-/electron-tail-0.1.0.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-06-23T13:45:26.172Z"
    }
  ],
  "created": "2016-06-23T13:45:26.172Z",
  "modified": "2016-06-23T13:45:26.172Z",
  "lastPublisher": {
    "name": "rohitl",
    "email": "mail@rohitl.com"
  },
  "owners": [
    {
      "name": "rohitl",
      "email": "mail@rohitl.com"
    }
  ],
  "readme": "electron-tail\r\n==============\r\nelectron-tail is a cross platform application that is meant to display the tailend of a text file. \r\nThis application has been built using [electron](https://github.com/electron/electron), a framework that helps build cross platform desktop apps with JavaScript, HTML, and CSS.\r\nAt application's architecture is based on [szwacz's](https://github.com/szwacz) [electron-boilerplate template version 2.3.4](https://github.com/szwacz/electron-boilerplate/releases/tag/2.3.4). \r\nIt additionally uses [lucagrulla's](https://github.com/lucagrulla) [node-tail](https://github.com/lucagrulla/node-tail).\r\n\r\n# Quick start\r\nThe only development dependency of this project is [Node.js](https://nodejs.org). \r\nSo just make sure you have it installed.\r\nAdditionally if you would like to be able to build installers locally, you will need to download [Nullsoft Scriptable Install System (NSIS version >=2.51)](http://nsis.sourceforge.net/Download).\r\n\r\nAfter installing the dependancies, type following commands to get started...\r\n```\r\ngit clone https://github.com/rohit-lakhanpal/electron-tail.git\r\ncd electron-tail\r\nnpm install\r\nnpm start\r\n```\r\n... and boom! You have running desktop application on your screen.\r\n\r\n\r\n# Structure of the project\r\n\r\nThere are **two** `package.json` files:  \r\n\r\n#### 1. For development\r\nSits on path: `electron-tail/package.json`. Here you declare dependencies for your development environment and build scripts. **This file is not distributed with real application!**\r\n\r\nAlso here you declare the version of Electron runtime you want to use:\r\n```json\r\n\"devDependencies\": {\r\n  \"electron-prebuilt\": \"^1.2.4\"\"\r\n}\r\n```\r\n\r\n#### 2. For your application\r\nSits on path: `electron-tail/app/package.json`. This is **real** manifest of your application. Declare your app dependencies here.\r\n\r\n#### OMG, but seriously why there are two `package.json`?\r\n1. Native npm modules (those written in C, not JavaScript) need to be compiled, and here we have two different compilation targets for them. Those used in application need to be compiled against electron runtime, and all `devDependencies` need to be compiled against your locally installed node.js. Thanks to having two files this is trivial.\r\n2. When you package the app for distribution there is no need to add up to size of the app with your `devDependencies`. Here those are always not included (because reside outside the `app` directory).\r\n\r\n### Project's folders\r\n\r\n- `app` - code of your application goes here.\r\n- `config` - place where you can declare environment specific stuff for your app.\r\n- `build` - in this folder lands built, runnable application.\r\n- `releases` - ready for distribution installers will land here.\r\n- `resources` - resources needed for particular operating system.\r\n- `tasks` - build and development environment scripts.\r\n\r\n\r\n# Development\r\n\r\n#### Installation\r\n\r\n```\r\nnpm install\r\n```\r\nIt will also download Electron runtime, and install dependencies for second `package.json` file inside `app` folder.\r\n\r\n#### Starting the app\r\n\r\n```\r\nnpm start\r\n```\r\n\r\n#### Adding npm modules to your app\r\n\r\nRemember to add your dependency to `app/package.json` file, so do:\r\n```\r\ncd app\r\nnpm install name_of_npm_module --save\r\n```\r\n\r\n#### Native npm modules\r\n\r\nWant to use [native modules](https://github.com/atom/electron/blob/master/docs/tutorial/using-native-node-modules.md)? This objective needs some extra work (rebuilding module for Electron). In this boilerplate it's fully automated, just use special command instead of standard `npm install something` when want to install native module.\r\n```\r\nnpm run install-native -- name_of_native_module\r\n```\r\nThis script when run first time will add [electron-rebuild](https://github.com/electronjs/electron-rebuild) to your project. After that everything is wired and no further maintenance is necessary.\r\n\r\n#### Working with modules\r\n\r\nHow about being future proof and using ES6 modules all the time in your app? Thanks to [rollup](https://github.com/rollup/rollup) you can do that. It will transpile the imports to proper `require()` statements, so even though ES6 modules aren't natively supported yet you can start using them today.\r\n\r\nYou can use it on those kinds of modules:\r\n```js\r\n// Modules authored by you\r\nimport { myStuff } from './my_lib/my_stuff';\r\n// Node.js native\r\nimport fs from 'fs';\r\n// Electron native\r\nimport { app } from 'electron';\r\n// Loaded from npm\r\nimport moment from 'moment';\r\n```\r\n\r\n#### Including files to your project\r\n\r\nThe build script copies files from `app` to `build` directory and the application is started from `build`. Therefore if you want to use any special file/folder in your app make sure it will be copied via some of glob patterns in `tasks/build/build.js`:\r\n\r\n```js\r\nvar paths = {\r\n    copyFromAppDir: [\r\n        './node_modules/**',\r\n        './vendor/**',\r\n        './**/*.html',\r\n        './**/*.+(jpg|png|svg)'\r\n    ],\r\n}\r\n```\r\n\r\n#### Unit tests\r\n\r\nelectron-tail has preconfigured [mocha](https://mochajs.org/) test runner with the [chai](http://chaijs.com/api/assert/) assertion library. To run the tests go with standard:\r\n```\r\nnpm test\r\n```\r\nYou don't have to declare paths to spec files in any particular place. The runner will search through the project for all `*.spec.js` files and include them automatically.\r\n\r\nThose tests can be plugged into [continuous integration system](https://github.com/atom/electron/blob/master/docs/tutorial/testing-on-headless-ci.md).\r\n\r\n# Making a release\r\n\r\n**Note:** There are various icon and bitmap files in `resources` directory. Those are used in installers and are intended to be replaced by your own graphics.\r\n\r\nTo make ready for distribution installer use command:\r\n```\r\nnpm run release\r\n```\r\nIt will start the packaging process for operating system you are running this command on. Ready for distribution file will be outputted to `releases` directory.\r\n\r\nYou can create Windows installer only when running on Windows, the same is true for Linux and OSX. So to generate all three installers you need all three operating systems.\r\n\r\n## Mac only\r\n\r\n#### App signing\r\n\r\nThe Mac release supports [code signing](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html). To sign the `.app` in the release image, include the certificate ID in the command as so,\r\n```shell\r\nnpm run release -- --sign A123456789\r\n```\r\n\r\n#### Mac App Store\r\n**CAUTION**: until [atom/electron/issues#3871](https://github.com/atom/electron/issues/3871) isn't resolved, the signing procedure probably will make your application crash right after run.\r\n\r\nYou should install the Electron build for MAS\r\n```\r\nexport npm_config_platform=mas\r\nrm -rf node_modules\r\nnpm install\r\n```\r\n\r\nTo sign your app for Mac App Store\r\n```shell\r\nnpm run release -- --mas --mas-sign \"3rd Party Mac Developer Application: Company Name (APPIDENTITY)\" --mas-installer-sign \"3rd Party Mac Developer Installer: Company Name (APPIDENTITY)\"\r\n```\r\n\r\nOr edit the `app/package.json`, remove the `//` from `//codeSignIdentitiy` and update the values with your sign indentities\r\n```json\r\n  \"//codeSignIdentitiy\": {\r\n    \"dmg\": \"Developer ID Application: Company Name (APPIDENTITY)\",\r\n    \"MAS\": \"3rd Party Mac Developer Application: Company Name (APPIDENTITY)\",\r\n    \"MASInstaller\": \"3rd Party Mac Developer Installer: Company Name (APPIDENTITY)\"\r\n  }\r\n```\r\n\r\nYou can change the application category too\r\n```json\r\n  \"LSApplicationCategoryType\": \"public.app-category.productivity\"\r\n```\r\n\r\nIf you insert your indentities in the package.json you can compile for MAS like\r\n```\r\nnpm run release -- --mas\r\n```\r\n\r\n## Windows only\r\n\r\n#### Installer\r\n\r\nThe installer is built using [NSIS](http://nsis.sourceforge.net). You have to install NSIS version >=2.51, and add its folder to PATH in Environment Variables, so it is reachable to scripts in this project. For example, `C:\\Program Files (x86)\\NSIS`.\r\n\r\n#### Create installer\r\n\r\n```\r\nnpm run release\r\n```\r\n\r\n#### 32-bit build on 64-bit Windows\r\n\r\nThere are still a lot of 32-bit Windows installations in use. If you want to support those systems and have 64-bit OS make sure you've installed 32-bit (instead of 64-bit) Node version. There are [versions managers](https://github.com/coreybutler/nvm-windows) if you feel the need for both architectures on the same machine.\r\n\r\n# License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015-2016 [Rohit Lakhanpal](https://github.com/rohit-lakhanpal)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n"
}