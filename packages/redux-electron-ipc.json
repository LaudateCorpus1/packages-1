{
  "name": "redux-electron-ipc",
  "version": "1.0.1",
  "description": "Redux Electron IPC Middleware",
  "main": "index.js",
  "scripts": {
    "test": "mocha --compilers js:babel-core/register",
    "lint": "eslint .",
    "build": "webpack && WEBPACK_ENV=production ./node_modules/.bin/webpack",
    "dev": "webpack --watch"
  },
  "keywords": [
    "redux",
    "electron",
    "ipc",
    "middleware"
  ],
  "author": {
    "name": "Mario Tacke",
    "email": "tacke.mario@gmail.com"
  },
  "repository": {
    "user": "mariotacke",
    "repo": "redux-electron-ipc",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mariotacke/redux-electron-ipc/tarball/master",
    "clone_url": "https://github.com/mariotacke/redux-electron-ipc",
    "https_url": "https://github.com/mariotacke/redux-electron-ipc",
    "travis_url": "https://travis-ci.org/mariotacke/redux-electron-ipc",
    "zip_url": "https://github.com/mariotacke/redux-electron-ipc/archive/master.zip",
    "api_url": "https://api.github.com/repos/mariotacke/redux-electron-ipc"
  },
  "license": "MIT",
  "devDependencies": {
    "babel-core": "^6.9.1",
    "babel-eslint": "^6.0.4",
    "babel-loader": "^6.2.4",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-es2015": "^6.9.0",
    "babel-register": "^6.9.0",
    "chai": "^3.5.0",
    "eslint": "^2.11.1",
    "mocha": "^2.5.3",
    "proxyquire": "^1.7.9",
    "redux": "^3.5.2",
    "webpack": "^1.13.1"
  },
  "gitHead": "b7bdb5e61e11a2c037bed18fb851b26975aaceb7",
  "homepage": "https://github.com/mariotacke/redux-electron-ipc#readme",
  "_npmVersion": "3.8.6",
  "_nodeVersion": "5.11.1",
  "dist": {
    "shasum": "b3b5ee84aefb59a84d2b64e16c2388117cb4a760",
    "tarball": "http://registry.npmjs.org/redux-electron-ipc/-/redux-electron-ipc-1.0.1.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-06-01T00:05:02.979Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-06-01T17:49:59.035Z"
    }
  ],
  "created": "2016-06-01T00:05:02.979Z",
  "modified": "2016-06-01T17:49:59.035Z",
  "lastPublisher": {
    "name": "mariotacke",
    "email": "tacke.mario@gmail.com"
  },
  "owners": [
    {
      "name": "mariotacke",
      "email": "tacke.mario@gmail.com"
    }
  ],
  "readme": "# Redux Electron IPC Middleware\n[![Build Status](https://travis-ci.org/mariotacke/redux-electron-ipc.svg?branch=master)](https://travis-ci.org/mariotacke/redux-electron-ipc) [![npm version](https://badge.fury.io/js/redux-electron-ipc.svg)](https://badge.fury.io/js/redux-electron-ipc)\n\nA [Redux](https://github.com/reactjs/redux) middleware to reduce code around ipc\ncalls in an [Electron](http://electron.atom.io/) application. You can send and\nreceive [IPC](https://github.com/electron/electron/blob/master/docs/api/ipc-main.md)\nevents with a simple api.\n\n## Install\n\n### [npm](https://www.npmjs.com/package/redux-electron-ipc)\n```sh\nnpm install --save redux-electron-ipc\n```\n\n## Usage\nCheck out the full [demo](https://github.com/mariotacke/redux-electron-ipc/tree/master/example)\napplication.\n\n### Window\n```js\nimport { applyMiddleware, createStore } from 'redux';\nimport createIpc from 'redux-electron-ipc';\nimport { pingActionCreator, pongActionCreator } from './actions';\nimport { exampleReducer } from './reducer';\n\n// register an action creator to an ipc channel (key/channel, value/action creator)\nconst ipc = createIpc({\n    'pong': pongActionCreator, // receive a message\n    ...\n});\n\nconst store = createStore(exampleReducer, applyMiddleware(ipc));\n\n// send a message with arguments\nstore.dispatch(pingActionCreator('redux', 'electron', 'ipc'));\n```\n\n### Main\n```js\nconst electron = require('electron');\nconst { ipcMain } = electron;\n\n...\n\n// pong event with arguments back to caller\nipcMain.on('ping', (event, ...args) => {\n    console.log('Ping', ...args);\n    event.sender.send('pong', ...args);\n});\n```\n\n## API\n\n`redux-electron-ipc` has a single constructor function for creating ipc\nmiddleware.\n\n```js\ncreateIpc(events?: Object, prefix?: string) => IpcMiddleware\n```\n\n### Events\nEach key on the `events` object (default: `{}`) registers a single ipc channel\nresponse. The key designates the `ipc` channel; the value is a redux action\ncreator to be dispatched.\n\n```js\n{\n    'ipc channel name': (event, ...args) => {\n        return {\n            type: 'YOUR_ACTION_TYPE',\n            ... optional mapping of arguments ...\n        }\n    }\n}\n```\n\n### Prefix\nThe optional prefix (default: `IPC_`) determines which actions to forward to ipc\nwhen dispatched through the redux store.\n\n### Examples\n\n#### Sending an IPC event\nThe following `dispatch` will be intercepted by the `redux electron ipc`\nmiddleware and triggers an ipc event because the action type is in the form of\n`IPC_`... and a `channel` is specified.\n\n```js\nstore.dispatch({\n    type: IPC_ACTION_NAME, // IPC_ prefix + action name\n    channel: 'ipc event channel',\n    payload: {\n        key: value\n    }\n});\n```\n\n#### Receiving an IPC event\nTo receive events, register a channel response when configuring the middleware.\n\n```js\nconst ipc = createIpc({\n    'channel to listen to': () => {\n        return {\n            action: 'IPC_RESPONSE_ACTION',\n            ... optional mapping of arguments ...\n        }\n    }\n    ...\n});\n\nconst store = createStore(exampleReducer, applyMiddleware(ipc));\n```\n\n## Questions\nFor any questions, please open an [issue](https://github.com/mariotacke/redux-electron-ipc/issues).\nPull requests (with tests) are appreciated.\n"
}