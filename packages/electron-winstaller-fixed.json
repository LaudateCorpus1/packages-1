{
  "name": "electron-winstaller-fixed",
  "version": "4.0.0",
  "description": "Module to generate Windows installers for Electron apps",
  "main": "./lib/index.js",
  "license": "MIT",
  "repository": {
    "user": "develar",
    "repo": "windows-installer",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/develar/windows-installer/tarball/master",
    "clone_url": "https://github.com/develar/windows-installer",
    "https_url": "https://github.com/develar/windows-installer",
    "travis_url": "https://travis-ci.org/develar/windows-installer",
    "zip_url": "https://github.com/develar/windows-installer/archive/master.zip",
    "api_url": "https://api.github.com/repos/develar/windows-installer"
  },
  "scripts": {
    "compile": "babel -d lib/ src/",
    "prepublish": "npm run test && npm run compile",
    "lint": "eslint src & eslint spec",
    "test": "npm run lint && ava",
    "tdd": "ava --watch",
    "whitespace": "whitespace src/*.js"
  },
  "dependencies": {
    "archiver": "^1.0.1",
    "archiver-utils": "^1.2.0",
    "bluebird": "^3.4.1",
    "debug": "^2.2.0",
    "fs-extra-p": "^1.0.6"
  },
  "devDependencies": {
    "ava": "^0.16.0",
    "babel-cli": "^6.11.4",
    "babel-eslint": "^6.1.2",
    "babel-plugin-transform-async-to-module-method": "^6.8.0",
    "babel-plugin-transform-runtime": "^6.12.0",
    "babel-preset-es2015-node4": "^2.1.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.11.6",
    "eslint": "3.2.2",
    "temp": "^0.8.3",
    "whitespace": "^2.1.0"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "babel": {
    "presets": [
      "stage-0",
      "es2015-node4"
    ],
    "plugins": [
      [
        "transform-async-to-module-method",
        {
          "module": "bluebird",
          "method": "coroutine"
        }
      ]
    ]
  },
  "ava": {
    "files": [
      "spec/*.js"
    ],
    "failFast": true,
    "require": [
      "babel-register"
    ],
    "babel": "inherit"
  },
  "gitHead": "93183160a39a1ebf93f6e9325b456788437b311a",
  "homepage": "https://github.com/develar/windows-installer#readme",
  "_npmVersion": "3.10.6",
  "_nodeVersion": "6.3.1",
  "dist": {
    "shasum": "4cef923b61c9886836c55c4dcfa0e836737a2c7b",
    "tarball": "http://registry.npmjs.org/electron-winstaller-fixed/-/electron-winstaller-fixed-4.0.0.tgz"
  },
  "versions": [
    {
      "number": "2.0.5-beta.4",
      "date": "2016-03-08T11:31:15.353Z"
    },
    {
      "number": "2.0.5-beta.5",
      "date": "2016-03-08T17:01:01.380Z"
    },
    {
      "number": "2.0.5-beta.7",
      "date": "2016-03-08T19:34:20.455Z"
    },
    {
      "number": "2.0.6-beta.0",
      "date": "2016-03-15T06:28:02.737Z"
    },
    {
      "number": "2.0.6-beta.1",
      "date": "2016-03-16T08:17:21.791Z"
    },
    {
      "number": "2.0.6-beta.2",
      "date": "2016-03-23T08:52:35.167Z"
    },
    {
      "number": "2.0.6-beta.3",
      "date": "2016-03-24T09:37:18.548Z"
    },
    {
      "number": "2.0.6-beta.4",
      "date": "2016-03-24T12:08:32.841Z"
    },
    {
      "number": "2.0.6-beta.5",
      "date": "2016-04-01T23:06:51.321Z"
    },
    {
      "number": "2.0.6-beta.6",
      "date": "2016-04-02T18:25:11.457Z"
    },
    {
      "number": "2.0.6-beta.7",
      "date": "2016-04-05T07:57:48.484Z"
    },
    {
      "number": "2.0.6-beta.8",
      "date": "2016-04-08T10:17:38.734Z"
    },
    {
      "number": "2.2.1-beta.0",
      "date": "2016-04-14T07:16:32.424Z"
    },
    {
      "number": "2.3.0-beta.0",
      "date": "2016-04-19T08:23:09.578Z"
    },
    {
      "number": "2.3.0-beta.1",
      "date": "2016-04-19T10:58:31.328Z"
    },
    {
      "number": "2.3.0-beta.2",
      "date": "2016-04-20T05:40:52.014Z"
    },
    {
      "number": "2.3.0-beta.3",
      "date": "2016-04-20T05:50:54.174Z"
    },
    {
      "number": "2.3.0-beta.4",
      "date": "2016-04-20T05:51:35.758Z"
    },
    {
      "number": "2.4.0-beta.0",
      "date": "2016-04-27T07:50:29.485Z"
    },
    {
      "number": "2.4.0-beta.1",
      "date": "2016-05-01T13:13:02.505Z"
    },
    {
      "number": "2.5.0",
      "date": "2016-05-10T07:11:56.428Z"
    },
    {
      "number": "2.6.0",
      "date": "2016-05-11T08:01:12.304Z"
    },
    {
      "number": "2.6.1",
      "date": "2016-05-11T09:13:29.159Z"
    },
    {
      "number": "2.6.2",
      "date": "2016-05-11T10:25:24.713Z"
    },
    {
      "number": "2.6.3",
      "date": "2016-05-12T06:09:46.572Z"
    },
    {
      "number": "2.7.0",
      "date": "2016-05-12T06:13:50.845Z"
    },
    {
      "number": "2.7.1",
      "date": "2016-05-12T17:56:27.895Z"
    },
    {
      "number": "2.8.0",
      "date": "2016-05-14T10:44:35.827Z"
    },
    {
      "number": "2.8.1",
      "date": "2016-05-14T15:20:03.593Z"
    },
    {
      "number": "2.8.2",
      "date": "2016-05-14T15:29:56.518Z"
    },
    {
      "number": "2.8.3",
      "date": "2016-05-18T06:11:58.878Z"
    },
    {
      "number": "2.9.0",
      "date": "2016-05-23T12:59:02.735Z"
    },
    {
      "number": "2.9.1",
      "date": "2016-05-24T18:03:04.481Z"
    },
    {
      "number": "2.9.2",
      "date": "2016-05-25T06:34:56.191Z"
    },
    {
      "number": "2.9.3",
      "date": "2016-05-25T07:05:27.543Z"
    },
    {
      "number": "2.9.4",
      "date": "2016-06-01T10:19:09.566Z"
    },
    {
      "number": "2.9.5",
      "date": "2016-06-02T17:55:48.329Z"
    },
    {
      "number": "2.9.6",
      "date": "2016-06-05T15:01:56.596Z"
    },
    {
      "number": "2.10.0",
      "date": "2016-06-10T07:37:03.325Z"
    },
    {
      "number": "2.10.1",
      "date": "2016-06-10T07:46:49.138Z"
    },
    {
      "number": "2.10.2",
      "date": "2016-06-18T16:59:38.454Z"
    },
    {
      "number": "2.11.0",
      "date": "2016-06-23T05:46:44.294Z"
    },
    {
      "number": "2.11.1",
      "date": "2016-06-23T06:14:17.146Z"
    },
    {
      "number": "2.11.3",
      "date": "2016-06-23T06:22:30.815Z"
    },
    {
      "number": "2.11.4",
      "date": "2016-06-23T06:51:10.893Z"
    },
    {
      "number": "2.11.5",
      "date": "2016-06-23T15:31:02.487Z"
    },
    {
      "number": "2.11.6",
      "date": "2016-07-02T16:15:53.060Z"
    },
    {
      "number": "2.11.7",
      "date": "2016-07-07T18:20:43.697Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-07-12T07:18:05.100Z"
    },
    {
      "number": "3.1.0",
      "date": "2016-07-22T06:15:24.576Z"
    },
    {
      "number": "4.0.0",
      "date": "2016-08-09T07:19:54.274Z"
    }
  ],
  "created": "2016-03-08T11:31:15.353Z",
  "modified": "2016-08-09T07:19:54.274Z",
  "lastPublisher": {
    "name": "develar",
    "email": "develar@gmail.com"
  },
  "owners": [
    {
      "name": "develar",
      "email": "develar@gmail.com"
    }
  ],
  "readme": "# Electron Installer\n\n[![AppVeyor Build status](https://ci.appveyor.com/api/projects/status/nxhep80va4d7afjb/branch/master?svg=true)](https://ci.appveyor.com/project/kevinsawicki/windows-installer/branch/master)\n[![Travis CI Build Status](https://travis-ci.org/electron/windows-installer.svg?branch=master)](https://travis-ci.org/electronjs/windows-installer)\n\nNPM module that builds Windows installers for\n[Electron](https://github.com/atom/electron) apps using\n[Squirrel](https://github.com/Squirrel/Squirrel.Windows).\n\n## Installing\n\n```sh\nnpm install --save-dev electron-winstaller\n```\n\n## Usage\n\nRequire the package:\n\n```js\nvar electronInstaller = require('electron-winstaller');\n```\n\nThen do a build like so..\n\n```js\nresultPromise = electronInstaller.createWindowsInstaller({\n    appDirectory: '/tmp/build/my-app-64',\n    outputDirectory: '/tmp/build/installer64',\n    authors: 'My App Inc.',\n    exe: 'myapp.exe'\n  });\n\nresultPromise.then(() => console.log(\"It worked!\"), (e) => console.log(`No dice: ${e.message}`));\n```\n\nAfter running you will have an `.nupkg`, a\n`RELEASES` file, and a `.exe` installer file in the `outputDirectory` folder\nfor each multi task target given under the config entry.\n\nThere are several configuration settings supported:\n\n| Config Name           | Required | Description |\n| --------------------- | -------- | ----------- |\n| `appDirectory`        | Yes      | The folder path of your Electron app |\n| `outputDirectory`     | No       | The folder path to create the `.exe` installer in. Defaults to the `installer` folder at the project root. |\n| `loadingGif`          | No       | The local path to a `.gif` file to display during install. |\n| `authors`             | Yes      | The authors value for the nuget package metadata. Defaults to the `author` field from your app's package.json file when unspecified. |\n| `owners`              | No       | The owners value for the nuget package metadata. Defaults to the `authors` field when unspecified. |\n| `exe`                 | No       | The name of your app's main `.exe` file. This uses the `name` field in your app's package.json file with an added `.exe` extension when unspecified. |\n| `description`         | No       | The description value for the nuget package metadata. Defaults to the `description` field from your app's package.json file when unspecified. |\n| `version`             | No       | The version value for the nuget package metadata. Defaults to the `version` field from your app's package.json file when unspecified. |\n| `title`               | No       | The title value for the nuget package metadata. Defaults to the `productName` field and then the `name` field from your app's package.json file when unspecified. |\n| `certificateFile`     | No       | The path to an Authenticode Code Signing Certificate |\n| `certificatePassword` | No       | The password to decrypt the certificate given in `certificateFile` |\n| `signWithParams`      | No       | Params to pass to signtool.  Overrides `certificateFile` and `certificatePassword`. |\n| `iconUrl`             | No       | A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Atom icon. |\n| `setupIcon`           | No       | The ICO file to use as the icon for the generated Setup.exe |\n| `setupExe`            | No       | The name to use for the generated Setup.exe file |\n| `noMsi`               | No       | Should Squirrel.Windows create an MSI installer? |\n| `remoteReleases`      | No       | A URL to your existing updates. If given, these will be downloaded to create delta updates |\n| `remoteToken`      | No       | Authentication token for remote updates |\n\n## Sign your installer or else bad things will happen\n\nFor development / internal use, creating installers without a signature is okay, but for a production app you need to sign your application. Internet Explorer's SmartScreen filter will block your app from being downloaded, and many anti-virus vendors will consider your app as malware unless you obtain a valid cert.\n\nAny certificate valid for \"Authenticode Code Signing\" will work here, but if you get the right kind of code certificate, you can also opt-in to [Windows Error Reporting](http://en.wikipedia.org/wiki/Windows_Error_Reporting). [This MSDN page](http://msdn.microsoft.com/en-us/library/windows/hardware/hh801887.aspx) has the latest links on where to get a WER-compatible certificate. The \"Standard Code Signing\" certificate is sufficient for this purpose.\n\n## Handling Squirrel Events\n\nSquirrel will spawn your app with command line flags on first run, updates,\nand uninstalls. it is **very** important that your app handle these events as _early_\nas possible, and quit **immediately** after handling them. Squirrel will give your\napp a short amount of time (~15sec) to apply these operations and quit.\n\nThe [electron-squirrel-startup](https://github.com/mongodb-js/electron-squirrel-startup) module will handle\nthe most common events for you, such as managing desktop shortcuts.  Just\nadd the following to the top of your `main.js` and you're good to go:\n\n```js\nif (require('electron-squirrel-startup')) return;\n```\n\nYou should handle these events in your app's `main` entry point with something\nsuch as:\n\n```js\nconst app = require('app');\n\n// this should be placed at top of main.js to handle setup events quickly\nif (handleSquirrelEvent()) {\n  // squirrel event handled and app will exit in 1000ms, so don't do anything else\n  return;\n}\n\nfunction handleSquirrelEvent() {\n  if (process.argv.length === 1) {\n    return false;\n  }\n\n  const ChildProcess = require('child_process');\n  const path = require('path');\n\n  const appFolder = path.resolve(process.execPath, '..');\n  const rootAtomFolder = path.resolve(appFolder, '..');\n  const updateDotExe = path.resolve(path.join(rootAtomFolder, 'Update.exe'));\n  const exeName = path.basename(process.execPath);\n\n  const spawn = function(command, args) {\n    let spawnedProcess, error;\n\n    try {\n      spawnedProcess = ChildProcess.spawn(command, args, {detached: true});\n    } catch (error) {}\n\n    return spawnedProcess;\n  };\n\n  const spawnUpdate = function(args) {\n    return spawn(updateDotExe, args);\n  };\n\n  const squirrelEvent = process.argv[1];\n  switch (squirrelEvent) {\n    case '--squirrel-install':\n    case '--squirrel-updated':\n      // Optionally do things such as:\n      // - Add your .exe to the PATH\n      // - Write to the registry for things like file associations and\n      //   explorer context menus\n\n      // Install desktop and start menu shortcuts\n      spawnUpdate(['--createShortcut', exeName]);\n\n      setTimeout(app.quit, 1000);\n      return true;\n\n    case '--squirrel-uninstall':\n      // Undo anything you did in the --squirrel-install and\n      // --squirrel-updated handlers\n\n      // Remove desktop and start menu shortcuts\n      spawnUpdate(['--removeShortcut', exeName]);\n\n      setTimeout(app.quit, 1000);\n      return true;\n\n    case '--squirrel-obsolete':\n      // This is called on the outgoing version of your app before\n      // we update to the new version - it's the opposite of\n      // --squirrel-updated\n\n      app.quit();\n      return true;\n  }\n};\n```\n\n## Debugging this package\n\nYou can get debug messages from this package by running with the environment variable `DEBUG=electron-windows-installer:main` e.g.\n\n```\nDEBUG=electron-windows-installer node tasks/electron-winstaller.js\n```\n"
}