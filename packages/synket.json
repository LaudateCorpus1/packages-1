{
  "name": "synket",
  "version": "1.0.3",
  "description": "Synchronous sockets for node",
  "main": "src/Synket.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "user": "Level-2",
    "repo": "Synket",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/Level-2/Synket/tarball/master",
    "clone_url": "https://github.com/Level-2/Synket",
    "https_url": "https://github.com/Level-2/Synket",
    "travis_url": "https://travis-ci.org/Level-2/Synket",
    "zip_url": "https://github.com/Level-2/Synket/archive/master.zip",
    "api_url": "https://api.github.com/repos/Level-2/Synket"
  },
  "keywords": [
    "sockets",
    "synchronous",
    "sync",
    "blocking"
  ],
  "author": {
    "name": "Tom Butler",
    "email": "tom@r.je",
    "url": "https://r.je"
  },
  "license": "BSD-2",
  "homepage": "https://github.com/Level-2/Synket#readme",
  "gitHead": "39f0fee33d4d42c37133386246b733c146411090",
  "_npmVersion": "3.10.2",
  "_nodeVersion": "6.2.2",
  "dist": {
    "shasum": "f7496f4ccab0792ddf9b1b5f42e010e6da791848",
    "tarball": "http://registry.npmjs.org/synket/-/synket-1.0.3.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-07-05T12:26:32.565Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-07-05T13:34:48.747Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-07-05T17:00:05.016Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-07-06T13:25:22.031Z"
    }
  ],
  "created": "2016-07-05T12:26:32.565Z",
  "modified": "2016-07-06T13:25:22.031Z",
  "lastPublisher": {
    "name": "tombutler",
    "email": "tom@r.je"
  },
  "owners": [
    {
      "name": "tombutler",
      "email": "tom@r.je"
    }
  ],
  "readme": "Synket\n======\n\nSynket allow synchronous sockets. The flow of operations is as follows:\n\n1. Client sends a message to the socket\n\n2. Client is paused\n\n3. Server receives the message \n\n4. Server does some processing that can take any length of time\n\n5. Server sends data back to Client\n\n6. Client is resumed and the return value of the the `send` command is the data that was written to the socket by Server\n\n\n\nFirstly, a basic server server running on another thread on the same machine or another machine:\n\n\n```js\nconst net = require('net');\n\nvar server = net.createServer(function(sock) {\n\tsocket.setEncoding('utf8');\n\n\t//Receive data from client\n\tsock.on('data', function(data) {\n\n\t\t///Do something that takes time:\n\t\t\n\t\tsetTimeout(function() {\n\t\t\tsock.write('The client sent: ' + data);\n\t\t}, 3000);\n\t});\n\n\t\n}).listen({path: './test.sock'});\n\n/*\n//Alternatively listen on a URL and port:\n\n}).listen({url: 'http://example.org', port: 4564});\n\n*/\n\n```\n\nNow the client:\n\n\n```js\nconst Synket = require('synket');\n\n//start the socket\nvar connection = new Synket({path: './test.sock'});\n\n/*\n//Alternatively use a URL and port:\n\nvar connection = new Synket({url: 'http://example.org', port: 4564});\n*/\n\n//send a message, will not return until data is written to the socket by the host\nvar result = connection.send('doSomething');\n\nconsole.log(result);\n```\n\n\nWhen this code runs it pause for 3 seconds then print `The client sent: doSomething`.\n\n\nQuick Server\n------------\n\nSynket also provides a mechanism for launching a server that requires less bootstrap code. \n\nYou can write a server as node module that returns a class with methods e.g. `MyServer.js`:\n\n```js\n\nmodule.exports = class {\n\tdoSomething(socket, args) {\n\t\tsetTimeout(function() {\n\t\t\tsetTimeout(function() {\n\t\t\t\tsocket.write('doSomething called with ' + args[0] + ' and ' + args[1]);\n\t\t\t}, 3000);\n\t\t});\n\t}\n}\n```\n\nAnd then launch it from a node script (this can be the client or another script):\n\n```js\nconst Synket = require('synket');\n\n//start the socket\nvar connection = new Synket({path: './test.sock'});\n\n/*\n//Alternatively use a URL and port:\n\nvar connection = new Synket({url: 'http://example.org', port: 4564});\n*/\n\n\n//Start the server stored in `MyServer.js` this will pause execution until the server is up\nconnection.startServer('./MyServer.js');\n\n```\n\nThe server will now be launched in its own thread and you can send messages to it like so:\n\n```js\nvar result = connection.send('doSomething', ['foo', 'bar']);\n\nconsole.log(result);\n```\n\nThis will print `doSomething called with foo and bar`.\n\n\n\nFAQ\n===\n\n**Does blocking cause a large overhead?**\n\nIt depends on your use-case. Synket was designed for use in an Electron application, it should not be used on a production webserver as it will severely limit the number of concurrent requests your sever can handle.\n\n"
}