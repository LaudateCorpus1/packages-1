{
  "name": "electron-request-response",
  "version": "1.0.3",
  "description": "A package that makes it easy to handle request response across electron render processes and the main process",
  "main": "index.js",
  "repository": {
    "user": "ayasin",
    "repo": "electron-request-response",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/ayasin/electron-request-response/tarball/master",
    "clone_url": "https://github.com/ayasin/electron-request-response",
    "https_url": "https://github.com/ayasin/electron-request-response",
    "travis_url": "https://travis-ci.org/ayasin/electron-request-response",
    "zip_url": "https://github.com/ayasin/electron-request-response/archive/master.zip",
    "api_url": "https://api.github.com/repos/ayasin/electron-request-response"
  },
  "scripts": {
    "test": "echo \"coming soon...\""
  },
  "author": {
    "name": "ayasin"
  },
  "license": "ISC",
  "dependencies": {
    "lodash": "^4.10.0",
    "uuid": "^2.0.1"
  },
  "gitHead": "270b09a0a45ef35a2be9a1de1cba1af832f9e5c8",
  "homepage": "https://github.com/ayasin/electron-request-response#readme",
  "_npmVersion": "3.5.2",
  "_nodeVersion": "5.1.1",
  "dist": {
    "shasum": "eb43760feb1676176db29fe959b04134888ec061",
    "tarball": "http://registry.npmjs.org/electron-request-response/-/electron-request-response-1.0.3.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-04-12T18:23:52.196Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-04-12T18:29:12.665Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-04-13T18:32:58.552Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-04-20T18:40:42.582Z"
    }
  ],
  "created": "2016-04-12T18:23:52.196Z",
  "modified": "2016-04-20T18:40:42.582Z",
  "lastPublisher": {
    "name": "ayasin",
    "email": "ayasin@datatensor.com"
  },
  "owners": [
    {
      "name": "ayasin",
      "email": "ayasin@datatensor.com"
    }
  ],
  "readme": "# electron-request-response\r\nThis package allows you to communicate with the main process or render processes via a rest like interface. This package can only be used as part of an [Electron](http://electron.atom.io) app, it is not designed to be used with just a Node server or in a browser.\r\n\r\n### Why not IPC?\r\nThe IPC mechanism in Electron is quite powerful, but also quite cumbersome.  A rest like interface is much more friendly\r\nand also more familiar to most JavaScript developers.\r\n\r\n### Concepts\r\n\r\n* **Host** - either the main process (`CONSTANTS.MAIN_PROCESS.HOST`) or the name of any BrowserWindow which you have made addressable via the `makeAddressable(name, browserWindow)` method\r\n* **Route** - an addressable endpoint.  You register these in either the main process for use with the main process host, or in BrowserWindow processes when calling methods in those BrowserWindow processes.\r\n\r\n### API docs\r\n\r\nYou can find the API documentation [in the Wiki for this repo](https://github.com/ayasin/electron-request-response/wiki)\r\n\r\n### Quick start\r\n\r\nIn the main process:\r\n```js\r\nvar router = require('electron-request-response/main');\r\n\r\n// electron startup stuff omitted\r\n\r\napp.on('ready', () => {\r\n  firstWindow = new BrowserWindow({height: 700, width: 800, frame: true, resizeable: true});\r\n  secondWindow = new BrowserWindow({height: 700, width: 800, frame: true, resizeable: true});\r\n\r\n  router.makeAddressable('first-window', firstWindow);\r\n  router.makeAddressable('second-window', secondWindow);\r\n\r\n  // there's no need to make a host unaddressable, this will happen automatically when the window is closed.\r\n\r\n  // do some other stuff\r\n}\r\n\r\n```\r\n\r\nSomewhere in the first window JS files\r\n```js\r\nvar router = require('electron-request-response/render');\r\n\r\n// do some stuff that makes us want to communiate with second-window\r\n\r\nvar msgObj = {\r\n  any_fields_you_want: 'Hey did you get this?'\r\n};\r\n\r\nrouter.request('second-window', '/some/path', msgObj)\r\n    .then((response) => {\r\n      console.log(resoinse); // on any day but Wednesday will print \"I got it!\"\r\n      console.log('Yay! My message was received!');\r\n    })\r\n    .catch(function (err) {\r\n      console.log('Oh no! Something went wrong!');\r\n      console.log(err); // on Wednesday will print \"Go away, it's hump day\"\r\n    });\r\n\r\n```\r\n\r\nSomewhere in the second window JS files\r\n```js\r\nvar router = require('electron-request-response/render');\r\n\r\n// register a route\r\n\r\nrouter.registerRoute('/some/path', function (data, callback) {\r\n  console.log(data.any_fields_you_want); // will log \"Hey did you get this?\r\n  var shouldError = (new Date()).getDay() === 3; // we don't work on hump day\r\n  if (shouldError) {\r\n    return callback('Go away, it\\'s hump day', null); // we could also use an object as the error here...\r\n  }\r\n  return callback(null, 'I got it!');\r\n});\r\n```\r\n"
}