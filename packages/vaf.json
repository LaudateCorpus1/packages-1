{
  "name": "vaf",
  "version": "1.0.3",
  "description": "promise flux library for vue and react",
  "author": {
    "email": "86287344@qq.com"
  },
  "main": "dist/vaf.js",
  "scripts": {
    "build:live": "rollup --watch -c build/rollup.config.js",
    "build:dev": "rollup -c build/rollup.config.js",
    "build:uglifyjs": "uglifyjs dist/vaf.js -cm --comments -o dist/vaf.min.js",
    "release": "npm run build:dev && npm run build:uglifyjs"
  },
  "repository": {
    "user": "aflover",
    "repo": "vaf",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/aflover/vaf/tarball/master",
    "clone_url": "https://github.com/aflover/vaf",
    "https_url": "https://github.com/aflover/vaf",
    "travis_url": "https://travis-ci.org/aflover/vaf",
    "zip_url": "https://github.com/aflover/vaf/archive/master.zip",
    "api_url": "https://api.github.com/repos/aflover/vaf"
  },
  "keywords": [
    "vue",
    "vue2",
    "electron",
    "flux",
    "react",
    "react-native",
    "vaf",
    "lux",
    "nw",
    "vuex",
    "vuejs"
  ],
  "license": "MIT",
  "homepage": "https://github.com/aflover/vaf#readme",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-core": "^6.17.0",
    "babel-loader": "^6.2.5",
    "babel-preset-es2015": "^6.16.0",
    "babel-preset-stage-2": "^6.17.0",
    "rollup": "^0.36.3",
    "rollup-plugin-buble": "^0.14.0",
    "rollup-watch": "^2.5.0",
    "uglifyjs": "^2.4.10"
  },
  "gitHead": "26abe8f0bbd4e711b7d345a35a395f7845e3bf2c",
  "_npmVersion": "3.10.9",
  "_nodeVersion": "6.6.0",
  "dist": {
    "shasum": "e36cede32b686f12bd6c03f9c4ca7d4f07b76308",
    "tarball": "http://registry.npmjs.org/vaf/-/vaf-1.0.3.tgz"
  },
  "versions": [
    {
      "number": "1.0.3",
      "date": "2016-10-16T09:16:06.066Z"
    }
  ],
  "created": "2016-10-16T09:16:06.066Z",
  "modified": "2016-10-16T09:16:06.066Z",
  "lastPublisher": {
    "name": "jetiny",
    "email": "86287344@qq.com"
  },
  "owners": [
    {
      "name": "jetiny",
      "email": "86287344@qq.com"
    }
  ],
  "readme": "# vaf\npromise flux library for vue and react\n\n### install\n```\nnpm i --save-dev vaf\n```\n\n### Vue useage\n``` js\n    import Vue from 'vue'\n    import {Flux, FluxVue, mapGetters, mapActions} from 'vaf'\n    Vue.use(FluxVue) // install plugin\n\n    let flux = new Flux({\n        strict: true // enable this for promise action to resolve data copy\n    })\n    flux.declare([...]) // declare you modules\n    let app = new Vue({\n        vaf: new FluxVue(flux),      // install \n        computed: mapGetters([...]), // map getters like vuex\n        methods: mapActions([...]),  // map actions like vuex\n    })\n```\n\n### declare modules\n```js\n    flux.declare({\n        state: {\n            todoList: []\n        },\n        mutations: {\n            createNew ({todoList} = state, newItem) {\n                todoList.push(newItem)\n                return { todoList } // return updateState object if nessesary\n            },\n        },\n        actions: {\n            createTodo ({resolve, commit} = flux, title) {\n                let newItem = {}\n                newItem.title = title\n                newItem.id = ++ _startIdx \n                newItem.isCompleted = false\n                commit('createNew',  newItem)\n                return resolve(newItem) // return promise if nessesary\n            }\n        }\n    })\n```\n\n### Flux api\n```js\n    // for actions\n    flux.declare({ actions: {\n        myAction({\n            // flux\n            dispatch,\n            commit,\n            // promise api\n            resolve,\n            reject,\n            then,\n            all,\n            cloneThen,\n            // inject\n            prop,\n            // util\n            clone,\n            extend,\n            flux, // self\n            }, payload) {\n            // can replace dispatch(\"doSomeAction\", payload) below if has Proxy\n            return dispatch.doSomeAction(payload).then((ret)=>{\n                commit.doSomeMutation(ret)\n                return resolve(ret) // \n            })\n        }\n    }})\n\n    // inject plugins\n    flux.use(({prop})=>{\n        prop.val('storage', localStorage)\n        // then use action({storage}, payload)=>{ storage.getItem(...) }\n    })\n\n    // events\n    flux.on('update', (updateState)=>{\n        for(var key in updateState)\n            localStorage.setItem(key, JSON.stringify(updateState[key]))\n        // easy to save state to localStorage\n    })\n    flux.on('replace', (state)=>{})\n    flux.on('declare', (module)=>{ // do something after module declared \n    })\n\n    // state\n    flux.replaceState(newState)\n    flux.getState() // return state copy\n    flux.updateState(updateState)\n\n```\n"
}