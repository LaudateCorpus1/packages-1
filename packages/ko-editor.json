{
  "name": "ko-editor",
  "productName": "ko",
  "version": "0.9.17",
  "description": "an editor for macOS",
  "main": "js/main.js",
  "preferGlobal": true,
  "bin": {
    "ko": "./bin/ko"
  },
  "scripts": {
    "dist": "./bin/build.sh && build"
  },
  "repository": {
    "user": "monsterkodi",
    "repo": "ko",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/monsterkodi/ko/tarball/master",
    "clone_url": "https://github.com/monsterkodi/ko",
    "https_url": "https://github.com/monsterkodi/ko",
    "travis_url": "https://travis-ci.org/monsterkodi/ko",
    "zip_url": "https://github.com/monsterkodi/ko/archive/master.zip",
    "api_url": "https://api.github.com/repos/monsterkodi/ko"
  },
  "keywords": [
    "mac",
    "osx",
    "macOS",
    "editor",
    "coffee",
    "script",
    "coffee-script",
    "coffeescript"
  ],
  "license": "Unlicense",
  "author": {
    "name": "monsterkodi"
  },
  "build": {
    "appId": "net.monsterkodi.ko",
    "app-category-type": "public.app-category.utilities",
    "asar": false,
    "productName": "ko",
    "mac": {
      "background": "build/background.png",
      "target": [
        "dmg"
      ],
      "contents": [
        {
          "x": 100,
          "y": 180,
          "type": "link",
          "path": "/Applications"
        },
        {
          "x": 100,
          "y": 70,
          "type": "file"
        }
      ]
    }
  },
  "devDependencies": {
    "electron-builder": "^5.10.1",
    "electron-prebuilt": "^1.2.1"
  },
  "dependencies": {
    "ansi-keycode": "0.0.0",
    "chokidar": "^1.5.2",
    "coffee-script": "^1.10.0",
    "colors": "^1.1.2",
    "dmg": "^0.1.0",
    "download": "^5.0.2",
    "entities": "^1.1.1",
    "eve": "^0.5.0",
    "fs-extra": "^0.30.0",
    "fuzzy": "^0.1.1",
    "html-entities": "^1.2.0",
    "karg": ">=1.0.9",
    "keycode": "^2.1.2",
    "lodash": "^4.13.1",
    "nconf": "^0.8.4",
    "noon": ">=1.0.12",
    "opener": "^1.4.1",
    "performance-now": "^0.2.0",
    "pty.js": "^0.3.1",
    "sprintf-js": "^1.0.3",
    "three": "^0.79.0",
    "underscore.string": "^3.3.4",
    "walkdir": "0.0.11",
    "write-file-atomic": "^1.1.4"
  },
  "gitHead": "99728122654f49157c5c2f149b9166b74551cac3",
  "homepage": "https://github.com/monsterkodi/ko#readme",
  "_npmVersion": "3.10.5",
  "_nodeVersion": "6.3.0",
  "dist": {
    "shasum": "d8c76b63320b2a6cf6c88909df40d4486ed6add7",
    "tarball": "http://registry.npmjs.org/ko-editor/-/ko-editor-0.9.17.tgz"
  },
  "versions": [
    {
      "number": "0.9.5",
      "date": "2016-07-25T00:02:42.469Z"
    },
    {
      "number": "0.9.6",
      "date": "2016-07-25T00:22:19.159Z"
    },
    {
      "number": "0.9.7",
      "date": "2016-07-26T20:10:42.698Z"
    },
    {
      "number": "0.9.8",
      "date": "2016-07-27T22:38:05.638Z"
    },
    {
      "number": "0.9.9",
      "date": "2016-07-28T22:15:21.748Z"
    },
    {
      "number": "0.9.10",
      "date": "2016-08-01T21:37:58.497Z"
    },
    {
      "number": "0.9.11",
      "date": "2016-08-03T22:30:03.585Z"
    },
    {
      "number": "0.9.12",
      "date": "2016-08-05T20:01:53.475Z"
    },
    {
      "number": "0.9.13",
      "date": "2016-08-06T11:54:48.537Z"
    },
    {
      "number": "0.9.14",
      "date": "2016-08-06T23:41:26.723Z"
    },
    {
      "number": "0.9.15",
      "date": "2016-08-07T19:00:06.631Z"
    },
    {
      "number": "0.9.17",
      "date": "2016-08-10T22:44:08.557Z"
    }
  ],
  "created": "2016-07-25T00:02:42.469Z",
  "modified": "2016-08-10T22:44:08.557Z",
  "lastPublisher": {
    "name": "monsterkodi",
    "email": "monsterkodi@gmx.net"
  },
  "owners": [
    {
      "name": "monsterkodi",
      "email": "monsterkodi@gmx.net"
    }
  ],
  "readme": "![ko](img/banner.png)\n![readme](img/readme.png)\n<!---\n#   00000000  00000000   0000000   000000000  000   000  00000000   00000000   0000000\n#   000       000       000   000     000     000   000  000   000  000       000     \n#   000000    0000000   000000000     000     000   000  0000000    0000000   0000000 \n#   000       000       000   000     000     000   000  000   000  000            000\n#   000       00000000  000   000     000      0000000   000   000  00000000  0000000 \n--->\n# main features\n\n**fast**\n- loads large files\n- keyboard centric \n    - nothing you can do with the mouse only\n    - includes many shortcuts and advanced editing features\n\n**commandline**\n- a single, non-intrusive input field to ...\n    - navigate the file system and open files quickly\n    - find in text and search in files\n    - input terminal-, script- and macro-commands\n    - goto lines or class/method/function-definitions\n\n**terminal**\n- alias, history\n- echos commands as ascii-headers\n- output of commands editable/searchable\n\n**file search**\n- search for strings/regexp in project files\n- automatic determination of project files\n- search results are editable\n    - edits can be saved back to files\n    - more powerful than conventional search and replace\n\n**multicursors**\n- a little less chaotic than some other implementations\n- powerful set of keyboard shortcuts for modification of cursors\n\n**minimap**\n- shows cursors, highlights and selections\n- also for terminal-, search- and script-results!\n- can be used to select large portions of text\n- sets cursor by default when dragging/clicking\n- includes a special mode to insert or edit ascii-headers that show up nicely in the minimap\n\n**autocomplete**\n- completes words from visited files and project files\n- automatic determination of project files:\n    - indexes files below directory containing .git or package.json\n    - ignores node_modules, .git, etc.\n\n**syntax highlighting**\n- for coffee, cpp, h, html, js, json, md, noon, pug, py, sh, styl       \n- ansi-colors in terminal view\n\n**coffee-script**\n- automatically indexes local required files\n- terminal commands to list indexed classes, files or functions/methods\n- autoconverts 'simple' strings when \"#{}\" is inserted\n- removes 'then' when breaking single-line 'when' or 'if' statements  \n- adds 'then' when joining line after 'when' or 'if' statements  \n- deletes whitespace after function names when surrounding selected arguments with ()\n\n<!---\n#    0000000   0000000   00     00  00     00   0000000   000   000  0000000    000      000  000   000  00000000\n#   000       000   000  000   000  000   000  000   000  0000  000  000   000  000      000  0000  000  000     \n#   000       000   000  000000000  000000000  000000000  000 0 000  000   000  000      000  000 0 000  0000000 \n#   000       000   000  000 0 000  000 0 000  000   000  000  0000  000   000  000      000  000  0000  000     \n#    0000000   0000000   000   000  000   000  000   000  000   000  0000000    0000000  000  000   000  00000000\n--->\n# commandline\n\noperates in different modes:\n- **open** new window\n- **find** Find /find/ /Find/ fiZd f*nd\n- **search** Search /search/ /Search/\n- **goto** selecto\n- **term** Term\n- **coffee**\n- **macro**\n\neach mode keeps it's own history\n\nclicking on the command name lists all modes and their shortcuts:\n    \n![commandline](img/commandline.png)\n\nwhile the commandline has focus:\n- **^up|down** move command input up|down\n- **⌘up|down** move command input to top|bottom of window\n- **⌥up|down** move command input a quarter of window up|down\n\n<!---\n#    0000000   00000000   00000000  000   000\n#   000   000  000   000  000       0000  000\n#   000   000  00000000   0000000   000 0 000\n#   000   000  000        000       000  0000\n#    0000000   000        00000000  000   000\n--->\n## open\n\nopens files quickly via fuzzy matching\n- **⌘P** open file quickly\n- **⌘⇧P** open file quickly in new window\n\non activation, it ...\n- lists recent files on top \n- the most recent file is selected by default\n    \nwhile the list is open:\n- **.** list current directory without previous files\n- **..** navigate directory up\n\nthe list content depends on the file currently opened in the editor\n- files in surrounding project directories are included\n- switching projects is simple: just open a file in the new project\n\n![open](img/open.png)\n\n<!---\n#   00000000  000  000   000  0000000  \n#   000       000  0000  000  000   000\n#   000000    000  000 0 000  000   000\n#   000       000  000  0000  000   000\n#   000       000  000   000  0000000  \n--->\n## find\nsearch in current file\n- **⌘F**  case insensitive\n- **^F**  case sensitive\n- **⌥F**  regexp insensitive\n- **^⌥F** regexp sensitive\n- **⌘⌥F** fuzzy search\n- **⌘^F** glob search\n     \nwhen the find commandline has focus\n- **enter** select next highlighted word\n- **shift+enter** select previous highlighted word\n- **tab** set focus on editor\n- **⌘enter** select next highlighted word and set focus on editor\n\n<!---\n#    0000000  00000000   0000000   00000000    0000000  000   000\n#   000       000       000   000  000   000  000       000   000\n#   0000000   0000000   000000000  0000000    000       000000000\n#        000  000       000   000  000   000  000       000   000\n#   0000000   00000000  000   000  000   000   0000000  000   000\n--->\n## search\nsearch in project files\n- **⌘⇧F**   case   insensitive\n- **^⇧F**   case   sensitive\n- **⌥⇧F**   regexp insensitive\n- **^⌥⇧F**  regexp sensitive\n    \nediting search result lines will ...\n- mark them for saving\n- changes are propagated immediately to all open files\n- **⌘S** (while the search-results view has focus) will save all pending changes in open **and** closed files\n- deleting lines from the search results will **not** remove them from their original files\n- changes from the editor are not yet propagated to old search results\n    - this means: only edit and save **fresh** search results!\n- this is a very powerful feature but not tested thoroughly yet and probably not working correctly in all cases!\n- use at your own risk! backup your files!\n\n![search](img/search.png)\n\n<!---\n#    0000000    0000000   000000000   0000000 \n#   000        000   000     000     000   000\n#   000  0000  000   000     000     000   000\n#   000   000  000   000     000     000   000\n#    0000000    0000000      000      0000000 \n--->\n## goto\n- **⌘;** activates goto command\n- **text** jump to function, class or file (fuzzy matched)\n- **positive number** jump to line\n- **negative number** jump to line relative to end of file\n\n![goto](img/goto.png)\n\nin editor:\n- **⌥enter** goto word under main cursor\n- **⌥click** goto clicked word\n\n<!---\n#   000000000  00000000  00000000   00     00\n#      000     000       000   000  000   000\n#      000     0000000   0000000    000000000\n#      000     000       000   000  000 0 000\n#      000     00000000  000   000  000   000\n--->\n## term\n\n- **⌘T** to activate pseudo terminal input\n\nspecial commands\n- **alias**\n    - without argument: list aliases\n    - with one argument: clear alias\n    - with two arguments: set alias\n- **history**\n    - without argument: list command history\n    - !! to repeat last command\n    - !n to repeat command with id n\n    - !~n to remove command with id n\n- **classes**\n    - list coffee-script classes and their methods\n    - click on result jumps to definition\n- **funcs**\n    - list coffee-script functions and methods\n    - click on result jumps to definition\n- **files**\n    - list indexed project files\n    - click on result opens file\n- **words**\n    - list indexed words\n    - click on word starts search command\n\nclasses, funcs, files and words results can be filtered by adding arguments\n\nall other commands are passed to a child process running bash\n- only works for commands that terminate!\n\n![terminal](img/terminal.png)\n\n<!---\n#    0000000   0000000   00000000  00000000  00000000  00000000\n#   000       000   000  000       000       000       000     \n#   000       000   000  000000    000000    0000000   0000000 \n#   000       000   000  000       000       000       000     \n#    0000000   0000000   000       000       00000000  00000000\n--->\n## coffee\n\nevaluates coffee-script code in the main process and prints results in terminal\n- since the code is evaluated in the main process ...\n    - indexer internals and windows are accessible (via global **main** object)\n    - results are \n        - persistent for the lifetime of the app\n        - shared between windows\n- the commandline input is nice to do quick math calculations or other single line tasks\n- you can evaluate complex code too, just press **^enter** in the editor to evaluate its whole text\n\n![coffee](img/coffee.png)\n\nshortcuts\n- **⌘.** to activate coffee input\n- **^return** evaluate current editor buffer\n\n<!---\n# 0000000    000   000  000  000      0000000  \n# 000   000  000   000  000  000      000   000\n# 0000000    000   000  000  000      000   000\n# 000   000  000   000  000  000      000   000\n# 0000000     0000000   000  0000000  0000000  \n--->\n## build\n\nthe build command is an experimental feature:\n- it replaces the terminal view with an area that can be filled with arbitrary stuff.\n\nthree examples are included:\n- **test** displays a simple 'hello world' in html\n- **voronoi** interactive voronoi mesh rendered with snap.svg and gorhill/Javascript-Voronoi\n- **3d** renders and animates a cube with three.js\n\n![build](img/build.png)\n\n<!---\n#   00     00   0000000    0000000  00000000    0000000 \n#   000   000  000   000  000       000   000  000   000\n#   000000000  000000000  000       0000000    000   000\n#   000 0 000  000   000  000       000   000  000   000\n#   000   000  000   000   0000000  000   000   0000000 \n--->\n## macro\ngeneral macros\n- **inv** toggle display of line endings\n- **fps** toggle the fps graph besides the info area\n\ncoffee-script macros\n- **dbg** insert log line which outputs class.method + variables under cursors\n- **req** insert require statement for word at cursor\n- **class** creates a new file with simple class skeleton\n\n<!---\n#   00     00  000   0000000   0000000\n#   000   000  000  000       000     \n#   000000000  000  0000000   000     \n#   000 0 000  000       000  000     \n#   000   000  000  0000000    0000000\n--->\n# misc\n<!---\n#   00     00  000  000   000  000  00     00   0000000   00000000 \n#   000   000  000  0000  000  000  000   000  000   000  000   000\n#   000000000  000  000 0 000  000  000000000  000000000  00000000 \n#   000 0 000  000  000  0000  000  000 0 000  000   000  000      \n#   000   000  000  000   000  000  000   000  000   000  000      \n--->\n## minimap\n\n- **⌘** while dragging to turn off cursor placement\n- **⇧** while dragging/clicking to select lines\n\n![minimap](img/minimap.png)\n\n<!---\n#   00     00  000   000  000      000000000  000   0000000  000   000  00000000    0000000   0000000   00000000    0000000\n#   000   000  000   000  000         000     000  000       000   000  000   000  000       000   000  000   000  000     \n#   000000000  000   000  000         000     000  000       000   000  0000000    0000000   000   000  0000000    0000000 \n#   000 0 000  000   000  000         000     000  000       000   000  000   000       000  000   000  000   000       000\n#   000   000   0000000   0000000     000     000   0000000   0000000   000   000  0000000    0000000   000   000  0000000 \n--->\n## multicursors\n\nko differs a bit from common implementations of multicursors:\n- not all cursors are equal:\n    - main cursor is always distuingishable\n    - main cursor can be moved independently from other cursors\n- in most cases cursors are kept in their respective lines\n    - no weird cursor chaos when some cursors cross line boundaries and some don't\n- in ko, cursors can be positioned after the end of lines\n    - cursors after the end of line have two representations: blue and orange/yellow\n    - the orange/yellow position shows where text will be inserted\n    - missing spaces are added automatically in multicursor mode\n\n![cursors](img/cursors.png)\n\nshortcuts:\n- **⌘click**               add or remove single cursor\n- **⌘up|down**             grow all vertical cursor lines up or down\n- **^⇧up|down**            grow only main cursor line up or down\n- **^up|down|left|right**  move main cursor independently (clears other cursors when moving over them)\n- **^⌥up|down|left|right** align all cursors vertically with up|down|left|right-most cursor\n- **^⇧right**              align all cursors vertically with right-most cursor while moving text to the right\n- **⌘delete**              delete backwards over line boundaries\n\n## bracket and string matching\n\nmatching brackets and string borders are highlighted automatically for the main cursor:\n\n![matching](img/matching.png)\n\nshortcuts:\n- **⌘G** jumps to the closing bracket or the end of the string\n- **⌘⇧G** jumps to the opening bracket or the start of the string\n- the find result highlighting overrides bracket and string highlighting\n\n<!---\n#    0000000    0000000   0000000  000  000          000   000  00000000   0000000   0000000    00000000  00000000    0000000\n#   000   000  000       000       000  000          000   000  000       000   000  000   000  000       000   000  000     \n#   000000000  0000000   000       000  000  000000  000000000  0000000   000000000  000   000  0000000   0000000    0000000 \n#   000   000       000  000       000  000          000   000  000       000   000  000   000  000       000   000       000\n#   000   000  0000000    0000000  000  000          000   000  00000000  000   000  0000000    00000000  000   000  0000000 \n--->\n## ascii-headers\n\nthe ascii-header mode lets you insert or edit ascii-headers\n- **⌘3** activates the ascii-header mode\n    - if the cursor is not in a header already, one will be generated for the word at the main cursor\n    \n![salt](img/salt.png)\n\nin ascii-header mode ...\n- cursors are green\n- backspace deletes the header character at the cursors \n- insert common characters as headers just by typing them\n    \nthe mode deactivates itself automatically in most circumstances. you can force the deactivation any time with **esc**\n\n<!---\n#   000   000  000  000   000  0000000     0000000   000   000   0000000\n#   000 0 000  000  0000  000  000   000  000   000  000 0 000  000     \n#   000000000  000  000 0 000  000   000  000   000  000000000  0000000 \n#   000   000  000  000  0000  000   000  000   000  000   000       000\n#   00     00  000  000   000  0000000     0000000   00     00  0000000 \n--->\n## windows\n\nko is a multi window application. \nit compensates a lacking tabbing feature by autoalignment of tiled windows and fast switching to recent files.\n\nshortcuts:\n- **⌘⌥A** switch between tiled and stacked windows\n- **^W** close file in active window\n- **⌘W** close active window\n- **⌘⇧W** close all windows except active window\n- **⌘`** activate next window\n- **⌘⇧`** activate previous window\n- **⌥`** open window list\n- **⌥[1-9]** activate window with id\n- **⌘⇧N** clone current file in new window\n- **⌘⌥Q** close all windows (they won't restore on next start) and quit\n\n<!---\n#   000  000   000  00000000   0000000 \n#   000  0000  000  000       000   000\n#   000  000 0 000  000000    000   000\n#   000  000  0000  000       000   000\n#   000  000   000  000        0000000 \n--->\n## info\nat the right end of the commandline (above the editor minimap) some useful numbers are displayed:\n\n![info](img/info.png)\n- top row:\n    - cursor column\n    - [cursors]\n    - [selections]\n    - [highlights]\n    - indexed classes\n    - indexed functions\n- bottom row:\n    - cursor line\n    - line count\n    - indexed files\n    - indexed words\n\nwhen clicking on these numbers:\n- cursor column|line\n    - set cursor to column|line 0\n- line count\n    - set cursor to last line     \n- selections|highlights|cursors\n    - clear the selections|highlights|cursors\n- indexed classes|functions|files|words\n    - run the term command classes|funcs|files|words\n\n<!---\n#    0000000  000   000   0000000   00000000   000000000   0000000  000   000  000000000   0000000\n#   000       000   000  000   000  000   000     000     000       000   000     000     000     \n#   0000000   000000000  000   000  0000000       000     000       000   000     000     0000000 \n#        000  000   000  000   000  000   000     000     000       000   000     000          000\n#   0000000   000   000   0000000   000   000     000      0000000   0000000      000     0000000 \n--->\n## various shortcuts\n- **F2** global shortcut to activate ko\n- **⌘E** (selects word under cursor and) highlights occurences of selected word\n- **⌘G** select next highlight (works for string and bracket highlights as well)\n- **⌘D** (selects word under cursor and) adds next highlighted word to selection\n- **⌘⇧D** deselects last selected word\n- **⌥up|down** move selected|cursor lines up|down\n- **⌘L** select more lines **⌘⇧L** select less lines\n- **⌥/** toggle comment on selected|cursor lines\n- **⌘I** inverted line selection: select lines without a cursor or a selection\n- **⌘return** insert empty line below cursor and move cursor down\n- **⌘⌥up** jump to counterpart file (coffee <-> js, cpp <-> h, pug <-> html, etc)\n- **⌘\\** toggle left side text offset when window is as wide as screen\n- **⌘R** reload/revert current file\n\n### to use ko from a terminal\n\neither install the npm package\n\n    npm install -g ko-editor\n    ko\n\nor download the release dmg from github and create a symlink:\n\n    ln -s /Applications/ko.app/Contents/Resources/app/bin/ko /usr/local/bin\n    \n### settings (windows, command histories and other stuff) are saved to\n\n    ~/Library/Application\\ Support/ko/ko.noon\n   \nterminal aliases are stored in\n\n    ~/Library/Application\\ Support/ko/alias.noon\n\n## missing features\n\n- plugin system\n- customization\n- git integration\n- regression tests\n- correct highlighting of multiline- and complex strings\n\n## final note\n\nthis is a pre-release in active development!\nuse at your own risk!\n"
}