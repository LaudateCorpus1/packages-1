{
  "name": "dom-list",
  "version": "1.4.5",
  "description": "Manipulate the DOM like an array.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Quentin Engles",
    "email": "hollowdoor99@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "bean": "^1.0.15",
    "bonzo": "^2.0.0",
    "dom-from": "^1.0.2",
    "qwery": "^4.0.0"
  },
  "repository": {
    "user": "hollowdoor",
    "repo": "dom_list",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/hollowdoor/dom_list/tarball/master",
    "clone_url": "https://github.com/hollowdoor/dom_list",
    "https_url": "https://github.com/hollowdoor/dom_list",
    "travis_url": "https://travis-ci.org/hollowdoor/dom_list",
    "zip_url": "https://github.com/hollowdoor/dom_list/archive/master.zip",
    "api_url": "https://api.github.com/repos/hollowdoor/dom_list"
  },
  "gitHead": "dc0156c691ce241a1643c7a674211c46c189cd9c",
  "homepage": "https://github.com/hollowdoor/dom_list#readme",
  "_npmVersion": "3.6.0",
  "_nodeVersion": "5.6.0",
  "dist": {
    "shasum": "46648b2e12ee010fd77a2cd5d1874335654d1169",
    "tarball": "http://registry.npmjs.org/dom-list/-/dom-list-1.4.5.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-10-24T14:36:31.789Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-10-24T15:44:55.910Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-10-24T16:07:34.503Z"
    },
    {
      "number": "1.2.1",
      "date": "2015-10-24T23:49:36.857Z"
    },
    {
      "number": "1.3.1",
      "date": "2015-10-27T17:47:06.703Z"
    },
    {
      "number": "1.3.2",
      "date": "2015-10-27T17:49:44.200Z"
    },
    {
      "number": "1.3.3",
      "date": "2015-10-27T18:30:18.364Z"
    },
    {
      "number": "1.4.3",
      "date": "2015-10-27T19:00:45.510Z"
    },
    {
      "number": "1.4.4",
      "date": "2015-12-22T23:39:39.993Z"
    },
    {
      "number": "1.4.5",
      "date": "2016-03-23T09:52:17.285Z"
    }
  ],
  "created": "2015-10-24T14:36:31.789Z",
  "modified": "2016-03-23T09:52:17.285Z",
  "lastPublisher": {
    "name": "hollowdoor",
    "email": "hollowdoor99@gmail.com"
  },
  "owners": [
    {
      "name": "hollowdoor",
      "email": "hollowdoor99@gmail.com"
    }
  ],
  "readme": "dom-list\n========\n\nIf a browser supports the [iteration protocal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) `dom-list` is an [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of).\n\nInstall\n-------\n\n`npm install --save dom-list`\n\nConstructor\n-----------\n\n### domList(element|selector, items, template funciton)\n\n### domList(element|selector, template function)\n\nThe **template function** is a filter function used on all modifying array methods on `dom-list`. Return a string, or DOM element from the **template function**.\n\nThe element/selector, and template parameters are not optional.\n\nThe items parameter is optional.\n\n### Basic usage\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Dom list test</title>\n</head>\n<body>\n    <ol id=\"list\"></ol>\n    <script>\n    var domList = require('dom-list'),\n        ol = domList('#list', function(item){\n            return `<li>${item}</li>`;\n        });\n\n    ol.push('John Smith');\n    ol.push('Jane Smith');\n    </script>\n</body>\n</html>\n\n```\n\nThe HTML for **#list** will now look like this:\n\n```html\n<ol id=\"list\">\n    <li>John Smith</li>\n    <li>Jane Smith</li>\n</ol>\n```\n\nTemplates\n---------\n\nIt's fine to use other HTML elements other than list item type elements. As long as you're aware those elements are being operated on like an array. Make sure there is only one parent element though otherwise you will have problems. **The DOM children count to array member count should be one to one for each item.**\n\nThe template callback is just a filter. You can use what ever templating library you prefer, return an es template literal, a plain string, or a DOM element.\n\nYou can pass objects, or whatever to array altering operations like `push`. These will be passed to the template callback like any value. **No value is altered** before it is passed to the template callback.\n\nArray Methods\n-------------\n\nMost of the methods on `dom-list` are borrowed from javascript arrays.\n\nVisit [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) if you need a refresher. The usage of `dom-list` should feel very familiar.\n\nRemoval type methods like `shift`, `splice` or `pop` only produce a plain array so you would have to create a new `dom-list` to use arrays returned by those methods in a new element. To get elements from a `dom-list`, and move them you would do something like this:\n\n```javascript\nvar text = ol.shift();\nvar newList = domList('#someotherselector', [text], ol.template);\n```\n\nor you might do this:\n\n```javascript\nvar text = ol.shift();\nvar newList = domList('#someotherselector', ol.template);\nnewList.push(text);\n```\n\nAltering Methods\n----------------\n\nThese methods do something to the array stored in a dom-list instance. By extension the DOM of the list is also altered in the same way.\n\n-\tpop\n-\tpush\n-\tshift\n-\tsort\n-\tsplice\n-\tunshift\n-\tfill\n-\tflood\n\nAny of the above with the exception of flood works just like an array method with an extra DOM operation.\n\n### flood\n\nflood is a special method that overwrites the entire array contents inside a dom-list. A splice will also work for this.\n\n```javascript\nol.flood(['Bobby Jo', 'Billy Jo']);\n```\n\nNow the previous list looks like this:\n\n```html\n<ol id=\"list\">\n    <li>Bobby Jo</li>\n    <li>Billy Jo</li>\n</ol>\n```\n\n### sort\n\nSort works just like Array.prototype.sort.\n\nFind yourself some [natural sort algorithms](https://www.npmjs.com/search?q=natural+sort) to beat the funky default sort javascript arrays use.\n\nNon-altering methods\n--------------------\n\nThese methods test, or create without modifying the dom-list contents.\n\n-\tevery\n-\tfilter\n-\tforEach\n-\tjoin\n-\tmap\n-\treduce\n-\treverse\n-\tslice\n-\tsome\n\nAll of those methods work just like on an array. Creation methods like `map` create a wholly new array free from DOM manipulations.\n\nES2015 methods\n--------------\n\nAll of these methods may, or may not work. Use at your discretion. If you polyfill these methods on the Array.prototype before you use `dom-list` these methods will work just fine.\n\n-\tfind\n-\tfindIndex\n-\tincludes\n-\tkeys\n-\tvalues\n\nArray methods that act strange.\n-------------------------------\n\nThere are array methods that of course do what you expect only part of the time.\n\n### indexOf\n\nStill works badly with user created objects. Which is to be expected.\n\n### includes\n\nHas the same issues as indexOf.\n\n### concat\n\nOn `dom-list` instances concat works fine with a little magic inside, but if you try to use a `dom-list` instance in the argument of another array's concat method you will have problems because `concat` is not aware of the array likeness of `dom-list`. If you would rather concat from another array do this instead:\n\n```javascript\nvar list = [],\n    newList = [].push.apply(list, ol /*A dom-list instance.*/);\n```\n\nSee here [Array.prototype.concat is not generic](http://www.2ality.com/2012/02/concat-not-generic.html) for more about this problem. Be aware the `push.apply` will not work in ie6-8, but who cares about those browsers.\n\nAttention!\n----------\n\nYou can *get items by array index* just fine with a `dom-list`, but you probably don't want to set by array index. Some very nasty things will happen.\n\nInstead use `dom-list` instance methods to modify the `dom-list` array.\n\nAlso javascript arrays, and objects are mutable references so be careful to be aware that if you alter any object pushed, or spliced to the `dom-list` because that will alter any old object, or array values.\n\nSpecial methods\n---------------\n\n### each(function)\n\nIterate the DOM elements using `function` inside a `dom-list` instance. This is different from `forEach` which will iterate the items of a `dom-list`.\n\nThe parameters of the `each` callback are the same as a callback used by `Array.prototype.forEach`: **callback(element, index, all)**.\n\n### update(index, value)\n\nSet a value at the specified index.\n\n### remove()\n\nRemove the present `dom-list` from the DOM. Returns `this` of the current `dom-list`. Use `domList.appendTo` to place this `dom-list` back in the DOM.\n\n### on(event, callback)\n\nSet an event with a listener callback.\n\n### on(event, selector, callback)\n\nDelegate an event on the selector. This is most likely what you'll be doing for the larger DOM sets (like tables) you'll be creating.\n\n### off(event, callback)\n\nRemove an event.\n\n### get(index, child)\n\nGet a child of the root element by index. Alternatively get a child by it's children.\n\nIf you pass a child the `parentNode` is searched iteratively until the `root` is matched, and you get the top child.\n\nThis is good for things like events where you want the element created by the template callback.\n\n```javascript\n//Click any where in a html list item.\nol.on('click', 'li', function(e){\n    var li = ol.get(e.target));\n    console.log(li); // -> \"[object HTMLLIElement]\"\n});\n```\n\n### select(selector)\n\nReturns a [bonzo](https://www.npmjs.com/package/bonzo) instance with all the elements that match the **selector**.\n\nIf no selector is passed then the top level element of the list is selected, and returned. For instance:\n\n```javascript\nol.select().remove();\n```\n\nwill remove the entire `ul` tag, and it's children from the DOM.\n\nSet some css:\n\n```javascript\nol.select('li').css({color: 'green'});\n```\n\nSee the [bonzo](https://www.npmjs.com/package/bonzo) lib module to learn more.\n\n#### Why bonzo?\n\nGood question. It is a minimal DOM manipulation library with good support that's not jQuery. It's a good fit.\n\nBe aware that removing, or adding elements with bonzo instances created by `dom-list` might foul up your `dom-list` instance. You could create irreconcilable alterations to your list. This also goes for other DOM manipulations you might do with plain `element.appendChild`, `element.insertBefore`, or `element.replaceChild` on elements created by `dom-list`. **You've been warned**.\n\nUse `dom-list` instance methods to alter the DOM created by `dom-list`. Otherwise you can do other operations like css using bonzo with no consequences as long as you're careful.\n\nStatic Methods\n--------------\n\nThese escape, or unescape a string for HTML respectively.\n\n-\tdomList.escape(string) -> escaped string\n-\tdomList.unescape(string) -> unsafe string\n\nInstance Properties\n-------------------\n\n### root\n\nThe element set in the first argument of the constructor.\n\n### children\n\nAn accessor to the DOM children of root for easy access.\n\nExtension\n---------\n\nExtend the prototype of `dom-list` by attaching methods to `domList.fn`. All methods attached this way will be available to all `dom-list` instances.\n\n```javascript\nvar domList = require('dom-list');\ndomList.fn.hello = function(){\n    console.log('hello extension');\n};\n```\n\nAbout\n-----\n\nThis library is not meant to replace other DOM manipulation libraries. In fact one of the objectives was to make `dom-list` as small as possible so other libs will easily live right next to this one.\n\nYou could very easily use underscore, and jQuery right along with `dom-list`.\n\n`dom-list` is an attempt at making large data sets in HTML a little easier to work with. An element with *10,000* children can take a long time to modify, but maybe `dom-list` won't be so slow because it **batches DOM operations** for methods that take multiple items. Even while batching DOM operations `dom-list` will still preserve the array type semantics for its instances. That is to say you are for the most part only limited by just memory, and processing power instead of memory, processing power, the callstack, and DOM visual reflow.\n\n### Testing\n\nAll testing was done in [electron](http://electron.atom.io/) for convenience. Here are some speed stats for DOM operations using the `flood` method:\n\n-\t10000 elements (1236 milliseconds)\n-\t20000 elements (4870 milliseconds)\n-\t30000 elements (9995 milliseconds)\n-\t40000 elements (17564 milliseconds)\n-\t50000 elements (26611 milliseconds)\n-\t60000 elements (37777 milliseconds)\n\nThese times are not indicative of how quickly the DOM view is updated. There is a latency once all operations are complete while the webview recalculates everything. As you can see the performance is not exponential, and gets a little better with larger operations. Don't ask me why this happens. 20000 is only more than double 10000, but 60000 is only more than double 40000 for time spent. Go figure.\n\nFor large addition operations like `splice`, and `flood` any thing above 30,000 at once should be done in batches. I tested at a hundred thousand, and my webview froze. You could get away with 60,000 array items, but that's up to your use case. My thinking is that most the time a list will be at most 2000 items, or less so speed for bulk operations will be blazing most of the time. :)\n\nI used the following method to create a pre-populated array for these tests:\n\n```javascript\nvar list = [];\nlist.length = 10000;\nlist = list.join('*').split('');\n```\n\nFreezing could have been exacerbated by using this kind of array creation.\n\nA similar speed to normal arrays can be expected for methods like `push`, and `pop` which could be catastrophically slow any time for 500-100000 array items added, or removed respectively. Take a look at [push vs unshift](https://jsperf.com/array-push-vs-unshift) for some stats on normal arrays.\n\nYou might get different results if you *browserify* your script, and run in some other browser.\n\n### Other stuff\n\nIn a sense I guess you could call a `dom-list` observable because it's an array that updates the DOM, but stictly speaking I don't think so. Still it works in a similar way to an observable. Even though this would be considered one way binding being that you still need to bind regular events to detect changes to `value`, or some other changing DOM attribute.\n\nFor **functional** type operations like `filter` the native method is used so you get the benefits of native speed from those types of methods.\n\nHappy coding!\n"
}