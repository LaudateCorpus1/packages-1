{
  "name": "onmem-logger",
  "version": "1.0.2",
  "description": "A simple on-memory logger for Node.js app",
  "main": "logger.js",
  "scripts": {
    "test": "node_modules/grunt-cli/bin/grunt test"
  },
  "author": {
    "name": "Masanori Ohgita"
  },
  "license": "MIT",
  "repository": {
    "user": "mugifly",
    "repo": "node-onmem-logger",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mugifly/node-onmem-logger/tarball/master",
    "clone_url": "https://github.com/mugifly/node-onmem-logger",
    "https_url": "https://github.com/mugifly/node-onmem-logger",
    "travis_url": "https://travis-ci.org/mugifly/node-onmem-logger",
    "zip_url": "https://github.com/mugifly/node-onmem-logger/archive/master.zip",
    "api_url": "https://api.github.com/repos/mugifly/node-onmem-logger"
  },
  "devDependencies": {
    "eslint": "^1.7.2",
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-eslint": "^17.3.1",
    "grunt-mocha-test": "^0.12.7",
    "mocha": "^2.3.3"
  },
  "keywords": [
    "logger",
    "logging",
    "debug"
  ],
  "gitHead": "3bbf7aa66fdd152ef5b3e8aade373c3ad4b9aa96",
  "homepage": "https://github.com/mugifly/node-onmem-logger#readme",
  "_npmVersion": "3.3.4",
  "_nodeVersion": "4.1.1",
  "dist": {
    "shasum": "0575966a5f6e8aaeeccb5ebe0a1d251511fd17e8",
    "tarball": "http://registry.npmjs.org/onmem-logger/-/onmem-logger-1.0.2.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-10-20T14:15:01.697Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-10-20T17:11:41.145Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-10-27T06:10:10.837Z"
    }
  ],
  "created": "2015-10-20T14:15:01.697Z",
  "modified": "2015-10-27T06:10:10.837Z",
  "lastPublisher": {
    "name": "mugifly",
    "email": "mp@ohgita.info"
  },
  "owners": [
    {
      "name": "mugifly",
      "email": "mp@ohgita.info"
    }
  ],
  "readme": "# node-onmem-logger\nA simple on-memory logger for Node.js app.\n\n[![Version Badge](https://badge.fury.io/js/onmem-logger.svg)](https://badge.fury.io/js/onmem-logger)\n[![Build Status of master](https://travis-ci.org/mugifly/node-onmem-logger.svg?branch=master)](https://travis-ci.org/mugifly/node-onmem-logger)\n\n## Installation\n\nYou can install the logger to your project with either one method:\n\n* Install with npm: ``npm install onmem-logger``\n* Clone the repository: ``git clone https://github.com/mugifly/onmem-logger.git``\n\n## Example code\n```js\n// Get a logger as singleton\nvar logger = require('onmem-logger').getInstance();\n\n// Insert a log & Print to stdout\nlogger.log('main', 'Hello world!');\nlogger.error('main', 'Something happend :(');\n\n// Get a log\nvar logs = logger.getLogs();\nfor (var i = 0, l = logs; i < l; i++) {\n\tvar item = logs[i];\n\tconsole.log(i + ' - ' + item.getTag() + ' / ' + getText());\n}\n```\n\nThe more examples is available on [here](https://github.com/mugifly/node-onmem-logger/wiki#examples).\n\n## Features\n* Usable very easily.\n* Can be work on memory only.\n* Can be integrate whole logs of the app. It also suitable for your electron app.\n\n## Logger object\n\n### Static methods\n\n#### getInstance()\nGet an instance of logger as singleton.\n\nYou can integrate whole logs of the app by get a logger as singleton from your each object.\n\n### Instance methods\n\n#### getLogs()\nGet an array of **LogItem** object.\n\n#### getSerializedLogs()\nGet an array as serialized logs.\n\nEach item includes additional properties as follows. Those properties was obtained from each methods of **LogItem** object.\n\n* createdTimeStr - Same as **getCreatedTimeAsString()** method -- e.g. \"12:00:00\"\n* typeInitial - Same as **getTypeInitial()** method -- e.g. \"D\"; It means \"debug\".\n* string - Same as **toString()** method\n\n#### debug(tag, text)\nInsert a debug log.\n\n* tag: {String} Tag text -- e.g. \"main\", \"foo/bar\"\n* text: {String} Log text -- e.g. \"Hello world\"\n\n#### error(tag, text)\nInsert a error log. That usage is same with **debug(tag, text)** method.\n\n#### info(tag, text)\nInsert a information log. That usage is same with **debug(tag, text)** method.\n\n#### log(tag, text)\nAn alias of **debug(tag, text)** method.\n\n#### warn(tag, text)\nInsert a warning log. That usage is same with **debug(tag, text)** method.\n\n## LogItem object\n\n### Instance properties\n* createdAt: {Date} Created date\n* tag: {String} Tag text\n* text: {String} Log text\n* type: {String} Log type - 'debug', 'info', 'warn', 'error'\n\n### Instance methods\n\n#### getCreatedDate()\nGet a created date as Date object.\n\n#### getCreatedTimeAsString()\nGet a created time as a time string -- e.g. \"12:00:00\".\n\n#### getTag()\nGet a tag text as String object.\n\n#### getText()\nGet a log text as String object.\n\n#### getType()\nGet a log type as String object -- e.g. \"debug\"\n\n#### getTypeInitial()\nGet an initial character of a log type as String object -- e.g. \"D\"\n\n#### toString()\nGet a log item as a string. e.g. \"[D 12:00:00] main / ...\".\n\n## License\n```\nThe MIT License (MIT).\nCopyright (c) 2015 Masanori Ohgita.\n```\n"
}