{
  "name": "electron-require",
  "version": "0.3.0",
  "repository": {
    "user": "brrd",
    "repo": "electron-require",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/brrd/electron-require/tarball/master",
    "clone_url": "https://github.com/brrd/electron-require",
    "https_url": "https://github.com/brrd/electron-require",
    "travis_url": "https://travis-ci.org/brrd/electron-require",
    "zip_url": "https://github.com/brrd/electron-require/archive/master.zip",
    "api_url": "https://api.github.com/repos/brrd/electron-require"
  },
  "description": "Simplified require in electron applications",
  "main": "index.js",
  "scripts": {
    "test": "electron ./tests"
  },
  "keywords": [
    "electron",
    "require",
    "rq"
  ],
  "author": {
    "name": "brrd"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "^3.5.0",
    "electron-prebuilt": "^1.2.5",
    "mocha": "^2.5.3"
  },
  "dependencies": {},
  "gitHead": "545fce612fd38e8b72bbd8b46f3900063fc05037",
  "homepage": "https://github.com/brrd/electron-require#readme",
  "_npmVersion": "3.8.6",
  "_nodeVersion": "5.12.0",
  "dist": {
    "shasum": "c4ae0c6695106418bf40a3ffe6fa11d8766b1149",
    "tarball": "http://registry.npmjs.org/electron-require/-/electron-require-0.3.0.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-03-29T14:05:48.210Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-03-30T13:56:25.519Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-04-06T15:55:09.849Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-07-03T18:48:14.704Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-07-06T18:37:46.377Z"
    }
  ],
  "created": "2016-03-29T14:05:48.210Z",
  "modified": "2016-07-06T18:37:46.377Z",
  "lastPublisher": {
    "name": "brrd",
    "email": "brrd@gmx.com"
  },
  "owners": [
    {
      "name": "brrd",
      "email": "brrd@gmx.com "
    }
  ],
  "readme": "# electron-require\n\n> Simplified require in electron applications\n\n`electron-require` is a super basic, no dependency convenience wrapper around `require` for your electron applications. You can use it to avoid using complex require paths in your application.\n\n## Installation\n\n`$ npm install --save electron-require`\n\nThen include it in your code:\n\n```javascript\nconst rq = require('electron-require');\n```\n\n## Usage\n\n### `rq()`\n\n`rq('./module.js')` imports `module.js` from the current process directory (it is actually an alias to `require.main.require('./module.js')`).\n\n### `rq.electron()`\n\n`rq.electron('module')` is the same than `require('electron')['module']`, except that it resolves into `require('electron').remote['module']` when module is not found, if used in the renderer process.\n\n### `rq.remote()`\n\n`rq.remote('module')` is the same than `require('electron').remote.require('module')`, except that it resolves into `rq.main('module')` when used in the main process.\n\n### Aliases\n\nYou can add your own custom alias with `rq.set(key, path)`.\n\nOnce `rq.set('myAlias', 'my/path')` is called, `rq.myAlias('./module.js')` will try to load `my/path/module.js`.\n\n**Example 1:**\n\n```javascript\nrq.set('local', 'local');\n\n// Import [application root]/local/my-local-module.js into myLocalModule\nconst myLocalModule = rq.local('./my-local-module.js');\n```\n\n**Example 2:**\n\n```javascript\nlet userData = electron.app.getPath('userData');\nrq.set('plugin', userData + '/plugins');\n\n// Import [userdata]/plugins/my-plugin.js into myPlugin\nconst myPlugin = rq.plugin('/my-plugin.js');\n```\n\n#### Template strings\n\nYou can use template string in the `path` passed to `.set()`:\n\n* `%{app}` resolves to `app.getAppPath()`\n* `%{anyOtherName}` resolves to `app.getPath(anyOtherName)`\n\nSo we can write example 2 in a simpler way:\n\n```javascript\nrq.set('plugin', '%{userData}/plugins');\n\n// Import [userdata]/plugins/my-plugin.js into myPlugin\nconst myPlugin = rq.plugin('/my-plugin.js');\n```\n\nRead more about this in [the app module documentation](https://github.com/electron/electron/blob/master/docs/api/app.md)\n\n#### Multiple alias\n\n`rq.set` can also be used with an object:\n\n```javascript\nrq.set({\n\t'local': 'local',\n    'plugin': '%{userData}/plugins'\n});\n```\n\n#### Custom aliases defined in package.json\n\nIn most cases you will want to use the same custom aliases for the whole project. You can define custom aliases by adding an `electron-require` key to your app `package.json` file:\n\n```json\n\"electron-require\": {\n    \"first\": \"path/to/first/alias\",\n\t\"second\": \"path/to/second/alias\"\n}\n```\n\n#### Default aliases\n\nDefault aliases are the following:\n\n```json\n{\n    \"root\": \"\",\n    \"renderer\": \"app/renderer\",\n    \"main\": \"app/main\",\n    \"browser\": \"app/main\"\n}\n```\n\nIt actually assumes that your app is organized in the following way:\n\n```\n.\n├── app\n│   ├── main\n│   │   └── [main process modules]\n│   └── renderer\n│       └── [renderer process modules]\n└── package.json\n```\n\nBut you can of course override theses default values by using `rq.set()` or by adding an `electron-require` entry in your `package.json`.\n\n## License\n\nThe MIT License (MIT)  \nCopyright (c) 2016 Thomas Brouard\n"
}