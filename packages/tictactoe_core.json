{
  "name": "tictactoe_core",
  "version": "0.1.2",
  "description": "Javascript Implementation of Tic Tac Toe Game",
  "main": "lib/main.js",
  "scripts": {
    "test": "npm run compile && npm run lint_tests && mocha test",
    "compile": "npm run lint && babel --source-maps=both --comments=false --presets=es2015 -d lib/ src/",
    "prepublish": "npm run compile",
    "lint": "eslint src/",
    "lint_tests": "eslint test/"
  },
  "repository": {
    "user": "yknx4",
    "repo": "tictactoe_core",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/yknx4/tictactoe_core/tarball/master",
    "clone_url": "https://github.com/yknx4/tictactoe_core",
    "https_url": "https://github.com/yknx4/tictactoe_core",
    "travis_url": "https://travis-ci.org/yknx4/tictactoe_core",
    "zip_url": "https://github.com/yknx4/tictactoe_core/archive/master.zip",
    "api_url": "https://api.github.com/repos/yknx4/tictactoe_core"
  },
  "keywords": [
    "tic",
    "tac",
    "toe",
    "game"
  ],
  "author": {
    "name": "yknx4"
  },
  "license": "ISC",
  "homepage": "https://github.com/yknx4/tictactoe_core#readme",
  "devDependencies": {
    "babel-cli": "^6.14.0",
    "babel-core": "^6.14.0",
    "babel-preset-es2015": "^6.14.0",
    "babili": "0.0.5",
    "eslint": "^3.5.0",
    "eslint-config-google": "^0.6.0",
    "mocha": "^3.0.2",
    "unit.js": "^2.0.0"
  },
  "dependencies": {
    "underscore": "^1.8.3",
    "babel-polyfill": "^6.13.0"
  },
  "babel": {
    "presets": [
      "es2015"
    ],
    "sourceMap": "true"
  },
  "gitHead": "fe2140a04ae23fd3ce6a28d7ae3782464a9d6adc",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.7.0",
  "dist": {
    "shasum": "2b82dbb35faa1d5d9a839f12dac8fbb6d8f95792",
    "tarball": "http://registry.npmjs.org/tictactoe_core/-/tictactoe_core-0.1.2.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-09-28T11:47:36.176Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-09-28T13:55:29.124Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-09-28T23:25:22.097Z"
    }
  ],
  "created": "2016-09-28T11:47:36.176Z",
  "modified": "2016-09-28T23:25:22.097Z",
  "lastPublisher": {
    "name": "yknx4",
    "email": "yknx.4.b@gmail.com"
  },
  "owners": [
    {
      "name": "yknx4",
      "email": "yknx.4.b@gmail.com"
    }
  ],
  "readme": "# Tic tac toe\n\n## Objective\n\nIn order to practice what we have learned regarding OOP and best practices, let's implement a Tic-Tac-Toe (Gato in Spanish) game!\n\n## Rules\n\n* Two players represented with __X__ and __O__\n* First time the game is played, __X__ starts\n* Each player alternate turns to put a mark in the board on any available slot\n* The game ends when either one of the players matches three marks in a horizontal, vertical or diagonal row or there are no more moves available\n\n## Considerations\n\n* Game logic MUST be implemented using OO Javascript and MUST NOT depend on any kind of user interface:\nyou, as the creator of the code, MUST implement objects that contain everything needed to play the game\nand to allow any other developer to reuse your code.\n* Will the logic have to change if I want to play on a N x N board instead of the original 3 x 3?\n* What if we want to make it configurable for N players instead of 2?\n* And, will the logic need to change if we want to create a N x M board instead of N x N?\n* Remember this code is supposed to be used by other programmers so they need to be well documented and tested\n* Once the game finishes, players are asked if they want to play again. If they do, the player who lost the previous match starts. In case of a draw, the player who did the second-to-last movement starts\n\n## Deliverables\n\n* Class diagram or similar to illustrate how the object are going to communicate among them.\n* Code implementation of the game logic.\n* Documentation.\n* Unit testing.\n\nOnce we have all the logic documented and tested, we will create some clients that will use the logic\n\n* A command-line client\n* A RESTful API\n* A web application\n* An electron app\n\n## Milestones\n\n- [x] Make sure the objective, requirements and restrictions are understood\n- [ ] Create the diagram\n- [x] Create the library with all the logic. For this point, investigate NPM and bower and choose one and explain your choice\n- [ ] Create terminal interface\n- [ ] Create web app (Using HTML and CSS)\n- [ ] Create RESTful API\n- [ ] Create Electron app\n\nFeel free to ask any question at any time\n"
}