{
  "name": "nightmare-download-manager",
  "version": "0.2.1",
  "license": "MIT",
  "main": "./nightmare-download-manager.js",
  "description": "Add download management to NightmareJS",
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "user": "rosshinkley",
    "repo": "nightmare-download-manager",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/rosshinkley/nightmare-download-manager/tarball/master",
    "clone_url": "https://github.com/rosshinkley/nightmare-download-manager",
    "https_url": "https://github.com/rosshinkley/nightmare-download-manager",
    "travis_url": "https://travis-ci.org/rosshinkley/nightmare-download-manager",
    "zip_url": "https://github.com/rosshinkley/nightmare-download-manager/archive/master.zip",
    "api_url": "https://api.github.com/repos/rosshinkley/nightmare-download-manager"
  },
  "author": {
    "name": "Ross Hinkley"
  },
  "keywords": [
    "nightmare",
    "phantomjs",
    "download",
    "downloads"
  ],
  "peerDependencies": {
    "nightmare": "^2.5.2"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "sliced": "^1.0.1"
  },
  "devDependencies": {
    "chai": "^3.4.1",
    "express": "^4.13.3",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.0",
    "mocha-generators": "^1.2.0",
    "rimraf": "^2.4.3",
    "async": "^1.5.2",
    "mime": "^1.3.4"
  },
  "gitHead": "773362111d3a2eb29854d2830a6f46edfa9f030e",
  "homepage": "https://github.com/rosshinkley/nightmare-download-manager#readme",
  "_npmVersion": "3.9.5",
  "_nodeVersion": "6.2.0",
  "dist": {
    "shasum": "794aa4d7e960e553f242ada7cd785e2385e3516e",
    "tarball": "http://registry.npmjs.org/nightmare-download-manager/-/nightmare-download-manager-0.2.1.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-04-02T22:54:54.140Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-04-08T16:50:58.138Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-05-22T17:11:54.110Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-06-21T04:20:00.736Z"
    }
  ],
  "created": "2016-04-02T22:54:54.140Z",
  "modified": "2016-06-21T04:20:00.736Z",
  "lastPublisher": {
    "name": "rosshinkley",
    "email": "rosshinkley@gmail.com"
  },
  "owners": [
    {
      "name": "rosshinkley",
      "email": "rosshinkley@gmail.com"
    }
  ],
  "readme": "nightmare-download-manager\n======================\n\nAdd download management to your [Nightmare](http://github.com/segmentio/nightmare) scripts.\n\n# Important Note\nIf you want to have downloads be managed serially, check out the [Nightmare inline download plugin](https://github.com/rosshinkley/nightmare-inline-download).\n\n## Usage\nRequire the library and pass the Nightmare library as a reference to attach the plugin actions:\n\n```js\nvar Nightmare = require('Nightmare');\nrequire('nightmare-download-manager')(Nightmare);\n```\n... and then enable the download manager with `.downloadManager()`.  It should be the first call in your Nightmare chain.\n\n### .downloadManager()\nSets up the download management event handling.\n\n### .waitDownloadsComplete()\nWaits until all files currently downloading are in a state of `'completed'`, `'interrupted'`, or `'cancelled'`.\n\n### .on('download', function(state, download) \nThis event is triggered when Electron emits `'will-download'`.  This event is also emitted after downloads are started when [`DownloadItem`](https://github.com/atom/electron/blob/master/docs/api/download-item.md) emits `'updated'` or `'done'`.   The possible values for `event` are `'started'`, `'cancelled'`, `'interrupted'`, or `'completed'`.  Note that by listening to `'download'`, Nightmare expects the default download behavior to be overridden. \n\n### .emit('download', [path|action,] download)\nAllows for downloads to be saved to a custom location, cancelled, or any other custom behavior.  The possible values for `action` are `'cancel'`, `'continue'` for default behavior, or a file path (file name and extension inclusive) to save the download to an alternative location. The `downloadItem` parameter should use the item passed by `'download'`.\n\n## Additional Nightmare Options\n\n### ignoreDownloads\nDefines whether or not all downloads should be ignored.  By default, all downloads are accepted.\n\n### downloadTimeout\nThis will throw an exception if the `.waitDownloadsComplete()` didn't finish within the set timeframe.  By default, this is not set, meaning there is no timeout.\n\n### downloadResponseWait\nDefines the length of time to wait for a download response.  Defaults to 3s.\n\n### paths.downloads\nSets the Electron path for where downloads are saved.\n\n## Example\n\n```javascript\nvar Nightmare = require('nightmare');\nrequire('nightmare-download-manager')(Nightmare);\nvar nightmare = Nightmare();\nnightmare.on('download', function(state, downloadItem){\n  if(state == 'started'){\n    nightmare.emit('download', '/some/path/file.zip', downloadItem);\n  }\n});\n\nnightmare\n  .downloadManager()\n  .goto('https://github.com/segmentio/nightmare')\n  .click('a[href=\"/segmentio/nightmare/archive/master.zip\"]')\n  .waitDownloadsComplete()\n  .then(() => {\n    console.log('done');\n  })\n```\n"
}