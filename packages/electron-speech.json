{
  "name": "electron-speech",
  "description": "speech recognition cli and api for node using electron",
  "version": "1.0.4",
  "repository": {
    "user": "noffle",
    "repo": "electron-speech",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/noffle/electron-speech/tarball/master",
    "clone_url": "https://github.com/noffle/electron-speech",
    "https_url": "https://github.com/noffle/electron-speech",
    "travis_url": "https://travis-ci.org/noffle/electron-speech",
    "zip_url": "https://github.com/noffle/electron-speech/archive/master.zip",
    "api_url": "https://api.github.com/repos/noffle/electron-speech"
  },
  "main": "index.js",
  "bin": {
    "electron-speech": "cli.js"
  },
  "dependencies": {
    "defined": "^1.0.0",
    "electron-spawn": "^4.1.0",
    "minimist": "^1.2.0",
    "readable-stream": "^2.0.5"
  },
  "keywords": [
    "web",
    "speech",
    "electron",
    "recognition",
    "stt"
  ],
  "gitHead": "b3ba03ac9d8016a6d3e6c697d143bf5328f08d95",
  "homepage": "https://github.com/noffle/electron-speech#readme",
  "scripts": {},
  "_npmVersion": "3.10.7",
  "_nodeVersion": "6.5.0",
  "dist": {
    "shasum": "09ccd0754c87c5768c37c38e592e449aaec5180a",
    "tarball": "http://registry.npmjs.org/electron-speech/-/electron-speech-1.0.4.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-02-26T07:56:43.058Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-02-26T07:58:12.762Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-02-26T08:00:11.178Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-02-27T05:16:00.151Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-02-27T20:14:00.639Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-02-27T20:19:38.990Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-03-04T19:03:16.251Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-03-11T01:53:42.295Z"
    },
    {
      "number": "1.0.4",
      "date": "2016-09-29T23:35:01.136Z"
    }
  ],
  "created": "2016-02-26T07:56:43.058Z",
  "modified": "2016-09-29T23:35:01.136Z",
  "lastPublisher": {
    "name": "noffle",
    "email": "stephen.whitmore@gmail.com"
  },
  "owners": [
    {
      "name": "noffle",
      "email": "stephen.whitmore@gmail.com"
    },
    {
      "name": "sww",
      "email": "stephen.whitmore@gmail.com"
    }
  ],
  "readme": "# electron-speech\n\n> Speech recognition in node and the browser using Electron.\n\n## Prerequisites\n\nIf you want to use the API from a script using Node, you will need to launch\nyour script using the\n[`electron-spawn`](https://www.npmjs.com/package/electron-spawn) command instead\nof the `node` command:\n\n```sh\n$ npm install -g electron-spawn\n\n$ electron-spawn example.js\n```\n\n## Usage\n\n### CLI\n\nThis module installs the `electron-speech` command:\n\n```\n$ electron-speech\nlistening..\n(whatever is said is written here, to stdout)\n```\n\n`-q|--quiet` to omit the `listening..` message. (it's on stderr anyways though)\n\n`-c|--continuous` to keep on listening after each result.\n\n### API\n\n```javascript\nvar Speech = require('electron-speech')\n\nvar recog = Speech({\n  lang: 'en-US'\n  continuous: true\n})\n\nrecog.on('text', function (text) {\n  console.log(text)\n});\n\nrecog.listen()\n```\n\n### Methods\n\n#### var speech = Speech(opts)\n\nReturns `speech`, an EventEmitter and Readable stream.\n\n`opts` accepts multiple keys:\n\n- `opts.lang` - recognize speech in the language `lang`. Defaults to `'en-US'`.\n- `opts.continuous` - if true, `text` events will keep on being emitted as recognition\noccurs.\n\n#### speech.listen()\n\nStarts listening to speech via the microphone. `'ready`'` will be emitted once speech\nrecognition has begun.\n\n#### speech.pipe(stream)\n\nUses `speech` as a readable stream for text rather than an event emitter.\nResults have newlines appended to them for parsing convenience.\n\n#### speech.on('ready')\n\nEmitted when the microphone has begun to listen for speech.\n\n#### speech.on('text', function (text) {})\n\nEmitted when speech has been recognized.\n\n#### speech.on('error', function (err) {})\n\nEmitted when an error has occurred in recognition.\n\n#### speech.on('close')\n\nEmitted when recognition has ended. Does not fire if `continuous` was set to\ntrue.\n\n## License\n\nISC\n"
}