{
  "name": "rpcjs",
  "version": "1.1.0",
  "description": "Promise-based RPC. Works in browser, node, electron, you name it. Any transport you like.",
  "main": "rpcjs.js",
  "scripts": {
    "test": "mocha *.test.js"
  },
  "repository": {
    "user": "sidekickcode",
    "repo": "rpcjs",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/sidekickcode/rpcjs/tarball/master",
    "clone_url": "https://github.com/sidekickcode/rpcjs",
    "https_url": "https://github.com/sidekickcode/rpcjs",
    "travis_url": "https://travis-ci.org/sidekickcode/rpcjs",
    "zip_url": "https://github.com/sidekickcode/rpcjs/archive/master.zip",
    "api_url": "https://api.github.com/repos/sidekickcode/rpcjs"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "keywords": [
    "promise",
    "rpc",
    "async"
  ],
  "author": {
    "name": "Tim Ruffles",
    "email": "timruffles@googlemail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "bluebird": "^3.3.4",
    "chai": "^3.5.0",
    "lodash": "^3.10.1",
    "mocha": "^2.4.5",
    "sinon": "^1.17.3"
  },
  "homepage": "https://github.com/sidekickcode/rpcjs#readme",
  "dependencies": {
    "bluebird": "^3.3.4",
    "debug": "^2.2.0",
    "lodash": "^3.10.1",
    "universal-promise-helpers": "^1.0.1"
  },
  "gitHead": "175b0a47fe9bfd7d03ca45b8c0df4e285ff8d102",
  "_npmVersion": "3.3.9",
  "_nodeVersion": "0.10.33",
  "dist": {
    "shasum": "dec2e3fbf6a41598d9ecc311b7fe50099f148ce4",
    "tarball": "http://registry.npmjs.org/rpcjs/-/rpcjs-1.1.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-03-10T14:04:53.191Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-03-10T14:50:40.518Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-03-10T14:53:53.951Z"
    },
    {
      "number": "1.0.4",
      "date": "2016-03-10T15:02:42.218Z"
    },
    {
      "number": "1.0.5",
      "date": "2016-03-10T15:03:43.955Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-03-10T15:04:32.794Z"
    }
  ],
  "created": "2016-03-10T14:04:53.191Z",
  "modified": "2016-03-10T15:04:32.794Z",
  "lastPublisher": {
    "name": "timruffles",
    "email": "timruffles@googlemail.com"
  },
  "owners": [
    {
      "name": "timruffles",
      "email": "timruffles@googlemail.com"
    }
  ],
  "readme": "# RPCjs\n\n[![Build Status](https://travis-ci.org/sidekickcode/rpcjs.svg?branch=master)](https://travis-ci.org/sidekickcode/rpcjs)\n\nThe easiest RPC you've seen, entirely promise based, that plays well with:\n\n- all environments: Node, Browser, Electron etc\n- all transports: TPC, sockets, whatever you fancy?\n- all Promise-A implemenations: Bluebird, Q, ES6, jQuery etc\n- all node versions: 0.10 +, es6 or not\n\nRPC nodes are the core of the API. The transport is defined by you, so you can do whatever you like. There are built-in transports.\n\nA design goal is to let client code be as uncluttered by RPC stuff as possible (e.g calling a method without worrying about having to connect first), while giving control to handle timeouts etc that're vital with RPC.\n\nAll methods return a promise. they will timeout if the remote end never turns up. Documentation below uses TypeScript as it's a nicely defined way of talking about types!\n\n## `rpcjs.rpc(option: RpcOptions) => RpcPair`\n\n    interface RpcOptions {\n      name: string\n      Promise: PromiseConstructor\n      timeout: number\n      emitTimeout: number\n      error: (err) => void\n      wrapEffects: () => void\n    }\n\n    interface RpcTransport {\n      send: () => void\n    }\n\nreturns a new RpcPair\n\n## methods of `RpcPair` instance\n\n### `expose(name: string, (...args: Array<any>) => Promise<any> | any) => void`\n### `expose({[name: string]: (...args: Array<any>) => Promise<any> | any)}) => void`\n\nexpose either a single or an object of methods to remote side.  methods can\nbe sync or async; always async for remote side\n\n    node.expose(\"answer\", function(number) {\n      return number + 42;\n    });\n\n### `call(options: { timeout: number}, method, ...args: Array<any>) => Promise<any>`\n### `call(method : string, ...args: Array<any>) => Promise<any>`\n\nTakes call options as optional first argument (useful for `.bind`/`_.partial` to create\nan API with default timeouts etc):\n\ne.g\n\n    node.call(\"increment\", 1).then(assertEqual(2));\n    node.call({ timeout: 5000 }, \"increment\", 1).then(assertEqual(2));\n\n### on(), once(), removeListener() (aliased to .off)\n\nlisten to events emitted by remote side. arguments as per EventEmitter\n\n### `emit(event : string, data : any) => Promise<any>`\n\nemit event heard by remote. returns promise resolved if remote side turned up to heard about it\n\n## Actor API on `RpcPair`s\n\nRPCjs also supports the ideas of Actors. You'll frequently be wanting to talk about a given context - actors give you a way to to this without continually resending the same context ID.\n\n### `getActor(id: string) => RemoteActor`\n\nReturns an object used to interact with a remote actor.\n\n### `exposeActor(id: string, a: LocalActor) => void`\n\nExposes an actor which the remote side can interact with\n\n### `callActor(id: string, method: string, ...params: Array<any>) => Promise<any>`\n\ncall a method on an actor by id.\n\n### `expireActor(id: string) => void`\n\nExpire a previously exposed actor.\n\n\nHaving a separate emitter differentiates from remote events.\n\n## `interface LocalActor { on: (e: string, fn: (...args: any)) => void, expire: () => void )`\n\nInterface used by actor system. All optional. Methods called by remote side can be synchronous\nor return a promise.\n\n## RemoteActor API\n\n### `.call()` - as `rpc.call()`\n### `.on(), .off()` etc - as `rpc.on() ...`\n### `.get(name: string) => any`\n\nReturns value of property on actor at point at which message is received. Serialized/deserialized as JSON.\n\n\n## Transports\n\nTransports are very simple. They call a RpcPair's `.incoming` method with incoming messages, and use `.setSend` to inform a pair that it can send messages via this transport.\n\nThat's it! Take a look at `transports/streamTransport.js` to see a transport that lets RPCjs work with TCP/UDP/HTTPS or whatever streams you like, however crazy the chain of compression, encryption etc in that stream is!\n\n## Debug\n\nTo see debug messages, set the DEBUG env var:\n\n```sh\nDEBUG=rpcjs node yourApp.js\n```\n"
}