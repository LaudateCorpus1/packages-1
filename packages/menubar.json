{
  "name": "menubar",
  "version": "5.0.0",
  "description": "high level way to create menubar desktop applications with electron",
  "main": "index.js",
  "repository": {
    "user": "maxogden",
    "repo": "menubar",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/maxogden/menubar/tarball/master",
    "clone_url": "https://github.com/maxogden/menubar",
    "https_url": "https://github.com/maxogden/menubar",
    "travis_url": "https://travis-ci.org/maxogden/menubar",
    "zip_url": "https://github.com/maxogden/menubar/archive/master.zip",
    "api_url": "https://api.github.com/repos/maxogden/menubar"
  },
  "scripts": {
    "test": "standard"
  },
  "keywords": [
    "electron",
    "atom",
    "shell",
    "menubar",
    "menu",
    "mac",
    "app"
  ],
  "author": {
    "name": "max ogden"
  },
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/maxogden/menubar",
  "dependencies": {
    "electron-positioner": "^3.0.0",
    "extend": "^2.0.0"
  },
  "devDependencies": {
    "standard": "^5.4.1"
  },
  "gitHead": "62fda2ee92aaf52d4e26f04e7232ab6357a5945c",
  "_npmVersion": "3.9.0",
  "_nodeVersion": "5.0.0",
  "dist": {
    "shasum": "6acc0ea247c0c171ad0b4b89318f2870b07b6c00",
    "tarball": "http://registry.npmjs.org/menubar/-/menubar-5.0.0.tgz"
  },
  "stars": 4,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-03-23T19:40:37.979Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-03-23T19:46:55.112Z"
    },
    {
      "number": "2.0.0",
      "date": "2015-03-23T20:52:10.015Z"
    },
    {
      "number": "2.0.1",
      "date": "2015-03-23T21:11:11.037Z"
    },
    {
      "number": "2.0.2",
      "date": "2015-03-24T01:18:14.901Z"
    },
    {
      "number": "2.0.3",
      "date": "2015-03-25T20:23:10.813Z"
    },
    {
      "number": "2.0.4",
      "date": "2015-03-27T20:39:30.327Z"
    },
    {
      "number": "2.0.5",
      "date": "2015-05-15T17:49:08.584Z"
    },
    {
      "number": "2.0.6",
      "date": "2015-05-16T20:11:29.052Z"
    },
    {
      "number": "2.0.7",
      "date": "2015-05-16T20:56:17.330Z"
    },
    {
      "number": "2.0.9",
      "date": "2015-05-18T00:15:21.842Z"
    },
    {
      "number": "2.0.10",
      "date": "2015-05-20T23:20:52.251Z"
    },
    {
      "number": "2.0.11",
      "date": "2015-05-24T23:49:45.358Z"
    },
    {
      "number": "2.0.12",
      "date": "2015-06-15T16:14:20.503Z"
    },
    {
      "number": "2.0.13",
      "date": "2015-06-15T16:24:45.733Z"
    },
    {
      "number": "2.0.14",
      "date": "2015-06-18T20:37:37.841Z"
    },
    {
      "number": "2.0.15",
      "date": "2015-07-12T18:03:21.936Z"
    },
    {
      "number": "2.0.16",
      "date": "2015-07-12T18:05:33.340Z"
    },
    {
      "number": "2.0.17",
      "date": "2015-07-27T18:54:00.002Z"
    },
    {
      "number": "2.1.0",
      "date": "2015-08-10T18:07:10.840Z"
    },
    {
      "number": "2.1.1",
      "date": "2015-08-11T11:16:19.440Z"
    },
    {
      "number": "2.1.2",
      "date": "2015-08-12T18:05:00.658Z"
    },
    {
      "number": "2.2.0",
      "date": "2015-08-29T09:12:33.496Z"
    },
    {
      "number": "2.2.1",
      "date": "2015-09-05T16:04:10.482Z"
    },
    {
      "number": "2.3.0",
      "date": "2015-10-19T23:43:54.512Z"
    },
    {
      "number": "3.0.0",
      "date": "2015-12-10T18:03:07.627Z"
    },
    {
      "number": "4.0.0",
      "date": "2016-02-05T00:09:14.437Z"
    },
    {
      "number": "4.0.1",
      "date": "2016-02-05T01:33:03.278Z"
    },
    {
      "number": "4.0.2",
      "date": "2016-02-06T21:56:01.412Z"
    },
    {
      "number": "4.1.0",
      "date": "2016-04-01T07:39:32.114Z"
    },
    {
      "number": "4.1.1",
      "date": "2016-05-12T17:34:32.964Z"
    },
    {
      "number": "4.1.2",
      "date": "2016-06-22T16:17:57.072Z"
    },
    {
      "number": "4.1.3",
      "date": "2016-07-09T17:32:18.420Z"
    },
    {
      "number": "5.0.0",
      "date": "2016-07-10T17:23:35.055Z"
    }
  ],
  "created": "2015-03-23T19:40:37.979Z",
  "modified": "2016-07-10T17:23:35.055Z",
  "lastPublisher": {
    "name": "jenslind",
    "email": "jens@jensl.se"
  },
  "owners": [
    {
      "name": "maxogden",
      "email": "max@maxogden.com"
    },
    {
      "name": "fritzy",
      "email": "fritzy@netflint.net"
    },
    {
      "name": "fabien-d",
      "email": "fabien.doiron@gmail.com"
    },
    {
      "name": "jenslind",
      "email": "jens@jensl.se"
    }
  ],
  "readme": "# menubar\n\nHigh level way to create menubar desktop applications with electron\n\nThis module provides boilerplate for setting up a menubar application using electron. all you have to do is point it at your `index.html` and menubar icon and this will handle opening/closing a window when you click/blur.\n\nWorks on Mac OS, Windows and some Linuxes (Tested on Xfce4, your mileage may vary -- patches welcome!)\n\n**Mac OS**\n\n![screenshot](screenshot.png)\n\n**Windows**\n\n![screenshot](screenshot-windows.png)\n\n[![Build Status](https://travis-ci.org/maxogden/menubar.svg?branch=master)](https://travis-ci.org/maxogden/menubar)\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nWatch the 1HR screen recording of me coding this module: https://www.youtube.com/watch?v=PAJAvsyaHs0\n\nThis module was written for + is used by [Monu](https://github.com/maxogden/monu)\n\n## installation\n\n```\nnpm install menubar --save\n```\n\n## usage\n\ncreate a JS program like this:\n\n```js\nvar menubar = require('menubar')\n\nvar mb = menubar()\n\nmb.on('ready', function ready () {\n  console.log('app is ready')\n  // your app code here\n})\n```\n\nmake sure there is also a `index.html` file in `dir`\n\nthen use [`electron`](https://npmjs.org/electron-prebuilt) or [`electron-packager`](https://npmjs.org/electron-packager) to build/run the app:\n\n```\n$ npm install electron-prebuilt -g\n$ electron your-app.js\n```\n\nsee `example/` for a working example\n\nthe return value of `mb` is an event emitter with these properties:\n\n```\n{\n  app: the electron require('app') instance,\n  window: the electron require('browser-window') instance,\n  tray: the electron require('tray') instance,\n  positioner: the electron-positioner instance,\n  setOption(option, value): change an option after menubar is created,\n  getOption(option): get an menubar option,\n  showWindow(): show the menubar window,\n  hideWindow(): hide the menubar window\n}\n```\n\n## options\n\nyou can pass an optional options object into the menubar constructor\n\n- `dir` (default `process.cwd()`) - the app source directory\n- `index` (default `file:// + opts.dir + index.html`) - the html to load for the pop up window\n- `icon` (default `opts.dir + IconTemplate.png`) - the png icon to use for the menubar. A good size to start with is 20x20. To support retina, supply a 2x sized image (e.g. 40x40) with `@2x` added to the end of the name, so `icon.png` and `icon@2x.png` and Electron will automatically use your `@2x` version on retina screens.\n- `tooltip` (default empty) - menubar tray icon tooltip text\n- `tray` (default created on-the-fly) - an electron `Tray` instance. if provided `opts.icon` will be ignored\n- `preloadWindow` (default false) - Create [BrowserWindow](https://github.com/atom/electron/blob/master/docs/api/browser-window.md) instance before it is used -- increasing resource usage, but making the click on the menubar load faster.\n- `width` (default 400) - window width\n- `height` (default 400) - window height\n- `x` (default null) - the x position of the window\n- `y` (default null) - the y position of the window\n- `alwaysOnTop` (default false) - if true, the window will not hide on blur\n- `showOnAllWorkspaces` (default true) - Makes the window available on all OS X workspaces.\n- `windowPosition` (default trayCenter and trayBottomCenter on Windows) - Sets the window position (x and y will still override this), check [positioner docs](https://github.com/jenslind/electron-positioner#docs) for valid values.\n- `showDockIcon` (default false) - Configure the visibility of the application dock icon.\n- `showOnRightClick` (default false) - Show the window on 'right-click' event instead of regular 'click'\n\n## events\n\nthe return value of the menubar constructor is an event emitter\n\n- `ready` - when the app has been created and initialized\n- `create-window` - the line before new BrowserWindow is called\n- `after-create-window` - the line after all window init code is done\n- `show` - the line before window.show is called\n- `after-show` - the line after window.show is called\n- `hide` - the line before window.hide is called (on window blur)\n- `after-hide` - the line after window.hide is called\n- `after-close` - after the .window (BrowserWindow) property has been deleted\n- `focus-lost` - emitted if always-on-top option is set and the user clicks away\n\n## tips\n\n- Use `mb.on('after-create-window', callback)` to run things after your app has loaded. For example you could run `mb.window.openDevTools()` to open the developer tools for debugging, or load a different URL with `mb.window.loadUrl()`\n\n- Use `mb.on('focus-lost')` if you would like to perform some operation when using the option `alwaysOnTop:true`\n"
}