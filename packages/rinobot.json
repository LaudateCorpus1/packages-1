{
  "name": "rinobot",
  "version": "0.3.21",
  "main": "./dist/index.js",
  "bin": {
    "rinobot": "./dist/cli.js"
  },
  "license": "MIT",
  "repository": {
    "user": "rinocloud",
    "repo": "watcher",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/rinocloud/watcher/tarball/master",
    "clone_url": "https://github.com/rinocloud/watcher",
    "https_url": "https://github.com/rinocloud/watcher",
    "travis_url": "https://travis-ci.org/rinocloud/watcher",
    "zip_url": "https://github.com/rinocloud/watcher/archive/master.zip",
    "api_url": "https://api.github.com/repos/rinocloud/watcher"
  },
  "scripts": {
    "build": "webpack --progress --colors; echo '#!/usr/bin/env node' | cat - ./dist/cli.js > /tmp/out && mv /tmp/out ./dist/cli.js",
    "test": "mocha --compilers js:babel-register"
  },
  "dependencies": {
    "async": "^2.0.0-rc.5",
    "chokidar": "^1.4.2",
    "colors": "^1.1.2",
    "evaporate": "git+https://github.com/TTLabs/EvaporateJS.git",
    "fs-extra": "^0.30.0",
    "globule": "^1.0.0",
    "js-yaml": "^3.6.1",
    "lodash": "^4.13.1",
    "mkdirp": "^0.5.1",
    "optimist": "^0.6.1",
    "progress": "^1.1.8",
    "queue": "^4.0.0",
    "raven": "^0.11.0",
    "rinocloud-javascript": "0.0.3",
    "superagent": "^1.8.3",
    "superagent-promise-plugin": "^3.2.0",
    "superagent-queue": "0.0.3",
    "swig": "^1.4.2",
    "yargs": "^4.7.1"
  },
  "devDependencies": {
    "babel": "^6.5.2",
    "babel-core": "^6.9.1",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-object-rest-spread": "^6.8.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-register": "^6.9.0",
    "babel-watch": "^2.0.2",
    "chai": "^3.5.0",
    "istanbul": "^0.4.3",
    "mocha": "^2.5.3",
    "rimraf": "^2.5.2",
    "sinon": "^1.17.4",
    "sinon-chai": "^2.8.0",
    "webpack": "^1.13.1"
  },
  "gitHead": "2aa84ee12d309bb2b6c092aa9e5316920b8ce4c4",
  "description": "Rinocloud lets you schedule tasks when files are created. Its useful for processing data automatically if your doing experiments or simulations.",
  "homepage": "https://github.com/rinocloud/watcher#readme",
  "_npmVersion": "3.9.5",
  "_nodeVersion": "6.2.2",
  "dist": {
    "shasum": "ba70728f9ec37ca0d4f8710513a117432913263a",
    "tarball": "http://registry.npmjs.org/rinobot/-/rinobot-0.3.21.tgz"
  },
  "versions": [
    {
      "number": "0.3.0",
      "date": "2016-06-17T13:19:44.217Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-06-17T13:22:58.811Z"
    },
    {
      "number": "0.3.2",
      "date": "2016-06-17T13:24:50.089Z"
    },
    {
      "number": "0.3.3",
      "date": "2016-06-17T13:29:57.032Z"
    },
    {
      "number": "0.3.4",
      "date": "2016-06-20T13:53:03.537Z"
    },
    {
      "number": "0.3.5",
      "date": "2016-06-20T14:16:16.956Z"
    },
    {
      "number": "0.3.6",
      "date": "2016-06-23T18:46:28.974Z"
    },
    {
      "number": "0.3.7",
      "date": "2016-06-24T14:01:22.586Z"
    },
    {
      "number": "0.3.8",
      "date": "2016-06-26T10:17:52.358Z"
    },
    {
      "number": "0.3.10",
      "date": "2016-06-26T11:49:54.386Z"
    },
    {
      "number": "0.3.11",
      "date": "2016-06-26T12:16:11.799Z"
    },
    {
      "number": "0.3.12",
      "date": "2016-06-26T18:02:20.799Z"
    },
    {
      "number": "0.3.13",
      "date": "2016-06-28T19:03:20.770Z"
    },
    {
      "number": "0.3.14",
      "date": "2016-06-29T11:55:14.000Z"
    },
    {
      "number": "0.3.15",
      "date": "2016-06-29T12:04:07.700Z"
    },
    {
      "number": "0.3.16",
      "date": "2016-06-29T12:06:41.096Z"
    },
    {
      "number": "0.3.17",
      "date": "2016-06-29T13:25:58.501Z"
    },
    {
      "number": "0.3.18",
      "date": "2016-06-30T13:38:00.755Z"
    },
    {
      "number": "0.3.19",
      "date": "2016-06-30T13:38:53.781Z"
    },
    {
      "number": "0.3.20",
      "date": "2016-06-30T13:39:38.489Z"
    },
    {
      "number": "0.3.21",
      "date": "2016-07-14T11:34:57.202Z"
    }
  ],
  "created": "2016-06-17T13:19:44.217Z",
  "modified": "2016-07-14T11:34:57.202Z",
  "lastPublisher": {
    "name": "eoinmurray",
    "email": "me@eoinmurray.io"
  },
  "owners": [
    {
      "name": "eoinmurray",
      "email": "me@eoinmurray.io"
    }
  ],
  "readme": "# Rinobot.js\n\nRinocloud lets you schedule tasks when files are created. Its useful for\nprocessing data automatically if your doing experiments or simulations.\n\nThis is the command line version of the program, not to be confused with the\nfull [rinobot app](https://github.com/rinocloud/rinobot).\n\n## Getting started\n\nInstall from npm - you'll need [node](http://nodejs.com) and npm installed\n\n```bash\nnpm install rinobot -g\n```\n\nTo run `rinobot` just type:\n\n```bash\nrinobot path/to/watch/\n```\n\nrinobot will then check the path for a `rino.yaml` file. If it exists it will\nstart watching.\n\n## rino.yaml\n\nThe rino.yaml file describes the tasks you want done when a file appears in the\nwatched directory.\n\nWe call these collection of tasks a pipeline. When a file is created, it will be\nrun through the pipeline. If any of the tasks in the pipeline fail, we will\nqueue the pipeline and try it again later.\n\n### example\n\nHere is a simple example that uploads all `.txt` files that appear in a\ndirectory\n\n```yaml\napiToken: 8186755009251ef0bbb273fbc86d7b9caa228374\n\ntasks:\n  - match: \"*.txt\"\n    command: \"rinocloud-upload\"\n    on: add\n```\n\nAnd here is an example that calls the `python` script `plot.py` and plots the\ndata and the uploads the `.txt` and `.png` file.\n\n```yaml\napiToken: 8186755009251ef0bbb273fbc86d7b9caa228374\n\nignore:\n  - \"*.py\"\n\ntasks:\n  - match: \"*.txt\"\n    command: \"python\"\n    args: \"plot.py {{filepath}}\"\n\n  - match: \"*.txt\"\n    command: \"rinocloud-upload\"\n    on: add\n\n  - match: \"*.png\"\n    command: \"rinocloud-upload\"\n    on: add\n```\n\nHere is the `plot.py` file:\n\n```python\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfpath = sys.argv[1]\ndata =  np.loadtxt(fpath)\n\nplt.imshow(data, extent=[0, 100, 0, 1], aspect='auto')\nplt.savefig(fpath.replace('.txt', '.png'))\n```\n\n## development\n\nThis section is only relevant if you want to integrate rinobot with your javascript codebase or\nto develop rinobot itself.\n\nTo get setup run\n\n```\nnpm install\n```\n\nAnd to start testing run\n\n```\nnpm run test\n```\n\nAll the source code lives in `src/`, the source is all es6 javascript, so it\nneeds to be transpiled before we can distribute. So run `npm run build` to\ncreate the library is the `dist/` folder.\n\n### example\n\n```javascript\nconst watchPath = 'some/dir'\n\nconst w = watcher\n  .getChokidar()\n  .watch(watchPath)\n  .on('all', (event, path, stats) => {\n    var p = new pipeline.Pipeline({\n      path,\n      event,\n      watchPath,\n      on_complete: function(pipeline){ console.log(pipeline.relPath + ' done') }\n      on_log: function(pipeline, msg){ console.log(pipeline.relPath + ' ' + msg) }\n    })\n  })\n```\n\n### pipeline\n\n```javascript\nimport {pipeline} from 'rinobot'\nconst p = new pipeline.Pipeline(options)\n```\n\n`options` has three required properties\n\n- `event: String`, the name of the event given by chokidar\n- `path: Path`, the path given by the chokidar event\n- `watchPath: Path`, the path of the root directory being watched\n\n`options` has some optional properties\n\n- `on_complete: function(pipeline)`, called when the entire pipeline completes successfully\n- `on_error: function(pipeline, err)`, called if the pipeline fails to complete - the pipeline will abort before the error is thrown\n- `on_ignore: function(pipeline)`, called if the pipeline ignores the file\n- `on_log: function(pipeline, message)`, general log for entire pipeline\n- `on_task_complete: function(pipeline, task, err)`, called when a task completes\n- `on_task_error: function(pipeline, task)`, called when a task fails - the pipeline will abort\n- `on_task_ignore: function(pipeline, task)`, called if the task has already been completed, or ignored for some other reason\n- `api: rinocloud-javascript api instance`, defaults to making its own instance\n\n### task\n\n```javascript\nimport {task} from 'rinobot'\nconst t = new task.Task(options)\n```\n\nA task will run on a schedule in series. And a group of tasks in a pipeline will\nall run in series with respect to all the other pipeline tasks.\n\nIf a pipeline fails, its tasks are removed from the queue and then there is a\ntimeout and the pipeline is put to the end of the queue again.\n\n### watcher\n\n```javascript\nimport {watcher} from 'rinobot'\n```\n\nChokidar is the library we use to monitor files, and we have a specific\nfunctions `getChokidar` to get the chokidar instance, this is because sometimes\nthe pipelines and watcher operate in different process threads (for example in\nan electron.js application).\n\n```javascript\nconst chokidar = watcher.getChokidar()\n```\n\nAdd a watcher to the list of watchers\n\n```javascript\nwatcher.addWatch(watch)\n```\n\nClose all the watchers\n\n```javascript\nwatcher.close()\n```\n\nClose a specific watcher by index\n\n```javascript\nwatcher.closeByIndex(index)\n```\n\n### Rinobot.js event specification\n\n#### Chokidar events:\n1. add\n\t* Triggered upon creating file, renaming file, renaming one of the parent folders, moving parent folder, moving file\n2. unlink\n\t* Triggered upon deleting file, renaming file, renaming one of the parent folders, moving parent folder, moving file\n3. addDir\n\t* Triggered upon creating folder, renaming folder, renaming one of the parent folders, moving parent folder\n4. unlinkDir\n\t* Triggered upon deleting folder, renaming folder, renaming one of the parent folders, moving parent folder\n5. change\n\t* Upon overwriting\n\n#### User actions:\n1. Create folder (addDir event)\n2. Create file (add event)\n3. Delete folder (unlinkDir or crashing program)\n4. Delete file (unlink event)\n5. Rename folder (unlinkDir + addDir events + multiple unlink, add, unlinkDir, addDir events for subfolders and files within)\n6. Rename file (unlink + add events)\n7. Change file (change event)\n8. Move folder (unlinkDir + addDir events  + multiple unlink, add, unlinkDir, addDir events for subfolders and files within).\n9. Move file (unlink + add events)\n\n#### Discriminating user actions:\n1. No previously triggered unlink or unlinkDir event within 1 or 2 sec - create file or folder\n2. No following triggered add oraddDir event within 1 or 2 sec - delete file or folder\n3. If sequent unlink + add (issue: the order is not necessarily the same) triggered, can be:\n\t* Renamed file (how to discriminate: events only two, the same base path)\n\t* Renamed parent folder (Accompanied by at least unlinkDir + addDir. If the file is within modified folder path, only the modified folder has to be updated).\n\t* Moved file (Events only two, different base path, file name the same. Issue: multiple files moved)\n\t* Moved parent folder (Accompanied by at least unlinkDir + addDir. If the file is within modified folder path, only the top modified folder has to be updated)\n3. If sequent unlinkDir + addDir (the order is not necessarily the same) triggered, can be:\n\t* Renamed folder (find the top)\n"
}