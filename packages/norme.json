{
  "name": "norme",
  "version": "1.0.1",
  "description": "Opinionated JavaScript linter",
  "keywords": [
    "javascript",
    "ecmascript",
    "ecmascriptnext",
    "esnext",
    "ecmascript5",
    "es5",
    "ecmascript6",
    "es6",
    "ecmascript7",
    "es7",
    "react",
    "jsx",
    "lint",
    "linter",
    "linting",
    "norm"
  ],
  "author": {
    "name": "Aymeric Beaumet",
    "email": "hi@aymericbeaumet.com",
    "url": "https://aymericbeaumet.com"
  },
  "contributors": [],
  "license": "CC0-1.0",
  "repository": {
    "user": "aymericbeaumet",
    "repo": "norme",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/aymericbeaumet/norme/tarball/master",
    "clone_url": "https://github.com/aymericbeaumet/norme",
    "https_url": "https://github.com/aymericbeaumet/norme",
    "travis_url": "https://travis-ci.org/aymericbeaumet/norme",
    "zip_url": "https://github.com/aymericbeaumet/norme/archive/master.zip",
    "api_url": "https://api.github.com/repos/aymericbeaumet/norme"
  },
  "main": "dist/index.js",
  "bin": {
    "norme": "bin/norme.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "eslint": "^2.12.0",
    "yargs": "^4.7.1"
  },
  "devDependencies": {
    "ava": "^0.15.0",
    "babel-cli": "^6.7.5",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-runtime": "^6.7.5",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-runtime": "^6.9.2",
    "codeclimate-test-reporter": "^0.3.3",
    "nyc": "^6.4.4"
  },
  "scripts": {
    "build": "babel lib --out-dir=dist",
    "test": "npm run build && node bin/norme.js && nyc ava",
    "prepublish": "npm test",
    "codeclimate": "nyc report --reporter=text-lcov | codeclimate-test-reporter"
  },
  "babel": {
    "plugins": [
      "add-module-exports",
      "transform-runtime"
    ],
    "presets": [
      "es2015",
      "stage-0"
    ],
    "sourceMaps": "inline"
  },
  "nyc": {
    "reporter": "html",
    "check-coverage": true,
    "branch": 100,
    "function": 100,
    "line": 100,
    "statements": 100
  },
  "gitHead": "8a4c57929571071de752d4cbb29903c72e53f959",
  "homepage": "https://github.com/aymericbeaumet/norme#readme",
  "_npmVersion": "3.8.3",
  "_nodeVersion": "5.10.1",
  "dist": {
    "shasum": "f9c1246a3cf8a1309f97d2e2a9b98f46615c6ea2",
    "tarball": "http://registry.npmjs.org/norme/-/norme-1.0.1.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-06-16T21:54:55.844Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-06-16T23:33:35.183Z"
    }
  ],
  "created": "2016-06-16T21:54:55.844Z",
  "modified": "2016-06-16T23:33:35.183Z",
  "lastPublisher": {
    "name": "aymericbeaumet",
    "email": "aymeric@beaumet.me"
  },
  "owners": [
    {
      "name": "aymericbeaumet",
      "email": "aymeric@beaumet.me"
    }
  ],
  "readme": "# norme\n\n> Opinionated JavaScript linter\n\n[![NPM version](https://img.shields.io/npm/v/norme.svg?style=flat-square&label=npm)](https://www.npmjs.com/package/norme)\n[![Linux and OS X build status](https://img.shields.io/travis/aymericbeaumet/norme/master.svg?style=flat-square&label=linux|osx)](https://travis-ci.org/aymericbeaumet/norme)\n[![Windows build status](https://img.shields.io/appveyor/ci/aymericbeaumet/norme/master.svg?style=flat-square&label=windows)](https://ci.appveyor.com/project/aymericbeaumet/norme)\n[![Code coverage](https://img.shields.io/codeclimate/coverage/github/aymericbeaumet/norme.svg?style=flat-square&label=code-coverage)](https://codeclimate.com/github/aymericbeaumet/norme)\n[![Code style](https://img.shields.io/badge/code--style-norme-brightgreen.svg?style=flat-square)](https://github.com/aymericbeaumet/norme)\n\nNorme is an [ESLint](http://eslint.org/) based JavaScript linter with\nlowly-configurable opinionated rules. It does not pretend to be the one style to\nrule them all. We all have different ideals when it comes to writing code, that\nlinter enforces one of them:\n\n* 2 spaces indentations\n* no semicolon\n* dangling comma\n* support for ES.next, Node.js, React, Electron\n* ensure the `require`s and `import`s can be resolved\n* [and more...]('./lib/rc.js')\n\n## Install\n\n```\n$ npm install --save-dev norme\n```\n\n## Usage\n\n### Project-wide\n\nUsing the [above command](#install) will install Norme locally to your project,\nthis is the recommended way to use it. The version should be fixed in the\n`devDependencies` so that your build don't break if the rules evolve. It can be\naccessed from the `scripts` in `package.json`.\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"norme\"\n  },\n  \"devDependencies\": {\n    \"norme\": \"1.0.0\"\n  }\n}\n```\n\n### System-wide\n\nInstalling this package with `npm install --global norme` will expose a binary\nallowing you to lint code from the command line. See [the CLI\ndocumentation](#cli) for more information.\n\nIt exits with code `0` when there are no errors:\n\n```\n$ norme lib\n\n$ echo $?\n0\n```\n\nIt exits with the number of errors (warnings are not counted) otherwise:\n\n```\n$ norme test/fixtures/ko_parsingerror\n\n/Users/ab/Workspace/OpenSource/node/norme/test/fixtures/ko_parsingerror\n  1:12  error  Parsing error: Unexpected token }\n\nâœ– 1 problem (1 error, 0 warnings)\n\n$ echo $?\n1\n```\n\n## Documentation\n\n### CLI\n\n```\nUsage: norme [options] [file ...]\n\nOptions:\n  --eslintrc     Whether the ESLint configuration files should be read\n                                                      [boolean] [default: false]\n  --ext          A comma separated list of extension to search for in folders\n                                                  [string] [default: \".js,.jsx\"]\n  -f, --format   The ESLint formatter to use\n       [string] [choices: \"checkstyle\", \"compact\", \"html\", \"jslint-xml\", \"json\",\n           \"junit\", \"stylish\", \"table\", \"tap\", \"unix\", \"visualstudio\"] [default:\n                                                                      \"stylish\"]\n  -h, --help     Print this help message and exit                      [boolean]\n  -v, --version  Print version information and exit                    [boolean]\n\nExamples:\n  norme --ext=.js,.jsx,.es6 src    Support custom file extensions while linting\n                                   the src folder\n  norme --formatter=json src test  Specify the ESLint formatter while linting\n                                   the src and test folders\n  norme && ava                     Leverage the exit code to only launch ava if\n                                   there are no lint errors\n  norme --eslintrc                 Load the ESLint configuration files (if any)\n                                   to overload the Norme rules\n\nNotes:\n  - by default, the following files will be linted: bin, lib, src, test\n  - if a directory is passed, it will be recursively crawled\n  - the exit code represents the number of linting errors\n\nFor more information: see https://github.com/aymericbeaumet/norme\n```\n\n### API\n\n#### Norme(files[, options])\n\n##### files\n\nType: `String[]`\n\nThe files or directories to lint. If a directory is passed, it will be crawled\nand all the files matching the **options.extensions** will be linted.\n\n##### options\n\nType: `Object`  \nDefault: `{}`\n\n##### options.cwd\n\nType: `String`  \nDefault: `process.cwd()`\n\nThe root directory from which the files should be resolved from.\n\n##### options.extensions\n\nType: `String[]`  \nDefault: `[ '.js', 'jsx' ]`\n\nThe extensions to search for when directories are provided.\n\n##### options.useEslintrc\n\nType: `Boolean`  \nDefault: `false`\n\nWhether the ESLint configuration files can override the Norme rules.\n\n### Package.json\n\nIt is possible to define a configuration in the `norme` key of `package.json`.\nAll the `options` you could pass to the `Norme` constructor (see [API\ndocumentation](#api)) can be placed here. Note that it has a lower precedence\nthan the [CLI](#cli), allowing to override options via the command line.\n\n```json\n{\n  \"norme\": {\n    \"extensions\": [ \".js\", \".jsx\", \".es6\" ]\n  }\n}\n```\n\n## FAQ\n\n### Can I integrate Norme with my IDE?\n\nSure, just grab an [ESLint\nplugin](http://eslint.org/docs/user-guide/integrations) for your IDE and create\nthe following `.eslintrc.js` in your project root:\n\n```javascript\nmodule.exports = require('norme').rc()\n```\n\n### How can I show my support?\n\nAdd the following badge to your project:\n\n[![Code style](https://img.shields.io/badge/code--style-norme-brightgreen.svg?style=flat-square)](https://github.com/aymericbeaumet/norme)\n\n```markdown\n[![Code style](https://img.shields.io/badge/code--style-norme-brightgreen.svg?style=flat-square)](https://github.com/aymericbeaumet/norme)\n```\n\n### Where does that name come from?\n\nNorme is the [french word](https://en.wiktionary.org/wiki/norme) for `norm`. It\nhas the same pronunciation.\n\n## Support\n\n* [Read the FAQ](#faq)\n* [Create an issue on GitHub](https://github.com/aymericbeaumet/norme/issues/new)\n* [Ask your question on Gitter](https://gitter.im/aymericbeaumet/norme)\n"
}