{
  "name": "node-hid",
  "description": "USB HID device access library",
  "version": "0.5.2",
  "author": {
    "name": "Hans HÃ¼bner",
    "email": "hans.huebner@gmail.com",
    "url": "https://github.com/hanshuebner"
  },
  "contributors": [
    {
      "name": "Blake Miner",
      "email": "miner.blake@gmail.com"
    },
    {
      "name": "Tod Kurt",
      "email": "todbotdotcom@gmail.com",
      "url": "https://github.com/todbot"
    }
  ],
  "repository": {
    "user": "node-hid",
    "repo": "node-hid",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/node-hid/node-hid/tarball/master",
    "clone_url": "https://github.com/node-hid/node-hid",
    "https_url": "https://github.com/node-hid/node-hid",
    "travis_url": "https://travis-ci.org/node-hid/node-hid",
    "zip_url": "https://github.com/node-hid/node-hid/archive/master.zip",
    "api_url": "https://api.github.com/repos/node-hid/node-hid"
  },
  "scripts": {
    "test": "node nodehid.js",
    "prepublish": "git submodule update --init",
    "install": "node-pre-gyp install --fallback-to-build",
    "rebuild-all": "npm rebuild && node-gyp rebuild",
    "gyppackage": "node-pre-gyp package",
    "gyppublish": "node-pre-gyp publish",
    "clean": "rimraf node_modules build"
  },
  "bin": {
    "hid-showdevices": "./src/show-devices.js"
  },
  "binary": {
    "module_name": "HID",
    "module_path": "./build/{module_name}/{configuration}/",
    "host": "https://github.com/node-hid/node-hid/releases/download/",
    "remote_path": "{version}"
  },
  "main": "./nodehid.js",
  "engines": {
    "node": ">=4.0.0"
  },
  "license": "(MIT OR X11)",
  "dependencies": {
    "nan": "^2.4.0",
    "node-pre-gyp": "0.6.31"
  },
  "devDependencies": {
    "node-pre-gyp-github": "^1.3.1",
    "rimraf": "^2.5.3"
  },
  "gitHead": "0f2c3f3e58d8c0e247a861e39c9a46fb521db3bc",
  "homepage": "https://github.com/node-hid/node-hid#readme",
  "bundleDependencies": [
    "node-pre-gyp"
  ],
  "_npmVersion": "2.15.11",
  "_nodeVersion": "4.6.2",
  "dist": {
    "shasum": "f01ebe153fd8632ec833503a2f39ea09123eb849",
    "tarball": "http://registry.npmjs.org/node-hid/-/node-hid-0.5.2.tgz"
  },
  "stars": 11,
  "versions": [
    {
      "number": "0.0.13",
      "date": "2012-04-09T12:07:22.317Z"
    },
    {
      "number": "0.0.14",
      "date": "2012-04-09T14:20:46.815Z"
    },
    {
      "number": "0.0.15",
      "date": "2012-04-09T14:41:16.099Z"
    },
    {
      "number": "0.1.0",
      "date": "2012-08-20T08:54:53.522Z"
    },
    {
      "number": "0.1.1",
      "date": "2012-08-21T19:43:44.704Z"
    },
    {
      "number": "0.2.0",
      "date": "2013-01-16T08:41:22.953Z"
    },
    {
      "number": "0.2.1",
      "date": "2013-01-17T21:15:56.712Z"
    },
    {
      "number": "0.2.2",
      "date": "2013-01-17T21:21:52.909Z"
    },
    {
      "number": "0.2.3",
      "date": "2013-03-17T19:52:59.524Z"
    },
    {
      "number": "0.3.1",
      "date": "2013-11-14T21:46:53.064Z"
    },
    {
      "number": "0.3.2",
      "date": "2014-10-22T14:06:20.427Z"
    },
    {
      "number": "0.4.0",
      "date": "2015-05-26T22:46:31.406Z"
    },
    {
      "number": "0.4.1",
      "date": "2015-10-07T06:37:17.829Z"
    },
    {
      "number": "0.5.0",
      "date": "2015-10-07T07:51:19.617Z"
    },
    {
      "number": "0.5.1",
      "date": "2015-10-15T04:16:31.555Z"
    },
    {
      "number": "0.5.2",
      "date": "2016-11-09T00:18:05.213Z"
    }
  ],
  "created": "2012-04-09T12:07:18.929Z",
  "modified": "2016-11-09T00:18:05.213Z",
  "lastPublisher": {
    "name": "todbot",
    "email": "todbotdotcom@gmail.com"
  },
  "owners": [
    {
      "name": "bminer",
      "email": "miner.blake@gmail.com"
    },
    {
      "name": "gorillatron",
      "email": "jornandretangen@gmail.com"
    },
    {
      "name": "hans",
      "email": "hans.huebner@gmail.com"
    },
    {
      "name": "natevw",
      "email": "natevw@yahoo.com"
    },
    {
      "name": "todbot",
      "email": "todbotdotcom@gmail.com"
    }
  ],
  "readme": "# node-hid - Access USB HID devices from node.js #\n\n## Installation\n```\nnpm install node-hid\n```\n\n### Prerequisites:\n\n* [Node.js](https://nodejs.org/) v0.8 - v4.x+\n* Mac OS X 10.8, Linux (kernel 2.6+), and Windows XP+\n* libudev-dev, libusb-1.0-0-dev (if Linux, see Compile below)\n* [git](https://git-scm.com/)\n\nnode-hid uses node-pre-gyp to store pre-built binary bundles, so usually no compiler is needed to install.\n\nPlatforms we pre-build binaries for:\n- Mac OS X x64: v0.10, v0.12, v4.2.x\n- Windows x64 & x86: v0.10, v0.12, v4.2.x\n- Linux Debian/Ubuntu x64: v4.2.x\n- Raspberry Pi arm: v4.2.x\n\nIf node-hid doesn't have a pre-built binary for your system, it will attempt to compile locally.  In which case you'll need the **Compiler tools** mentioned below.\n\n## Test it\n\nIn the `src/` directory, various JavaScript programs can be found\nthat talk to specific devices in some way.  Some interesting ones:\n- [`show-devices.js`](https://github.com/node-hid/node-hid/blob/master/src/show-devices.js) - display all HID devices in the system\n- [`test-ps3-rumbleled.js`](https://github.com/node-hid/node-hid/blob/master/src/test-ps3-rumbleled.js) - Read PS3 joystick and control its LED & rumblers.\n- [`powermate.js`](https://github.com/node-hid/node-hid/blob/master/src/powermate.js) - Read Griffin PowerMate knob and change its LED\n\nTo try them out, call them like `node src/showdevices.js` from the node-hid directory.\n\n## How to Use\n\n### Load the module\n\n```\nvar HID = require('node-hid');\n```\n\n### Get a list of all HID devices in the system:\n\n```\nvar devices = HID.devices()\n```\n\n`devices` will contain an array of objects, one for each HID device\navailable.  Of particular interest are the `vendorId` and\n`productId`, as they uniquely identify a device, and the\n`path`, which is needed to open a particular device.\n\nHere is some sample output:\n```\nHID.devices();\n[ { vendorId: 1452,\n    productId: 595,\n    path: 'USB_05ac_0253_0x100a148e0',\n    serialNumber: '',\n    manufacturer: 'Apple Inc.',\n    product: 'Apple Internal Keyboard / Trackpad',\n    release: 280,\n    interface: -1 },\n  { vendorId: 1452,\n    productId: 595,\n    path: 'USB_05ac_0253_0x100a14e20',\n    serialNumber: '',\n    manufacturer: 'Apple Inc.',\n    product: 'Apple Internal Keyboard / Trackpad',\n    release: 280,\n    interface: -1 },\n<and more>\n```\n\n**NOTE:** Most keyboard & mice-like HID devices cannot be seen by `node-hid` on Windows & Mac.  This is not a limitation of `node-hid` but a limitation of all user-space libraries.  This is a security feature of the OS to prevent input device snooping.\n\n### Opening a device\n\nBefore a device can be read from or written to, it must be opened.\nThe `path` can\nbe determined by a prior HID.devices() call. Use either the `path` from\nthe list returned by a prior call to `HID.devices()`:\n```\nvar device = new HID.HID(path);\n```\nor open the first device matching a VID/PID pair:\n```\nvar device = new HID.HID(vid,pid);\n```\n\n`device` will contain a handle to the device.\nIf an error occurs opening the device, an exception will be thrown.\n\n### Reading from a device\n\nReading from a device is performed by registering a \"data\" event\nhandler:\n\n```\ndevice.on(\"data\", function(data) {});\n```\n\nYou can also listen for errors like this:\n\n```\ndevice.on(\"error\", function(err) {});\n```\n\nAll reading is asynchronous.\n\n### Writing to a device\n\nWriting to a device is performed using the write call in a device\nhandle.  All writing is synchronous.\n\n```\ndevice.write([0x00, 0x01, 0x01, 0x05, 0xff, 0xff]);\n```\nNotes:\n- The `write()` method sends OUTPUT reports. To send Feature reports,\nsee the `sendFeatureReport()` method below.\n- Some devices use reportIds for OUTPUT reports.  If that is the case,\nthe first byte of the array to `write()` should be the reportId.\n\n\n## Complete API\n\n```\nvar device = new HID.HID(path);\n```\n\n### Event: \"data\"\n\n- `chunk` - Buffer - the data read from the device\n\n### Event: \"error\"\n\n- `error` - The error Object emitted\n\n### device.write(data)\n\n- `data` - the data to be synchronously written to the device\n\n### device.close()\n\nCloses the device. Subsequent reads will raise an error.\n\n### device.pause()\n\nPauses reading and the emission of `data` events.\n\n### device.resume()\n\nThis method will cause the HID device to resume emmitting `data` events.\nIf no listeners are registered for the `data` event, data will be lost.\n\nWhen a `data` event is registered for this HID device, this method will\nbe automatically called.\n\n### device.read(callback)\n\nLow-level function call to initiate an asynchronous read from the device.\n`callback` is of the form `callback(err, data)`\n\n### device.readSync()\n\nReturn an array of numbers data. If an error occurs, an exception will be thrown.\n\n### device.readTimeout(time_out)\n\n- `time_out` - timeout in milliseconds\nReturn an array of numbers data. If an error occurs, an exception will be thrown.\n\n### device.sendFeatureReport(data)\n- `data` - data of HID feature report, with 0th byte being report_id (`[report_id,...]`)\n\n### device.getFeatureReport(report_id, report_length)\n- `report_id` - HID feature report id to get\n- `report_length` - length of report\n\n## Notes for Specific Devices\n\n- Xbox 360 Controller on Windows 10 -- does not work\n\n## Compiling from source\n\nTo compile & develop locally (or if `node-pre-gyp` cannot find a pre-built binary for you), you will need the following tools:\n* Mac OS X 10.8+\n    * [Xcode](https://itunes.apple.com/us/app/xcode/id497799835?mt=12)\n* Windows XP+\n    * `npm install --global windows-build-tools`\n    * add \"%USERPROFILE%\\.windows-build-tools\\python27\" to PATH, like:\n        powershell: `$env:Path += \";$env:USERPROFILE\\.windows-build-tools\\python27\"`\n    or \n    * [Python 2.7](https://www.python.org/downloads/windows/)\n    * [Visual Studio Express 2013 for Desktop](https://www.visualstudio.com/downloads/download-visual-studio-vs#d-2013-express)\n    * node-gyp installed globally (`npm install -g node-gyp`)\n* Linux (kernel 2.6+)\n    * Compiler tools (`apt-get install build-essential git` for Debian/Ubuntu/Raspian)\n    * libudev-dev (Fedora: `yum install libusbx-devel`)\n    * libusb-1.0-0-dev (Ubuntu versions missing `libusb.h` only)\n    * gcc-4.8+ (`apt-get install gcc-4.8 g++-4.8 && export CXX=g++-4.8`)\n\nTo build node-hid, check out a copy of this repo, change into its directory, update the submodules, build the node package, then node-pre-gyp to rebuild the C code:\n\n```\ngit clone https://github.com/node-hid/node-hid.git\ncd node-hid                                        # must change into node-hid directory\ngit submodule update --init                        # done on publish automatically\nnpm install                                        # rebuilds the module\n./node_modules/.bin/node-pre-gyp rebuild           # rebuilds the C code\n```\n\nOn Windows CMD shell, the last line will instead need to be:\n```\n.\\node_modules\\.bin\\node-pre-gyp rebuild           # rebuilds the C code\n```\n\nYou will likely see some warnings from the C compiler as it compiles hidapi.  This is expected.\n\n\n## Using `node-hid` in Electron projects\nIn your electron project, add `electron-rebuild` and `electron-prebuilt` to your `devDependencies`.\nThen in your package.json `scripts` add:\n\n```\n  \"postinstall\": \"electron-rebuild --pre-gyp-fix --force\"\n```\n\nIf you want a specific version of electron, do something like:\n\n```\nelectron-rebuild -v 0.36.5 --pre-gyp-fix --force -m . -w node-hid\n```\n\n## Using `node-hid` in NW.js projects\n\n```\n    npm install node-pre-gyp\n    ./node_modules/.bin/node-pre-gyp rebuild --runtime=node-webkit --target=0.12.3\n```   \n\nYou can change 0.12.3 to version nwjs that you want to deploy.\n\n## Support\n\nPlease use the [node-hid github issues page](https://github.com/node-hid/node-hid/issues)\nfor support questions and issues.\n"
}