{
  "name": "electron-save",
  "version": "1.1.0",
  "description": "A module for cross platform saving and loading",
  "homepage": "https://github.com/legodude17/electron-save#readme",
  "author": {
    "name": "JDB",
    "url": "https://legodude17.github.io"
  },
  "main": "index.js",
  "keywords": [
    "electron",
    "save",
    "file"
  ],
  "dependencies": {},
  "devDependencies": {
    "electron": "*",
    "eslint": "*"
  },
  "eslintConfig": {
    "env": {
      "mocha": true,
      "node": true
    }
  },
  "scripts": {
    "lint": "eslint *.js",
    "test": "echo &#34;Error: No test&#34;; exit 1"
  },
  "license": "MIT",
  "repository": {
    "user": "legodude17",
    "repo": "electron-save",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/legodude17/electron-save/tarball/master",
    "clone_url": "https://github.com/legodude17/electron-save",
    "https_url": "https://github.com/legodude17/electron-save",
    "travis_url": "https://travis-ci.org/legodude17/electron-save",
    "zip_url": "https://github.com/legodude17/electron-save/archive/master.zip",
    "api_url": "https://api.github.com/repos/legodude17/electron-save"
  },
  "gitHead": "73e31935f95db171cd483fb94a508bb80da2aba0",
  "_npmVersion": "3.10.6",
  "_nodeVersion": "6.0.0",
  "dist": {
    "shasum": "ce12bdc292549fe25e96982c277bceef68bc6e8c",
    "tarball": "http://registry.npmjs.org/electron-save/-/electron-save-1.1.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-09-07T21:06:21.691Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-09-07T21:27:04.865Z"
    }
  ],
  "created": "2016-09-07T21:06:21.691Z",
  "modified": "2016-09-07T21:27:04.865Z",
  "lastPublisher": {
    "name": "legodude",
    "email": "legodudejb@gmail.com"
  },
  "owners": [
    {
      "name": "legodude",
      "email": "legodudejb@gmail.com"
    }
  ],
  "readme": "# electron-save\nA way to save and then load them.\n\n## Usage\n```js\nvar load = require('electron-save');\nload('world', function(err, config) {\n  if (err) {\n    return console.error(err);\n  }\n  console.log('Loaded ' + config.path);\n  var hello = config.get('hello');\n  config.set('hello', hello || 'hello');\n  config.save(function (err) {\n    if (err) {\n      return console.error(err);\n    }\n    console.log('File saved to ' + config.path);\n  });\n});\n```\n\n## API\n\n### load(name, cb)\nCalling `load` is what actually gets a config.\n##### Args\nname (String): name of file to load\ncb: (function(err, config)): Called with config object\n\n### load.sync(name)\nSynchronous alternative to `load`. Returns config or throws error. config object is the same except for the `save` method, which is also sync.\n\n### config.get(key)\nGet `key` from the loaded `config`.\n\n### config.getAll()\nGet all keys and values from `config` as an object.\nNOTE: Does not return actual object, just a copy.\n\n### config.set(key, value)\nSet `key` to `value`. The file will be updated once you call `config.save`.\n\n### config.setAll(obj)\nSet `config`'s object to `obj`. `obj` must be JSON-safe.\nNOTE: Will not set `config`'s object to a reference to `obj`, it will be a copy.\n\n### config.save(cb)\nWrite the config file with JSON encoded version of `config`'s object.\nNOTE: If the config was gotten with `load.sync`, this method is also sync.\n\n### config.path\nResolved path to JSON file holding this `config`.\n"
}