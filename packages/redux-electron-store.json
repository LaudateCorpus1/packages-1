{
  "name": "redux-electron-store",
  "version": "0.3.13",
  "description": "Redux store which synchronizes between instances in multiple process",
  "main": "lib/index.js",
  "scripts": {
    "compile": "babel -d lib/ src/",
    "watch": "babel -d lib/ src/ --watch --sourceMaps=true",
    "lint": "eslint src/",
    "prepublish": "npm run compile"
  },
  "repository": {
    "user": "samiskin",
    "repo": "redux-electron-store",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/samiskin/redux-electron-store/tarball/master",
    "clone_url": "https://github.com/samiskin/redux-electron-store",
    "https_url": "https://github.com/samiskin/redux-electron-store",
    "travis_url": "https://travis-ci.org/samiskin/redux-electron-store",
    "zip_url": "https://github.com/samiskin/redux-electron-store/archive/master.zip",
    "api_url": "https://api.github.com/repos/samiskin/redux-electron-store"
  },
  "keywords": [
    "redux",
    "reducer",
    "state",
    "sync",
    "electron",
    "atom"
  ],
  "author": {
    "name": "Shiranka Miskin"
  },
  "license": "MIT",
  "homepage": "https://github.com/samiskin/redux-electron-store#readme",
  "dependencies": {
    "lodash": "^4.13.1"
  },
  "devDependencies": {
    "babel-cli": "^6.3.17",
    "babel-core": "^6.3.17",
    "babel-eslint": "^4.1.6",
    "babel-preset-es2015": "^6.3.13",
    "eslint": "^1.10.3",
    "eslint-config-airbnb": "^2.1.1",
    "eslint-plugin-react": "^5.1.1",
    "onchange": "^2.0.0",
    "tape": "^4.2.2"
  },
  "gitHead": "469d1676c70f48e2af672c9217c974113b86f642",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.3.1",
  "dist": {
    "shasum": "c39070a639b997a65bdeb173c20d9498cab7a830",
    "tarball": "http://registry.npmjs.org/redux-electron-store/-/redux-electron-store-0.3.13.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-12-16T06:33:58.200Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-12-16T07:06:59.054Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-12-16T07:24:52.802Z"
    },
    {
      "number": "0.2.2",
      "date": "2015-12-16T07:33:33.117Z"
    },
    {
      "number": "0.2.3",
      "date": "2015-12-16T07:37:35.725Z"
    },
    {
      "number": "0.2.4",
      "date": "2015-12-16T07:49:41.481Z"
    },
    {
      "number": "0.2.5",
      "date": "2015-12-17T00:27:22.754Z"
    },
    {
      "number": "0.2.6",
      "date": "2015-12-18T00:49:48.254Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-12-18T21:39:42.774Z"
    },
    {
      "number": "0.3.1",
      "date": "2015-12-22T02:44:00.089Z"
    },
    {
      "number": "0.3.2",
      "date": "2016-02-04T14:15:34.643Z"
    },
    {
      "number": "0.3.3",
      "date": "2016-02-06T16:08:50.965Z"
    },
    {
      "number": "0.3.4",
      "date": "2016-02-16T04:36:46.071Z"
    },
    {
      "number": "0.3.5",
      "date": "2016-03-20T21:16:02.559Z"
    },
    {
      "number": "0.3.6",
      "date": "2016-03-30T19:03:25.795Z"
    },
    {
      "number": "0.3.7",
      "date": "2016-04-15T00:11:34.458Z"
    },
    {
      "number": "0.3.8",
      "date": "2016-04-18T03:07:35.141Z"
    },
    {
      "number": "0.3.9",
      "date": "2016-05-12T06:33:43.997Z"
    },
    {
      "number": "0.3.10",
      "date": "2016-05-29T02:43:43.505Z"
    },
    {
      "number": "0.3.11",
      "date": "2016-07-07T01:37:59.200Z"
    },
    {
      "number": "0.3.12",
      "date": "2016-08-01T04:50:29.173Z"
    },
    {
      "number": "0.3.13",
      "date": "2016-08-02T20:39:44.970Z"
    }
  ],
  "created": "2015-12-16T06:33:58.200Z",
  "modified": "2016-08-02T20:39:44.970Z",
  "lastPublisher": {
    "name": "samiskin",
    "email": "shiranka.miskin@gmail.com"
  },
  "owners": [
    {
      "name": "samiskin",
      "email": "shiranka.miskin@gmail.com"
    }
  ],
  "readme": "# redux-electron-store\n[![npm version](https://img.shields.io/npm/v/redux-electron-store.svg?style=flat-square)](https://www.npmjs.com/package/redux-electron-store)\n\nThis library solves the problem of synchronizing [Redux](https://github.com/rackt/redux/) stores in [Electron](https://github.com/atom/electron) apps. Electron is based on Chromium, and thus all Electron apps have a single [main process](https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md#differences-between-main-process-and-renderer-process) and (potentially) multiple renderer processes, one for each web page. `redux-electron-store` allows us to define a store per process, and uses [`ipc`](https://github.com/atom/electron/blob/master/docs/api/ipc-main.md) to keep them in sync in an efficient manner.  It is implemented as a [redux store enhancer](https://github.com/rackt/redux/blob/master/docs/Glossary.md#store-enhancer).\n\nThis library __only__ works if the data in your store is __immutable__, as objects are compared by reference to determine changes.\n\n## Installation\n```bash\nnpm i redux-electron-store\n```\n\n## Usage\n\n#### Main Process\n\n\n```javascript\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { electronEnhancer } from 'redux-electron-store';\n\nlet enhancer = compose(\n  applyMiddleware(...middleware),\n  electronEnhancer()\n);\n\n// Note: passing enhancer as the last argument to createStore requires redux@>=3.1.0\nlet store = createStore(reducer, initialState, enhancer);\n```\n\n#### Renderer / Webview Process\n\nIn the renderer process, the store will handle the `filter` property in its parameter.  `filter` is a way of describing exactly what data this renderer process wishes to be notified of.  If a filter is provided, all updates which do not change a property which passes the filter will not be forwarded to the current renderer.\n\n```javascript\nlet filter = {\n  notifications: true,\n  settings: true\n};\n\nlet enhancer = compose(\n  applyMiddleware(...middleware),\n  electronEnhancer({filter}),\n  DevTools.instrument()\n);\n\n// Note: passing enhancer as the last argument to createStore requires redux@>=3.1.0\nlet store = createStore(reducer, initialState, enhancer);\n```\n\n#### Filters\n\nA filter can be an `object`, a `function`, or `true`.\n\nIf the filter is `true`, the entire variable will pass through the filter.\n\nIf the filter is a `function`, the function will be called with the variable the filter is acting on as a parameter, and the return value of the function must itself be a filter (either an `object` or `true`)\n\nIf the filter is an `object`, its keys must be properties of the variable the filter is acting on, and its values are themselves filters which describe the value(s) of that property that will pass through the filter.\n\n**Example Problem**:\n\n>I am creating a Notifications window for Slack's application.  For this to work, I need to know the position to display the notifications, the notifications themselves, and the icons for each team to display as a thumbnail.  Any other data in my app has no bearing on this window, therefore it would be a waste for this window to have updates for any other data sent to it.\n\n**Solution**:\n```javascript\n// Note: The Lodash library is being used here as _\nlet filter = {\n  notifications: true,\n  settings: {\n    notifyPosition: true\n  },\n  teams: (teams) => {\n    return _.mapValues(teams, (team) => {\n      return {icons: true};\n    });\n  }\n};\n```\n\nMore options are documented in the [api docs](https://github.com/samiskin/redux-electron-store/blob/master/docs/api.md), and a description of exactly how this library works is on the way.  \n\n#### Hot Reloading Reducers\n\n\nHot reloading of reducers needs to be done on both the renderer and the main process.  Doing this requires two things:\n\n- The renderer needs to inform the main process when it has reloaded\n  ```js\n  // In the renderer process\n  if (module.hot) {\n    module.hot.accept('../reducers', () => {\n      ipc.sendSync('renderer-reload');\n      store.replaceReducer(require('../reducers'))\n    });\n  }\n  ```\n\n- The main process needs to delete its cached `reducers` data\n  ```js\n  // In the main process\n  ipcMain.on('renderer-reload', (event, action) => {\n    delete require.cache[require.resolve('../reducers')];\n    store.replaceReducer(require('../reducers'));\n    event.returnValue = true;\n  });\n  ```\n  - Note: Individual reducer files may also need to be deleted from the cache if they have been required elsewhere in the application\n\n### License\n\nMIT\n"
}