{
  "name": "axios-status",
  "version": "0.0.12",
  "description": "Network requests status tracking for Axios",
  "main": "lib/axios-status.js",
  "typings": "lib/axios-status.d.ts",
  "scripts": {
    "test": "npm run quick-build && npm run tape",
    "full-test": "npm run small-build && npm run build-tests && npm run use-minified && npm run tape && npm run perf",
    "tape": "tape test/*.js | faucet",
    "perf": "npm run small-build && time node --expose-gc test/perf/index.js",
    "prepublish": "npm run quick-build",
    "quick-build": "tsc",
    "small-build": "scripts/single-file-build.sh",
    "test-browser-electron": "npm run small-build && ( browserify test/*.js | tape-run )",
    "test-browser-chrome": "npm run small-build && ( browserify test/*.js | tape-run --browser chrome )",
    "test-browser-safari": "npm run small-build && ( browserify test/*.js -t [ babelify --presets [ es2015 ] ] | tape-run --browser safari )",
    "test-browser-firefox": "npm run small-build && ( browserify test/*.js  | tape-run --browser firefox )",
    "test-travis": "npm run small-build && tape test/*.js test/perf/index.js && tsc && istanbul cover tape test/*.js",
    "coverage": "npm run small-build && npm run build-tests && istanbul cover tape test/*.js test/perf/index.js && cat ./coverage/lcov.info|coveralls",
    "build-tests": "npm run build-typescript-tests && npm run build-babel-tests",
    "build-typescript-tests": "tsc -m commonjs -t es5 --experimentalDecorators --noImplicitAny --outDir test test/typescript-tests.ts",
    "build-babel-tests": "babel test/babel/babel-tests.js -o test/babel-tests.js",
    "use-minified": "cp lib/mobx.min.js lib/mobx.js",
    "lint": "tslint -c tslint.json src/*.ts src/types/*.ts src/api/*.ts src/core/*.ts src/utils/*.ts"
  },
  "repository": {
    "user": "tomaash",
    "repo": "axios-status",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/tomaash/axios-status/tarball/master",
    "clone_url": "https://github.com/tomaash/axios-status",
    "https_url": "https://github.com/tomaash/axios-status",
    "travis_url": "https://travis-ci.org/tomaash/axios-status",
    "zip_url": "https://github.com/tomaash/axios-status/archive/master.zip",
    "api_url": "https://api.github.com/repos/tomaash/axios-status"
  },
  "author": {
    "name": "Tomas Holas"
  },
  "license": "MIT",
  "files": [
    "lib",
    "LICENSE",
    "bower.json"
  ],
  "homepage": "https://github.com/tomaash/axios-status",
  "devDependencies": {
    "babel-cli": "^6.4.5",
    "babel-core": "^6.4.5",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-1": "^6.3.13",
    "babelify": "^7.3.0",
    "browserify": "^12.0.1",
    "coveralls": "^2.11.4",
    "faucet": "0.0.1",
    "istanbul": "^0.3.21",
    "lodash.intersection": "^3.2.0",
    "tape": "^4.2.2",
    "tape-run": "^2.1.0",
    "typescript": "^1.8.10",
    "typings": "^1.3.1",
    "uglify-js": "^2.6.1"
  },
  "dependencies": {
    "events": "^1.1.1"
  },
  "peerDependencies": {
    "axios": "^0.14.0"
  },
  "keywords": [
    "axios",
    "status",
    "request",
    "xhr"
  ],
  "gitHead": "2cd11db426dbeb8785f887947f9fcf34edb6b02a",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.3.1",
  "dist": {
    "shasum": "1a57a4c085cb99483aa0af13f65ea818aee183c8",
    "tarball": "http://registry.npmjs.org/axios-status/-/axios-status-0.0.12.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-08-30T12:45:18.147Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-08-30T12:56:43.409Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-08-30T13:07:00.942Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-08-30T13:08:40.680Z"
    },
    {
      "number": "0.0.5",
      "date": "2016-08-30T13:15:16.315Z"
    },
    {
      "number": "0.0.6",
      "date": "2016-08-31T08:12:18.091Z"
    },
    {
      "number": "0.0.7",
      "date": "2016-08-31T08:16:49.481Z"
    },
    {
      "number": "0.0.8",
      "date": "2016-08-31T12:26:17.640Z"
    },
    {
      "number": "0.0.9",
      "date": "2016-08-31T12:36:18.731Z"
    },
    {
      "number": "0.0.10",
      "date": "2016-09-06T13:58:05.290Z"
    },
    {
      "number": "0.0.11",
      "date": "2016-09-06T14:05:23.541Z"
    },
    {
      "number": "0.0.12",
      "date": "2016-09-13T07:39:46.402Z"
    }
  ],
  "created": "2016-08-30T12:45:18.147Z",
  "modified": "2016-09-13T07:39:46.402Z",
  "lastPublisher": {
    "name": "tomaash",
    "email": "tomas.holas@gmail.com"
  },
  "owners": [
    {
      "name": "tomaash",
      "email": "tomas.holas@gmail.com"
    }
  ],
  "readme": "# Network requests status tracking for Axios\n\nThis package can be used to trace status of all Axios requests for the purpose of application-wide progress indicator\n\n## Installation:\n\n`npm install axios-status --save`\n\n## Usage:\n\nFirst, create a new instance of AxiosStatus, and register your axios instances with it. You can provide following options to constructor\n\n```js\nconst axiosStatus = new AxiosStatus({\n  timeout: 20, // default 10\n  autoRetry: true // default false\n})\n\naxiosStatus.register(axios)\naxiosStatus.register(mySpecialAxiosInstance)\n```\n\nThe `autoRetry` options specifies if `axiosStatus` should auto retry all failed requests after given `timeout` (seconds)\n\nThen, you can subscribe on `AxiosStatus` events to be able to show them in UI. \n\n* The `busy` event has values of `true / false` and signals that there are XHR requests in progress\n* The `offline` event has values of `true / false` and signals that request failed because network is temporariy down\n* The `timer` event emits a number that signals seconds to next auto-retry\n\n\n```js\naxiosStatus.on('busy', (val) => this.loadingProgress = val)\naxiosStatus.on('offline', (val) => this.disconnected = val)\naxiosStatus.on('timer', (val) => this.secondsToReconnect = val)\n```\n\nTo be able to correctly run a callback on auto-retry, you need to use `axiosStatus.request`. It supports all axios request options, plus `success` callback, `error` callback, and `instance` to specify axios instance on which this request should be run. \n\n```js\naxiosStatus.request({\n  instance: mySpecialAxiosInstance,\t\n  method: 'get',\n  url: API_URL + '/me',\n  success: (res) => {\n    this.user = res.data\n  },\n  error: (err) => {\n  \tthrow err\n  }\n})\n```\n\nTo retry manually, you can just call `axiosStatus.retry()` to retry all calls initiated when offline\n"
}