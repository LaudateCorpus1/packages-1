{
  "name": "new-core",
  "description": "create a new node distribution as easy as duct-taping things to it",
  "version": "0.0.0",
  "homepage": "https://github.com/dominictarr/new-core",
  "repository": {
    "user": "dominictarr",
    "repo": "new-core",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/dominictarr/new-core/tarball/master",
    "clone_url": "https://github.com/dominictarr/new-core",
    "https_url": "https://github.com/dominictarr/new-core",
    "travis_url": "https://travis-ci.org/dominictarr/new-core",
    "zip_url": "https://github.com/dominictarr/new-core/archive/master.zip",
    "api_url": "https://api.github.com/repos/dominictarr/new-core"
  },
  "dependencies": {},
  "devDependencies": {
    "pull-stream": "^3.4.5"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "'Dominic Tarr'",
    "email": "dominic.tarr@gmail.com",
    "url": "dominictarr.com"
  },
  "license": "MIT",
  "gitHead": "117d63ace98130e4bebae93955c4a73ba784604d",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.4.0",
  "dist": {
    "shasum": "3b53201e58c7a7c84415516c58022a18cf09a0b6",
    "tarball": "http://registry.npmjs.org/new-core/-/new-core-0.0.0.tgz"
  },
  "versions": [
    {
      "number": "0.0.0",
      "date": "2016-09-06T09:17:00.116Z"
    }
  ],
  "created": "2016-09-06T09:17:00.116Z",
  "modified": "2016-09-06T09:17:00.116Z",
  "lastPublisher": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "owners": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "readme": "# new-core\n\ngive node a new core.\n\nThis module makes it easy to create an alternative distribution of node with different core modules.\nVia a few carefully placed hacks in node's module system, you can now make a node executable\nwhich now comes shipped with extra modules which are always available,\nas `fs` or `net` or `http` currently are.\n\nLet be clear, I wish I didn't need to do this, but npm is just not reliable or secure enough\n(especially for binary addons) to distribute the kind of software I am making\n(cryptographically-secure decentralized databases) but this approach allows me to create\na stable core that includes the C-touching bits (and it rarely changes, that is the point of core)\nand then have a rapidly changing javascript layer.\n\n## example\n\n``` js\n#! /usr/bin/env node\n\n//shim some binary modules, which are useful for p2p\nrequire('new-core')({\n  level: require('level'),\n  chloride: require('chloride'),\n  utp: require('utp-native'),\n  webrtc: require('webrtc'),\n})\n\n//and use the following boiler-plate to run a file\n\n//mutate the argv, so that it looks like the current script is a real executable.\nprocess.argv.splice(0, 3, 'new_core', require('path').resolve(process.argv[2]))\n\n//and execPath...\nprocess.execPath = __filename\n\n//then call run main, to execute the file\nrequire('module').runMain()\n```\n\nnow you can publish that on npm (useful for dev)\nto make a bundle that is an executable,\nmy plan is to use electron, since there are already tools to bundle that,\nand we are using electron for the UI anyway.\n\n## other ideas\n\nyou could also use this to _turn off_ node core,\nand make a coreless node from node.\nsee also [nucelus](http://github.com/creationix/nucleus)\nand [nojs](http://github.com/chrisdickinson/nojs/)\n\n## License\n\nMIT\n\n\n\n\n"
}