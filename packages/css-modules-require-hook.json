{
  "name": "css-modules-require-hook",
  "version": "4.0.5",
  "description": "A require hook to compile CSS Modules on the fly",
  "main": "lib/index.js",
  "engines": {
    "node": ">=0.12"
  },
  "scripts": {
    "build": "babel lib --out-dir lib && babel preset.js --out-file preset.js",
    "cleanup": "git reset --hard",
    "prepublish": "in-publish && npm run -s build || in-install",
    "publish": "in-publish && npm run -s cleanup || in-install",
    "test": "npm run test:babel",
    "test:babel": "NODE_PATH=$(pwd)/test/tokens/node_modules $npm_package_scripts_test_unit --compilers js:babel-register",
    "test:coverage": "NODE_PATH=$(pwd)/test/tokens/node_modules babel-node --presets es2015 `npm bin`/isparta cover --report text --report html `npm bin`/_mocha -- --require test/setup.js --ui tdd test/*/*.js",
    "test:node": "NODE_PATH=$(pwd)/test/tokens/node_modules $npm_package_scripts_test_unit --use_strict",
    "test:watch": "NODE_PATH=$(pwd)/test/tokens/node_modules $npm_package_scripts_test_unit --watch --use_strict",
    "test:unit": "mocha --require test/setup.js --ui tdd test/*/*.js"
  },
  "repository": {
    "user": "css-modules",
    "repo": "css-modules-require-hook",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/css-modules/css-modules-require-hook/tarball/master",
    "clone_url": "https://github.com/css-modules/css-modules-require-hook",
    "https_url": "https://github.com/css-modules/css-modules-require-hook",
    "travis_url": "https://travis-ci.org/css-modules/css-modules-require-hook",
    "zip_url": "https://github.com/css-modules/css-modules-require-hook/archive/master.zip",
    "api_url": "https://api.github.com/repos/css-modules/css-modules-require-hook"
  },
  "keywords": [
    "css-modules",
    "require",
    "hook"
  ],
  "author": {
    "name": "Alexey Litvinov",
    "email": "iamhoneyboy@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/css-modules/css-modules-require-hook",
  "pre-commit": [],
  "dependencies": {
    "debug": "^2.2.0",
    "generic-names": "^1.0.1",
    "glob-to-regexp": "^0.1.0",
    "icss-replace-symbols": "^1.0.2",
    "in-publish": "^2.0.0",
    "lodash": "^4.3.0",
    "postcss": "^5.0.19",
    "postcss-modules-extract-imports": "^1.0.0",
    "postcss-modules-local-by-default": "^1.0.1",
    "postcss-modules-parser": "^1.1.0",
    "postcss-modules-scope": "^1.0.0",
    "postcss-modules-values": "^1.1.1",
    "seekout": "^1.0.1"
  },
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-preset-es2015": "^6.5.0",
    "babel-register": "^6.5.2",
    "isparta": "^4.0.0",
    "mocha": "^2.4.5",
    "postcss-less": "^0.2.0",
    "sinon": "^1.17.3"
  },
  "gitHead": "18234e9427825a88ffb12e6799eeba268041781d",
  "_npmVersion": "3.9.0",
  "_nodeVersion": "6.6.0",
  "dist": {
    "shasum": "10ffb3161bd7518b25ba50cc65a940f26a1cc39d",
    "tarball": "http://registry.npmjs.org/css-modules-require-hook/-/css-modules-require-hook-4.0.5.tgz"
  },
  "stars": 3,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-08-05T20:38:38.896Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-08-09T17:18:05.813Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-08-09T19:01:40.600Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-08-12T23:22:47.770Z"
    },
    {
      "number": "1.0.4",
      "date": "2015-08-28T21:37:20.250Z"
    },
    {
      "number": "1.0.5",
      "date": "2015-09-03T19:14:42.968Z"
    },
    {
      "number": "1.0.6",
      "date": "2015-09-10T20:40:46.229Z"
    },
    {
      "number": "1.0.7",
      "date": "2015-09-11T19:00:48.708Z"
    },
    {
      "number": "1.0.8",
      "date": "2015-09-14T18:50:27.732Z"
    },
    {
      "number": "1.0.9",
      "date": "2015-09-29T07:46:24.358Z"
    },
    {
      "number": "1.0.10",
      "date": "2015-10-05T19:48:33.270Z"
    },
    {
      "number": "1.0.11",
      "date": "2015-10-12T19:12:09.972Z"
    },
    {
      "number": "2.0.0-beta",
      "date": "2015-10-22T09:21:09.452Z"
    },
    {
      "number": "2.0.0-beta2",
      "date": "2015-11-01T12:11:02.570Z"
    },
    {
      "number": "2.0.0",
      "date": "2015-11-02T00:04:20.921Z"
    },
    {
      "number": "2.0.1",
      "date": "2015-11-02T19:23:33.770Z"
    },
    {
      "number": "2.0.2",
      "date": "2015-11-03T22:58:43.357Z"
    },
    {
      "number": "2.0.3",
      "date": "2015-11-24T22:24:27.088Z"
    },
    {
      "number": "2.0.4",
      "date": "2015-11-25T16:51:06.318Z"
    },
    {
      "number": "2.1.0",
      "date": "2015-11-28T18:01:08.761Z"
    },
    {
      "number": "2.1.1",
      "date": "2016-02-22T13:33:44.633Z"
    },
    {
      "number": "3.0.0-beta",
      "date": "2016-02-23T08:50:08.720Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-02-24T21:50:45.875Z"
    },
    {
      "number": "4.0.0",
      "date": "2016-03-07T09:09:57.034Z"
    },
    {
      "number": "4.0.1",
      "date": "2016-05-29T09:46:54.006Z"
    },
    {
      "number": "4.0.2",
      "date": "2016-08-18T14:10:17.386Z"
    },
    {
      "number": "4.0.3",
      "date": "2016-09-20T14:02:29.729Z"
    },
    {
      "number": "4.0.4",
      "date": "2016-10-03T05:20:43.169Z"
    },
    {
      "number": "4.0.5",
      "date": "2016-10-03T05:27:27.616Z"
    }
  ],
  "created": "2015-08-05T20:38:38.896Z",
  "modified": "2016-10-19T16:58:49.904Z",
  "lastPublisher": {
    "name": "sullenor",
    "email": "iamhoneyboy@gmail.com"
  },
  "owners": [
    {
      "name": "sullenor",
      "email": "iamhoneyboy@gmail.com"
    }
  ],
  "readme": "css-modules-require-hook\n========================\n\nThe require hook compiles [CSS Modules](https://github.com/css-modules/css-modules) in runtime. This is similar to Babel's [babel/register](https://babeljs.io/docs/usage/require/). See the example: [demo](demo).\n\n## What is CSS Modules\n\nA **CSS Module** is a CSS file in which all class names and animation names are scoped locally by default. Learn more in the article [CSS Modules - Welcome to the Future](http://glenmaddern.com/articles/css-modules) by Glen&nbsp;Maddern.\n\n## Features\n\nCompiling in runtime, [universal](https://medium.com/@mjackson/universal-javascript-4761051b7ae9) usage.\n\n\n## Requirements\n\nTo use this tool we require [Node.js v0.12.x](https://github.com/nodejs/node) (or higher).\n\n## Installation\n\n```bash\n$ npm i css-modules-require-hook\n```\n\n## Usage\n\nNow, there are two ways to attach hook: manually or using preset file.\n\nThe first one allows you to pass options manually after module was required. Example:\n\n```javascript\nconst hook = require('css-modules-require-hook');\n\nhook({\n  generateScopedName: '[name]__[local]___[hash:base64:5]',\n});\n\n// const styles = require('./icon.css');\n```\n\nThe second one allows you to move options to the separate file `cmrh.conf.js`. Config file should be located in the same directory where executor is or in its ancestor directories. In that case hook will be attached right after the `css-modules-require-hook/preset` module will be required. Example:\n\n```javascript\n// cmrh.conf.js\nmodule.exports = {\n  generateScopedName: '[name]__[local]___[hash:base64:5]',\n};\n```\n\n```javascript\nrequire('css-modules-require-hook/preset');\n\n// const styles = require('./icon.css');\n```\n\n### Development mode\n\nUsually, Node.js caches all the `require` calls by default. In order to invalidate cache for the purpose of development you should set the environment variable `NODE_ENV` to `development`. For example:\n\n```bash\n$ NODE_ENV=development node server.js\n```\n\nStill you can use `devMode` option (see below) to override behavior which is imposed by environment variable.\n\n### Adding custom PostCSS plugins\n\n```javascript\nvar hook = require('css-modules-require-hook');\nvar cssnext = require('cssnext');\n\nhook({\n  prepend: [\n    // adding CSS Next plugin\n    cssnext(),\n  ],\n});\n```\n\n### Specify custom pattern to build generic names\n\n```javascript\nvar hook = require('css-modules-require-hook');\n\nhook({\n  generateScopedName: '[name]__[local]___[hash:base64:5]',\n});\n```\n\n### Using Stylus as a preprocessor\n\n```javascript\nvar hook = require('css-modules-require-hook');\nvar stylus = require('stylus');\n\nhook({\n  extensions: ['.styl'],\n  preprocessCss: function (css, filename) {\n    return stylus(css)\n      .set('filename', filename)\n      .render();\n  },\n});\n\n// var styles = require('./demo.styl');\n```\n\n## Tuning (options)\n\nTo adjust the require hook you need to provide params to the exported function.\n\n```javascript\nvar hook = require('css-modules-require-hook');\n\nhook({\n  // append: [],\n  // generateScopedName: function () {},\n  // or any other options\n  // see the list below\n});\n```\n\n### `devMode` boolean\n\nHelps you to invalidate cache of all `require` calls. Usually used for the development purpose. Also overrides behavior, imposed by `NODE_ENV` environment variable. For example:\n\n```javascript\nhook({\n  devMode: false,\n});\n```\n\n### `extensions` array\n\nAttach the require hook to additional file extensions (for example `['.scss']`).\n\n### `ignore` function|regex|string\n\nProvides possibility to exclude particular files from processing. Supports glob and regular expressions syntax. Also you may provide custom function.\n\n### `preprocessCss` function\n\nIn rare cases you may want to precompile styles, before they will be passed to the PostCSS pipeline. You should use **synchronous** transformations, since `require` function is synchronous.\n\n```javascript\nhook({\n  /**\n   * @param  {string} css\n   * @param  {string} filepath Absolute path to the file\n   * @return {string}\n   */\n  preprocessCss: function (css, filepath) {\n    return css;\n  }\n});\n```\n\n### `processCss` function\n\nIn rare cases you may want to get compiled styles in runtime, so providing this option helps.\n\n```javascript\nhook({\n  /**\n   * @param  {string} css\n   * @param  {string} filepath Absolute path to the file\n   */\n  processCss: function (css, filepath) { /* */ }\n});\n```\n\n### `processorOpts` object\n\nProvides possibility to pass custom options to the [LazyResult instance](https://github.com/postcss/postcss/blob/master/docs/api.md#processorprocesscss-opts). It can be usefull if you want to set the custom parser, for example: [postcss-less](https://github.com/gilt/postcss-less).\n\n```javascript\nconst hook = require('css-modules-require-hook');\nconst lessParser = require('postcss-less').parse;\n\nhook({\n  extensions: '.less',\n  processorOpts: {parser: lessParser},\n});\n```\n\n### `camelCase boolean`\n\nCamelizes exported class names. Similar to [css-loader?camelCase](https://github.com/webpack/css-loader#camel-case).\n\n### `append` array\n\nAppends custom plugins to the end of the PostCSS pipeline. Since the `require` function is synchronous, you should provide synchronous plugins only.\n\n### `prepend` array\n\nPrepends custom plugins to the beginning of the PostCSS pipeline. Since the `require` function is synchronous, you should provide synchronous plugins only.\n\n### `use` array\n\nProvides the full list of PostCSS plugins to the pipeline. Providing this cancels `append`, `prepend`, `createImportedName`, `generateScopedName` options. Synchronous plugins only.\n\n### `createImportedName` function\n\nShort alias for the [postcss-modules-extract-imports](https://github.com/css-modules/postcss-modules-extract-imports) plugin's `createImportedName` option.\n\n### `generateScopedName` string|function\n\nShort alias for the [postcss-modules-scope](https://github.com/css-modules/postcss-modules-scope) plugin's option. Helps you to specify the custom way to build generic names for the class selectors.\nYou may also use a string pattern similar to the webpack's [css-loader](https://github.com/webpack/css-loader#local-scope).\n\n```javascript\nhook({\n  generateScopedName: '[name]__[local]___[hash:base64:5]'\n});\n```\n\nor\n\n```javascript\nhook({\n  /**\n   * @param  {string} name     Usually a class name\n   * @param  {string} filepath\n   * @param  {string} css\n   * @return {string}\n   */\n  generateScopedName: function (name, filepath, css) {\n    return name;\n  }\n});\n```\n\n### `hashPrefix` string\n\nShort alias for the [generic-names](https://github.com/css-modules/generic-names) helper option.\nProvides additional hash uniqueness. Might be useful for projects with several stylesheets sharing a same name.\n\n### `mode` string\n\nShort alias for the [postcss-modules-local-by-default](https://github.com/css-modules/postcss-modules-local-by-default) plugin's option.\n\n### `rootDir` string\n\nProvides absolute path to the project directory. Providing this will result in better generated class names. It can be obligatory, if you run require hook and build tools (like [css-modulesify](https://github.com/css-modules/css-modulesify)) from different working directories.\n\n\n## Debugging\n\n[debug](https://www.npmjs.com/package/debug) package is used for debugging. So to turn it on simply specify the **DEBUG** environment variable:\n- `DEBUG=css-modules:fetch` &mdash; to see resolved paths to the files.\n- `DEBUG=css-modules:preset` &mdash; to see whether config was found or not.\n- `DEBUG=css-modules:setup` &mdash; to see the new options list.\n- `DEBUG=css-modules:*` &mdash; to see everything.\n\n## Links\n\n- Electron support: [css-modules-electron](https://github.com/KenPowers/css-modules-electron)\n\n## License\n\n> The MIT License\n"
}