{
  "name": "java_process",
  "version": "0.1.0-9",
  "description": "Node to Java Ipc using stdin, stdout and stderr, using a small and simple protocol allowing node to interact with java",
  "main": "dist/java_process.js",
  "typescript": {
    "main": "src/java_process.ts"
  },
  "scripts": {
    "build": "tsc",
    "jasmine": "jasmine",
    "test": "npm run build && istanbul cover --include-all-sources jasmine  && npm run remap-cov",
    "build_test": "npm run build && npm run test",
    "covupdate": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "codeclimate": "codeclimate-test-reporter < coverage/lcov.info",
    "remap-cov": "node remap-cov.js"
  },
  "author": {
    "name": "Abner Oliveira"
  },
  "license": "MIT",
  "dependencies": {
    "shelljs": "^0.6.0"
  },
  "devDependencies": {
    "codeclimate-test-reporter": "^0.3.1",
    "codecov": "^1.0.1",
    "coveralls": "^2.11.6",
    "istanbul": "^0.4.2",
    "jasmine": "^2.4.1",
    "jasmine-node": "^1.14.5",
    "remap-istanbul": "^0.5.1",
    "ts-node": "^0.5.5",
    "typescript": "^1.7.5",
    "typings": "^0.6.6"
  },
  "gitHead": "a80f466463cbd8e25122e956a1433bd2f4201be5",
  "_npmVersion": "3.3.12",
  "_nodeVersion": "5.1.1",
  "dist": {
    "shasum": "1c9173b7af31e0136598d1537797b7d5df1f7ae8",
    "tarball": "http://registry.npmjs.org/java_process/-/java_process-0.1.0-9.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.1.0-3",
      "date": "2016-02-10T06:32:46.499Z"
    },
    {
      "number": "0.1.0-4",
      "date": "2016-02-10T06:56:48.641Z"
    },
    {
      "number": "0.1.0-5",
      "date": "2016-02-10T07:01:41.185Z"
    },
    {
      "number": "0.1.0-6",
      "date": "2016-02-10T07:46:45.696Z"
    },
    {
      "number": "0.1.0-7",
      "date": "2016-02-10T08:05:32.280Z"
    },
    {
      "number": "0.1.0-8",
      "date": "2016-02-10T10:52:21.459Z"
    },
    {
      "number": "0.1.0-9",
      "date": "2016-02-10T10:59:11.153Z"
    }
  ],
  "created": "2016-02-10T06:32:46.499Z",
  "modified": "2016-02-10T10:59:11.153Z",
  "lastPublisher": {
    "name": "abneroliveira",
    "email": "abner.silva@gmail.com"
  },
  "owners": [
    {
      "name": "abneroliveira",
      "email": "abner.silva@gmail.com"
    }
  ],
  "readme": "# java-process\n\n[![Build Status](https://travis-ci.org/abner/java-process.svg?branch=master)](https://travis-ci.org/abner/java-process) \n[![Coverage Status](https://coveralls.io/repos/github/abner/java-process/badge.svg?branch=master)](https://coveralls.io/github/abner/java-process?branch=master) \n[![Code Climate](https://codeclimate.com/github/abner/java-process/badges/gpa.svg)](https://codeclimate.com/github/abner/java-process) \n[![Test Coverage](https://codeclimate.com/github/abner/java-process/badges/coverage.svg)](https://codeclimate.com/github/abner/java-process/coverage)\n\nA node module which provides a class JavaProcess which allow to spawn a java proccess within Node and interact with this java process\nthrough the stdin, stderr and stdout.\n\nI personally use this idea to allow a simple and easy integration from NodeJs to Java. \n\nOne of my use case are like this i provide some jar (all-in-one \"one-jar\" or \"fatjar\") app which receives inputs from stdin (System.in), \ndo some task, and then send the response through the stdout (System.out).\n\nWhy to use this approach? In my case i was developing using Electron (node+webkit Desktop solution) and have some needs to provide features related to digital signature\nusing Smart Token. So i already had this solution in Java supporting multiple Token drives. Off course i would provide this from Java to Node\nthrough a Http Service or Socket, but that in some Operating Systems (now Windows i'm talking about you :|) i would face some\nproblems because of firewall blocking and then relying on user to allow the communication. So for this particular user case a interprocess\ncommunication with a child process appears to be a good and simple solution. So far, at least :D\n\n\nObvisously, the java runtime is required, but there is no requirement tied to specific java version. \n\nSo much talk until now, let's go see java_process in action:\n\n\n``` js\n\nvar java_process = require(\"./java_process\");\n\nvar jp = new java_process.config('someApp.jar', 'someArg=1', function() {\n  jp.on('stdout', function(data) {\n    console.log(\"Some message java sent through System.out: \", String(data));\n  });\n  \n  jp.writeDataToProcess('Some message to input to java process');\n});\n```\n\n\n"
}