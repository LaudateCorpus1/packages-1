{
  "name": "hpgl",
  "version": "0.6.0-alpha.4",
  "description": "A Node.js library to communicate with HPGL-compatible plotters and printers.",
  "author": {
    "name": "Jean-Philippe Côté"
  },
  "main": "hpgl.js",
  "repository": {
    "user": "cotejp",
    "repo": "hpgl",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/cotejp/hpgl/tarball/master",
    "clone_url": "https://github.com/cotejp/hpgl",
    "https_url": "https://github.com/cotejp/hpgl",
    "travis_url": "https://travis-ci.org/cotejp/hpgl",
    "zip_url": "https://github.com/cotejp/hpgl/archive/master.zip",
    "api_url": "https://api.github.com/repos/cotejp/hpgl"
  },
  "keywords": [
    "hpgl",
    "hp-gl",
    "plotter",
    "printer",
    "pen plotter"
  ],
  "homepage": "https://github.com/cotejp/hpgl",
  "license": "MIT",
  "devDependencies": {
    "docdash": "^0.4.0",
    "grunt": "^1.0.1",
    "grunt-bumpup": "^0.6.3",
    "grunt-contrib-concat": "^1.0.1",
    "grunt-gh-pages": "^2.0.0",
    "grunt-git": "^1.0.1",
    "grunt-jsdoc": "^2.1.0",
    "grunt-release": "^0.14.0"
  },
  "gitHead": "0377261de085dea0d0f8c65e68e3d69cb69d6cd0",
  "scripts": {},
  "_npmVersion": "3.10.8",
  "_nodeVersion": "6.9.1",
  "dist": {
    "shasum": "93cec0c816825294fae94ccfe13427ed742db8f6",
    "tarball": "http://registry.npmjs.org/hpgl/-/hpgl-0.6.0-alpha.4.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.5.0-alpha.5",
      "date": "2016-10-31T20:04:27.912Z"
    },
    {
      "number": "0.5.0-alpha.6",
      "date": "2016-11-01T01:25:11.837Z"
    },
    {
      "number": "0.5.0-alpha.7",
      "date": "2016-11-01T19:57:48.604Z"
    },
    {
      "number": "0.5.0-alpha.8",
      "date": "2016-11-02T01:13:34.004Z"
    },
    {
      "number": "0.5.0-alpha.9",
      "date": "2016-11-03T03:19:01.280Z"
    },
    {
      "number": "0.5.0-alpha.10",
      "date": "2016-11-03T03:19:19.557Z"
    },
    {
      "number": "0.5.0-alpha.11",
      "date": "2016-11-05T20:16:21.272Z"
    },
    {
      "number": "0.6.0-alpha.1",
      "date": "2016-11-06T21:53:19.988Z"
    },
    {
      "number": "0.6.0-alpha.2",
      "date": "2016-11-07T20:55:39.759Z"
    },
    {
      "number": "0.6.0-alpha.3",
      "date": "2016-11-08T01:57:27.829Z"
    },
    {
      "number": "0.6.0-alpha.4",
      "date": "2016-11-08T22:48:14.108Z"
    }
  ],
  "created": "2016-10-31T20:04:27.912Z",
  "modified": "2016-11-08T22:48:14.108Z",
  "lastPublisher": {
    "name": "jpcote",
    "email": "jp@cote.cc"
  },
  "owners": [
    {
      "name": "jpcote",
      "email": "jp@cote.cc"
    }
  ],
  "readme": "# hpgl\n**A Node.js library to control HPGL-compatible plotters**\n\n[![npm](https://img.shields.io/npm/v/hpgl.svg)](https://www.npmjs.com/package/hpgl)\n[![npm](https://img.shields.io/npm/dt/hpgl.svg)](https://www.npmjs.com/package/hpgl)\n[![Beerpay](https://beerpay.io/cotejp/hpgl/badge.svg?style=flat)](https://beerpay.io/cotejp/hpgl) \n\n### About\n\nThe `hpgl` library makes it possible to interact with plotters that support the *Hewlett-Packard \nGraphics Language* (a.k.a. **hpgl**). This language is the *de facto* standard for most plotters. \n\n**Warning: This library is still in early stages of development. It should not be used in \nproduction.**\n\n### Compatibility\n\nThis library relies on external modules for serial communication. To use it in a pure Node.js, \nenvironment, you will need to install and use the \n[serialport](https://www.npmjs.com/package/serialport) module. If you want to use this library \ninside [Chrome Apps](https://developer.chrome.com/apps/about_apps) or [NW.js](http://nwjs.io/)\napplications, you will need the \n[browser-serialport](https://www.npmjs.com/package/browser-serialport) module instead. \n\n> *Note: it is possible to use `node-serialport` within NW.js and Electron projects but it needs to \n> be specifically recompiled for those environment.*\n\nSo far, the library has only beed tested with an \n[HP 7475a plotter](http://hpmuseum.net/display_item.php?hw=74). If you have success with other makes\nor models, [let me know](https://twitter.com/jpcote). Beware that some HP plotters are only equipped \nwith a proprietary HPIB or GPIB interface. To use this library, your plotter must have a **serial**\ninterface (RS-232-C).\n\n### Coordinate Sytem\n\nThe plotting coordinate system is anchored in the top-left corner, just like a computer screen. \nThis means positive `x` goes right and positive `y` goes down. By default, plotters usually work \ndifferently, but I find it easier to stick with the computer screen standard.\n\n### Getting Started\n\nTo get started, you will need a few pieces of hardware:\n\n- HPGL-compatible plotter with a serial interface;\n- USB-to-Serial adapter (unless your computer has a serial port);\n- Male DB-25 to female DB-9 cable (a.k.a. null modem cable);\n- Pens that fit your plotter;\n- Paper.\n\nYour plotter needs to be set to a line speed of 9600 baud with \n[8-N-1](https://en.wikipedia.org/wiki/8-N-1) settings. Chances are high this is already the case. If\nnot, you may need to adjust some dip switches on your device. Refer to the manufacturers's \ndocumentation.\n\n### Example\n\nThe first thing you need to do to get plotting is instantiate the object used for serial \ncommunication. If you are working on a Node.js project using the `serialport` module, this is how \nyou would do it:\n\n```javascript\n// Import the 'serialport' module and instantiate it. Do not forget to set 'autoOpen' to false in \n// the options.\nconst SerialPort = require(\"serialport\");\nvar transport = new SerialPort(\"/dev/tty.usbserial\", {autoOpen: false});\n\n```\n\nIf you are working on a Chrome or NW.js application, the procedure is slightly different:\n\n```javascript\n// Import the 'browser-serialport' module and instantiate it. Pass 'false' as the third parameter of\n// the SerialPort constructor so no automatic connection attempt is made.\nconst SerialPort = require(\"browser-serialport\").SerialPort;\nvar transport = new SerialPort(\"/dev/tty.usbserial\", {}, false);\n```\n\nOnce the `transport` variable is ready, the remainining of the code is exactly the same no matter\nwhich transport you use. For example, here is the code necessary to draw \"Hello, World!\".\n\n```javascript\n\n// Import the 'Plotter' class and instantiate it\nconst Plotter = require(\"hpgl\").Plotter;\nvar plotter = new Plotter();\n\n// Connect the device and add a callback to draw some text.\nplotter.connect(transport, {}, function(error) {\n\n  if (error) {\n    console.log(error);\n    return;\n  }\n\n  this\n    .moveTo(1, 1)\n    .drawText(\"Hello, World!\");\n\n});\n```\n\nAs you can see above, you first need to create a `Plotter` object and call its `connect()` method \npassing in the `transport` variable, some optionnal settings and a function to trigger once the \ndevice is ready. Note that `this` is bound to the `Plotter` object and that plotting methods are \nchainable.\n\n### Documentation\n\nI will try to maintain an up-to-date [API documentation](https://cotejp.github.io/hpgl/). A good \nplace to start is the [Plotter class](https://cotejp.github.io/hpgl/Plotter.html). If you find \nerrors, please [file an issue](https://github.com/cotejp/hpgl/issues) on GitHub.\n\n## Support the Project\n\nIf you find this library useful, you can **[buy me a drink](https://beerpay.io/cotejp/hpgl)** as a \ntoken of your appreciation. This would automatically make you even more awesome than you already \nare!\n\n[![Beerpay](https://beerpay.io/cotejp/hpgl/badge.svg?style=beer-square)](https://beerpay.io/cotejp/hpgl)\n\nCheers!\n"
}