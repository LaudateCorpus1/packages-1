{
  "name": "shadertoy-export",
  "version": "0.0.1",
  "description": "render ShaderToy demos to PNG",
  "main": "index.js",
  "license": "MIT",
  "author": {
    "name": "Matt DesLauriers",
    "email": "dave.des@gmail.com",
    "url": "https://github.com/mattdesl"
  },
  "dependencies": {
    "a-big-triangle": "^1.0.2",
    "canvas-loop": "^1.0.6",
    "console-redirect": "^1.0.0",
    "electron-prebuilt": "^0.34.3",
    "get-canvas-context": "^1.0.1",
    "gl-fbo": "^2.0.5",
    "gl-pixel-stream": "^1.0.2",
    "gl-shader": "^4.0.5",
    "gl-texture2d": "^2.0.10",
    "img": "^1.0.0",
    "keycode": "^2.1.0",
    "minimist": "^1.2.0",
    "new-array": "^1.0.0",
    "object-assign": "^4.0.1",
    "path-is-absolute": "^1.0.0",
    "png-stream": "^1.0.4",
    "right-now": "^1.0.0",
    "stdout-stream": "^1.4.0",
    "term-color": "^1.0.1",
    "touches": "^1.2.0",
    "xhr-request": "^1.0.1"
  },
  "devDependencies": {
    "browserify": "^12.0.1"
  },
  "scripts": {
    "test": "npm run prepublish && npm run test-prod",
    "test-prod": "./bin/index.js -f --api --size=512,256 -o images/1.png XslGRr",
    "prepublish": "NODE_ENV=development node lib/build.js",
    "start": "node server.js"
  },
  "keywords": [
    "shadertoy",
    "toy",
    "shader",
    "webgl",
    "glsl",
    "gl",
    "shaders",
    "frag",
    "fragment"
  ],
  "repository": {
    "user": "mattdesl",
    "repo": "shadertoy-export",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mattdesl/shadertoy-export/tarball/master",
    "clone_url": "https://github.com/mattdesl/shadertoy-export",
    "https_url": "https://github.com/mattdesl/shadertoy-export",
    "travis_url": "https://travis-ci.org/mattdesl/shadertoy-export",
    "zip_url": "https://github.com/mattdesl/shadertoy-export/archive/master.zip",
    "api_url": "https://api.github.com/repos/mattdesl/shadertoy-export"
  },
  "homepage": "https://github.com/mattdesl/shadertoy-export",
  "bin": {
    "shadertoy-export": "./bin/index.js"
  },
  "gitHead": "304015859c3595a6f899c0d300f8b01d5e12c863",
  "_npmVersion": "2.14.2",
  "_nodeVersion": "4.0.0",
  "dist": {
    "shasum": "a6ba4e47a7c11255c2ffe3948f318003b12cc489",
    "tarball": "http://registry.npmjs.org/shadertoy-export/-/shadertoy-export-0.0.1.tgz"
  },
  "versions": [
    {
      "number": "0.0.0",
      "date": "2015-11-07T17:38:39.813Z"
    },
    {
      "number": "0.0.1",
      "date": "2015-12-24T03:28:03.620Z"
    }
  ],
  "created": "2015-11-07T17:38:39.813Z",
  "modified": "2015-12-24T03:28:03.620Z",
  "lastPublisher": {
    "name": "mattdesl",
    "email": "dave.des@gmail.com"
  },
  "owners": [
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    }
  ],
  "readme": "# shadertoy-export\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nA small utility for exporting ShaderToy demos to large (print-ready) PNG images. On my MacBookPro, this can export up to 10,000x10,000 px images.\n\nIt only features a small set of shaders (those set to `Public + API`) and doesn't support cube maps, video inputs, etc.\n\n**This tool is experimental and not complete.** If you want to help maintain it, let me know.\n\nSome examples:\n\n![image](http://i.imgur.com/HXcu8WP.jpg?1)\n\nA [2880x1800 wallpaper](http://i.imgur.com/F1sw16z.jpg) from [this shader](https://www.shadertoy.com/view/XtjSDK).\n\n![two](http://i.imgur.com/F1sw16z.jpg)\n\n## Install\n\nInstall the tool globally with npm.\n\n```sh\nnpm install shadertoy-export -g\n```\n\n## Command-Line Usage\n\n*More docs to follow.*\n\nBasic usage, writes the first frame to process.stdout as PNG.\n\n```sh\nshadertoy-export shader.frag [opts] > image.png\n```\n\nYou can use `--api` or `-a` to grab from the ShaderToy API, which loads demos that are saved as `Public + API`. For this, you need to specify a demo ID like `XslGRr`, or a URL like [https://www.shadertoy.com/view/XslGRr](https://www.shadertoy.com/view/XslGRr). Example:\n\n```sh\nshadertoy-export XslGRr --api > image.png\n```\n\nYou can use `--output` or `-o` instead of writing to stdout, and `--size` to render a different resolution. You can use `--wait` to wait N milliseconds before rendering a frame.\n\n```sh\nshadertoy-export XslGRr --api --output output/1.png --size 1080,768 --wait 1500\n```\n\n#### interactive mode\n\nYou can also enter interactive (GUI) mode with the `--frame` or `-f` option. This opens a window which accepts mouse input, and you can hit `Cmd + S` or `Ctrl + S` at any point to save the image to your output path.\n\n```sh\nshadertoy-export -f --api --size=512,256 -o images/1.png XslGRr\n```\n\n![gui](http://i.imgur.com/OkEKAfI.png)\n\nYou can also specify a `--scale` or `-S` option to reduce the *interactive* resolution (does not affect output). For example, `--scale=0.5` will draw the scene at half resolution.\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/mattdesl/shadertoy-export/blob/master/LICENSE.md) for details.\n"
}