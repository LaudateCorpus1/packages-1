{
  "name": "hyperlog-seed",
  "version": "1.0.2",
  "description": "seed content hashes embedded in a hyperlog",
  "main": "index.js",
  "dependencies": {
    "hyperlog-index": "^5.0.0",
    "pump": "^1.0.1",
    "subleveldown": "^2.1.0",
    "through2": "^2.0.1"
  },
  "devDependencies": {
    "hyperlog": "^4.8.0",
    "memdb": "^1.3.1",
    "parse-torrent": "^5.7.1",
    "ssb-keys": "^4.0.10"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": {
    "name": "substack"
  },
  "license": "BSD",
  "repository": {
    "user": "substack",
    "repo": "hyperlog-seed",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/substack/hyperlog-seed/tarball/master",
    "clone_url": "https://github.com/substack/hyperlog-seed",
    "https_url": "https://github.com/substack/hyperlog-seed",
    "travis_url": "https://travis-ci.org/substack/hyperlog-seed",
    "zip_url": "https://github.com/substack/hyperlog-seed/archive/master.zip",
    "api_url": "https://api.github.com/repos/substack/hyperlog-seed"
  },
  "homepage": "https://github.com/substack/hyperlog-seed#readme",
  "gitHead": "004a19215a8e4585ae1b3f9fa263193db2036cb9",
  "_npmVersion": "3.7.1",
  "_nodeVersion": "5.5.0",
  "dist": {
    "shasum": "c41825303c24fca20a87083c46bfa3a98d5ce7af",
    "tarball": "http://registry.npmjs.org/hyperlog-seed/-/hyperlog-seed-1.0.2.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-02-21T10:50:00.946Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-02-27T11:13:50.705Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-03-24T04:26:26.872Z"
    }
  ],
  "created": "2016-02-21T10:50:00.946Z",
  "modified": "2016-03-24T04:26:26.872Z",
  "lastPublisher": {
    "name": "substack",
    "email": "substack@gmail.com"
  },
  "owners": [
    {
      "name": "substack",
      "email": "substack@gmail.com"
    }
  ],
  "readme": "# hyperlog-seed\n\nseed content hashes embedded in a hyperlog\n\n# example\n\nFirst we will generate some elliptic curve keys:\n\n```\n$ node -pe \"JSON.stringify(require('ssb-keys').generate())\" > keys.json\n```\n\nNow we can seed content from stdin to webtorrent and write the magnet link to a\nswarmlog:\n\n``` js\nvar webtorrent = require('webtorrent')\nvar parseTorrent = require('parse-torrent')\nvar level = require('level')\nvar swarmlog = require('swarmlog')\n\nvar log = swarmlog({\n  keys: require('./keys.json'),\n  db: level('/tmp/webtorrent-publish.db'),\n  sodium: require('chloride'),\n  valueEncoding: 'json',\n  hubs: [ 'https://signalhub.mafintosh.com' ]\n})\n\nvar client = webtorrent()\nclient.seed([process.stdin], { name: 'test.txt' }, function (torrent) {\n  log.append({ link: torrent.magnetURI })\n  console.log(torrent.magnetURI)\n})\n```\n\nWe can now write a mirroring service to download and seed everything published\nto our swarmlog:\n\n``` js\nvar webtorrent = require('webtorrent')\nvar parseTorrent = require('parse-torrent')\nvar level = require('level')\nvar fs = require('fs')\nvar path = require('path')\nvar mkdirp = require('mkdirp')\nvar sub = require('subleveldown')\nvar swarmlog = require('swarmlog')\n\nvar db = level('/tmp/webtorrent-mirror.db')\nvar log = swarmlog({\n  id: process.argv[2],\n  db: sub(db, 'log'),\n  sodium: require('chloride'),\n  valueEncoding: 'json',\n  hubs: [ 'https://signalhub.mafintosh.com' ]\n})\n\nvar hseed = require('hyperlog-seed')\nvar seeder = hseed({\n  db: sub(db, 'seed'),\n  log: log,\n  map: function (row) {\n    if (row.link) return { type: 'put', link: row.link }\n    if (row.unlink) return { type: 'del', link: row.unlink }\n  }\n})\nvar dir = '/tmp/webtorrent'\n\nvar client = webtorrent()\n\nseeder.on('seed', function (link) {\n  console.log('SEED', link)\n  var t = parseTorrent(link)\n  var tdir = path.join(dir, t.infoHash)\n  fs.readdir(tdir, function (err, files) {\n    if (!files) client.add(link, onadd)\n    else {\n      var tfiles = files.map(function (f) { return path.join(tdir, f) })\n      client.seed(tfiles, onseed)\n    }\n  })\n  function onadd (s) {\n    var tdir = path.join(dir, t.infoHash)\n    mkdirp(tdir, function () {\n      t.files.forEach(function (file) {\n        file.createReadStream()\n          .pipe(fs.createWriteStream(path.join(tdir, t.infoHash)))\n      })\n    })\n  }\n  function onseed (s) {\n    if (s.infoHash !== t.infoHash) {\n      client.remove(s)\n      client.add(link, onadd)\n    }\n  }\n})\nseeder.on('unseed', function (link) {\n  console.log('UNSEED', link)\n  var t = parseTorrent(link)\n  for (var i = 0; i < client.torrents.length; i++) {\n    var c = client.torrents[i]\n    if (c.infoHash === t.infoHash) c.destroy()\n  }\n})\n```\n\n\nGiven the public key from our publisher, we can mirror the webtorrent magnet\nlinks it posts to its swarmlog:\n\n```\n$ json public < keys.json\nVtSrpZkaY9570yX4TQZEPDwFWkYApGt2otPsLN3Bw/0=.ed25519\n$ electron-spawn mirror.js VtSrpZkaY9570yX4TQZEPDwFWkYApGt2otPsLN3Bw/0=.ed25519\n```\n\nFinally, we can publish torrents to the swarmlog:\n\n```\n$ echo OH HI HELLO | electron-spawn publish.js\nmagnet:?xt=urn:btih:5302fe31bf355f91a47f47cea74e57652b7fa3e3&dn=test.txt&tr=udp%3A%2F%2Fexodus.desync.com%3A6969&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.internetwarriors.net%3A1337&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=wss%3A%2F%2Ftracker.btorrent.xyz&tr=wss%3A%2F%2Ftracker.openwebtorrent.com&tr=wss%3A%2F%2Ftracker.webtorrent.io\n```\n\nand download them with webtorrent elsewhere, even when the publisher is offline:\n\n```\n$ electron-spawn `which webtorrent` 'magnet:?xt=urn:btih:5302fe31bf355f91a47f47cea74e57652b7fa3e3&dn=test.txt&tr=udp%3A%2F%2Fexodus.desync.com%3A6969&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.internetwarriors.net%3A1337&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=wss%3A%2F%2Ftracker.btorrent.xyz&tr=wss%3A%2F%2Ftracker.openwebtorrent.com&tr=wss%3A%2F%2Ftracker.webtorrent.io'\n```\n\nIf you restart the mirror process, it will resume seeding torrents from the\nswarmlog feed. If you publish more torrents to the feed, these new torrents will\nalso be mirrored.\n\n# api\n\n``` js\nvar hseed = require('hyperlog-seed')\n```\n\n## var seeder = hseed(opts)\n\nCreate a new `seeder` from:\n\n* `opts.db` - a leveldb instance\n* `opts.log` - a hyperlog instance\n* `opts.map(row)` - a function mapping rows to link and unlink operations\n\nTo add a magnet link for seeding, `opts.map` should return:\n\n``` js\n{ type: 'put', link: 'magnet:...' }\n```\n\nTo remove a magnet link from seeding, `opts.map` should return:\n\n``` js\n{ type: 'put', unlink: 'magnet:...' }\n```\n\n## seeder.on('seed', function (link) {})\n\nThis event fires when the seeder should start seeding a magnet `link`.\nThis happens when a new `link` is posted to the log and when the seeder resumes\nafter a restart.\n\n## seeder.on('unseed', function (link) {})\n\nThis event fires when the seeder should stop seeding a magnet `link`.\nThis happens when the log removes `link`.\n\n# license\n\nBSD\n"
}