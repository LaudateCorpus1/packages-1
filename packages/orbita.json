{
  "name": "orbita",
  "version": "2.0.2",
  "description": "Framework for Atom/Electron with reactive windows controller and nanoservice's support",
  "main": "index.js",
  "scripts": {
    "test": "istanbul cover node_modules/jasmine/bin/jasmine.js",
    "watch:test": "nodemon --exec \"npm run test\"",
    "debug:test": "node debug node_modules/jasmine/bin/jasmine.js"
  },
  "repository": {
    "user": "arvitaly",
    "repo": "orbita",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/arvitaly/orbita/tarball/master",
    "clone_url": "https://github.com/arvitaly/orbita",
    "https_url": "https://github.com/arvitaly/orbita",
    "travis_url": "https://travis-ci.org/arvitaly/orbita",
    "zip_url": "https://github.com/arvitaly/orbita/archive/master.zip",
    "api_url": "https://api.github.com/repos/arvitaly/orbita"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "commander": "^2.9.0",
    "deep-extend": "^0.4.1",
    "electron-prebuilt": "0.36.0",
    "lodash": "^4.15.0",
    "nanoservice": "^1.0.2",
    "resolve-module-path": "0.0.2"
  },
  "bin": {
    "orbita": "./bin/bin-start.js"
  },
  "homepage": "https://github.com/arvitaly/orbita#readme",
  "devDependencies": {
    "coveralls": "^2.11.12",
    "istanbul": "^0.4.5",
    "jasmine": "2.4.1",
    "mock2": "0.0.7",
    "proxyquire": "^1.7.10"
  },
  "gitHead": "df08cee157223a2177e2822173055545612f0266",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.3.1",
  "dist": {
    "shasum": "6397fce380f8c019bba78e1e2f245e5a022fdce3",
    "tarball": "http://registry.npmjs.org/orbita/-/orbita-2.0.2.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-08-28T07:47:48.635Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-08-28T13:33:54.962Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-08-28T14:30:00.122Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-08-28T14:45:36.147Z"
    },
    {
      "number": "1.0.4",
      "date": "2016-08-28T14:48:18.237Z"
    },
    {
      "number": "1.0.5",
      "date": "2016-08-28T16:20:07.830Z"
    },
    {
      "number": "1.0.6",
      "date": "2016-08-28T16:31:59.833Z"
    },
    {
      "number": "1.0.7",
      "date": "2016-08-28T16:54:41.543Z"
    },
    {
      "number": "1.0.8",
      "date": "2016-08-28T19:16:31.364Z"
    },
    {
      "number": "1.0.9",
      "date": "2016-08-28T20:17:34.265Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-08-30T12:39:49.398Z"
    },
    {
      "number": "1.4.1",
      "date": "2016-08-30T14:26:48.667Z"
    },
    {
      "number": "1.4.2",
      "date": "2016-08-30T15:02:54.562Z"
    },
    {
      "number": "1.4.3",
      "date": "2016-08-30T16:34:26.896Z"
    },
    {
      "number": "1.4.4",
      "date": "2016-08-30T16:52:10.152Z"
    },
    {
      "number": "1.4.5",
      "date": "2016-08-30T18:47:15.064Z"
    },
    {
      "number": "1.4.7",
      "date": "2016-08-30T19:16:46.142Z"
    },
    {
      "number": "1.4.8",
      "date": "2016-08-30T19:20:03.845Z"
    },
    {
      "number": "1.4.9",
      "date": "2016-08-30T20:08:02.373Z"
    },
    {
      "number": "1.5.0",
      "date": "2016-08-30T20:30:35.079Z"
    },
    {
      "number": "1.5.1",
      "date": "2016-08-30T21:21:03.813Z"
    },
    {
      "number": "1.5.2",
      "date": "2016-08-30T21:35:09.961Z"
    },
    {
      "number": "1.5.3",
      "date": "2016-09-01T09:04:39.220Z"
    },
    {
      "number": "1.5.6",
      "date": "2016-09-01T10:49:30.402Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-09-06T01:23:16.774Z"
    },
    {
      "number": "2.0.2",
      "date": "2016-09-06T19:38:28.007Z"
    }
  ],
  "created": "2016-08-28T07:47:48.635Z",
  "modified": "2016-09-06T19:38:28.007Z",
  "lastPublisher": {
    "name": "arvitaly",
    "email": "arvitaly@list.ru"
  },
  "owners": [
    {
      "name": "arvitaly",
      "email": "arvitaly@list.ru"
    }
  ],
  "readme": "# Orbita: framework for Atom/Electron with reactive windows controller and nanoservice's support\r\n\r\n[![npm version](https://badge.fury.io/js/orbita.svg)](https://badge.fury.io/js/orbita)\r\n[![Build Status](https://travis-ci.org/arvitaly/orbita.svg?branch=master)](https://travis-ci.org/arvitaly/orbita)\r\n[![Coverage Status](https://coveralls.io/repos/github/arvitaly/orbita/badge.svg?branch=master&1)](https://coveralls.io/github/arvitaly/orbita?branch=master)\r\n\r\n# What is it?\r\n\r\nOrbita is component, like React, but for electron windows. It has `state` and method `render`. You can change state by method `setState` and if state was changed, orbita will run `render`. \r\nMethod `render` should return array of windows options, like as `id`, `url` etc.\r\nAfter calling `render` orbita compare current opened windows and result of `render` by `id`, then close old windows and create new.\r\n\r\nAlso, orbita supported nanoservice (https://github.com/arvitaly/node-nanoservice), and two transports `orbita-ipc-server` and `orbita-ipc-client`. So, you can work with many window and main process in single workflow. Every window is one nanoservice.\r\n\r\nSo,  you create orbita-component with settings for controll windows and messages, forget it, and work for bussiness logic.\r\n\r\n# Install\r\n\r\n    //First, install orbita, now works with 0.36.0 version of Electron\r\n    npm install orbita@2.0.0 -g\r\n    //start app, if not set script, orbita will find main module in package.json or just take index.js\r\n    orbita app.js\r\n\r\n# Example of usage\r\n    //app.js    \r\n    //create orbita component\r\n    module.exports =({\r\n            //initial state\r\n            state: {\r\n                test: 28,\r\n                fix: fixture1\r\n            },\r\n            //render state-->windows\r\n            render: (state) => {\r\n                return [{\r\n                    //unique id\r\n                    id: state.test == 28 ? \"w1\" : \"w2\",\r\n                    //starting url\r\n                    url: __dirname + \"/index.html\",\r\n                    //Control script, which can send start and error event                    \r\n                    control:{\r\n                        script: __dirname + \"/control.js\",\r\n                        args: {\r\n                            test: \"value\"\r\n                        }\r\n                    },                    \r\n                    //you can create many nanoservices for one window\r\n                    services:[{\r\n                        ////path to service for create nanoservice\r\n                        module: __dirname + \"/service1.js\",\r\n                        //args for creating service\r\n                        args: state.fix + state.test,\r\n                        //transports for nanoservice\r\n                        transports: {\r\n                            \"tr1\": {\r\n                                \"type\": \"orbita\",\r\n                                opts: {\r\n                                    address: \"addr1\"\r\n                                }\r\n                            }\r\n                        },\r\n                        //links for nanoservice\r\n                        links: [\r\n                            {\r\n                                type: \"in\",\r\n                                name: \"in1\",\r\n                                to: \"event2\",\r\n                                transport: \"tr1\"\r\n                            },\r\n                            {\r\n                                type: \"out\",\r\n                                name: \"out1\",\r\n                                to: \"event1\",\r\n                                transport: \"tr1\"\r\n                            }\r\n                        ]\r\n                    }]\r\n                }]\r\n            }\r\n        })\r\n        //Nanoservice in main process        \r\n        nanoservice({\r\n            in:{\r\n                ev:(data)=>{\r\n                    //data from page-service for out-link out1 connected by \"orbita\" transport\r\n                }\r\n            }\r\n        },{\r\n            transports:{\"t\":{\"type\":\"orbita\",opts:{\"address\":\"addr1\"}}}\r\n            links:[{transport:\"t\", name:\"ev\",to:\"event1\", type:\"in\"}]\r\n        })\r\n        \r\n    \r\n    Look for more examples https://github.com/arvitaly/orbita/tree/master/examples/\r\n\r\n# Tranports\r\n\r\nEvery window in orbita can use any transport by nanoservice functional (like, socket, ipc, websocket, http, etc.)\r\n"
}