{
  "name": "electron-localshortcut",
  "version": "0.6.1",
  "description": "register/unregister a keyboard shortcut locally to a BrowserWindow instance, without using a Menu",
  "repository": {
    "user": "parro-it",
    "repo": "electron-localshortcut",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/parro-it/electron-localshortcut/tarball/master",
    "clone_url": "https://github.com/parro-it/electron-localshortcut",
    "https_url": "https://github.com/parro-it/electron-localshortcut",
    "travis_url": "https://travis-ci.org/parro-it/electron-localshortcut",
    "zip_url": "https://github.com/parro-it/electron-localshortcut/archive/master.zip",
    "api_url": "https://api.github.com/repos/parro-it/electron-localshortcut"
  },
  "license": "MIT",
  "author": {
    "name": "andrea@parro.it"
  },
  "scripts": {
    "start": "electron test.js",
    "test": "xo"
  },
  "keywords": [
    "electron",
    "shortcuts",
    "browser-window"
  ],
  "files": [
    "index.js"
  ],
  "devDependencies": {
    "electron-prebuilt": "^1.2.5",
    "xo": "^0.16.0"
  },
  "xo": {
    "esnext": true,
    "envs": [
      "node",
      "browser"
    ],
    "rules": {
      "import/no-extraneous-dependencies": "off"
    }
  },
  "gitHead": "052a21b3c8572a457f656e901efe665ca0ab9059",
  "homepage": "https://github.com/parro-it/electron-localshortcut#readme",
  "_npmVersion": "2.14.9",
  "_nodeVersion": "0.12.12",
  "dist": {
    "shasum": "c4e268c38a6e42f40de5618fc906d1ed608f11aa",
    "tarball": "http://registry.npmjs.org/electron-localshortcut/-/electron-localshortcut-0.6.1.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.0.1",
      "date": "2015-11-02T17:43:08.709Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-11-03T21:00:29.954Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-11-03T21:21:07.341Z"
    },
    {
      "number": "0.2.2",
      "date": "2015-11-03T21:22:41.827Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-11-04T17:50:34.462Z"
    },
    {
      "number": "0.3.1",
      "date": "2015-11-04T18:35:16.894Z"
    },
    {
      "number": "0.3.2",
      "date": "2015-11-07T10:11:18.730Z"
    },
    {
      "number": "0.4.0",
      "date": "2015-11-13T07:43:17.506Z"
    },
    {
      "number": "0.5.0",
      "date": "2015-11-19T20:46:24.568Z"
    },
    {
      "number": "0.6.0",
      "date": "2015-11-19T21:04:21.714Z"
    },
    {
      "number": "0.6.1",
      "date": "2016-06-25T14:50:23.766Z"
    }
  ],
  "created": "2015-11-02T17:43:08.709Z",
  "modified": "2016-06-25T14:50:23.766Z",
  "lastPublisher": {
    "name": "parroit",
    "email": "andrea@parro.it"
  },
  "owners": [
    {
      "name": "parroit",
      "email": "andrea.parodi@ebansoftware.net"
    }
  ],
  "readme": "# electron-localshortcut\n\nA module to register/unregister a keyboard shortcut\nlocally to a BrowserWindow instance, without using a Menu.\n\nThis is built to circumvent [this Electron issue](https://github.com/atom/electron/issues/1334).\n\n**Note:** Since this module internally use `global-shortcut` native module, you should not use it until the `ready` event of the app module is emitted. See [electron docs](http://electron.atom.io/docs/latest/api/global-shortcut/).\n\n[![Travis Build Status](https://img.shields.io/travis/parro-it/electron-localshortcut.svg)](http://travis-ci.org/parro-it/electron-localshortcut)\n[![NPM module](https://img.shields.io/npm/v/electron-localshortcut.svg)](https://npmjs.org/package/electron-localshortcut)\n[![NPM downloads](https://img.shields.io/npm/dt/electron-localshortcut.svg)](https://npmjs.org/package/electron-localshortcut)\n\n\n## Installation\n\n```bash\nnpm install --save electron-localshortcut\n```\n\n## Usage\n\n```javascript\n  const electronLocalshortcut = require('electron-localshortcut');\n  const BrowserWindow = require('electron').BrowserWindow;\n\n  const win = new BrowserWindow();\n  win.loadUrl('https://github.com');\n  win.show();\n\n  electronLocalshortcut.register(win, 'Ctrl+A', () => {\n    console.log('You pressed ctrl & A');\n  });\n\n  electronLocalshortcut.register(win, 'Ctrl+B', () => {\n    console.log('You pressed ctrl & B');\n  });\n\n  console.log(\n    electronLocalshortcut.isRegistered(win, 'Ctrl+A')\n  );      // true\n\n  electronLocalshortcut.unregister(win, 'Ctrl+A');\n  electronLocalshortcut.unregisterAll(win);\n\n\n```\n\n## Methods\n\nThe `electron-localshortcut` module has following methods:\n\n### `register(window, accelerator, callback)`\n\n* `window` BrowserWindow instance\n* `accelerator` [Accelerator](https://github.com/atom/electron/blob/master/docs/api/accelerator.md)\n* `callback` Function\n\nRegisters a shortcut of `accelerator` on the `window` BrowserWindow instance. The `callback` is called when the registered shortcut is pressed by the user, only if `window` is focused.\n\n### `isRegistered(window, accelerator)`\n\n* `window` BrowserWindow instance\n* `accelerator` [Accelerator](https://github.com/atom/electron/blob/master/docs/api/accelerator.md)\n\nReturns `true` or `false` depending on whether the shortcut `accelerator` is\nregistered on `window`.\n\n### `unregister(window, accelerator)`\n\n* `window` BrowserWindow instance\n* `accelerator` [Accelerator](https://github.com/atom/electron/blob/master/docs/api/accelerator.md)\n\nUnregisters the shortcut of `accelerator` registered on the BrowserWindow instance.\n\n### `unregisterAll(window)`\n\n* `window` BrowserWindow instance\n\nUnregisters all of the shortcuts registered on the BrowserWindow instance.\n\n### `disableAll(window)`\n\n* `window` BrowserWindow instance\n\nDisable all of the shortcuts registered on the BrowserWindow instance.\nRegistered shortcuts no more works on the `window` instance, but the module keep a reference on them. You can reactivate them later by calling `enableAll` method on the same window instance.\n\n### `enableAll(window)`\n\n* `window` BrowserWindow instance\n\nEnable all of the shortcuts registered on the BrowserWindow instance that you had previously disabled calling `disableAll` method.\n\n\n## Global shortcuts\n\nThis set of methods allow you to manage shortcuts that work on any window of your app. They are active only when a window in the app is focused.\n\nThey differ from native [global-shortcuts](https://github.com/atom/electron/blob/master/docs/api/global-shortcut.md) because they doesn't interfere with other apps running on the same machine.\n\n### `register(accelerator, callback)`\n\n* `accelerator` [Accelerator](https://github.com/atom/electron/blob/master/docs/api/accelerator.md)\n* `callback` Function\n\nRegisters a shortcut of `accelerator` on any focused BrowserWindow instance. The `callback` is called when the registered shortcut is pressed by the user, only if a BrowserWindow is focused.\n\n### `isRegistered(accelerator)`\n\n* `accelerator` [Accelerator](https://github.com/atom/electron/blob/master/docs/api/accelerator.md)\n\nReturns `true` or `false` depending on whether the shortcut `accelerator` is registered on all focused instances. If you registered the shortcut on a particular instance, this method\nreturn false.\n\n### `unregister(accelerator)`\n\n* `accelerator` [Accelerator](https://github.com/atom/electron/blob/master/docs/api/accelerator.md)\n\nUnregisters the shortcut of `accelerator` registered on all focused instances. This method does not unregister any shortcut you\nregistered on a particular window instance.\n\n### `unregisterAll()`\n\nUnregisters all of the shortcuts registered on any focused BrowserWindow instance. This method does not unregister any shortcut you registered on a particular window instance.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Andrea Parodi\n\n\n\n"
}