{
  "name": "express-compile",
  "version": "3.0.15",
  "description": "Supporting package to compile JS and CSS in Express applications",
  "repository": {
    "user": "bullhorn",
    "repo": "express-compile",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/bullhorn/express-compile/tarball/master",
    "clone_url": "https://github.com/bullhorn/express-compile",
    "https_url": "https://github.com/bullhorn/express-compile",
    "travis_url": "https://travis-ci.org/bullhorn/express-compile",
    "zip_url": "https://github.com/bullhorn/express-compile/archive/master.zip",
    "api_url": "https://api.github.com/repos/bullhorn/express-compile"
  },
  "keywords": [
    "express",
    "babel",
    "typescript",
    "less",
    "sass",
    "scss",
    "es6"
  ],
  "contributors": [
    {
      "name": "Joshua Godi",
      "email": "joshuagodi@gmail.com"
    },
    {
      "name": "Paul Betts",
      "email": "paul@paulbetts.org"
    },
    {
      "name": "Brian Kimball",
      "email": "bvkimball@gmail.com"
    }
  ],
  "license": "MIT",
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "homepage": "https://github.com/bullhorn/express-compile",
  "scripts": {
    "doc": "esdoc -c ./esdoc.json",
    "compile": "git clean -xdf lib && babel -d lib/ src",
    "prepublish": "npm run compile && npm run doc",
    "test": "mocha --compilers js:babel-register test/*.js"
  },
  "bin": {
    "express-compile": "lib/cli.js"
  },
  "main": "lib/compiler.js",
  "dependencies": {
    "babel-polyfill": "^6.7.2",
    "btoa": "^1.1.2",
    "debug": "^2.2.0",
    "lodash": "^4.6.1",
    "lru-cache": "^4.0.0",
    "mime-types": "^2.1.10",
    "minimatch": "^3.0.0",
    "mkdirp": "^0.5.1",
    "pify": "^2.3.0",
    "rimraf": "^2.5.2",
    "yargs": "^4.3.1"
  },
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-eslint": "^5.0.0",
    "babel-plugin-transform-runtime": "^6.6.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.7.2",
    "chai": "^3.5.0",
    "chai-as-promised": "^5.2.0",
    "chalk": "^1.1.1",
    "cheerio": "^0.20.0",
    "esdoc": "^0.4.6",
    "esdoc-es7-plugin": "0.0.3",
    "esdoc-plugin-async-to-sync": "^0.5.0",
    "eslint": "^2.4.0",
    "express-compilers": "^3.0.6",
    "mocha": "^2.4.5",
    "rimraf": "^2.5.2"
  },
  "gitHead": "bb11338f65ddc4ef24456b52dfd4b265871ef4cd",
  "_npmVersion": "3.7.5",
  "_nodeVersion": "5.7.0",
  "dist": {
    "shasum": "16e97926c20dce0ee95d943f32bf009c691dbe55",
    "tarball": "http://registry.npmjs.org/express-compile/-/express-compile-3.0.15.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2015-08-10T21:56:33.853Z"
    },
    {
      "number": "0.1.0",
      "date": "2015-09-29T16:52:32.745Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-10-20T12:04:24.951Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-11-13T20:13:53.667Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-01-14T14:12:41.269Z"
    },
    {
      "number": "3.0.2",
      "date": "2016-01-25T00:19:26.031Z"
    },
    {
      "number": "3.0.3",
      "date": "2016-02-29T06:07:32.944Z"
    },
    {
      "number": "3.0.4",
      "date": "2016-02-29T06:46:30.949Z"
    },
    {
      "number": "3.0.5",
      "date": "2016-02-29T15:08:51.052Z"
    },
    {
      "number": "3.0.6",
      "date": "2016-02-29T15:41:05.022Z"
    },
    {
      "number": "3.0.7",
      "date": "2016-03-16T14:28:18.145Z"
    },
    {
      "number": "3.0.8",
      "date": "2016-03-16T14:48:35.711Z"
    },
    {
      "number": "3.0.9",
      "date": "2016-03-16T15:08:18.636Z"
    },
    {
      "number": "3.0.10",
      "date": "2016-03-17T20:24:20.023Z"
    },
    {
      "number": "3.0.11",
      "date": "2016-03-18T15:15:23.611Z"
    },
    {
      "number": "3.0.12",
      "date": "2016-03-18T16:00:11.733Z"
    },
    {
      "number": "3.0.13",
      "date": "2016-03-18T16:17:44.066Z"
    },
    {
      "number": "3.0.14",
      "date": "2016-03-18T21:03:43.886Z"
    },
    {
      "number": "3.0.15",
      "date": "2016-04-08T17:17:48.213Z"
    }
  ],
  "created": "2015-08-10T21:56:33.853Z",
  "modified": "2016-04-08T17:17:48.213Z",
  "lastPublisher": {
    "name": "jgodi",
    "email": "joshuagodi@gmail.com"
  },
  "owners": [
    {
      "name": "bvkimball",
      "email": "bvkimball@gmail.com"
    },
    {
      "name": "jgodi",
      "email": "joshuagodi@gmail.com"
    }
  ],
  "readme": "## express-compile\n\nexpress-compile is middleware that compiles JS and CSS on the fly within your express application.  This project is based off [electron-compile](https://github.com/electron/electron-compile) project and uses the same compilers.\n\nFor JavaScript:\n\n* JavaScript ES6/ES7 (via Babel)\n* TypeScript\n* CoffeeScript\n\nFor CSS:\n\n* LESS\n* Sass/SCSS\n\nFor HTML:\n\n* Jade\n\nFor JSON:\n\n* CSON\n\n### How does it work? (Slightly Harder Way)\n\nPut this at the top of your Express app:\n\n```js\nimport {Compiler} from 'express-compile';\n\napp.use(Compiler({\n    root: '.',\n    cwd: 'public',\n    paths: ['public/**/*'],\n    ignore: ['public/node_modules/**/*'],\n    ignoreStyleCache: true\n}));\napp.use(express.static('/public'));\n\n```\n\n### I did it, now what?\n\nFrom then on, you can now simply include files directly in your HTML, no need for cross-compilation:\n\n```html\n<head>\n  <script src=\"main.coffee\"></script>\n  <link rel=\"stylesheet\" href=\"main.less\" />\n</head>\n```\n\nor just require them in:\n\n```js\nrequire('./mylib')   // mylib.ts\n```\n\n### Something isn't working / I'm getting weird errors\n\nexpress-compile uses the [debug module](https://github.com/visionmedia/debug), set the DEBUG environment variable to debug what express-compile is doing:\n\n```sh\n## Debug just express-compile\nDEBUG=express-compile:* npm start\n\n## Grab everything except for Babel which is very noisy\nDEBUG=*,-babel npm start\n```\n\n### How do I set up (Babel / LESS / whatever) the way I want?\n\nIf you've got a `.babelrc` and that's all you want to customize, you can simply use it directly. express-compile will respect it, even the environment-specific settings. If you want to customize other compilers, use a `.compilerc` file. Here's an example:\n\n```js\n{\n  \"application/javascript\": {\n    \"presets\": [\"stage-0\", \"es2015\", \"react\"],\n    \"sourceMaps\": \"inline\"\n  },\n  \"text/less\": {\n    \"dumpLineNumbers\": \"comments\"\n  }\n}\n```\n\n`.compilerc` also accepts environments with the same syntax as `.babelrc`:\n\n```js\n{\n  \"env\": {\n    \"development\": {\n      \"application/javascript\": {\n        \"presets\": [\"stage-0\", \"es2015\", \"react\"],\n        \"sourceMaps\": \"inline\"\n      },\n      \"text/less\": {\n        \"dumpLineNumbers\": \"comments\"\n      }\n    },\n    \"production\": {\n      \"application/javascript\": {\n        \"presets\": [\"stage-0\", \"es2015\", \"react\"],\n        \"sourceMaps\": \"none\"\n      }\n    }\n  }\n}\n```\n\nThe opening Object is a list of MIME Types, and options passed to the compiler implementation. These parameters are documented here:\n\n* Babel - http://babeljs.io/docs/usage/options\n* CoffeeScript - http://coffeescript.org/documentation/docs/coffee-script.html#section-5\n* TypeScript - https://github.com/Microsoft/TypeScript/blob/v1.5.0-beta/bin/typescriptServices.d.ts#L1076\n* LESS - http://lesscss.org/usage/index.html#command-line-usage-options\n* LESS - http://lesscss.org/usage/index.html#command-line-usage-options\n* Jade - http://jade-lang.com/api\n\n## How can I precompile my code for release-time?\n\nexpress-compile comes with a command-line application to pre-create a cache for you.\n\n```sh\nUsage: express-compile --appDir [root-app-dir] paths...\n\nOptions:\n  -a, --appdir  The top-level application directory (i.e. where your\n                package.json is)\n  -v, --verbose  Print verbose information\n  -h, --help     Show help\n```\n\nRun `express-compile` on all of your application assets, even if they aren't strictly code (i.e. your static assets like PNGs). express-compile will recursively walk the given directories.\n\n```sh\nexpress-compile --appDir /path/to/my/app ./src ./static\n```\n"
}