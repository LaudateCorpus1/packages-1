{
  "name": "awesome-webcomponents",
  "version": "0.0.58",
  "description": "awesome native js web components",
  "main": "awesome.js",
  "devDependencies": {
    "bower": "^1.7.7",
    "jsdoc-to-markdown": "^1.3.3"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "docs": "jsdoc2md -h&& jsdoc2md -l javascript -g none -m none awesome.js dispatchers/*.js actions/*.js stores/*.js components/*.js   > README.md"
  },
  "repository": {
    "user": "RIAEvangelist",
    "repo": "awesome-webcomponents",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/RIAEvangelist/awesome-webcomponents/tarball/master",
    "clone_url": "https://github.com/RIAEvangelist/awesome-webcomponents",
    "https_url": "https://github.com/RIAEvangelist/awesome-webcomponents",
    "travis_url": "https://travis-ci.org/RIAEvangelist/awesome-webcomponents",
    "zip_url": "https://github.com/RIAEvangelist/awesome-webcomponents/archive/master.zip",
    "api_url": "https://api.github.com/repos/RIAEvangelist/awesome-webcomponents"
  },
  "keywords": [
    "awesome",
    "web",
    "components",
    "webcomponents"
  ],
  "author": "",
  "license": "SEE LICENSE IN LICENSE.md",
  "homepage": "https://github.com/RIAEvangelist/awesome-webcomponents#readme",
  "gitHead": "6f54f9468dc42c3c424fd8e550e17c364eed5330",
  "_npmVersion": "3.7.1",
  "_nodeVersion": "4.2.3",
  "dist": {
    "shasum": "e1c5c4a5285f583d55618b610254d6dfec24d0e3",
    "tarball": "http://registry.npmjs.org/awesome-webcomponents/-/awesome-webcomponents-0.0.58.tgz"
  },
  "versions": [
    {
      "number": "0.0.0",
      "date": "2016-02-08T21:09:19.490Z"
    },
    {
      "number": "0.0.1",
      "date": "2016-02-09T18:41:28.801Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-02-09T20:13:38.994Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-02-09T21:08:50.042Z"
    },
    {
      "number": "0.0.5",
      "date": "2016-02-09T22:52:56.358Z"
    },
    {
      "number": "0.0.6",
      "date": "2016-02-09T22:56:06.602Z"
    },
    {
      "number": "0.0.7",
      "date": "2016-02-11T02:27:13.642Z"
    },
    {
      "number": "0.0.12",
      "date": "2016-02-11T05:04:18.409Z"
    },
    {
      "number": "0.0.13",
      "date": "2016-02-11T05:12:15.895Z"
    },
    {
      "number": "0.0.14",
      "date": "2016-02-11T06:10:15.642Z"
    },
    {
      "number": "0.0.16",
      "date": "2016-02-11T11:55:44.866Z"
    },
    {
      "number": "0.0.24",
      "date": "2016-02-11T23:21:07.547Z"
    },
    {
      "number": "0.0.35",
      "date": "2016-02-12T09:06:12.283Z"
    },
    {
      "number": "0.0.37",
      "date": "2016-02-12T09:49:55.844Z"
    },
    {
      "number": "0.0.49",
      "date": "2016-02-20T11:30:23.379Z"
    },
    {
      "number": "0.0.50",
      "date": "2016-02-20T11:38:44.371Z"
    },
    {
      "number": "0.0.58",
      "date": "2016-02-29T03:31:05.555Z"
    }
  ],
  "created": "2016-02-08T21:09:19.490Z",
  "modified": "2016-02-29T03:31:05.555Z",
  "lastPublisher": {
    "name": "riaevangelist",
    "email": "brandon@diginow.it"
  },
  "owners": [
    {
      "name": "riaevangelist",
      "email": "brandon@diginow.it"
    }
  ],
  "readme": "<a name=\"awesome\"></a>\n## awesome : <code>object</code>\n# Awesome-Webcomponents\n\nAwesome ES6 compliant web componants for use in your app or website.\n\nTested and working on :\n* Chrome\n* Chromium\n* Android Chrome\n* FireFox >=45\n* IE Edge\n* [Electron](http://electron.atom.io/)\n* [NW.js](http://nwjs.io/)\n\nFirefox >=45 supports evrything needed with the included ` ./bower_components/document-register-element/build/document-register-element.js `.\nIE Edge ` Array.prototype.includes ` polyfill is build into awesome.js\n\ninstall awesome-webcomponents via bower for your project by running ` bower install awesome-webcomponents ` don't forget to run ` bower update ` on occasion to get the latest version!\n\n### Working Component Examples and Demos\n[awesome-webcomponents on github.io](https://riaevangelist.github.io/awesome-webcomponents/)\n#### Licensed under DBAD license\nSee the [DBAD license](https://github.com/philsturgeon/dbad) in your language or our [licence.md](https://github.com/RIAEvangelist/awesome-webcomponents/blob/master/LICENSE.md) file.\n\n# Contributing\n1. Fork the repo\n2. Do awesome stuff!\n3. Submit a Pull Request\n4. Feel Awesome!\n\n# Awesome.js Class api\n\n` window.awesome = new Awesome; ` is called automatically to instantiate a global ` awesome ` object for your use right away.\n\n---\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| awesome.path | <code>String</code> | Path to folder awesome.js is located in |\n| awesome.bower | <code>String</code> | path to bower components |\n| constants | <code>Object</code> | awesome constants |\n| constants.components | <code>ShallowMergeObject</code> | shallow merge for awesome.constants.components |\n| constants.stores | <code>ShallowMergeObject</code> | shallow merge for awesome.constants.stores |\n| constants.actions | <code>ShallowMergeObject</code> | shallow merge for awesome.constants.actions |\n| config | <code>DeepMergeObject</code> | deep recursive merge for awesome config object |\n| language | <code>Object</code> | awesome language objects |\n| language.default | <code>Object</code> | awesome default language object |\n| language.current | <code>Object</code> | awesome language object merged default and desiredLanguage |\n| language.* | <code>Object</code> | awesome language objects for specific languages like ` awesome.language.en ` or ` awesome.language.ru ` |\n| setLanguage | <code>function</code> | set the current language |\n| dynamicLanguageString | <code>function</code> | a way to pass variables to language strings. This is helpful when you support languages with a variety of grammatical structures |\n| dispatchers | <code>Object</code> | dispatchers for store/action/component messages |\n| stores | <code>Object</code> | registered awesome.Store instances. These are designed to support 1 way data flows for use by components |\n| Store | <code>Class</code> | Store class, used to create new stores |\n| loadTemplate | <code>function</code> | fetches nested template contents for inclusion in awesome-component |\n| requireScript | <code>function</code> | inject script tag into header |\n| requireCSS | <code>function</code> | inject stylesheet link tag into header |\n| mergeDataset | <code>function</code> | merges element's data-* attributes with the defaults for that component element |\n| updateAttributesFromData | <code>function</code> | maps data-* values to * attribute values |\n| uniqueEntries | <code>function</code> | ensures that keys and values of an object unique |\n\n\n* [awesome](#awesome) : <code>object</code>\n    * [.Store](#awesome.Store)\n        * [.state](#awesome.Store.state) : <code>Object</code>\n        * [.defaultState](#awesome.Store.defaultState) : <code>Object</code>\n        * [.ignoreResetEvent](#awesome.Store.ignoreResetEvent) : <code>Boolean</code>\n        * [.expose(instance, name)](#awesome.Store.expose)\n        * [.resetState(events)](#awesome.Store.resetState)\n        * [\"change\"](#awesome.Store.event_change)\n    * [.path](#awesome.path) : <code>String</code>\n    * [.constants](#awesome.constants) : <code>Object</code>\n        * [.action](#awesome.constants.action) : <code>Object</code>\n            * [.RESET_STORES](#awesome.constants.action.RESET_STORES) : <code>EventName</code>\n            * [.FILE_LOADED](#awesome.constants.action.FILE_LOADED) : <code>String</code>\n            * [.LOGOUT_REQUEST](#awesome.constants.action.LOGOUT_REQUEST) : <code>EventName</code>\n            * [.LOGIN_REQUEST](#awesome.constants.action.LOGIN_REQUEST) : <code>EventName</code>\n            * [.getter()](#awesome.constants.action.getter) ⇒ <code>ActionConstants</code>\n            * [.setter(constants)](#awesome.constants.action.setter) ⇒ <code>ActionConstants</code>\n        * [.store](#awesome.constants.store) : <code>Object</code>\n            * [.RESET](#awesome.constants.store.RESET) : <code>EventName</code>\n            * [.LOGIN_ERROR](#awesome.constants.store.LOGIN_ERROR) : <code>EventName</code>\n            * [.LOGOUT_ERROR](#awesome.constants.store.LOGOUT_ERROR) : <code>EventName</code>\n            * [.LOGIN_SUCCESS](#awesome.constants.store.LOGIN_SUCCESS) : <code>EventName</code>\n            * [.LOGOUT_SUCCESS](#awesome.constants.store.LOGOUT_SUCCESS) : <code>EventName</code>\n            * [.FILE_LIST](#awesome.constants.store.FILE_LIST) : <code>String</code>\n            * [.getter()](#awesome.constants.store.getter) ⇒ <code>StoreConstants</code>\n            * [.setter(constants)](#awesome.constants.store.setter) ⇒ <code>StoreConstants</code>\n        * [.component](#awesome.constants.component) : <code>Object</code>\n            * [.VALIDATE_USERNAME](#awesome.constants.component.VALIDATE_USERNAME) : <code>EventName</code>\n            * [.VALIDATE_EMAIL](#awesome.constants.component.VALIDATE_EMAIL) : <code>EventName</code>\n            * [.VALIDATE_URL](#awesome.constants.component.VALIDATE_URL) : <code>EventName</code>\n            * [.getter()](#awesome.constants.component.getter) ⇒ <code>ComponentConstants</code>\n            * [.setter(constants)](#awesome.constants.component.setter) ⇒ <code>ComponentConstants</code>\n    * [.config](#awesome.config) : <code>Object</code>\n        * [.setter()](#awesome.config.setter) ⇒ <code>Object</code>\n    * [.language](#awesome.language) : <code>Object</code>\n    * [.dispatchers](#awesome.dispatchers) : <code>Object</code>\n        * [.action](#awesome.dispatchers.action) : <code>EventEmitter</code>\n        * [.component](#awesome.dispatchers.component) : <code>EventEmitter</code>\n        * [.store](#awesome.dispatchers.store) : <code>EventEmitter</code>\n    * [.stores](#awesome.stores) : <code>Object</code>\n    * [.bower](#awesome.bower) : <code>String</code>\n    * [.loadTemplate(instance)](#awesome.loadTemplate) ⇒ <code>Object</code>\n    * [.requireScript(path)](#awesome.requireScript) ⇒ <code>Boolean</code>\n    * [.requireScript(path)](#awesome.requireScript) ⇒ <code>Boolean</code>\n    * [.requireCSS(path)](#awesome.requireCSS) ⇒ <code>Boolean</code>\n    * [.mergeDataset(el, defaults)](#awesome.mergeDataset)\n    * [.updateAttributesFromData(el, key, value)](#awesome.updateAttributesFromData) ⇒ <code>HTMLElement</code>\n    * [.uniqueEntries(data)](#awesome.uniqueEntries) ⇒ <code>Boolean</code>\n    * [\"awesome-language-set\" (e)](#awesome.event_awesome-language-set)\n    * [\"awesome-script-loaded\" (e)](#awesome.event_awesome-script-loaded)\n    * [\"awesome-script-error\" (e)](#awesome.event_awesome-script-error)\n    * [\"awesome-language-loaded\" (e)](#awesome.event_awesome-language-loaded)\n    * [\"awesome-ready\"](#awesome.event_awesome-ready)\n    * [\"awesome-wants-lang\" (e)](#awesome.event_awesome-wants-lang)\n\n<a name=\"awesome.Store\"></a>\n### awesome.Store\n**Kind**: static class of <code>[awesome](#awesome)</code>  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| state | <code>Object</code> | state data of store exposed for reading by components via expose. The store modifies this as a shallow merge Object. |\n| defaultState | <code>Object</code> | default store state |\n| ignoreResetEvent | <code>Boolean</code> | flag to ignore the global reset event ***USE WITH CAUTION*** |\n| resetState | <code>function</code> | rests the store state |\n| expose | <code>function</code> | registers the read-only state with awesome.stores[store name] for components to use |\n\n\n* [.Store](#awesome.Store)\n    * [.state](#awesome.Store.state) : <code>Object</code>\n    * [.defaultState](#awesome.Store.defaultState) : <code>Object</code>\n    * [.ignoreResetEvent](#awesome.Store.ignoreResetEvent) : <code>Boolean</code>\n    * [.expose(instance, name)](#awesome.Store.expose)\n    * [.resetState(events)](#awesome.Store.resetState)\n    * [\"change\"](#awesome.Store.event_change)\n\n<a name=\"awesome.Store.state\"></a>\n#### Store.state : <code>Object</code>\nstate data of store exposed for reading by components via expose. The store modifies this as a shallow merge Object.\n\n**Kind**: static property of <code>[Store](#awesome.Store)</code>  \n**Access:** protected  \n**Example**  \n```javascript\n//set the store state with a shallow merge\n myStoreState = {\n  \tproperty: 'prop'\n }\n store.state = myStoreState;\n\n//get the store state\n const state = store.state\n```\n<a name=\"awesome.Store.defaultState\"></a>\n#### Store.defaultState : <code>Object</code>\ndefault store state\n\n**Kind**: static property of <code>[Store](#awesome.Store)</code>  \n**Example**  \n```javascript\n//set your default store\nstore.defaultState = {\n \tdefaultProperty1: 'red',\n \tdefaultProperty2: 'white',\n \tdefaultPropertyN: 'mandalorian'\n}\n```\n<a name=\"awesome.Store.ignoreResetEvent\"></a>\n#### Store.ignoreResetEvent : <code>Boolean</code>\nflag to ignore the global reset event ***USE WITH CAUTION***\n\n**Kind**: static property of <code>[Store](#awesome.Store)</code>  \n**Example**  \n```javascript\n//ignore the global reset event\n store.ignoreResetEvent = true;\n```\n<a name=\"awesome.Store.expose\"></a>\n#### Store.expose(instance, name)\nregisters the read-only state with awesome.stores[store name] for components to use\n\n**Kind**: static method of <code>[Store](#awesome.Store)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| instance | <code>Store</code> | your instantiated Store instance |\n| name | <code>String</code> | The name of your store |\n\n**Example**  \n```javascript\n//expose your store\nstore.expose(yourStoreScope, 'yourStoreName');\n```\n<a name=\"awesome.Store.resetState\"></a>\n#### Store.resetState(events)\nrests the store state\n\n**Kind**: static method of <code>[Store](#awesome.Store)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| events | <code>Object</code> | your stores event-pubsub instance |\n\n**Example**  \n```javascript\n//reset the store state\nstore.resetState();\n```\n<a name=\"awesome.Store.event_change\"></a>\n#### \"change\"\nStore.state change event used to notify component that the store state has changed.\n\n**Kind**: event emitted by <code>[Store](#awesome.Store)</code>  \n<a name=\"awesome.path\"></a>\n### awesome.path : <code>String</code>\nPath to folder awesome.js is located in.\n\n**Kind**: static property of <code>[awesome](#awesome)</code>  \n**Access:** protected  \n**Example**  \n```javascript\n//use awesome.path to reference the awesome-webcomponents directory\nawesome.requireCSS(`${awesome.path}components/buttons/awesome-buttonset.css`);\nawesome.requireScript(`${awesome.path}components/buttons/awesome-buttonset.js`);\n```\n<a name=\"awesome.constants\"></a>\n### awesome.constants : <code>Object</code>\nextensible/overwriteable constansts used in awesome apps\n\n**Kind**: static property of <code>[awesome](#awesome)</code>  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| action | <code>Object</code> | action constants |\n| store | <code>Object</code> | store constants |\n| component | <code>Object</code> | component constants |\n\n\n* [.constants](#awesome.constants) : <code>Object</code>\n    * [.action](#awesome.constants.action) : <code>Object</code>\n        * [.RESET_STORES](#awesome.constants.action.RESET_STORES) : <code>EventName</code>\n        * [.FILE_LOADED](#awesome.constants.action.FILE_LOADED) : <code>String</code>\n        * [.LOGOUT_REQUEST](#awesome.constants.action.LOGOUT_REQUEST) : <code>EventName</code>\n        * [.LOGIN_REQUEST](#awesome.constants.action.LOGIN_REQUEST) : <code>EventName</code>\n        * [.getter()](#awesome.constants.action.getter) ⇒ <code>ActionConstants</code>\n        * [.setter(constants)](#awesome.constants.action.setter) ⇒ <code>ActionConstants</code>\n    * [.store](#awesome.constants.store) : <code>Object</code>\n        * [.RESET](#awesome.constants.store.RESET) : <code>EventName</code>\n        * [.LOGIN_ERROR](#awesome.constants.store.LOGIN_ERROR) : <code>EventName</code>\n        * [.LOGOUT_ERROR](#awesome.constants.store.LOGOUT_ERROR) : <code>EventName</code>\n        * [.LOGIN_SUCCESS](#awesome.constants.store.LOGIN_SUCCESS) : <code>EventName</code>\n        * [.LOGOUT_SUCCESS](#awesome.constants.store.LOGOUT_SUCCESS) : <code>EventName</code>\n        * [.FILE_LIST](#awesome.constants.store.FILE_LIST) : <code>String</code>\n        * [.getter()](#awesome.constants.store.getter) ⇒ <code>StoreConstants</code>\n        * [.setter(constants)](#awesome.constants.store.setter) ⇒ <code>StoreConstants</code>\n    * [.component](#awesome.constants.component) : <code>Object</code>\n        * [.VALIDATE_USERNAME](#awesome.constants.component.VALIDATE_USERNAME) : <code>EventName</code>\n        * [.VALIDATE_EMAIL](#awesome.constants.component.VALIDATE_EMAIL) : <code>EventName</code>\n        * [.VALIDATE_URL](#awesome.constants.component.VALIDATE_URL) : <code>EventName</code>\n        * [.getter()](#awesome.constants.component.getter) ⇒ <code>ComponentConstants</code>\n        * [.setter(constants)](#awesome.constants.component.setter) ⇒ <code>ComponentConstants</code>\n\n<a name=\"awesome.constants.action\"></a>\n#### constants.action : <code>Object</code>\nShallow merge action constants object\n\n**Kind**: static property of <code>[constants](#awesome.constants)</code>  \n\n* [.action](#awesome.constants.action) : <code>Object</code>\n    * [.RESET_STORES](#awesome.constants.action.RESET_STORES) : <code>EventName</code>\n    * [.FILE_LOADED](#awesome.constants.action.FILE_LOADED) : <code>String</code>\n    * [.LOGOUT_REQUEST](#awesome.constants.action.LOGOUT_REQUEST) : <code>EventName</code>\n    * [.LOGIN_REQUEST](#awesome.constants.action.LOGIN_REQUEST) : <code>EventName</code>\n    * [.getter()](#awesome.constants.action.getter) ⇒ <code>ActionConstants</code>\n    * [.setter(constants)](#awesome.constants.action.setter) ⇒ <code>ActionConstants</code>\n\n<a name=\"awesome.constants.action.RESET_STORES\"></a>\n##### action.RESET_STORES : <code>EventName</code>\nall stores should reset their state\n\n**Kind**: static property of <code>[action](#awesome.constants.action)</code>  \n<a name=\"awesome.constants.action.FILE_LOADED\"></a>\n##### action.FILE_LOADED : <code>String</code>\nfiles loaded and available\n\n**Kind**: static property of <code>[action](#awesome.constants.action)</code>  \n<a name=\"awesome.constants.action.LOGOUT_REQUEST\"></a>\n##### action.LOGOUT_REQUEST : <code>EventName</code>\nlogout request\n\n**Kind**: static property of <code>[action](#awesome.constants.action)</code>  \n**Memeber**: awesome.constants.action.LOGOUT_REQUEST  \n<a name=\"awesome.constants.action.LOGIN_REQUEST\"></a>\n##### action.LOGIN_REQUEST : <code>EventName</code>\nlogin request\n\n**Kind**: static property of <code>[action](#awesome.constants.action)</code>  \n**Memeber**: awesome.constants.action.LOGIN_REQUEST  \n<a name=\"awesome.constants.action.getter\"></a>\n##### action.getter() ⇒ <code>ActionConstants</code>\naction constants getter\n\n**Kind**: static method of <code>[action](#awesome.constants.action)</code>  \n**Returns**: <code>ActionConstants</code> - action constants  \n**Access:** protected  \n<a name=\"awesome.constants.action.setter\"></a>\n##### action.setter(constants) ⇒ <code>ActionConstants</code>\naction constants setter : merges the current action constants and the new constants via shallow merge.\n\n**Kind**: static method of <code>[action](#awesome.constants.action)</code>  \n**Returns**: <code>ActionConstants</code> - actions merged constants  \n**Access:** protected  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| constants | <code>Object</code> | constants to merge |\n\n**Example**  \n```javascript\n//original constants\n{\n \tACTION_CONSTANT1: 'actionConst1',\n \tACTION_CONSTANT2: 'actionConst2',\n}\nmyNewConstants = {\n \tNEW_CONSTANT_1: 'const1',\n \tNEW_CONSTANT_2: 'const2'\n}\n\nawesome.action.constants = myNewConstants;\n\n//action constants will now be\n//awesome.constants.action\n{\n \tACTION_CONSTANT1: 'actionConst1',\n \tACTION_CONSTANT2: 'actionConst2',\n \tNEW_CONSTANT_1: 'const1',\n \tNEW_CONSTANT_2: 'const2'\n}\n```\n<a name=\"awesome.constants.store\"></a>\n#### constants.store : <code>Object</code>\nShallow merge store constants object\n\n**Kind**: static property of <code>[constants](#awesome.constants)</code>  \n\n* [.store](#awesome.constants.store) : <code>Object</code>\n    * [.RESET](#awesome.constants.store.RESET) : <code>EventName</code>\n    * [.LOGIN_ERROR](#awesome.constants.store.LOGIN_ERROR) : <code>EventName</code>\n    * [.LOGOUT_ERROR](#awesome.constants.store.LOGOUT_ERROR) : <code>EventName</code>\n    * [.LOGIN_SUCCESS](#awesome.constants.store.LOGIN_SUCCESS) : <code>EventName</code>\n    * [.LOGOUT_SUCCESS](#awesome.constants.store.LOGOUT_SUCCESS) : <code>EventName</code>\n    * [.FILE_LIST](#awesome.constants.store.FILE_LIST) : <code>String</code>\n    * [.getter()](#awesome.constants.store.getter) ⇒ <code>StoreConstants</code>\n    * [.setter(constants)](#awesome.constants.store.setter) ⇒ <code>StoreConstants</code>\n\n<a name=\"awesome.constants.store.RESET\"></a>\n##### store.RESET : <code>EventName</code>\nall stores should reset their state\n\n**Kind**: static property of <code>[store](#awesome.constants.store)</code>  \n<a name=\"awesome.constants.store.LOGIN_ERROR\"></a>\n##### store.LOGIN_ERROR : <code>EventName</code>\nuser supplied bad credentials\n\n**Kind**: static property of <code>[store](#awesome.constants.store)</code>  \n<a name=\"awesome.constants.store.LOGOUT_ERROR\"></a>\n##### store.LOGOUT_ERROR : <code>EventName</code>\nthere was an error logging out\n\n**Kind**: static property of <code>[store](#awesome.constants.store)</code>  \n<a name=\"awesome.constants.store.LOGIN_SUCCESS\"></a>\n##### store.LOGIN_SUCCESS : <code>EventName</code>\nlogin was successful\n\n**Kind**: static property of <code>[store](#awesome.constants.store)</code>  \n<a name=\"awesome.constants.store.LOGOUT_SUCCESS\"></a>\n##### store.LOGOUT_SUCCESS : <code>EventName</code>\nlogout was successful\n\n**Kind**: static property of <code>[store](#awesome.constants.store)</code>  \n<a name=\"awesome.constants.store.FILE_LIST\"></a>\n##### store.FILE_LIST : <code>String</code>\nfile list available\n\n**Kind**: static property of <code>[store](#awesome.constants.store)</code>  \n<a name=\"awesome.constants.store.getter\"></a>\n##### store.getter() ⇒ <code>StoreConstants</code>\nstore constants getter\n\n**Kind**: static method of <code>[store](#awesome.constants.store)</code>  \n**Returns**: <code>StoreConstants</code> - store constants  \n**Access:** protected  \n<a name=\"awesome.constants.store.setter\"></a>\n##### store.setter(constants) ⇒ <code>StoreConstants</code>\naction constants setter : merges the current store constants and the new constants via shallow merge.\n\n**Kind**: static method of <code>[store](#awesome.constants.store)</code>  \n**Returns**: <code>StoreConstants</code> - stores merged constants  \n**Access:** protected  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| constants | <code>Object</code> | constants to merge |\n\n**Example**  \n```javascript\n//original constants\n{\n \tSTORE_CONSTANT1: 'actionConst1',\n \tSTORE_CONSTANT2: 'actionConst2',\n}\n\nmyNewConstants = {\n \tNEW_CONSTANT_1: 'const1',\n \tNEW_CONSTANT_2: 'const2'\n}\n\nawesome.constantants.store = myNewConstants;\n\n//action constants will now be\n//awesome.constants.store\n{\n \tSTORE_CONSTANT1: 'actionConst1',\n \tSTORE_CONSTANT2: 'actionConst2',\n \tNEW_CONSTANT_1: 'const1',\n \tNEW_CONSTANT_2: 'const2'\n}\n```\n<a name=\"awesome.constants.component\"></a>\n#### constants.component : <code>Object</code>\nShallow merge constants constants object\n                *\n\n**Kind**: static property of <code>[constants](#awesome.constants)</code>  \n\n* [.component](#awesome.constants.component) : <code>Object</code>\n    * [.VALIDATE_USERNAME](#awesome.constants.component.VALIDATE_USERNAME) : <code>EventName</code>\n    * [.VALIDATE_EMAIL](#awesome.constants.component.VALIDATE_EMAIL) : <code>EventName</code>\n    * [.VALIDATE_URL](#awesome.constants.component.VALIDATE_URL) : <code>EventName</code>\n    * [.getter()](#awesome.constants.component.getter) ⇒ <code>ComponentConstants</code>\n    * [.setter(constants)](#awesome.constants.component.setter) ⇒ <code>ComponentConstants</code>\n\n<a name=\"awesome.constants.component.VALIDATE_USERNAME\"></a>\n##### component.VALIDATE_USERNAME : <code>EventName</code>\nregular expression for validating user name\n\n**Kind**: static property of <code>[component](#awesome.constants.component)</code>  \n**Memeber**: awesome.constants.component.VALIDATE_USERNAME  \n**Example**  \n```javascript\nconst constanst = awesome.constansts.components;\n\n//input pattern for a valid username, alphanumeric\n<input class = 'yourUserNameInput'\n \tpattern = constansts.VALIDATE_EMAIL\n></input>\n// a user submission of userName will not be accepter but rather userName@group would\n```\n<a name=\"awesome.constants.component.VALIDATE_EMAIL\"></a>\n##### component.VALIDATE_EMAIL : <code>EventName</code>\nregular expression for validating user email\n\n**Kind**: static property of <code>[component](#awesome.constants.component)</code>  \n**Memeber**: awesome.constansts.component.VALIDATE_EMAIL  \n**Example**  \n```javascript\nconst constanst = awesome.constansts.components;\n\n//input patter for a valid email address, alphanumeric\n<input class = 'yourEmailInput'\n \tpattern = constansts.VALIDATE_EMAIL\n></input>\n// an email submission of user@site will not be accepted but rather user@site.company would\n```\n<a name=\"awesome.constants.component.VALIDATE_URL\"></a>\n##### component.VALIDATE_URL : <code>EventName</code>\nregular expression for validating url\n\n**Kind**: static property of <code>[component](#awesome.constants.component)</code>  \n**Memeber**: awesome.constansts.component.VALIDATE_URL  \n**Example**  \n```javascript\nconst constanst = awesome.constansts.components;\n\n//input pattern for a valid url\n<input\n \tpattern = constansts.VALIDATE_URL\n></input>\n// a url submission of www.nodejs.org would not be accepter but rather\n// https://nodejs.org or http://www.yourSite.yourDomain\n```\n<a name=\"awesome.constants.component.getter\"></a>\n##### component.getter() ⇒ <code>ComponentConstants</code>\ncomponent constants getter\n\n**Kind**: static method of <code>[component](#awesome.constants.component)</code>  \n**Returns**: <code>ComponentConstants</code> - component constants  \n**Access:** protected  \n<a name=\"awesome.constants.component.setter\"></a>\n##### component.setter(constants) ⇒ <code>ComponentConstants</code>\ncomponent constants setter : merges the current component constants and the new constants via shallow merge.\n\n**Kind**: static method of <code>[component](#awesome.constants.component)</code>  \n**Returns**: <code>ComponentConstants</code> - components merged constants  \n**Access:** protected  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| constants | <code>Object</code> | constants to merge |\n\n**Example**  \n```javascript\n//original constants\n{\n \tCOMPONENT_CONSTANT1: 'actionConst1',\n \tCOMPONENT_CONSTANT2: 'actionConst2',\n}\n\nmyNewConstants = {\n \tNEW_CONSTANT_1: 'const1',\n \tNEW_CONSTANT_2: 'const2'\n}\n\nawesome.constants.components = myNewConstants;\n\n//action constants will now be\n//awesome.constants.component\n{\n \tCOMPONENT_CONSTANT1: 'actionConst1',\n \tCOMPONENT_CONSTANT2: 'actionConst2',\n \tNEW_CONSTANT_1: 'const1',\n \tNEW_CONSTANT_2: 'const2'\n}\n```\n<a name=\"awesome.config\"></a>\n### awesome.config : <code>Object</code>\nextensible/overwriteable constansts used in awesome apps\n\n**Kind**: static property of <code>[awesome](#awesome)</code>  \n<a name=\"awesome.config.setter\"></a>\n#### config.setter() ⇒ <code>Object</code>\nDeep merge config object\n\n**Kind**: static method of <code>[config](#awesome.config)</code>  \n**Returns**: <code>Object</code> - awesome.config  \n**Example**  \n```javascript\n\n// awesome.config could be\n{\n    a:1,\n    b:{\n        c:3\n    },\n    d:{\n        e:55,\n        f:{\n            g:99\n        }\n    },\n    q:{\n        r:77\n    }\n}\n\nawesome.configMerge(\n    {\n        b:{\n            x:{\n                y:{\n                    z:99999\n                }\n            }\n        },         *\n        d:{\n            f:{\n                h:55\n            }\n        },\n        q:33\n    }\n)\n\n\n//now awesome.config would look like\n{\n    a:1,\n    b:{\n        c:3\n            x:{\n                y:{\n                    z:99999\n                }\n            }\n        }\n    },\n    d:{\n        e:55,\n        f:{\n            g:99,\n            h:55\n        }\n    },\n    q:33\n}\n\n\n```\n<a name=\"awesome.language\"></a>\n### awesome.language : <code>Object</code>\nlanguage objects used by awesome components\n\n**Kind**: static property of <code>[awesome](#awesome)</code>  \n<a name=\"awesome.dispatchers\"></a>\n### awesome.dispatchers : <code>Object</code>\ndispatchers for awesome 1 way data flow\n\n**Kind**: static property of <code>[awesome](#awesome)</code>  \n**Access:** protected  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| action | <code>Object</code> | action dispatcher |\n| store | <code>Object</code> | store dispatcher |\n| component | <code>Object</code> | component dispatcher |\n\n\n* [.dispatchers](#awesome.dispatchers) : <code>Object</code>\n    * [.action](#awesome.dispatchers.action) : <code>EventEmitter</code>\n    * [.component](#awesome.dispatchers.component) : <code>EventEmitter</code>\n    * [.store](#awesome.dispatchers.store) : <code>EventEmitter</code>\n\n<a name=\"awesome.dispatchers.action\"></a>\n#### dispatchers.action : <code>EventEmitter</code>\nawesome dispatcher for actions, uses event-pubsub\n\n**Kind**: static property of <code>[dispatchers](#awesome.dispatchers)</code>  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| on | <code>function</code> | binds handler to action event |\n| off | <code>function</code> | ***un***binds handler from action event |\n| trigger | <code>function</code> | fires store event |\n\n**Example**  \n```javascript\nconst dispatcher = awesome.dispatchers.action;\nconst constants = awesome.constants;\n\n//trigger an event to store\ndispatcher.trigger(\n \tconstants.store.YOUR_STORE_CONSTANT,\n \t{\n \t\tdata1 : 'data1',\n \t\tdata2 : 'data2'\n \t}\n);\n\n//listen to an event from a component\ndispatcher.on(\n \tconstants.components.YOUR_COMPONENT_CONSTANT,\n \tyourHanderFunction\n);\n\n//stop listening to the event\ndispatcher.off(\n \tconstants.components.YOUR_COMPONENT_CONSTANT,\n \tyourHanderFunction\n);\n```\n<a name=\"awesome.dispatchers.component\"></a>\n#### dispatchers.component : <code>EventEmitter</code>\nawesome dispatcher for components, uses event-pubsub\n\n**Kind**: static property of <code>[dispatchers](#awesome.dispatchers)</code>  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| trigger | <code>function</code> | fires action event |\n\n**Example**  \n```javascript\nconst dispatcher = awesome.dispatcher.component;\nconst constants = awesome.constants;\n\n//trigger an event to action\ndispatcher.trigger(\n \tconstants.action.YOUR_COMPONENT_CONSTANT,\n \t{\n \t\tdata1 : 'data1',\n \t\tdata2 : 'data2'\n \t}\n);\n```\n<a name=\"awesome.dispatchers.store\"></a>\n#### dispatchers.store : <code>EventEmitter</code>\nawesome dispatcher for stores, uses event-pubsub\n\n**Kind**: static property of <code>[dispatchers](#awesome.dispatchers)</code>  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| on | <code>function</code> | binds handler to store events |\n| off | <code>function</code> | ***un***binds handler from store event |\n| events | <code>function</code> | fires event |\n\n**Example**  \n```javascript\nconst dispatcher = awesome.dispatcher.store;\nconst constants = awesome.constants;\n\n//listen to an event from an action\ndispatcher.on(\n \tconstants.action.YOUR_STORE_CONSTANT,\n \tyourHanderFunction\n);\n\n//stop listening to the event\n dispatcher.off(\n \tconstants.components.YOUR_STORE_CONSTANT,\n \tyourHanderFunction\n);\n```\n<a name=\"awesome.stores\"></a>\n### awesome.stores : <code>Object</code>\nawesome 1 way data flow stores for use by component\n\n**Kind**: static property of <code>[awesome](#awesome)</code>  \n**Example**  \n```javascript\nstate=awesome.stores.auth.state;\n\nstate.on(\n  \t'change',\n  \tthis.yourAwesomeUpdateHandler.bind(this)\n);\n```\n<a name=\"awesome.bower\"></a>\n### awesome.bower : <code>String</code>\nPath to bower components\n\n**Kind**: static property of <code>[awesome](#awesome)</code>  \n**Access:** protected  \n**Example**  \n```javascript\n//include bower components using the bower components path\nawesome.requireScript(`${awesome.bower}bower-component/bower-component.js`);\n```\n<a name=\"awesome.loadTemplate\"></a>\n### awesome.loadTemplate(instance) ⇒ <code>Object</code>\nloadTemplate collects template element and returns element\n\n**Kind**: static method of <code>[awesome](#awesome)</code>  \n**Returns**: <code>Object</code> - contents of template element  \n**Access:** protected  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| instance | <code>Object</code> | instance or scope of template element |\n\n**Example**  \n```javascript\n//taken from awesome-list example, loadTemplate will load template element of awesome-component\n//and returns element\n\n//html snippet\n\n <awesome-list>\n       <template>\n           <li>\n               Test 1\n           </li>\n           <li>\n               Test 2\n           </li>\n           <li>\n               Test 3\n           </li>\n       </template>\n   </awesome-list>\n\n//js\n\nconst content=awesome.loadTemplate(this);\n\n//constents of content\n       `<li>\n           Test 1\n       </li>\n       <li>\n           Test 2\n       </li>\n       <li>\n           Test 3\n       </li>`\n\n//usage\n//this content can now be loaded into awesome-list\n\nthis.innerHTML=`\n    <ul>\n        ${content}\n    </ul>\n`;\n```\n<a name=\"awesome.requireScript\"></a>\n### awesome.requireScript(path) ⇒ <code>Boolean</code>\nrequireScript appends scripts to the docuyment head with a differed false\n\n**Kind**: static method of <code>[awesome](#awesome)</code>  \n**Returns**: <code>Boolean</code> - true  \n**Access:** protected  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| path | <code>String</code> | path to script |\n\n**Example**  \n```javascript\n//here we require the dispatcher to action and the constants to stores and actions\nawesome.requireScript(`${awesome.path}dispatchers/action.js`);\nawesome.requireScript(`${awesome.path}actions/constants.js`);\nawesome.requireScript(`${awesome.path}stores/constants.js`);\n```\n<a name=\"awesome.requireScript\"></a>\n### awesome.requireScript(path) ⇒ <code>Boolean</code>\nrequireLanguage includes js scripts into document\n\n**Kind**: static method of <code>[awesome](#awesome)</code>  \n**Returns**: <code>Boolean</code> - true  \n**Access:** protected  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| path | <code>String</code> | path to script |\n\n<a name=\"awesome.requireCSS\"></a>\n### awesome.requireCSS(path) ⇒ <code>Boolean</code>\nrequireCSS requires and appends scripts to CSS head\n\n**Kind**: static method of <code>[awesome](#awesome)</code>  \n**Returns**: <code>Boolean</code> - false if stylesheet has already been loaded into document  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| path | <code>String</code> | Path to CSS stylesheet |\n\n**Example**  \n```javascript\n//require any CSS to script\nawesome.requireCSS(`${awesome.path}components/your-component/your-component.css`);\n```\n<a name=\"awesome.mergeDataset\"></a>\n### awesome.mergeDataset(el, defaults)\nmergeDataset merges element's dataset to current default dataset of document\n\n**Kind**: static method of <code>[awesome](#awesome)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| el | <code>HTMLElement</code> | element with dataset to be merged |\n| defaults | <code>Object</code> | default dataset |\n\n**Example**  \n```javascript\ndefaultElementDataset = {\n \tproperty1: 'one',\n \tproperty2: 'two'\n}\n\nfunction componentCreatedCallback(componentDataset){\n\t\tmergeDataset(myElement, componentDataset);\n}\n\n//after the component is created it will contain\n//ElementDataset\n {\n \tproperty1 : 'newProp1',\n \tproperty2 : 'newProp2'\n }\n```\n<a name=\"awesome.updateAttributesFromData\"></a>\n### awesome.updateAttributesFromData(el, key, value) ⇒ <code>HTMLElement</code>\nupdateAttributesFromData updates an element's attributes\n\n**Kind**: static method of <code>[awesome](#awesome)</code>  \n**Returns**: <code>HTMLElement</code> - updated element object  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| el | <code>HTMLElement</code> | element object |\n| key | <code>String</code> | key of element |\n| value | <code>String</code> | value to update data to |\n\n**Example**  \n```javascript\n//orginal element attributes\n{\n \tattribute1 : 'green',\n \tattribute2 : 'red',\n \tattribute3 : 'white'\n}\n\nyourElementAttributeUpdater(element, attribute3, black);\n\nfunction yourElementAttributeUpdater(element, elementKey,newValue){\n \tawesome.updateAttributesFromData(element, elementKey, newValue);\n}\n\n//resulting element attributes\n{\n \tattribute1 : 'green',\n \tattribute2 : 'red',\n \tattribute3 : 'black'\n}\n```\n<a name=\"awesome.uniqueEntries\"></a>\n### awesome.uniqueEntries(data) ⇒ <code>Boolean</code>\nuniqueEntries ensures that keys and values of data array are unique\n\n**Kind**: static method of <code>[awesome](#awesome)</code>  \n**Returns**: <code>Boolean</code> - true  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | <code>Object</code> | Data object or array with unique entries |\n\n**Example**  \n```javascript\n//check that your constants all have unique entries as they should\n const constans = awesome.constans;\n\nawesome.uniqueEntries(constans.store);\nawesome.uniqueEntries(constans.components);\nawesome.uniqueEntries(constans.actions);\n\n//if entires are not unique an error will be thrown\n`duplicate key of yourKey const keys mist be unique!`\n//or\n`duplicate value of yourConstant found on yourKey and yourKeyDuplicate const value strings MUST be unique!`\n```\n<a name=\"awesome.event_awesome-language-set\"></a>\n### \"awesome-language-set\" (e)\nemitted when the language is set or changed via [awesome.setLanguage](awesome.setLanguage).\n\n**Kind**: event emitted by <code>[awesome](#awesome)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| e | <code>Event</code> | Event Data |\n| e.detail | <code>String</code> | languageCode |\n\n<a name=\"awesome.event_awesome-script-loaded\"></a>\n### \"awesome-script-loaded\" (e)\nemitted when a script included via [requireScript](#awesome.requireScript) has completed loading a script.\n\n**Kind**: event emitted by <code>[awesome](#awesome)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| e | <code>Event</code> | Event Data |\n| e.detail | <code>String</code> | path of the loaded script |\n\n**Example**  \n```javascript\nwindow.on(\n \t'awesome-script-loaded',\n \tyourAwesomeLoadedHandler\n);\n```\n<a name=\"awesome.event_awesome-script-error\"></a>\n### \"awesome-script-error\" (e)\nemitted when a script included via [requireScript](#awesome.requireScript) can NOT be loaded.\n\n**Kind**: event emitted by <code>[awesome](#awesome)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| e | <code>Event</code> | Event Data |\n| e.detail | <code>String</code> | path of the loaded script |\n\n<a name=\"awesome.event_awesome-language-loaded\"></a>\n### \"awesome-language-loaded\" (e)\nemitted when a new language file included via [awesome.requireLanguage](awesome.requireLanguage) has completed loading.\n\n**Kind**: event emitted by <code>[awesome](#awesome)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| e | <code>Event</code> | Event Data |\n| e.detail | <code>String</code> | path of the loaded language |\n\n<a name=\"awesome.event_awesome-ready\"></a>\n### \"awesome-ready\"\nemitted when all queued scripts included via [requireScript](#awesome.requireScript) have completed loading. This will fire each time awesome deems it is ready for use. So if you include more scripts long after load it will fire again once all the new scripts are loaded.\n\n**Kind**: event emitted by <code>[awesome](#awesome)</code>  \n<a name=\"awesome.event_awesome-wants-lang\"></a>\n### \"awesome-wants-lang\" (e)\nemitted when a language check is performed for the first time and the language script is NOT in the head. This is useful when you have your own language files to load.\n\n**Kind**: event emitted by <code>[awesome](#awesome)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| e | <code>Event</code> | Event Data |\n| e.detail | <code>String</code> | desired language code |\n\n<a name=\"setLanguage\"></a>\n## setLanguage(languageCode)\nMerge a specific language and the default languages. If the languageCode has not been populated on the awesome.language object, the awesome.language.default will be used.\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| languageCode | <code>String</code> | like 'en', 'en-US', 'es' or 'zh' etc. |\n\n**Example**  \n```javascript\n//if awesome.language.default is\n{\n    hello:'Hello',\n    appName:'My Awesome App'\n}\n\n//and awesome.language.es is\n{\n    hello:'Ola'\n}\n\nawesome.setLanguage('es');\n\n//will result in awesome.language.current being\n{\n    hello:'Ola',\n    appName:'My Awesome App'\n}\n\n```\n"
}