{
  "name": "entu-cms",
  "productName": "Entu CMS",
  "version": "0.9.2",
  "author": {
    "name": "Argo Roots",
    "email": "argo@roots.ee"
  },
  "description": "Simple (Jade) filebased CMS",
  "keywords": [
    "cms",
    "static",
    "html",
    "jade",
    "markdown",
    "yaml"
  ],
  "homepage": "https://github.com/argoroots/entu-cms",
  "license": "MIT",
  "repository": {
    "user": "argoroots",
    "repo": "entu-cms",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/argoroots/entu-cms/tarball/master",
    "clone_url": "https://github.com/argoroots/entu-cms",
    "https_url": "https://github.com/argoroots/entu-cms",
    "travis_url": "https://travis-ci.org/argoroots/entu-cms",
    "zip_url": "https://github.com/argoroots/entu-cms/archive/master.zip",
    "api_url": "https://api.github.com/repos/argoroots/entu-cms"
  },
  "main": "main.js",
  "scripts": {
    "start": "electron main.js"
  },
  "dependencies": {
    "chokidar": "^1.6.0",
    "electron-pug": "^1.5.1",
    "electron-stylus": "^0.1.1",
    "front-matter": "^2.1.0",
    "fs-extra": "^0.30.0",
    "html-minifier": "^3.0.2",
    "jade": "^1.11.0",
    "js-yaml": "^3.6.1",
    "jstransformer-markdown-it": "^1.0.0",
    "jstransformer-uglify-js": "^1.1.1",
    "markdown-it": "^7.0.1",
    "mime-types": "^2.1.11",
    "object-path": "^0.11.1",
    "stylus": "^0.54.5",
    "uglify-js": "^2.7.3"
  },
  "devDependencies": {
    "electron-prebuilt": "^1.2.8",
    "html2jade": "^0.8.4"
  },
  "gitHead": "8251b1e628d3bf47f4c18a2706cb594898c76b5e",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.4.0",
  "dist": {
    "shasum": "cde14e68607184e4ab49f28b2bdecbd57e6271f0",
    "tarball": "http://registry.npmjs.org/entu-cms/-/entu-cms-0.9.2.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-03-16T09:01:06.156Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-03-16T09:04:59.943Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-03-16T09:08:59.597Z"
    },
    {
      "number": "0.1.3",
      "date": "2016-03-16T10:09:55.001Z"
    },
    {
      "number": "0.1.4",
      "date": "2016-03-16T10:20:22.008Z"
    },
    {
      "number": "0.1.5",
      "date": "2016-03-16T10:53:33.866Z"
    },
    {
      "number": "0.1.6",
      "date": "2016-03-16T11:10:04.170Z"
    },
    {
      "number": "0.1.7",
      "date": "2016-03-16T11:35:38.424Z"
    },
    {
      "number": "0.1.8",
      "date": "2016-03-16T14:14:10.519Z"
    },
    {
      "number": "0.1.9",
      "date": "2016-03-16T14:50:20.192Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-05-10T07:38:30.159Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-05-10T10:05:41.102Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-05-10T14:02:03.814Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-05-11T05:08:57.257Z"
    },
    {
      "number": "0.3.2",
      "date": "2016-05-11T09:43:09.699Z"
    },
    {
      "number": "0.3.3",
      "date": "2016-05-12T06:51:18.254Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-05-12T07:54:24.525Z"
    },
    {
      "number": "0.4.1",
      "date": "2016-05-17T08:47:04.843Z"
    },
    {
      "number": "0.4.2",
      "date": "2016-05-24T09:10:43.343Z"
    },
    {
      "number": "0.5.0",
      "date": "2016-05-24T12:34:21.496Z"
    },
    {
      "number": "0.5.2",
      "date": "2016-05-25T09:12:54.120Z"
    },
    {
      "number": "0.5.3",
      "date": "2016-05-30T10:48:20.609Z"
    },
    {
      "number": "0.6.2",
      "date": "2016-06-29T06:39:51.045Z"
    },
    {
      "number": "0.6.3",
      "date": "2016-06-29T06:57:28.804Z"
    },
    {
      "number": "0.8.0",
      "date": "2016-08-26T18:27:29.118Z"
    },
    {
      "number": "0.9.2",
      "date": "2016-09-19T14:17:21.698Z"
    }
  ],
  "created": "2016-03-16T09:01:06.156Z",
  "modified": "2016-09-19T14:17:21.698Z",
  "lastPublisher": {
    "name": "argoroots",
    "email": "argo@roots.ee"
  },
  "owners": [
    {
      "name": "argoroots",
      "email": "argo@roots.ee"
    }
  ],
  "readme": "# Entu CMS\n\n![Screenshot](https://cms.entu.eu/screenshot.png)\n\n## Benefits\n\n- Simple file based CMS.\n- Use Your favorite tools/editors.\n- Generate static HTML files from [Jade](http://jade-lang.com) templates or [Markdown](https://en.wikipedia.org/wiki/Markdown).\n- Generate site CSS from [Stylus](http://stylus-lang.com) files.\n- Pass data to templates with [Yaml](http://yaml.org) files.\n- Use locale identificator in filenames to generate locale specific content.\n- ...\n\n\n## Installation and usage\n\nDownload [latest build](https://github.com/argoroots/entu-cms/releases/latest), unzip and run. Choose config.yaml file and it will:\n\n1. generate HTML/CSS files\n2. start server on localhost\n3. monitor source folder for changes and (re)generate necessary HTML/CSS.\n\n\n### Configuration\n\nSites build process is configurable by Yaml file and its path must be first argument for entu-cms.js. Required parameters are:\n\n- __locales__  \n  List of locale folders to generate. You can put locale identificator to filename (like index.en.jade or data.et.yaml) for locale speciffic content.\n- __source__  \n  Folder with source files (realtive to build config.yaml). Folders beginning with underscore are ignored.\n- __build__  \n  Folder to put generated HTML (realtive to build config.yaml).\n- __assets__  \n  Folder to put static files (JS, images, ...).\n- __assetsPath__  \n  Serving page in localhost will map this url to folder specified in _assets_ parameter.\n- __jade.basedir__  \n  Jade basedir for simpler include/extend.\n- __jade.pretty__  \n  Boolean to set if output HTML is pretty formatted or not.\n- __markdown.breaks__  \n  Convert '\\n' in (markdown) paragraphs into <br>\n- __markdown.html__  \n  Enable HTML tags in (markdown) source\n- __stylus.pretty__  \n  Boolean to set if output CSS is pretty formatted or not.\n- __javascript.pretty__  \n  Boolean to set if output JavaScript is pretty formatted or not.\n- __port__  \n  What port to use for serving on localhost.\n\n### Example build configuration file:\n\n```\nlocales:\n  - en\n  - et\nsource: ./source\nbuild: ./build\nassets: ./assets\nassetsPath: /assets/\njade:\n  basedir: ./source/_templates\n  pretty: false\nmarkdown:\n  breaks: true\n  html: false\nstylus:\n  pretty: false\nport: 4000\n```\n\n\n## Content\n\n### Page content - index.jade\n\nPage content is generated from __index.jade__ file. All other files are ignored, but You can use those files for Jade [include](http://jade-lang.com/reference/includes)/[extends](http://jade-lang.com/reference/inheritance). You can put locale identificator to filename (like index.en.jade) for locale speciffic content.\n\n### Page style - style.styl\n\nTo generate page CSS use __style.styl__ file. You can put locale identificator to filename (like style.en.styl) for locale speciffic style.\n\nGlobal, location based, style.css is combined from all style.styl files and put to location root folder (like /en/style.css).\n\n### Page data and configuration - data.yaml\n\nTo pass data to index.jade use front matter (Yaml formated data beginning of Jaml file between two \\-\\-\\- lines) or __data.yaml__ file. This data is passed to index.jade in object named _D_ (To get property _text_ from data.yaml use _D.text_ in index.jade).\n\nYou can put locale identificator to filename (like data.en.yaml) for locale speciffic content. Other locales _page_ object is accessible via _page.otherLocales_ object.\n\nThis file can also contain page configuration info. All page parameters must be inside _page_ property. This info is also passed to index.jade in _page_ object.\n\nSome page parameters will change how HTML is generated. Those are:\n- __page.disabled__  \n  If true, page will not be generated nor loaded to _page.otherLocales_ object.\n- __page.path__  \n  If set, it will override folder based path.\n- __page.aliases__  \n  List of path aliases. Will make redirekt urls to original path.\n- __page.originalPath__  \n  Original path (if this page is generated to differnt path using _page.aliases_ parameter). Use this to redirect or for canonocal link.\n- __page.data__\n  Files to load data from. This data is passed to index.jade in object named _F_. You can put locale identificator to filename (like my_custom_list.en.yaml). You can use relative path (./ or ../). If used it's relative to source folder (set in _config.yaml_) and not this _data.yaml_ file\n\n### Example page data.yaml:\n\n```\npage:\n  path: /testpage1\n  aliases:\n    - /test\n    - /test123\n  data:\n    news: ./datafiles/news.yaml\nsomeOtherData:\n  - A\n  - B\n```\n\n## On build ...\n\n### ... source folder like this ...\n\n```\n- source\n    |- _templates\n    |   |- layout.jade\n    |   +- mixins.jade\n    |\n    |- testpage1\n    |   |- data.en.yaml\n    |   |- data.et.yaml\n    |   |- index.jade\n    |   +- style.et.styl\n    |\n    |- testpage2\n    |   |- index.en.jade\n    |   |- index.et.jade\n    |   |- data.yaml\n    |   +- testpage2en\n    |       |- index.en.jade\n    |       +- data.en.yaml\n    |\n    |- index.jade\n    +- style.styl\n```\n\n### ... will be converted to build folder like this\n\n```\n- build\n    |- en\n    |   |- index.html\n    |   |- style.css\n    |   |- testpage1\n    |   |   +- index.html\n    |   |\n    |   +- testpage2\n    |       |- index.html\n    |       +- testpage2en\n    |           +- index.html\n    |\n    +- et\n        |- index.html\n        |- style.css\n        |- testpage1\n        |   +- index.html\n        |\n        +- testpage2\n            +- index.html\n```\n\n[![npm version](https://badge.fury.io/js/entu-cms.svg)](https://badge.fury.io/js/entu-cms) [![Dependency Status](https://david-dm.org/argoroots/entu-cms.svg)](https://david-dm.org/argoroots/entu-cms) [![Codacy Badge](https://api.codacy.com/project/badge/grade/66531026074a471897b076fb91a74601)](https://www.codacy.com/app/argoroots/entu-cms)\n"
}