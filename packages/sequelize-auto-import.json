{
  "name": "sequelize-auto-import",
  "version": "1.0.1",
  "description": "Import sequelize models automagically",
  "main": "src/index.js",
  "files": [
    "src"
  ],
  "scripts": {
    "lint": "eslint src test",
    "test": "mocha"
  },
  "homepage": "https://github.com/bjrmatos/sequelize-auto-import#readme",
  "repository": {
    "user": "bjrmatos",
    "repo": "sequelize-auto-import",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/bjrmatos/sequelize-auto-import/tarball/master",
    "clone_url": "https://github.com/bjrmatos/sequelize-auto-import",
    "https_url": "https://github.com/bjrmatos/sequelize-auto-import",
    "travis_url": "https://travis-ci.org/bjrmatos/sequelize-auto-import",
    "zip_url": "https://github.com/bjrmatos/sequelize-auto-import/archive/master.zip",
    "api_url": "https://api.github.com/repos/bjrmatos/sequelize-auto-import"
  },
  "keywords": [
    "sequelize",
    "import",
    "sequelize models"
  ],
  "author": {
    "name": "BJR Matos",
    "email": "bjrmatos@gmail.com",
    "url": "https://github.com/bjrmatos"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "3.5.0",
    "eslint": "2.10.2",
    "eslint-config-airbnb-base": "3.0.1",
    "eslint-plugin-import": "1.8.0",
    "mocha": "2.4.5",
    "mysql": "2.10.2",
    "sequelize": "3.23.2"
  },
  "dependencies": {
    "object-assign": "4.1.0",
    "snake-case": "1.1.2"
  },
  "gitHead": "9dbb2f357c63e49a2cfbe7106f1b6c5cf98d8802",
  "_npmVersion": "2.15.6",
  "_nodeVersion": "0.10.45",
  "dist": {
    "shasum": "e57c3cc8b64054c80bed72d1d5df97db7be1c2d5",
    "tarball": "http://registry.npmjs.org/sequelize-auto-import/-/sequelize-auto-import-1.0.1.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-05-22T20:21:26.159Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-05-22T20:24:03.954Z"
    }
  ],
  "created": "2016-05-22T20:21:26.159Z",
  "modified": "2016-05-22T20:24:03.954Z",
  "lastPublisher": {
    "name": "bjrmatos",
    "email": "bjrmatos@gmail.com"
  },
  "owners": [
    {
      "name": "bjrmatos",
      "email": "bjrmatos@gmail.com"
    }
  ],
  "readme": "sequelize-auto-import\n=====================\n\n[![NPM Version](http://img.shields.io/npm/v/sequelize-auto-import.svg?style=flat-square)](https://npmjs.com/package/sequelize-auto-import)[![License](http://img.shields.io/npm/l/sequelize-auto-import.svg?style=flat-square)](http://opensource.org/licenses/MIT)[![Build Status](https://travis-ci.org/bjrmatos/sequelize-auto-import.png?branch=master)](https://travis-ci.org/bjrmatos/sequelize-auto-import)\n\n> **Import sequelize models automagically**\n\nThis module let you import sequelize models defined in a directory and help you define each model with metadata generated based on directory structure.\n\nInstallation\n------------\n\n```bash\nnpm install sequelize-auto-import\n```\n\nUsage\n-----\n\nBased on a directory like this:\n\n```\n/path/to/models\n├── Item.js\n├── Service.js\n├── accounts\n│   └── Person.js\n├── base\n│   ├── Animal.js\n│   └── Contact.js\n└── index.js\n```\n\nModel definitions inside `*.js` files can be something like this:\n\n```js\nmodule.exports = function(sequelize, DataTypes, meta) {\n  // using the meta object to help us define the model\n  return sequelize.define(meta.modelName, {\n    id: {\n      type: DataTypes.INTEGER(11),\n      allowNull: false,\n      primaryKey: true\n    },\n    name: {\n      type: DataTypes.STRING(250),\n      allowNull: true\n    }\n  }, {\n    timestamps: false,\n    freezeTableName: true,\n    tableName: meta.tableName,\n    schema: meta.schema\n  });\n};\n```\n\nAs you can see we are using the `meta` object generated by `sequelize-auto-import` to help us define the model, of course you can choose to not use these values and put what you want.\n\nThe `meta` object will have the following properties based on the location of the model inside the directory:\n\n```js\n{\n  schema: string?, // value to use in the `schema` option of `sequelize.define`\n  schemaName: string, // the schema name of the model for your convenience\n  modelName: string, // value to use as the model name of `sequelize.define`\n  tableName: string, // value to use as the `tableName` option of `sequelize.define`\n  completeTableName: string, // the result of `schemaName` + `separator` + `tableName` for your convenience\n  separator: string // the separator that we use for your convenience\n}\n```\n\nFor example for the `Item.js` model the values of `meta` will be:\n\n```js\n{\n  schema: undefined,\n  schemaName: '',\n  modelName: 'Item',\n  tableName: 'item',\n  completeTableName: 'item',\n  separator: '.'\n}\n```\n\nand for the `accounts/Person.js` model:\n\n```js\n{\n  schema: 'accounts',\n  schemaName: 'accounts',\n  modelName: 'accounts.Person',\n  tableName: 'person',\n  completeTableName: 'accounts.person',\n  separator: '.'\n}\n```\n\nyou can customize how the `tableName` is generated, see [options.](https://github.com/bjrmatos/sequelize-auto-import/#options)\n\nWith the models defined we can import all the models inside `/path/to/models` directory and its subdirectories using the following in `index.js`:\n\n```js\nvar Sequelize = require('sequelize');\n\nvar sequelize = new Sequelize('test', 'test', 'test', {\n  dialect: 'mysql',\n  host: 'localhost',\n  port: 3306\n});\n\n// you can pass options, see bellow for details\nvar models = require('sequelize-auto-import')(sequelize, '/path/to/models');\n\n// export all the models for your convenience\nmodule.exports = models;\n```\n\nNow you can access the models in this way:\n\n```js\nmodels.Item\nmodels.Service\nmodels.accounts.Person\nmodels.base.Animal\nmodels.base.Contact\n```\n\nNote that `sequelize-auto-import` will recursively search for `js` files inside the specified directory.\n\nOptionally if your models have a `associate` method `sequelize-auto-import` will call it passing all the loaded models as a parameter, in that method you can define relations between your models if you want.\n\nAPI\n---\n\nThere is only one function exported with the following parameters:\n\n-\t`sequelizeInstace` A sequelize instance generated by your app\n-\t`pathToModels` The path where your models are located, if no specified default to current directory\n-\t`options` An options object, see bellow for all the available options\n\n### Options\n\n-\t`recursive`: boolean Whether to search inside all subdirectories or only one level, defaults to `true`\n-\t`associate`: boolean When `true` the `associate` method in models will be call it when found, defaults to `true`\n-\t`tableNameFormat`: string | function This option specifies how the `tableName` for the model will be generated, when a string is passed one of the established formats will be used:\n\n\t-\t`snakeCase` A model like `CustomModel.js` will have `custom_model` as `tableName`\n\n\tif a function is passed you can generate the `tableName` as you want, for example for a model like `CustomModel.js` and with a function like this the `tableName` will be `custommodel`:\n\n```js\ntableNameFormat: function(modelName) {\n  // modelName === 'CustomModel'\n  return modelName.toLowerCase();\n}\n```\n\n-\t`exclude`: Array A list of files to ignore when importing\n\n(for now we only support `snakeCase` as one of the available formats, open a PR if you want other formats)\n\nLicense\n-------\n\nSee [license](https://github.com/bjrmatos/electron-html-to/blob/master/LICENSE)\n"
}