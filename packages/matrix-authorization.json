{
  "name": "matrix-authorization",
  "version": "1.0.4",
  "description": "A permissions based matrix authorization strategy.",
  "main": "index.js",
  "scripts": {
    "benchmark": "NODE_ENV=test node test/benchmark/index.js",
    "test": "NODE_ENV=test tap -R spec --cov test/unit/*.js test/integration/**/*.js",
    "test-unit": "NODE_ENV=test tap -R spec --cov test/unit/*.js",
    "test-integration": "NODE_ENV=test tap -R spec --cov test/integration/**/*.js",
    "test-report": "NODE_ENV=test tap -R spec --cov --coverage-report=lcov test/unit/*.js test/integration/**/*.js",
    "test-file": "NODE_ENV=test tap -R spec --cov"
  },
  "files": [
    "index.js",
    "lib/",
    "Readme.md"
  ],
  "keywords": [
    "authorization",
    "matrix"
  ],
  "author": {
    "name": "Jim",
    "email": "monstertke@paperelectron.com",
    "url": "http://paperelectron.com/"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "^4.13.1"
  },
  "devDependencies": {
    "benchmark": "^2.1.0",
    "microtime": "^2.1.1",
    "tap": "^5.8.0"
  },
  "repository": {
    "user": "PaperElectron",
    "repo": "matrix-authorization",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/PaperElectron/matrix-authorization/tarball/master",
    "clone_url": "https://github.com/PaperElectron/matrix-authorization",
    "https_url": "https://github.com/PaperElectron/matrix-authorization",
    "travis_url": "https://travis-ci.org/PaperElectron/matrix-authorization",
    "zip_url": "https://github.com/PaperElectron/matrix-authorization/archive/master.zip",
    "api_url": "https://api.github.com/repos/PaperElectron/matrix-authorization"
  },
  "homepage": "https://github.com/PaperElectron/matrix-authorization",
  "gitHead": "51546c66eb60fba81a387445bc42cd9d67da5584",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.3.0",
  "dist": {
    "shasum": "33cdb172a94a43c09fa958f608c078701985c4ab",
    "tarball": "http://registry.npmjs.org/matrix-authorization/-/matrix-authorization-1.0.4.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-06-29T07:38:06.912Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-06-29T14:50:44.532Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-06-29T15:21:51.214Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-06-29T15:23:44.184Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-10-25T16:03:13.895Z"
    },
    {
      "number": "1.0.4",
      "date": "2016-10-25T16:12:32.522Z"
    }
  ],
  "created": "2016-06-29T07:38:06.912Z",
  "modified": "2016-10-25T16:12:32.522Z",
  "lastPublisher": {
    "name": "paperelectron",
    "email": "jim.bulkowski@paperelectron.com"
  },
  "owners": [
    {
      "name": "paperelectron",
      "email": "jim.bulkowski@paperelectron.com"
    }
  ],
  "readme": "# Matrix authorization\n\nNode based permission checks in Node.\n\n[![Build Status](https://travis-ci.org/PaperElectron/matrix-authorization.svg?branch=master)](https://travis-ci.org/PaperElectron/matrix-authorization)\n[![Coverage Status](https://coveralls.io/repos/github/PaperElectron/matrix-authorization/badge.svg?branch=master)](https://coveralls.io/github/PaperElectron/matrix-authorization?branch=master)\n\n### API\n```javascript\n/*\n * Create some permissions to check against.\n */\n\nvar permissions = {\n  user: ['create', 'read', 'update', 'delete'],\n  post: ['create', 'read', 'update', 'delete'],\n  tag: [{list: [{limit: [10, 20, 30, 40, 50]}]}]\n}\n\n/*\n * Instantiate the module, passing in your permissions object.\n */\nvar matrix = require('matrix-auth')(permissions)\n\n/*\n * Create a function to call with the values you want to check.\n * Pass in an array of the required nodes.\n */\n\nvar checkFn1 = matrix.createCheck(['user.create', 'tag.list.limit.50'])\n\n/*\n * Call the created function with the values you want to check.\n */\n\n// matches everything downstream of the *\ncheckFn1({user: ['*'], tag: [{list: ['*']}]}) // true\n\n// matches everything downstream of the *\ncheckFn1({user: ['*'], tag: ['*']}) // true\n\n//missing tag node.\ncheckFn1({user: ['*']}) // false\n\n```\n\n\n### Todo\n\n- More robust argument handling. Accept comma delimited strings, in addition to arrays.\n- Accept an array of pure node values into the function returned by createCheck\n- fuzzy matching where possible, ie node.50 matches node.[0-50]"
}