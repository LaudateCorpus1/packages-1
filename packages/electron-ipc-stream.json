{
  "name": "electron-ipc-stream",
  "version": "0.2.0",
  "description": "Duplex stream over IPC for main/renderer to communicate with each other.",
  "main": "index.js",
  "scripts": {
    "test": "standard"
  },
  "repository": {
    "user": "jprichardson",
    "repo": "electron-ipc-stream",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/jprichardson/electron-ipc-stream/tarball/master",
    "clone_url": "https://github.com/jprichardson/electron-ipc-stream",
    "https_url": "https://github.com/jprichardson/electron-ipc-stream",
    "travis_url": "https://travis-ci.org/jprichardson/electron-ipc-stream",
    "zip_url": "https://github.com/jprichardson/electron-ipc-stream/archive/master.zip",
    "api_url": "https://api.github.com/repos/jprichardson/electron-ipc-stream"
  },
  "keywords": [
    "electron",
    "electron-component",
    "ipc",
    "stream",
    "streams",
    "duplex",
    "readable",
    "writeable"
  ],
  "author": {
    "name": "JP Richardson"
  },
  "license": "MIT",
  "homepage": "https://github.com/jprichardson/electron-ipc-stream#readme",
  "devDependencies": {
    "electron-window": "^0.6.2"
  },
  "dependencies": {
    "buffer-json": "^1.0.0",
    "is-electron-renderer": "^2.0.0"
  },
  "gitHead": "5eaec44a06c25db63bfa391e610ee6610b7b2c1c",
  "_npmVersion": "3.8.2",
  "_nodeVersion": "5.3.0",
  "dist": {
    "shasum": "07b374e7e26e619de56d5caf99f8ba0a93209c06",
    "tarball": "http://registry.npmjs.org/electron-ipc-stream/-/electron-ipc-stream-0.2.0.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-07-11T19:49:32.200Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-03-19T19:52:20.182Z"
    }
  ],
  "created": "2015-07-11T19:49:32.200Z",
  "modified": "2016-03-19T19:52:20.182Z",
  "lastPublisher": {
    "name": "jprichardson",
    "email": "jprichardson@gmail.com"
  },
  "owners": [
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    }
  ],
  "readme": "electron-ipc-stream\n===================\n\nDuplex stream that run over [Electron's IPC](https://github.com/atom/electron/tree/master/docs) mechanism.\n\n\nWhy?\n---\n\nThis allows you to use any Node.js stream readable/writable and easily communicate between your\nmain/renderer process.\n\nSince your `renderer` process is also responsible for UI/DOM, etc, you may not want to do any heavy\nprocessing on the renderer process. You could leverage this module to have the renderer stream\ndata to the `main` process for processing and then the `main` module could stream results\nback to the `renderer` process for consumption.\n\n\nInstall\n-------\n\n    npm i --save electron-ipc-stream\n\n\nUsage\n-----\n\n### Example 1: Pipe file from main process to renderer.\n\n**main.js:**\n\n```js\nvar app = require('app')\nvar fs = require('fs')\nvar path = require('path')\nvar window = require('electron-window')\nvar IPCStream = require('electron-ipc-stream')\n\napp.on('ready', function () {\n  var win = window.createWindow({ height: 600, with: 1000 })\n\n  var ipcs = new IPCStream('any-arbitrary-channel-name', win)\n  win.showUrl(path.resolve(__dirname, './index.html'), function () {\n    // window is visible, dom is ready in window\n    fs.createReadStream('/tmp/mainfile').pipe(ipcs)\n  })\n})\n```\n\n**rend.js:**\n\n```js\nvar fs = require('fs')\nvar ipc = require('ipc')\nvar IPCStream = require('electron-ipc-stream')\nvar ipcs = new IPCStream('any-arbitrary-channel-name')\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  ipcs.pipe(fs.createWriteStream('/tmp/rendfile')).on('finish', function () {\n    console.log('done')\n  })\n})\n```\n\n\n### Example 2: Pipe file from renderer process to main.\n\n**main.js:**\n\n```js\nvar app = require('app')\nvar fs = require('fs')\nvar path = require('path')\nvar window = require('electron-window')\nvar IPCStream = require('electron-ipc-stream')\n\nvar tmpfile = '/tmp/mainfile'\napp.on('ready', function () {\n  var win = window.createWindow({ height: 600, with: 1000 })\n  var ipcs = new IPCStream('any-arbitrary-channel-name', win)\n  ipcs.pipe(fs.createWriteStream(tmpfile)).on('finish', function () {\n    console.log('done')\n  })\n  win.showUrl(path.resolve(__dirname, './index.html'), function () { })\n})\n```\n\n**rend.js:**\n\n```js\nvar crypt = require('crypto') // notice this is 'crypt' and not 'crypto'\nvar fs = require('fs')\nvar ipc = require('ipc')\nvar IPCStream = require('electron-ipc-stream')\nvar ipcs = new IPCStream('any-arbitrary-channel-name')\n\nfs.writeFileSync('/tmp/rendfile', crypt.randomBytes(10000))\ndocument.addEventListener('DOMContentLoaded', function () {\n  fs.createReadStream(tmpfile).pipe(ipcs)\n})\n```\n\n\nAPI\n----\n\n### Main Process\n\n#### IPCStream(channel, [browserWindow], [streamOptions])\n\nCreate a new IPCStream in the `main` process.\n\n\n### Renderer Process\n\n#### IPCStream(channel, [streamOptions])\n\nCreate a new IPCStream in the `renderer` process.\n\n\n### Stream Options\n\nYou shouldn't have to mess with `objectMode`. Under the hood, `objectMode` is `true`.\nBuffers are serialized to JSON. This is because of the way that Electron handles buffers\nin renderer. See: https://github.com/atom/electron/blob/master/docs/api/remote.md for\nmore detail. You also may need to adjust [`highWaterMark`](https://nodejs.org/api/stream.html).\n\n\n### JSON Objects\n\nIt is completely safe to call `write` on either end of the stream with objects.\n\nsource:\n\n```js\nmyStream.write({name: 'JP'})\n```\n\ndest:\n\n```js\n// streams 1 (flowing):\nmyStream.on('data', function (data) {\n  console.dir(data) // => {name: 'JP'}\n})\n\n// streams 2/3 (pull, if you prefer):\nmyStream.on('readable', function () {\n  var data\n  while (null !=== (data = myStream.read())) {\n    console.dir(data) // => {name: 'JP'}\n  }\n})\n\n```\n\n\n\n### Examples\n\nIn the `./test` folder, you'll see two examples. You can run these by\ninstalling [electron-prebuilt](https://www.npmjs.com/package/electron-prebuilt):\n\n    npm i -g electron-prebuilt\n    electron ./test/main-to-rend\n    electron ./test/rend-to-main\n\n\n\nLicense\n-------\n\nMIT Copyright [JP Richardson](https://github.com/jprichardson)\n"
}