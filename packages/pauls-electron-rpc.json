{
  "name": "pauls-electron-rpc",
  "version": "1.3.1",
  "description": "My RPC solution for exporting APIs from the electron background process to renderers and webviews.",
  "main": "index.js",
  "scripts": {
    "test": "node -e \"require('child_process').spawn(require('electron-prebuilt'), ['./test'], { stdio: 'inherit' })\""
  },
  "repository": {
    "user": "pfraze",
    "repo": "pauls-electron-rpc",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/pfraze/pauls-electron-rpc/tarball/master",
    "clone_url": "https://github.com/pfraze/pauls-electron-rpc",
    "https_url": "https://github.com/pfraze/pauls-electron-rpc",
    "travis_url": "https://travis-ci.org/pfraze/pauls-electron-rpc",
    "zip_url": "https://github.com/pfraze/pauls-electron-rpc/archive/master.zip",
    "api_url": "https://api.github.com/repos/pfraze/pauls-electron-rpc"
  },
  "keywords": [
    "electron",
    "rpc",
    "ipc"
  ],
  "author": {
    "name": "Paul Frazee",
    "email": "pfrazee@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/pfraze/pauls-electron-rpc#readme",
  "devDependencies": {
    "electron-prebuilt": "^1.2.6",
    "multicb": "^1.2.1",
    "tape": "^4.6.0",
    "tape-dom": "0.0.10"
  },
  "gitHead": "a7a2626959f264bb8cf9fee7bb0e968ce175b6ff",
  "_npmVersion": "3.9.3",
  "_nodeVersion": "6.2.1",
  "dist": {
    "shasum": "ffefd720d1334f0e843704a9a511999f807d9803",
    "tarball": "http://registry.npmjs.org/pauls-electron-rpc/-/pauls-electron-rpc-1.3.1.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-07-09T19:01:57.837Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-07-09T19:40:25.064Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-07-12T02:43:52.400Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-07-13T00:15:41.878Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-07-13T00:30:44.340Z"
    }
  ],
  "created": "2016-07-09T19:01:57.837Z",
  "modified": "2016-07-13T00:30:44.340Z",
  "lastPublisher": {
    "name": "pfraze",
    "email": "pfrazee@gmail.com"
  },
  "owners": [
    {
      "name": "pfraze",
      "email": "pfrazee@gmail.com"
    }
  ],
  "readme": "# pauls-electron-rpc\n\nFeatures:\n\n - Supports RPC calls from the renderer or webview to the background process\n - Supports methods which return:\n   - Sync values\n   - Async CBs\n   - Readable streams\n - Permissions by examining the sender of the call\n - Monitors renderer/webview lifetime to automatically release streams.\n\nPossible future additions:\n\n - Writable streams\n - Duplex streams\n - Return objects with their own exported APIs\n\nTodos:\n\n - [ ] Make sure buffers are sent in a useful form. (I'm not sure what the buffer behaviors should be inside webpages, yet.)\n\n## Example usage\n\nIn a shared `example-api-manifest.js`:\n\n```js\nmodule.exports = {\n  // simple method-types\n  readFile: 'async',\n  readFileSync: 'sync',\n  createReadStream: 'readable'\n}\n```\n\nIn the main electron process:\n\n```js\nvar rpc = require('pauls-electron-rpc')\nvar manifest = require('./example-api-manifest')\nvar fs = require('fs')\n\n// export over the 'example-api' channel\nvar api = rpc.exportAPI('example-api', manifest, {\n  // the exported API behaves like normal calls:\n  readFile: fs.readFile,\n  readFileSync: fs.readFileSync,\n  createReadStream: fs.createReadStream\n})\n\n// log any errors\napi.on('error', console.log)\n```\n\nIn the renderer or webview process:\n\n```js\nvar rpc = require('pauls-electron-rpc')\nvar manifest = require('./example-api-manifest')\n\n// import over the 'example-api' channel\nvar api = rpc.importAPI('example-api', manifest)\n\n// now use, as usual:\napi.readFileSync('/etc/hosts') // => '...'\n```\n\n## API\n\n### rpc.exportAPI(channelName, manifest, methods)\n\nMethods will be called with a `this` set to the `event` object from [electron ipc](http://electron.atom.io/docs/api/ipc-main/#event-object).\nDon't touch `returnValue`.\n\n### rpc.importAPI(channelName, manifest)\n\n## Readable Streams\n\nReadable streams in the clientside are given a `.close()` method.\nAll serverside streams MUST implement `.close()` or `.destroy()`, either of which will be called."
}