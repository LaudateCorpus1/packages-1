{
  "name": "electron-packager-itchio",
  "version": "5.1.2",
  "description": "package your electron app in OS executables (.app, .exe, etc) via JS or CLI",
  "main": "index.js",
  "bin": {
    "electron-packager": "cli.js"
  },
  "repository": {
    "user": "maxogden",
    "repo": "electron-packager",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/maxogden/electron-packager/tarball/master",
    "clone_url": "https://github.com/maxogden/electron-packager",
    "https_url": "https://github.com/maxogden/electron-packager",
    "travis_url": "https://travis-ci.org/maxogden/electron-packager",
    "zip_url": "https://github.com/maxogden/electron-packager/archive/master.zip",
    "api_url": "https://api.github.com/repos/maxogden/electron-packager"
  },
  "author": {
    "name": "max ogden"
  },
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/maxogden/electron-packager",
  "dependencies": {
    "asar": "^0.8.2",
    "electron-download": "^1.0.0",
    "extract-zip": "^1.0.3",
    "minimist": "^1.1.1",
    "mkdirp": "^0.5.0",
    "mv": "^2.0.3",
    "ncp": "^2.0.0",
    "plist": "^1.1.0",
    "rcedit": "^0.3.0",
    "rimraf": "^2.3.2",
    "run-series": "^1.1.1"
  },
  "devDependencies": {
    "run-waterfall": "^1.1.1",
    "standard": "^3.3.2",
    "tape": "^4.0.0",
    "rcinfo": "^0.1.3"
  },
  "scripts": {
    "test": "standard && tape test"
  },
  "standard": {
    "ignore": [
      "test/fixtures/**/node_modules"
    ]
  },
  "gitHead": "04f72e2f08abe551b9e15865255ad59ce9c42be6",
  "_npmVersion": "2.14.7",
  "_nodeVersion": "4.2.2",
  "dist": {
    "shasum": "bc19a4d29b6b222a4d4cfecc722a91a04beb4aee",
    "tarball": "http://registry.npmjs.org/electron-packager-itchio/-/electron-packager-itchio-5.1.2.tgz"
  },
  "versions": [
    {
      "number": "5.1.2",
      "date": "2015-12-13T21:28:20.563Z"
    }
  ],
  "created": "2015-12-13T21:28:20.563Z",
  "modified": "2015-12-13T21:28:20.563Z",
  "lastPublisher": {
    "name": "fasterthanlime",
    "email": "amoswenger@gmail.com"
  },
  "owners": [
    {
      "name": "fasterthanlime",
      "email": "amoswenger@gmail.com"
    }
  ],
  "readme": "# electron-packager\n\nPackage your [Electron](http://electron.atom.io) app into OS-specific bundles (`.app`, `.exe`, etc.) via JavaScript or the command line. Supports building Windows, Linux or Mac executables.\n\n[![Build Status](https://travis-ci.org/maxogden/electron-packager.svg?branch=master)](https://travis-ci.org/maxogden/electron-packager)\n\n## About\n\nElectron Packager is a command line tool that packages electron app source code into executables like `.app` or `.exe` along with a copy of Electron.\n\nThis module was developed as part of [Dat](http://dat-data.com/), a grant funded non-profit open source project. It is maintained by volunteers. If you are benefitting from this module please consider making contributions back.\n\nNote that packaged Electron applications can be relatively large. A zipped barebones OS X Electron application is around 40MB.\n\n## Installation\n\n```sh\n# for use in npm scripts\nnpm install electron-packager --save-dev\n\n# for use from cli\nnpm install electron-packager -g\n```\n\n## Usage\n\n### From the Command Line\n\nRunning electron-packager from the command line has this basic form:\n\n```\nelectron-packager <sourcedir> <appname> --platform=<platform> --arch=<arch> --version=<Electron version> [optional flags...]\n```\n\nThis will:\n\n- Find or download the correct release of Electron\n- Use that version of Electron to create a app in `<out>/<appname>-<platform>-<arch>` *(this can be customized via an optional flag)*\n\nFor details on the optional flags, run `electron-packager --help` or see [usage.txt](https://github.com/maxogden/electron-packager/blob/master/usage.txt).\n\nYou should be able to launch the app on the platform you built for. If not, check your settings and try again.\n\n**Be careful** not to include `node_modules` you don't want into your final app. `electron-packager`, `electron-prebuilt` and `.git` will be ignored by default. You can use `--ignore` to ignore files and folders via a regular expression. For example, `--ignore=node_modules/electron-packager` or `--ignore=\"node_modules/(electron-packager|electron-prebuilt)\"`.\n\n#### Example\n\nGiven the app `FooBar` with the following file structure:\n\n```\nfoobar\n├─package.json\n└┬src\n ├─index.html\n ├─script.js\n └─style.css\n```\n\nWhen one runs the following command for the first time in the `foobar` directory:\n\n```\nelectron-packager . FooBar --platform=darwin --arch=x64 --version=0.28.2\n```\n\n`electron-packager` will do the following:\n\n* downloads Electron 0.28.2 for OS X on x64 (and caches the download in `~/.electron`)\n* builds the OS X `FooBar.app`\n* places `FooBar.app` in `foobar/FooBar-darwin-x64/` (since an `out` directory was not specified)\n\nThe file structure now looks like:\n\n```\nfoobar\n├┬FooBar-darwin-x64\n│├┬FooBar.app\n││└[…Mac app contents…]\n│├─LICENSE\n│└─version\n├─package.json\n└┬src\n ├─index.html\n ├─script.js\n └─style.css\n```\n\nThe `FooBar.app` folder generated can be executed by a system running OS X, which will start the packaged Electron app.\n\n### Programmatic API\n```javascript\nvar packager = require('electron-packager')\npackager(opts, function done (err, appPath) { })\n```\n#### packager(opts, callback)\n\n##### opts\n\n**Required**\n\n`dir` - *String*\n\n  The source directory.\n\n`name` - *String*\n\n  The application name.\n\n`platform` - *String*\n\n  Allowed values: *linux, win32, darwin, all*\n\n  Not required if `all` is used.\n  Arbitrary combinations of individual platforms are also supported via a comma-delimited string or array of strings.\n  The non-`all` values correspond to the platform names used by [Electron releases](https://github.com/atom/electron/releases).\n\n`arch` - *String*\n\n  Allowed values: *ia32, x64, all*\n\n  Not required if `all` is used.\n  The non-`all` values correspond to the architecture names used by [Electron releases](https://github.com/atom/electron/releases).\n\n`version` - *String*\n\n  Electron version (without the 'v') - for example, [`0.33.9`](https://github.com/atom/electron/releases/tag/v0.33.9). See [Electron releases](https://github.com/atom/electron/releases) for valid versions.\n\n**Optional**\n\n`all` - *Boolean*\n\n  When `true`, sets both `arch` and `platform` to `all`.\n\n`app-bundle-id` - *String*\n\n`app-category-type` - *String*\n\n  The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory (OS X only).\n\n  For example, `app-category-type=public.app-category.developer-tools` will set the application category to *Developer Tools*.\n\n  Valid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).\n\n`app-version` - *String*\n\n`asar` - *Boolean*\n\n`asar-unpack` - *String*\n\n`asar-unpack-dir` - *String*\n\n  Unpacks the dir to app.asar.unpacked directory whose names exactly match this string. The `asar-unpack-dir` is relative to `dir`.\n  For example, `asar-unpack-dir=sub_dir` will unpack the directory `/<dir>/sub_dir`.\n\n`build-version` - *String*\n\n`cache` - *String*\n\n`helper-bundle-id` - *String*\n\n`icon` - *String*\n\n  Currently you must look for conversion tools in order to supply an icon in the format required by the platform:\n\n  - OS X: `.icns`\n  - Windows: `.ico` ([See below](#building-windows-apps-from-non-windows-platforms) for details on non-Windows platforms)\n  - Linux: this option is not required, as the dock/window list icon is set via [the icon option in the BrowserWindow contructor](http://electron.atom.io/docs/v0.30.0/api/browser-window/#new-browserwindow-options). Setting the icon in the file manager is not currently supported.\n\nIf the file extension is omitted, it is auto-completed to the correct extension based on the platform, including when `--platform=all` is in effect.\n\n`ignore` - *RegExp*\n\n`out` - *String*\n\n`overwrite` - *Boolean*\n\n`prune` - *Boolean*\n\n`sign` - *String*\n\n`strict-ssl` - *Boolean*\n\n  Whether SSL certificates are required to be valid when downloading Electron. Defaults to true.\n\n`version-string` - *Object*\n\n  Object hash of application metadata to embed into the executable (Windows only):\n  - `CompanyName`\n  - `LegalCopyright`\n  - `FileDescription`\n  - `OriginalFilename`\n  - `FileVersion`\n  - `ProductVersion`\n  - `ProductName`\n  - `InternalName`\n\n##### callback\n\n`err` - *Error*\n\n  Contains errors, if any.\n\n`appPath` - *String*\n\n  Path to the newly created application.\n\n## Building Windows apps from non-Windows platforms\n\nBuilding an Electron app for the Windows platform with a custom icon requires editing the `Electron.exe` file. Currently, electron-packager uses [node-rcedit](https://github.com/atom/node-rcedit) to accomplish this. A Windows executable is bundled in that node package and needs to be run in order for this functionality to work, so on non-Windows platforms, [Wine](https://www.winehq.org/) needs to be installed. On OS X, it is installable via [Homebrew](http://brew.sh/).\n\n## Related\n\n- [electron-builder](https://www.npmjs.com/package/electron-builder) - for creating installer wizards\n- [grunt-electron](https://github.com/sindresorhus/grunt-electron) - grunt plugin for electron-packager\n- [electron-packager-interactive](https://github.com/Urucas/electron-packager-interactive) - an interactive CLI for electron-packager\n"
}