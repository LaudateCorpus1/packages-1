{
  "name": "glantern",
  "version": "0.6.0-alpha",
  "description": "A library intended for a Flash-HTML5 shim layer.",
  "main": "build/node/glantern/index.js",
  "scripts": {
    "test": "node build/node/tests/logical/bootstrap.js"
  },
  "engines": {
    "node": ">=5.0"
  },
  "repository": {
    "user": "hozuki",
    "repo": "GLantern",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/hozuki/GLantern/tarball/master",
    "clone_url": "https://github.com/hozuki/GLantern",
    "https_url": "https://github.com/hozuki/GLantern",
    "travis_url": "https://travis-ci.org/hozuki/GLantern",
    "zip_url": "https://github.com/hozuki/GLantern/archive/master.zip",
    "api_url": "https://api.github.com/repos/hozuki/GLantern"
  },
  "keywords": [
    "webgl",
    "flash",
    "graphics"
  ],
  "author": {
    "name": "George Wu",
    "email": "uiharu@buaa.edu.cn"
  },
  "license": "MIT",
  "homepage": "https://github.com/Hozuki/GLantern#readme",
  "dependencies": {
    "browserify": "^12.0.1",
    "chalk": "^1.1.3",
    "gulp": "^3.9.0",
    "gulp-concat": "^2.6.0",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^1.6.0",
    "gulp-typescript": "^2.9.2",
    "gulp-uglify": "^1.5.1",
    "gulp-util": "^3.0.7",
    "libtess": "^1.2.1",
    "pako": "^1.0.1",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "gitHead": "61a8a727f33afc2476a0034e191dd33c6cc479c9",
  "_npmVersion": "3.10.8",
  "_nodeVersion": "5.10.1",
  "dist": {
    "shasum": "9889366264c90585d92770685e611d9f961af38e",
    "tarball": "http://registry.npmjs.org/glantern/-/glantern-0.6.0-alpha.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-12-22T16:01:51.647Z"
    },
    {
      "number": "0.2.0-alpha",
      "date": "2015-12-26T07:18:57.055Z"
    },
    {
      "number": "0.3.0-alpha",
      "date": "2015-12-26T14:57:25.670Z"
    },
    {
      "number": "0.3.1-alpha",
      "date": "2016-01-01T20:12:43.444Z"
    },
    {
      "number": "0.5.0-alpha",
      "date": "2016-01-31T15:19:36.995Z"
    },
    {
      "number": "0.5.1-alpha",
      "date": "2016-01-31T17:50:01.457Z"
    },
    {
      "number": "0.5.2-alpha",
      "date": "2016-02-01T12:00:03.674Z"
    },
    {
      "number": "0.5.3-alpha",
      "date": "2016-02-02T10:01:17.635Z"
    },
    {
      "number": "0.6.0-alpha",
      "date": "2016-10-30T02:49:40.832Z"
    }
  ],
  "created": "2015-12-22T16:01:51.647Z",
  "modified": "2016-11-08T19:15:50.103Z",
  "lastPublisher": {
    "name": "hozuki",
    "email": "breencast@live.com"
  },
  "owners": [
    {
      "name": "hozuki",
      "email": "breencast@live.com"
    }
  ],
  "readme": "# GLantern\r\n\r\n[![Travis](https://img.shields.io/travis/hozuki/GLantern.svg)](https://travis-ci.org/hozuki/GLantern)\r\n\r\nGLantern is a library intended for a Flash-HTML5 shim layer. Enjoy the live preview\r\nfrom <http://hozuki.github.io/GLantern>.\r\n\r\nScreenshots of test cases can be found [here](res/images).\r\n\r\n## Acquiring the Source\r\n\r\nNative `git` is highly recommended against other clients:\r\n\r\n```bash\r\n$ git clone https://github.com/Hozuki/GLantern.git /preferred/cloning/destination\r\n```\r\n\r\nOr, as a [NPM package](//npmjs.com/package/glantern), you can install it via `npm`:\r\n\r\n```bash\r\n$ npm install glantern --save\r\n```\r\n\r\n## Building from the Source\r\n\r\nMake sure you have Node.js and NPM installed. The rest is quite simple:\r\n\r\n```bash\r\n$ cd /path/to/GLantern/\r\n$ npm install\r\n$ gulp build\r\n```\r\n\r\nAfter building, you will find:\r\n\r\n- a `build/node` directory for NW.js and Electron;\r\n- a `build/GLantern-browser.js` file as the full, concatenated JavaScript file for browsers;\r\n- a `build/GLantern-browser.min.js` (and corresponding source mapping) for browsers, as the\r\nminimized file for a better loading speed.\r\n\r\n## Using the Library\r\n\r\nSee the demo page at `test/visual/index.html`. You will need an environment with WebGL, like\r\nmodern browsers, [NW.js](http://nwjs.io/), or [Electron](http://electron.atom.io/).\r\n\r\n### Importing into Your Project\r\n\r\nGLantern supports two styles of importing.\r\n\r\nThe first one is importing by `<script>` tag. Use its `src` attribute and point it to the compiled result:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"GLantern-browser.min.js\"></script>\r\n```\r\n\r\nIn environments that support Node.js, like NW.js or Electron, you can also use the `require` syntax:\r\n\r\n```html\r\n<script type=\"text/javascript\">\r\n    var GLantern = require(\"glantern\");\r\n</script>\r\n```\r\n\r\nAfter importing with either the former or the latter style, the `GLantern` object is globally available.\r\n\r\n### Using Exported Members\r\n\r\nThe package structure of Flash is preserved in GLantern, so adding a `GLantern.` prefix usually\r\nworks. If you want to make it more like ActionScript, GLantern provides a `injectToGlobal()` function\r\nto inject the \"packages\" to the global scope.\r\n\r\n```javascript\r\n// Check if GLantern is supported\r\nif (GLantern.isSupported()) {\r\n    var lantern = new GLantern.EngineBase();\r\n    lantern.initialize(682, 438);\r\n    document.body.appendChild(lantern.view);\r\n    window.addEventListener(\"unload\", function () {\r\n        lantern.dispose();\r\n    });\r\n    draw(true, this);\r\n} else {\r\n    var prompt = document.createElement(\"span\");\r\n    prompt.textContent = \"Oops, GLantern is not supported on your browser.\";\r\n    document.body.appendChild(prompt);\r\n}\r\n\r\n/**\r\n* Draws a rectangle.\r\n* @param asGlobal {Boolean} Whether to inject Flash packages to global scope or not.\r\n* @param g {*} The global object, usually {@link window}.\r\n*/\r\nfunction draw(asGLobal, g) {\r\n    if (asGLobal) {\r\n        GLantern.injectToGlobal(g);\r\n    }\r\n    var flash = g.flash ? g.flash : GLantern.flash;\r\n    var Display = Object.create({\r\n        \"createShape\": function (alpha) {\r\n            var s = new flash.display.Shape(lantern.stage, lantern.stage);\r\n            lantern.stage.addChild(s);\r\n            s.alpha = alpha;\r\n            return s;\r\n        }\r\n    });\r\n    var shape1 = Display.createShape(1);\r\n    shape1.graphics.beginFill(0xffffff);\r\n    shape1.graphics.drawRect(0, 0, 540, 383);\r\n    shape1.graphics.endFill();\r\n}\r\n```\r\n\r\n## Q&A\r\n\r\nSee [QA.md](QA.md).\r\n\r\n## License\r\n\r\n[The MIT License](//mitlicense.org)\r\n\r\nYou will also find a copy in [`LICENSE.md`](LICENSE.md).\r\n\r\n## Other Resources\r\n\r\n- Adobe Flash CC is able to export Flash project as WebGL projects. The tutorial and\r\nrestrictions can be found [here](https://helpx.adobe.com/flash/using/creating-publishing-webgl-document.html).\r\nHowever, it has recently be announced that [Flash is replaced by Animate](http://blogs.adobe.com/flashpro/welcome-adobe-animate-cc-a-new-era-for-flash-professional/).\r\nSo fellas, you may want to give a warm welcome to that new solution.\r\n- Mozilla has started a project, [Shumway](https://wiki.mozilla.org/Shumway), which is intended to\r\nprovide Flash-like support by using HTML 5 features on Firefox.\r\n\r\n## Credits\r\n\r\nPart of GLantern uses modifications based on [`webgl-utils.js`](//github.com/KhronosGroup/WebGL/blob/master/sdk/demos/common/webgl-utils.js). Its license file\r\ncan be found [here](docs/license/webgl-utils.txt).\r\n\r\nPart of GLantern uses modifications based on [`AwayJS.Core.geom`](//github.com/awayjs/core/blob/master/lib/geom/). Its license file can be found\r\n[here](docs/license/awayjs-core.txt).\r\n"
}