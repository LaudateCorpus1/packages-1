{
  "name": "electron",
  "version": "1.4.3",
  "description": "Install prebuilt electron binaries for the command-line using npm",
  "repository": {
    "user": "electron-userland",
    "repo": "electron-prebuilt",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/electron-userland/electron-prebuilt/tarball/master",
    "clone_url": "https://github.com/electron-userland/electron-prebuilt",
    "https_url": "https://github.com/electron-userland/electron-prebuilt",
    "travis_url": "https://travis-ci.org/electron-userland/electron-prebuilt",
    "zip_url": "https://github.com/electron-userland/electron-prebuilt/archive/master.zip",
    "api_url": "https://api.github.com/repos/electron-userland/electron-prebuilt"
  },
  "scripts": {
    "cache-clean": "rm -rf ~/.electron && rm -rf dist",
    "postinstall": "node install.js",
    "pretest": "npm run cache-clean && npm run postinstall",
    "test": "tape test/*.js && standard"
  },
  "bin": {
    "electron": "cli.js"
  },
  "main": "index.js",
  "dependencies": {
    "extract-zip": "^1.0.3",
    "electron-download": "^3.0.1"
  },
  "devDependencies": {
    "home-path": "^0.1.1",
    "path-exists": "^2.0.0",
    "standard": "^5.4.1",
    "tape": "^3.0.1"
  },
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "keywords": [
    "electron"
  ],
  "homepage": "https://github.com/electron-userland/electron-prebuilt#readme",
  "_resolved": "https://api.github.com/repos/electron-userland/electron-prebuilt/tarball/v1.4.3",
  "_npmVersion": "2.15.9",
  "_nodeVersion": "2.2.1",
  "dist": {
    "shasum": "b67566bd86b59d89c1172bade27ebd888e0304b7",
    "tarball": "http://registry.npmjs.org/electron/-/electron-1.4.3.tgz"
  },
  "stars": 32,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2012-05-18T23:11:56.439Z"
    },
    {
      "number": "0.1.1",
      "date": "2012-05-22T14:37:24.301Z"
    },
    {
      "number": "0.1.2",
      "date": "2012-05-23T22:07:09.937Z"
    },
    {
      "number": "0.2.0",
      "date": "2012-06-11T02:21:27.719Z"
    },
    {
      "number": "0.2.1",
      "date": "2012-06-11T08:15:27.535Z"
    },
    {
      "number": "0.3.0",
      "date": "2012-10-07T17:44:36.428Z"
    },
    {
      "number": "0.4.0",
      "date": "2013-01-21T21:06:57.826Z"
    },
    {
      "number": "0.4.1",
      "date": "2014-12-15T16:00:19.916Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-07-28T16:32:17.329Z"
    },
    {
      "number": "1.3.2",
      "date": "2016-08-02T23:27:42.035Z"
    },
    {
      "number": "1.3.3",
      "date": "2016-08-10T11:09:39.987Z"
    },
    {
      "number": "1.3.4",
      "date": "2016-08-23T10:50:42.594Z"
    },
    {
      "number": "1.3.5",
      "date": "2016-09-02T07:57:18.244Z"
    },
    {
      "number": "1.3.6",
      "date": "2016-09-14T07:18:46.295Z"
    },
    {
      "number": "1.4.0",
      "date": "2016-09-15T07:25:36.907Z"
    },
    {
      "number": "1.4.1",
      "date": "2016-09-22T11:25:49.509Z"
    },
    {
      "number": "1.3.7",
      "date": "2016-09-27T10:03:30.522Z"
    },
    {
      "number": "1.4.2",
      "date": "2016-09-30T12:23:01.465Z"
    },
    {
      "number": "1.4.3",
      "date": "2016-10-06T10:08:01.790Z"
    }
  ],
  "created": "2012-05-18T23:11:55.741Z",
  "modified": "2016-10-06T10:08:01.790Z",
  "lastPublisher": {
    "name": "electron",
    "email": "electron@github.com"
  },
  "owners": [
    {
      "name": "electron",
      "email": "electron@github.com"
    },
    {
      "name": "jlord",
      "email": "to.jlord@gmail.com"
    },
    {
      "name": "kevinsawicki",
      "email": "kevinsawicki@gmail.com"
    },
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    },
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    },
    {
      "name": "maxogden",
      "email": "max@maxogden.com"
    },
    {
      "name": "zcbenz",
      "email": "zcbenz@gmail.com"
    },
    {
      "name": "zeke",
      "email": "zeke@sikelianos.com"
    }
  ],
  "readme": "# electron-prebuilt\n\n[![Travis build status](http://img.shields.io/travis/electron-userland/electron-prebuilt.svg?style=flat)](http://travis-ci.org/electron-userland/electron-prebuilt)\n[![AppVeyor build status](https://ci.appveyor.com/api/projects/status/qd978ky9axl8m1m1?svg=true)](https://ci.appveyor.com/project/Atom/electron-prebuilt)\n\n[![badge](https://nodei.co/npm/electron-prebuilt.png?downloads=true)](https://www.npmjs.com/package/electron-prebuilt)\n\nInstall [Electron](https://github.com/electron/electron) prebuilt binaries for\ncommand-line use using npm. This module helps you easily install the `electron`\ncommand for use on the command line without having to compile anything.\n\n[Electron](http://electron.atom.io) is a JavaScript runtime that bundles Node.js\nand Chromium. You use it similar to the `node` command on the command line for\nexecuting JavaScript programs. For more info you can read [this intro blog post](http://maxogden.com/electron-fundamentals.html)\nor dive into the [Electron documentation](http://electron.atom.io/docs).\n\n## Installation\n\n**Note** As of version 1.3.1, this package is published to npm under two names:\n`electron` and `electron-prebuilt`. You can currently use either name, but\n`electron` is recommended, as the `electron-prebuilt` name is deprecated, and\nwill only be published until the end of 2016.\n\nDownload and install the latest build of Electron for your OS and add it to your\nproject's `package.json` as a `devDependency`:\n\n```shell\nnpm install electron --save-dev\n```\n\nThis is the preferred way to use Electron, as it doesn't require users to\ninstall Electron globally.\n\nYou can also use the `-g` flag (global) to symlink it into your PATH:\n\n```shell\nnpm install -g electron\n```\n\nIf that command fails with an `EACCESS` error you may have to run it again with `sudo`:\n\n```shell\nsudo npm install -g electron\n```\n\nNow you can just run `electron` to run electron:\n\n```shell\nelectron\n```\n\nIf you need to use an HTTP proxy you can [set these environment variables](https://github.com/request/request/tree/f0c4ec061141051988d1216c24936ad2e7d5c45d#controlling-proxy-behaviour-using-environment-variables).\n\nIf you want to change the architecture that is downloaded (e.g., `ia32` on an\n`x64` machine), you can use the `--arch` flag with npm install or set the\n`npm_config_arch` environment variable:\n\n```shell\nnpm install --arch=ia32 electron\n```\n\n## About\n\nWorks on Mac, Windows and Linux OSes that Electron supports (e.g. Electron\n[does not support Windows XP](https://github.com/electron/electron/issues/691)).\n\nThe version numbers of this module match the version number of the [official\nElectron releases](https://github.com/electron/electron/releases), which\n[do not follow semantic versioning](http://electron.atom.io/docs/tutorial/electron-versioning/).\n\nThis module is automatically released whenever a new version of Electron is\nreleased thanks to [electron-prebuilt-updater](https://github.com/electron/electron-prebuilt-updater),\noriginally written by [John Muhl](https://github.com/johnmuhl/).\n\n## Usage\n\nFirst, you have to [write an Electron application](http://electron.atom.io/docs/tutorial/quick-start/).\n\nThen, you can run your app using:\n\n```shell\nelectron your-app/\n```\n\n## Related modules\n\n- [electron-packager](https://github.com/electron-userland/electron-packager) -\n  Package and distribute your Electron app with OS-specific bundles\n  (.app, .exe etc)\n- [electron-builder](https://github.com/electron-userland/electron-builder) -\n  create installers\n- [menubar](https://github.com/maxogden/menubar) - high level way to create\n  menubar desktop applications with electron\n\nFind more at the [awesome-electron](https://github.com/sindresorhus/awesome-electron) list.\n\n## Programmatic usage\n\nMost people use this from the command line, but if you require `electron` inside\nyour **Node app** (not your Electron app) it will return the file path to the\nbinary. Use this to spawn Electron from Node scripts:\n\n```javascript\nvar electron = require('electron')\nvar proc = require('child_process')\n\n// will something similar to print /Users/maf/.../Electron\nconsole.log(electron)\n\n// spawn Electron\nvar child = proc.spawn(electron)\n```\n"
}