{
  "name": "graph-calc",
  "version": "0.1.1",
  "description": "Construct graphs with multiple node/edge types and helpers to perform selective traversals and calculations.",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "doc": "jsdoc -c jsdoc.json"
  },
  "repository": {
    "user": "electronifie",
    "repo": "graph-calc",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/electronifie/graph-calc/tarball/master",
    "clone_url": "https://github.com/electronifie/graph-calc",
    "https_url": "https://github.com/electronifie/graph-calc",
    "travis_url": "https://travis-ci.org/electronifie/graph-calc",
    "zip_url": "https://github.com/electronifie/graph-calc/archive/master.zip",
    "api_url": "https://api.github.com/repos/electronifie/graph-calc"
  },
  "keywords": [
    "graph",
    "modelling",
    "calculator",
    "graph-traversal"
  ],
  "author": {
    "name": "andrew.mckenzie@electronifie.com"
  },
  "license": "ISC",
  "homepage": "https://github.com/electronifie/graph-calc",
  "dependencies": {
    "lodash": "^3.8.0"
  },
  "devDependencies": {
    "chai": "^3.4.0",
    "ink-docstrap": "^1.0.5",
    "jsdoc": "^3.4.0",
    "mocha": "^2.0.1",
    "sinon": "^1.17.2",
    "stylish-commit-auto-hook-install": "0.0.6"
  },
  "gitHead": "78f383a6952fa646f41bedc2a3408b85e8e7c43f",
  "_npmVersion": "3.3.12",
  "_nodeVersion": "4.2.2",
  "dist": {
    "shasum": "092f8fa371cdaefbce9902b22dc70ae898ba42d2",
    "tarball": "http://registry.npmjs.org/graph-calc/-/graph-calc-0.1.1.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-11-17T18:42:30.897Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-12-27T04:15:04.308Z"
    }
  ],
  "created": "2015-11-17T18:42:30.897Z",
  "modified": "2016-11-10T21:27:28.880Z",
  "lastPublisher": {
    "name": "andrewpmckenzie",
    "email": "andrew.mckenzie@electronifie.com"
  },
  "owners": [
    {
      "name": "andrewpmckenzie",
      "email": "andrew@mckenzie.name"
    }
  ],
  "readme": "[![Build Status](https://travis-ci.org/electronifie/graph-calc.svg?branch=master)](https://travis-ci.org/electronifie/graph-calc)\n\n## Getting started\n\n**Install** `npm install graph-calc --save`\n\n**Test** `npm test`\n\n**Generate Docs** `npm run doc`\n\n<hr>\n\n## Constructing the graph\n\n### Setup\n\nA more complete setup can be found [here](https://github.com/electronifie/graph-calc/blob/13a808c4270b641ee8fb50e5c6e9961b62f5ffbd/test/_SchoolGraph.js#L124-L124).\n\n```javascript\nvar Edge = require('graph-calc').Edge;\nvar Factory = require('graph-calc').Factory;\nvar Graph = require('graph-calc').Graph;\nvar Node = require('graph-calc').Node;\nvar util = require('util');\n\n/* create node types */\n\nvar TeacherNode = function (options) {\n  this.id = this.type + '-' + options.raw.id;\n  Node.call(this, options);\n};\nutil.inherits(TeacherNode, Node);\nTeacherNode.prototype.type = 'teacher';\n\nvar ClassNode = function (options) {\n  this.id = this.type + '-' + options.raw.id;\n  Node.call(this, options);\n};\nutil.inherits(ClassNode, Node);\nClassNode.prototype.type = 'class';\n\n/* create an edge type */\n\nvar TeachesEdge = function (options) {\n  this.id = this.type + '-' + options.raw.teacher.id + '-' + options.raw.class.id;\n  this.fromNode = options.factory.createOrUpdateNode(this.fromNodeType, options.raw.teacher);\n  this.toNode = options.factory.createOrUpdateNode(this.toNodeType, options.raw.class);\n  Edge.call(this, options);\n};\nutil.inherits(TeachesEdge, Edge);\nTeachesEdge.prototype.fromNodeType = 'teacher';\nTeachesEdge.prototype.type = 'teaches';\nTeachesEdge.prototype.toNodeType = 'class';\nTeachesEdge.raw2id = function (raw) { return TeachesEdge.prototype.type + '-' + raw.teacher.id + '-' + raw.class.id };\n\n/* create the graph, registering the nodes/edges via a Factory */\n\nvar schoolGraph = new Graph ({\n  factory: new Factory({\n    nodeClasses: [ TeacherNode, ClassNode ],\n    edgeClasses: [ TeachesEdge ]\n  });\n});\n\n```\n\n### Node / Edge creation\n\nCreate an edge, automatically creating the node if it doesn't exist ([more examples](https://github.com/electronifie/graph-calc/blob/master/test/1_graph.js)):\n\n```javascript\n  schoolGraph.factory.createOrUpdateEdge('teaches', { teacher: { id: 'Sue' }, class: { id: 'Chemistry' } });\n  schoolGraph.factory.createOrUpdateEdge('teaches', { teacher: { id: 'Sue' }, class: { id: 'Physics' } });\n```\n\n### Traversal\n\nTraverse the full graph ([more examples](https://github.com/electronifie/graph-calc/blob/master/test/6_traverser.js)):\n\n```javascript\nvar Traverser = require('graph-calc').Traverser;\n\nvar startNode = graph.factory.getNode('teacher', 'teacher-Sue');\nvar traverser = new Traverser({\n  onVisitNode: function (node, meta) {\n    var path = meta.path;\n    var depth = meta.path;\n    var viaEdge = meta.viaEdge;\n    var previouslyVisited = meta.previouslyVisited;\n    ...\n  },\n  onTraverseEdge: function (edge) { ... },\n  // Other options:\n  // onlyNodeTypes: ['teacher', 'student', ...],\n  // onlyEdgeTypes: ['teaches', ...],\n  // excludeNodeTypes: ['teacher', ...],\n  // excludeEdgeTypes: ['teaches', ...],\n  // maxDepth: 3,\n  // allowLoops: true,\n  // shouldVisitNode: function (node) { return true; },\n  // shouldTraverseEdge: function (edge) { return true; },\n});\ntraverser.traverse(startNode);\n```\n\nTraverse along a path of edge types ([more examples](https://github.com/electronifie/graph-calc/blob/master/test/7_pathTraverser.js)):\n\n```javascript\nvar PathTraverser = require('graph-calc').PathTraverser;\n\nvar traverser = new PathTraverser({\n  path: [ 'teaches' /* -> CLASS */, 'attendedBy' /* -> STUDENT */ ],\n  onLeafNode: function (node, meta) { ... }\n});\ntraverser.traverse(teacherNode);\n```\n\n### Calculation\n\nPerform relationship-based calculations, and queries of the graph aided by lodash ([more examples](https://github.com/electronifie/graph-calc/blob/master/test/8_calculator.js)):\n\n```javascript\nvar Calculator = require('graph-calc').Calculator;\n\nvar classByDepartmentCalculator = new Calculator({ acceptsNodeType: 'student' })\n  .start()\n    .withNodes({ path: ['attends' /* -> CLASS */, 'providedBy' /* -> DEPARTMENT */], revisitNodes: true })\n    .map(function (node) { return node.id; })\n    .countBy()\n  .finish();\n\nvar teacherStudentCalculator = new Calculator({ acceptsNodeType: 'teacher' })\n  .start()\n    .withNodes({ path: ['teaches' /* -> CLASS */, 'attendedBy' /* -> STUDENT */], revisitNodes: false })\n    .mapAndIndexCalc(classByDepartmentCalculator)\n  .finish();\n\nvar result = teacherStudentCalculator.calculate(targetNode);\n\n// e.g result:\n// {\n//   'student-Bobby': {\n//     'department-Science': 2,\n//     'department-Art': 1\n//   },\n//   'student-Jo': {\n//     'department-Science': 4\n//   }\n// }\n```\n\n### Events\n\nSubscribe to events within a node's network ([more examples](https://github.com/electronifie/graph-calc/blob/master/test/10_networkSubscriber.js)):\n\n```javascript\n  var NetworkSubscriber = require('graph-calc').NetworkSubscriber;\n  \n  // Subscribe to all the 'grade-added' and 'report-due' (fictional) events for\n  // all student's taught by a teacher.\n  new NetworkSubscriber({\n    node: graph.factory.getNode('teacher', 'teacher-Sue'),\n    \n    // Define the network\n    maxDepth: 3,\n    onlyEdgeTypes: ['teaches', 'attendedBy'],\n    \n    // Attach the listeners\n    nodeEvents: {\n      'grade-added': function (grade) { ... },\n      'report-due': function (reportName) { ... }\n    }\n  });\n```\n"
}