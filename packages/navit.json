{
  "name": "navit",
  "version": "3.0.1",
  "description": "Wrapper for PhantomJS and SlimerJS to simplify browser tests scripting",
  "keywords": [
    "phantomjs",
    "slimerjs",
    "testing",
    "browser"
  ],
  "repository": {
    "user": "nodeca",
    "repo": "navit",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/nodeca/navit/tarball/master",
    "clone_url": "https://github.com/nodeca/navit",
    "https_url": "https://github.com/nodeca/navit",
    "travis_url": "https://travis-ci.org/nodeca/navit",
    "zip_url": "https://github.com/nodeca/navit/archive/master.zip",
    "api_url": "https://api.github.com/repos/nodeca/navit"
  },
  "license": "MIT",
  "dependencies": {
    "async": "^2.0.1",
    "chai": "^3.0.0",
    "debug": "^2.2.0",
    "lodash": "^4.0.0",
    "node-phantom-simple": "^2.0.0",
    "sliced": "^1.0.1"
  },
  "devDependencies": {
    "basic-auth": "^1.0.4",
    "electron-prebuilt": "^1.2.3",
    "eslint": "^3.6.1",
    "express": "^4.14.0",
    "mocha": "^3.1.0",
    "phantomjs-prebuilt": "^2.1.5"
  },
  "scripts": {
    "test": "make test"
  },
  "gitHead": "d94eb8d788553ccc5d4538285b46df484049c13e",
  "homepage": "https://github.com/nodeca/navit#readme",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.5.0",
  "dist": {
    "shasum": "c0e0d51c7c61747d1475e182d524c965c37cab0c",
    "tarball": "http://registry.npmjs.org/navit/-/navit-3.0.1.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-04-19T03:34:57.648Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-04-21T09:40:35.186Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-05-07T17:23:04.222Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-05-18T09:56:43.104Z"
    },
    {
      "number": "1.1.2",
      "date": "2015-06-09T19:38:20.214Z"
    },
    {
      "number": "2.0.0",
      "date": "2015-07-02T19:21:51.906Z"
    },
    {
      "number": "2.0.1",
      "date": "2015-07-10T08:02:45.544Z"
    },
    {
      "number": "2.0.2",
      "date": "2016-01-15T17:28:37.993Z"
    },
    {
      "number": "2.1.0",
      "date": "2016-01-27T21:30:48.467Z"
    },
    {
      "number": "2.2.0",
      "date": "2016-03-17T16:06:16.415Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-06-18T19:57:03.604Z"
    },
    {
      "number": "3.0.1",
      "date": "2016-09-27T18:12:42.043Z"
    }
  ],
  "created": "2015-04-19T03:34:57.648Z",
  "modified": "2016-09-27T18:12:42.043Z",
  "lastPublisher": {
    "name": "vitaly",
    "email": "vitaly@rcdesign.ru"
  },
  "owners": [
    {
      "name": "vitaly",
      "email": "vitaly@rcdesign.ru"
    }
  ],
  "readme": "navit\n=====\n\n[![Build Status](https://img.shields.io/travis/nodeca/navit/master.svg?style=flat)](https://travis-ci.org/nodeca/navit)\n[![NPM version](https://img.shields.io/npm/v/navit.svg?style=flat)](https://www.npmjs.org/package/navit)\n\n> Wrapper for [PhantomJS](http://phantomjs.org/) & [SlimerJS](http://slimerjs.org/)\nto simplify browser tests scripting.\n\n\nInstall\n-------\n\nNote, you need to install `phantomjs`, `slimerjs` or `electron` with this\npackage, those are not included as dependencies.\n\n```bash\n# for phantomjs:\nnpm install navit phantomjs-prebuilt --save\n\n# for slimerjs:\nnpm install navit slimerjs --save\n\n# for electron:\nnpm install navit electron-prebuilt --save\n```\n\n\nExamples\n--------\n\n```js\nconst browser = require('./')({ timeout: 30000, engine: 'electron' });\n\nconst stack = []; // You can use lazy functions to pass data between stages,\n                  // but arrays have more compact notation.\n\nbrowser\n  .open('https://dev.nodeca.com')\n  .wait(() => {\n    try { return window.NodecaLoader.booted; } catch (__) { return false; }\n  })\n  .get.url(stack)\n  .click('forum-category__content:first forum-section__title-link')\n  .wait(data => location.url !== data[data.length - 1], stack)\n  .test.exists('.forum-topiclines')\n  .close()\n  .then(() => console.log('Succeeded'), err => console.log(err));\n\n// Or with callback (old way)\n\nbrowser\n  .open('https://dev.nodeca.com')\n  .wait(() => {\n    try { return window.NodecaLoader.booted; } catch (__) { return false; }\n  })\n  .get.url(stack)\n  .click('forum-category__content:first forum-section__title-link')\n  .wait(data => location.url !== data[data.length - 1], stack)\n  .test.exists('.forum-topiclines')\n  // first param `true` is equivalent to `.close()` call\n  .run(true, function (err) {\n    console.log(err || 'Succeeded');\n  });\n```\n\nAlso look files in [test folder](https://github.com/nodeca/navit/tree/master/test).\nThose are real examples how to use `navit` with `mocha`.\n\n\nAPI\n---\n\n1. All methods are chainable.\n2. Methods, marked with `+` have direct aliases without namespace.\n3. Chain should be finished with terminator `.run([teardown,] callback)` call.\n4. Almost everywhere `String` & `Number` params can be defined as functions for\n   lazy evaluation.\n\n__Known limitations:__\n\nSome methods like `.get.evaluate()` allow to pass params to evaluated functions.\n`navit` uses function's `.length` property, to properly detect params count,\nbecause tailing callbacks are optional. That means, such functions must have\nexplicit parameters list in definition, and you must pass exactly the same\nparams count as defined. We decided, it's not a big price for nice API.\n\n* Electron: methods `.post` & `.frame.*` are not implemented.\n* PhantomJS/SlimerJS: see [here](https://github.com/baudehlo/node-phantom-simple#known-issues). Also Electron is much more stable.\n\nElectron & SlimerJS are NOT headless. To run yous script in headless environment,\nyou should [xvfb](https://github.com/electron/electron/blob/master/docs/tutorial/testing-on-headless-ci.md).\n\n\n### new Navit(options, engineOpts)\n\n__options__ (not mandatory):\n\n- `inject`: Array of scripts (file paths) to inject after every page load\n  (`[ require.resolve('jquery/dist/jquery') ]`).\n- `timeout`: Page load and `.wait()` timeout, default `5000ms`.\n- `prefix`: url prefix for `.open()` and `.post()`, default empty string.\n- `engine`: `'phantomjs'` | `'slimerjs'`, default is `'phantomjs'`. Specify\n  engine to use. Make sure you installed `phantomjs` or `slimerjs` package.\n\n__engineOpts__ (not mandatory, camelCase):\n\nSee http://phantomjs.org/api/command-line.html and\nhttps://docs.slimerjs.org/current/configuration.html#command-line-options.\nYou can pass any options, supported by browser engine. Option names should be\nin camelCase.\n\n\n### Actions: `.do.*()`\n\nNavigation:\n\n- \\+ `.do.open(url [, options])`\n  - options:\n    - `method` - get(default)|post|put|delete|head\n    - `data`\n    - `headers`\n- \\+ `.do.post(url, data[, options])` - shortcut to `.open`, for convenience;\n  `method` is set to `post`, and `data` is forwarded to `options.data`.\n- \\+ `.do.back()`\n- \\+ `.do.forward()`\n- \\+ `.do.reload()`\n\nDOM:\n\n- \\+ `.do.click(selector)` - click on an element matching `selector`\n- \\+ `.do.type(selector, text)` - type `text` into input or contenteditable\n- \\+ `.do.clear(selector)` - clear input value (supports contenteditable)\n- \\+ `.do.check(selector)` - toggles checkbox or radio\n- \\+ `.do.select(selector, option)` - selects an `option` in dropdown\n- \\+ `.do.upload(selector, path)` - selects a file in `input[type=\"file\"]`\n- \\+ `.do.fill(selector, obj [, submit])` - fill out a form (same as\n  [fill](http://docs.casperjs.org/en/latest/modules/casper.html#fill)\n  in CasperJS)\n- \\+ `.do.scrollTo(top, left)` - executes `window.scrollTo(top, left)`\n- \\+ `.do.inject([type, ] file)` - appends a script or stylesheets from external `file` to page, `type` can be one of `js` or `css` (default type is `js`).\n\nWaiting:\n\n- \\+ `.do.wait()` - wait until page ready; can be useful after `click`, `back`\n  and `forward` actions (`open` and `reload` track progress for html pages\n  automatically)\n- \\+ `.do.wait(delay)` - pause for `delay` milliseconds\n- \\+ `.do.wait(selector [, timeout])` - wait until selector available\n- \\+ `.do.wait(fn [, params..., timeout])` - evaluate function in cycle, until\n  returns `true`.\n\n\n### Get data/params: `.get.*()`\n\nAll functions, passed to `.get.*`, can be sync (with 1 param) or async (with 2\nparams). If function returns not falsy type of result (usually a `Error`) or\nthrows exception, chain will be terminated. That can be used to create complex\ntest conditions.\n\n- \\+ `.get.title(fn)`\n- \\+ `.get.url(fn)`\n- \\+ `.get.count(selector, fn)`\n- \\+ `.get.text(selector, fn)`\n- \\+ `.get.html([selector,] fn)` - when no selector given, returns full page html.\n- \\+ `.get.attribute(selector, attribute, fn)`\n- \\+ `.get.value(selector, fn)` - for input/selector fields, returns field value.\n- `.get.evaluate(fnToEval [, params, fn])` - evaluate function on client with optional params.\n  Returned result can be processed on server, if handler set.\n- `.get.status(fn)`\n- `.get.body(fn)`\n- `.get.headers(fn)` - return server reply headers. Note, testing\n   method is not \"symmetric\" - use `.test.header(name, ...)`.\n- `.get.cookies(fn)` (no pair in `.test.*`)\n\nSugar:\n\n1. If you pass `Array` instead of `Function`, data will be pushed into it.\n2. If `fn` returns `Error` object (or anything else not falsy), chain will be\n   stopped with that value.\n3. If last param (`callback`) exists, chain will be finished as with `.run` method.\n\n\n### Set data/params: `.set.*()`\n\n- \\+ `.set.headers(obj)`\n- \\+ `.set.useragent(string)`\n- \\+ `.set.authentication(user, pass)`\n- \\+ `.set.viewport(width, height)`\n- \\+ `.set.zoom(scale)`\n- \\+ `.set.cookie(obj)`\n- \\+ `.set.cookie(name, value)` *If value not passed, cookie will be deleted.\n\n\n### Assertions: `.test.*()` & `test()`\n\nTests available for the most of `get.*` methods:\n\n- `.test.method_name(params..., value [, message)`\n- If value to compare is `RegExp`, then data is converted to `String`, and tested\n  to match provided regexp.\n- __Negative condition `.not` can be added to almost any test, before or after\n  method name.__\n\nAdditional:\n\n- \\+ `.test[.not].exists(selector [, message])`\n- \\+ `.test[.not].visible(selector [, message])`\n- \\+ `.test.evaluate(fn [params..., message])` - evaluate & die on any\n  result but `true`.\n\nSpecial sugar:\n\n- `.test(status_number [, message])`\n- `.test(body_rexexp [, message])`\n- `.test(header_name, string_or_regexp [, message])`\n\n\n### Tabs: `.tab.*()`\n\n- `.tab.open([url [, options]])` - create and switch to new tab. Run `.do.open(url, options)` if `url` specified\n- `.tab.count(fn)` - get tabs count (if you pass `Array`, value will be pushed into)\n- `.tab.switch(index)` - switch to tab by `index`\n- `.tab.close([index])` - close tab by `index` or close current tab if `index` not specified\n  - negative `index` address tab from the tail\n  - after all tabs closed, new one will be created automatically\n\n\n### Frames: `.frame.*()`\n\n- `.frame.enter(selector)` - switch to frame by `selector`\n- `.frame.exit()` - exit to top window\n\n\n### Other\n\n- `.fn(function, params)` - local function execute. Function can be sync\n  (0 params) and async (1 param).\n- `.exit()` - tear down browser process. Note, browser will NOT be closed until\n  you do it explicit via this method or `.run(true, ...)`.\n- `.close()` - similar to `.exit()` but stackable (will be executed in order\n  with other chained commends).\n- `.run([teardown,] done)` - terminate sequence of commands (execute and do\n  callback).\n  - If `teardown` is `true`, then close the browser after the sequence\n    finishes.\n  - If callback not passed, return result as `Promise`.\n- `.then(onSuccess, onFail)` - executes `.run(false)` under the hood.\n- `.screenshot([ selector|bounding_rect, type,] path)` - do screenshot\n- `.registerMethod(names, fn)` - add new method with given name(s) (`names`\n  can be string or array).\n- `.use(plugin [, params...])` - apply plugin.\n\n\n### Batches\n\n`navit` allows record sequence or commands to run it later with one call as\nmany times as you wish.\n\n```js\n// create\n.batch.create('init_page', function() {\n  this.\n    .wait(function () {\n      try {\n        return window.NodecaLoader.booted;\n      } catch (__) {}\n      return false;\n    });\n    .viewport(1600, 1200)\n    .inject(require.resolve('jquery/dist/jquery'))\n    .fn(function () {\n      console.log('Batch done.');\n    })\n})\n// run\n.batch('init_page')\n```\n\n\n### .afterOpen\n\nIf you assign function to this property, it will be called after any `.open`\nand `.reload` definition to stack additional commands. This is experimental\nfeature, that can be changed.\n\nSometime you may wish to do global setup for all opened pages. For example:\n\n- wait full page init, when it has dynamic scripts loader.\n- inject testing scripts from remote host (when you don't like to use global\n  option).\n\nYou can record your sequence to batch and automate it's injection after every\n`open` / `reload`. See example how we setup `navit` in `nodeca`:\n\n\n```js\n// Wait for nodeca scripts load and check status\n//\nnavit.batch.create('waitNodecaBooted', function () {\n  this\n    .wait(function () {\n      try {\n        return window.NodecaLoader.booted;\n      } catch (__) {}\n      return false;\n    })\n    .test.status(200);\n});\n\nnavit.afterOpen = function () {\n  this.batch('waitNodecaBooted');\n};\n```\n\n__Note__. `.afterOpen` is called on chain definition phase, not on execution\nphase. It's ~ equivalent of typing content manually in test body. That's why it\ndoesn't have callback to wait async operations - it's not needed.\n\n\n### Debug\n\nIf you assign environment variable `DEBUG` to `navit`, you will see debug message\nfor every action.\n\nOutput example for `DEBUG=navit mocha`:\n\n```\n...\nnavit do.open('http://localhost:17345/test/fixtures/do/type.html') +25ms\nnavit do.type('#type-test') +20ms\nnavit test.evaluate() +9ms\nnavit do.type('#contenteditable-test') +2ms\nnavit test.evaluate() +9ms\n  ✓ type (64ms)\n...\n```\n\n\nOther scripting projects\n------------------------\n\nHere are links to other similar libraries and comments why we did this one.\nNote that comments are given according to our requirements. Your ones can be\ndifferent. May be you need more to scrape data from real sites instead of\ninterface testing and so on. Select the best package for you needs:\n\n- [CasperJS](http://casperjs.org/)\n  - Runs standalone. You will not be able to control server and\n    browser from single script (load fixtures to db, prior to open page).\n  - Tests could be more compact, if CasperJS allows curried style.\n- [Zombie.js](https://github.com/assaf/zombie)\n  - Uses jsdom. Nice idea, but jsdom emulation is a bit limited\n    for complex things. We prefer real browser engines like PhantomJS and\n    SlimerJS.\n- [Nightmare](https://github.com/segmentio/nightmare)\n  - That was the nearest to our needs, and we used it before.\n  - It has poor errors control if error happpens in the middle of batch.\n    For example, if you wait for selector, it's difficult to check do you\n    finished with succes or by timeout.\n  - Too few built-in assertions.\n  - Not actively developped (see tracker - some problems caused by buggy\n    bridge to PhantomJS are not fixed for a long time).\n- [Horseman](https://github.com/johntitus/node-horseman)\n  - Has sync api, that can be convenient for scraping.\n  - Sync api limits you with getting multiple data from browser to server -\n    getter should be the single, always the last. You can workaround this\n    limitation, but that will increase amount of code to write.\n\n\nAuthors\n-------\n\n- [Kirill Efimov](https://github.com/Kirill89)\n- [Vitaly Puzrin](https://github.com/puzrin)\n\n\nLicense\n-------\n\n[MIT](https://raw.github.com/nodeca/navit/master/LICENSE)\n"
}