{
  "name": "ngn-chassis-components",
  "version": "0.0.41",
  "description": "NGN Chassis Web Components",
  "main": "index.js",
  "scripts": {
    "test": "echo No tests. Build process only.",
    "create": "gulp create",
    "build": "gulp build"
  },
  "repository": {
    "user": "ngnjs",
    "repo": "chassis-components",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/ngnjs/chassis-components/tarball/master",
    "clone_url": "https://github.com/ngnjs/chassis-components",
    "https_url": "https://github.com/ngnjs/chassis-components",
    "travis_url": "https://travis-ci.org/ngnjs/chassis-components",
    "zip_url": "https://github.com/ngnjs/chassis-components/archive/master.zip",
    "api_url": "https://api.github.com/repos/ngnjs/chassis-components"
  },
  "keywords": [
    "ngn",
    "web",
    "components",
    "chassis",
    "webcomponent"
  ],
  "author": {
    "name": "Corey Butler",
    "url": "http://coreybutler.com"
  },
  "contributors": [
    {
      "name": "Graham Butler",
      "url": "http://grahambutler.com"
    }
  ],
  "license": "MIT",
  "homepage": "http://ngn.js.org",
  "devDependencies": {
    "caniuse-api": "^1.4.1",
    "del": "^2.0.2",
    "esprima": "^2.7.1",
    "gulp": "^3.9.0",
    "gulp-concat": "^2.6.0",
    "gulp-header": "^1.7.1",
    "gulp-prompt": "^0.1.2",
    "localenvironment": "^1.0.0",
    "snazzy": "^2.0.1",
    "standard": "^5.3.1",
    "traverse": "^0.6.6",
    "uglify-js": "^2.6.1"
  },
  "standard": {
    "ignore": [
      "_*",
      "_**/*",
      "dist/**/*",
      "gulpfile.js",
      "src/jsonp.js"
    ],
    "globals": [
      "NGN",
      "NGNX",
      "window",
      "DOMParser",
      "XMLHttpRequest",
      "FormData",
      "btoa",
      "localStorage",
      "MutationObserver",
      "CustomEvent"
    ]
  },
  "gitHead": "b241fa29d4cdd98992514e0303e117af18d9de49",
  "_npmVersion": "2.14.7",
  "_nodeVersion": "4.2.1",
  "dist": {
    "shasum": "ef6358c2b29b291dcd7fa88680343a2afc573b77",
    "tarball": "http://registry.npmjs.org/ngn-chassis-components/-/ngn-chassis-components-0.0.41.tgz"
  },
  "versions": [
    {
      "number": "0.0.7",
      "date": "2016-01-08T21:05:16.412Z"
    },
    {
      "number": "0.0.14",
      "date": "2016-01-22T22:33:14.628Z"
    },
    {
      "number": "0.0.15",
      "date": "2016-01-22T22:43:30.833Z"
    },
    {
      "number": "0.0.16",
      "date": "2016-01-23T00:15:38.453Z"
    },
    {
      "number": "0.0.17",
      "date": "2016-01-23T01:43:59.451Z"
    },
    {
      "number": "0.0.18",
      "date": "2016-01-23T01:51:25.398Z"
    },
    {
      "number": "0.0.19",
      "date": "2016-01-23T19:20:47.488Z"
    },
    {
      "number": "0.0.20",
      "date": "2016-01-23T19:26:15.687Z"
    },
    {
      "number": "0.0.21",
      "date": "2016-01-23T20:51:40.723Z"
    },
    {
      "number": "0.0.22",
      "date": "2016-01-27T17:33:27.968Z"
    },
    {
      "number": "0.0.25",
      "date": "2016-02-12T20:23:10.956Z"
    },
    {
      "number": "0.0.27",
      "date": "2016-02-15T18:31:23.576Z"
    },
    {
      "number": "0.0.30",
      "date": "2016-02-16T01:27:20.819Z"
    },
    {
      "number": "0.0.31",
      "date": "2016-02-16T03:34:21.062Z"
    },
    {
      "number": "0.0.32",
      "date": "2016-02-16T04:41:55.286Z"
    },
    {
      "number": "0.0.33",
      "date": "2016-02-16T07:12:56.463Z"
    },
    {
      "number": "0.0.34",
      "date": "2016-02-16T20:18:51.266Z"
    },
    {
      "number": "0.0.36",
      "date": "2016-03-14T00:09:37.140Z"
    },
    {
      "number": "0.0.37",
      "date": "2016-05-29T18:59:49.470Z"
    },
    {
      "number": "0.0.38",
      "date": "2016-05-29T20:50:19.838Z"
    },
    {
      "number": "0.0.39",
      "date": "2016-05-29T21:23:48.352Z"
    },
    {
      "number": "0.0.40",
      "date": "2016-06-25T22:28:20.308Z"
    },
    {
      "number": "0.0.41",
      "date": "2016-07-09T19:41:48.399Z"
    }
  ],
  "created": "2016-01-08T21:05:16.412Z",
  "modified": "2016-07-09T19:41:48.399Z",
  "lastPublisher": {
    "name": "nodengn",
    "email": "sysadmin@coreybutler.com"
  },
  "owners": [
    {
      "name": "cbutler",
      "email": "corey@coreybutler.com"
    },
    {
      "name": "nodengn",
      "email": "sysadmin@coreybutler.com"
    }
  ],
  "readme": "# Chassis Web Components\n\n_(formerly NGN Web Components)_\n\nThe Chassis Web Components library is a collection of vanilla web components. The\nlibrary is designed to isolate common functionality and deliver it in a simple,\nreusable manner.\n\nFor a list of components, see the [custom tags directory](./tree/master/tags).\nYou can also see these elements in action by looking at the [examples site](http://ngnjs.github.io/chassis-components/documentation).\nUnfamiliar with Chassis/NGN? Head over to the [ngn.js.org](http://ngn.js.org).\n\n## Using Chassis Web Components\n\nThe web components are available via the [JSDelivr CDN](http://www.jsdelivr.com/projects/ngn-components),\nnpm, or bower. You can also download them from the [releases page](./releases).\n\nMost of the components use the [shadow DOM](http://w3c.github.io/webcomponents/spec/shadow/),\nwhich is a major part of web components. However; Chrome & Opera are the only browsers\ncurrently supporting it (as of 3/1/16). This also means tools like [Electron](https://electron.atom.io)\nand [NW.js](http://nwjs.io) natively support shadow DOM and other web component\nfeatures. For other browsers, Google has provided a polyfill that can be used\nuntil other browsers catch up. So, a common way to use chassis web components\nacross modern browsers (IE 11+) looks like:\n\n```html\n<!DOCTYPE html>\n<html class=\"no-js\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <script src=\"https://cdn.jsdelivr.net/webcomponentsjs/latest/webcomponents.min.js\"></script>\n  <script src=\"//cdn.jsdelivr.net/ngn-components/latest/chassis-cycle.min.js\"></script>\n  <!-- <link rel=\"import\" href=\"//cdn.jsdelivr.net/ngn-components/latest/chassis-cycle.min.js\"/> -->\n</head>\n\n<body>\n  <chassis-cycle restart=\"true\">\n    <section class=\"active\">\n      Screen 1\n    </section>\n    <section>\n      Screen 2\n    </section>\n    <section>\n      Screen 3\n    </section>\n  </chassis-cycle>\n</body>\n\n</html>\n```\n\nEach web component has it's own special documentation listed in it's [folder](./tree/master/tags).\nBe sure to review these for detailed information about the specific components\nyou're interested in.\n\n**Production Use**\n\nIf you're using these components in a production website, it is probably best to\nuse the concatenation features of JSDelivr. Select the components you wish to use\nand include them in one HTTP request. Alternatively, you may find\n[Chassis HTTP Preconnect](https://github.com/ngnjs/chassis-lib/blob/master/src/http.js#L631)\nhelpful, or use `preconnect` directly in the `<head>` of your HTML page. For\nmore information about preconnect, see\n[Ilya Grigorik's Preconnect article](https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/).\n\n### Bower\n\nIf you use bower to manage UI dependencies, you can install & use it as follows:\n\n```sh\nbower install chassis-components\n```\n\nIn your HTML:\n\n```html\n<html>\n  <head>\n    <script src=\"https://cdn.jsdelivr.net/webcomponentsjs/latest/webcomponents.min.js\"></script>\n    <script src=\"bower_components/chassis-components/dist/<tag>.min.js\"></script>\n    <!-- <link rel=\"import\" href=\"bower_components/chassis-components/dist/<tag>.html\"/> -->\n  </head>\n  <body>\n    ...\n  </body>\n</html>\n```\n\n### npm\n\nThe npm installation is designed for projects in a node-like environment, such\nas [electron](http://electron.atom.io) or [NW.js](http://nwjs.io). Usage is\nstraightforward:\n\n```sh\nnpm install ngn-chassis-components\n```\n\n```html\n<html>\n  <head>\n    <script src=\"https://cdn.jsdelivr.net/webcomponentsjs/latest/webcomponents.min.js\"></script>\n    <script src=\"node_modules/ngn-chassis-components/dist/<tag>.min.js\"></script>\n    <!-- <link rel=\"import\" href=\"node_modules/chassis-chassis-components/dist/<tag>.html\"/> -->\n  </head>\n  <body>\n    ...\n  </body>\n</html>\n```\n\n# Creating New Components (Hacking)\n\nIf you want to create a new chassis- web component, you should first post an issue\nor reach out to the chassis- team to assure we'll accept it. We are absolutely\ninterested in community contributions, but we also have a strict philosophy\nof keeping things simple. For example, we won't accept tags like `<my-whole-app>`,\nbut we will consider small, reusable tags.\n\nWhen you're ready to start building a component, the easiest way is to clone\nthis repository using `git clone https://github.com/ngnjs/chassis-components.git`.\nWe use [Node.js](http://nodejs.org) for our build process, so you'll need that\ninstalled. Then run `npm install` to install all of the dependencies. Finally,\nrun `gulp create` or `npm run create` to launch the new component wizard.\n\nThe new component wizard prompts for some simple input, then uses base templates\nto generate starter code.\n\n**Why should I use the wizard?**\n\nIn order to deliver components via CDN, we have our own build process that\nsmartly concatenates all files into a single JavaScript file. It's similar\n(conceptually) to Polymer's Vulcanize utility. You can run this utility\nby executing `gulp build` or `npm run build` to see the output.\n\nThe build tool generates a debuggable JS script, a minified version, and an HTML\nwrapper for use with [HTML Imports](http://w3c.github.io/webcomponents/spec/imports/).\nWe use this process to automatically generate production-ready components and\nupload them to the CDN through our automated release process.\n\n### PAY ATTENTION TO initTpl\n\nThe wizard will generate a `tag.js` file. Within this file, you'll notice a\nmethod/attribute called `initTpl`. This is a standard method that constructs\nyour component for you while you develop it. This method allows you to maintain\nyour template HTML/CSS and JS in different files. The build process replaces this\nmethod with a more compact one specifically designed for production use. The simple\nexplanation is the HTML/CSS gets converted to text and embedded in this file, making\nit simple to deploy all of the component's assets in a single file.\n\nMost developers shouldn't really need to care about `initTpl`. As long as it\nexists and is executed in the `createdCallback` method (i.e. `this.initTpl()`),\nyour component should just work... in development or in production.\n\nIf you have questions, create an issue and we'll do our best to help.\n\n## License\n\nAll components are licensed as MIT unless otherwise noted.\nCopyright &copy; 2016 Ecor Ventures LLC. All Rights Reserved.\n"
}