{
  "name": "remote-redux-devtools",
  "version": "0.5.3",
  "description": "Relay Redux actions to remote Redux DevTools.",
  "main": "lib/index.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "clean": "rimraf lib",
    "build": "babel src --out-dir lib",
    "build:examples": "babel-node examples/buildAll.js",
    "lint": "eslint src test",
    "test": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive",
    "test:watch": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive --watch",
    "prepublish": "npm run lint && npm run test && npm run clean && npm run build"
  },
  "repository": {
    "user": "zalmoxisus",
    "repo": "remote-redux-devtools",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/zalmoxisus/remote-redux-devtools/tarball/master",
    "clone_url": "https://github.com/zalmoxisus/remote-redux-devtools",
    "https_url": "https://github.com/zalmoxisus/remote-redux-devtools",
    "travis_url": "https://travis-ci.org/zalmoxisus/remote-redux-devtools",
    "zip_url": "https://github.com/zalmoxisus/remote-redux-devtools/archive/master.zip",
    "api_url": "https://api.github.com/repos/zalmoxisus/remote-redux-devtools"
  },
  "keywords": [
    "redux",
    "devtools",
    "flux",
    "react",
    "hot reloading",
    "time travel",
    "live edit"
  ],
  "author": {
    "name": "Mihail Diordiev",
    "email": "zalmoxisus@gmail.com",
    "url": "https://github.com/zalmoxisus"
  },
  "license": "MIT",
  "homepage": "https://github.com/zalmoxisus/remote-redux-devtools",
  "devDependencies": {
    "babel-cli": "^6.3.15",
    "babel-core": "^6.1.20",
    "babel-eslint": "^5.0.0-beta6",
    "babel-loader": "^6.2.0",
    "babel-preset-es2015-loose": "^6.1.3",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "eslint": "^1.10.3",
    "eslint-config-airbnb": "^2.1.1",
    "eslint-plugin-react": "^3.11.3",
    "expect": "^1.6.0",
    "mocha": "^2.2.5",
    "mocha-jsdom": "^1.0.0",
    "rimraf": "^2.3.4",
    "webpack": "^1.11.0"
  },
  "dependencies": {
    "jsan": "^3.1.3",
    "querystring": "^0.2.0",
    "redux-devtools-instrument": "^1.3.1",
    "remotedev-utils": "0.0.5",
    "socketcluster-client": "^5.0.17"
  },
  "gitHead": "9aee8d20f5230103a1de23fbd5d78c7ce364b833",
  "_npmVersion": "3.7.3",
  "_nodeVersion": "5.8.0",
  "dist": {
    "shasum": "7c98cdda4504866a6f11d16f99e12ae39f2b2da7",
    "tarball": "http://registry.npmjs.org/remote-redux-devtools/-/remote-redux-devtools-0.5.3.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2015-12-29T16:34:56.259Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-01-06T15:18:57.888Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-01-06T19:34:52.100Z"
    },
    {
      "number": "0.0.5",
      "date": "2016-01-09T16:27:08.225Z"
    },
    {
      "number": "0.0.6",
      "date": "2016-01-10T08:58:51.435Z"
    },
    {
      "number": "0.0.8",
      "date": "2016-01-16T16:52:45.542Z"
    },
    {
      "number": "0.0.9",
      "date": "2016-01-20T10:46:51.314Z"
    },
    {
      "number": "0.0.10",
      "date": "2016-01-22T17:20:09.459Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-01-24T09:27:22.244Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-02-01T09:30:15.840Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-02-08T18:23:47.064Z"
    },
    {
      "number": "0.1.4",
      "date": "2016-03-02T20:05:05.958Z"
    },
    {
      "number": "0.1.5",
      "date": "2016-03-11T10:19:56.921Z"
    },
    {
      "number": "0.1.6",
      "date": "2016-04-16T19:44:02.667Z"
    },
    {
      "number": "0.1.7",
      "date": "2016-04-19T11:16:36.246Z"
    },
    {
      "number": "0.1.8",
      "date": "2016-04-19T12:59:26.472Z"
    },
    {
      "number": "0.1.9",
      "date": "2016-04-20T09:24:00.500Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-04-20T18:56:47.052Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-04-22T08:29:01.375Z"
    },
    {
      "number": "0.2.2",
      "date": "2016-04-22T08:46:02.639Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-04-27T18:38:11.866Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-05-02T10:56:43.987Z"
    },
    {
      "number": "0.3.2",
      "date": "2016-05-04T19:03:56.209Z"
    },
    {
      "number": "0.3.3-alpha1",
      "date": "2016-05-17T16:16:14.963Z"
    },
    {
      "number": "0.3.3-alpha2",
      "date": "2016-05-17T19:31:40.849Z"
    },
    {
      "number": "0.3.3",
      "date": "2016-05-21T14:15:18.278Z"
    },
    {
      "number": "0.3.4",
      "date": "2016-07-20T08:22:58.020Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-08-01T09:14:52.971Z"
    },
    {
      "number": "0.4.1",
      "date": "2016-08-04T14:37:23.462Z"
    },
    {
      "number": "0.4.2",
      "date": "2016-08-13T11:14:00.283Z"
    },
    {
      "number": "0.4.3",
      "date": "2016-08-24T16:03:15.669Z"
    },
    {
      "number": "0.4.4",
      "date": "2016-08-30T11:44:14.600Z"
    },
    {
      "number": "0.4.6",
      "date": "2016-08-30T12:04:51.842Z"
    },
    {
      "number": "0.4.7",
      "date": "2016-08-31T08:11:28.835Z"
    },
    {
      "number": "0.4.8",
      "date": "2016-09-08T18:00:47.492Z"
    },
    {
      "number": "0.4.9",
      "date": "2016-09-24T18:34:33.421Z"
    },
    {
      "number": "0.5.0-alpha",
      "date": "2016-09-26T08:52:16.049Z"
    },
    {
      "number": "0.5.0",
      "date": "2016-10-06T13:41:42.195Z"
    },
    {
      "number": "0.5.1",
      "date": "2016-10-25T08:57:55.824Z"
    },
    {
      "number": "0.5.2",
      "date": "2016-11-03T09:12:20.999Z"
    },
    {
      "number": "0.5.3",
      "date": "2016-11-07T10:31:30.716Z"
    }
  ],
  "created": "2015-12-29T16:34:56.259Z",
  "modified": "2016-11-07T10:31:30.716Z",
  "lastPublisher": {
    "name": "zalmoxisus",
    "email": "zalmoxisus@gmail.com"
  },
  "owners": [
    {
      "name": "zalmoxisus",
      "email": "zalmoxisus@gmail.com"
    }
  ],
  "readme": "Remote Redux DevTools\n=====================\n\n![Demo](demo.gif)\n\nUse [Redux DevTools](https://github.com/gaearon/redux-devtools) remotely for React Native, hybrid, desktop and server side Redux apps.\n\n### Installation\n\n```\nnpm install --save-dev remote-redux-devtools\n```\n\n### Usage\n\nThere are 2 ways of usage depending if you're using other store enhancers (middlewares) or not.\n\n#### Add DevTools enhancer to your store\n\nIf you have a basic [store](http://redux.js.org/docs/api/createStore.html) as described in the official [redux-docs](http://redux.js.org/index.html), simply replace:\n  ```javascript\n  import { createStore } from 'redux';\n  const store = createStore(reducer);\n  ```\n  with\n  ```javascript\n  import { createStore } from 'redux';\n  import devToolsEnhancer from 'remote-redux-devtools';\n  const store = createStore(reducer, devToolsEnhancer());\n  // or const store = createStore(reducer, preloadedState, devToolsEnhancer());\n  ```\n  \n> Note: passing enhancer as last argument requires redux@>=3.1.0\n\n#### Use DevTools compose helper\n\n  If you setup your store with [middleware and enhancers](http://redux.js.org/docs/api/applyMiddleware.html), change this:\n  ```javascript\n  import { createStore, applyMiddleware, compose } from 'redux';\n  \n  const store = createStore(reducer, preloadedState, compose(\n    applyMiddleware(...middleware),\n    // other store enhancers if any\n  ));\n  ```\n  to:\n  ```javascript\n  import { createStore, applyMiddleware } from 'redux';\n  import { composeWithDevTools } from 'remote-redux-devtools';\n  \n  const store = createStore(reducer, /* preloadedState, */ composeWithDevTools(\n    applyMiddleware(...middleware),\n    // other store enhancers if any\n  ));\n  ```\n  or with devTools' options:\n  ```javascript\n  import { createStore, applyMiddleware } from 'redux';\n  import { composeWithDevTools } from 'remote-redux-devtools';\n  \n  const composeEnhancers = composeWithDevTools({ realtime: true, port: 8000 });\n  const store = createStore(reducer, /* preloadedState, */ composeEnhancers(\n    applyMiddleware(...middleware),\n    // other store enhancers if any\n  ));\n  ```\n\n#### Important\n\nIn order not to allow it in production by default, the enhancer will have effect only when `process.env.NODE_ENV === 'development'`. In case you don't set `NODE_ENV` or want to use it in production, set `realtime` parameter to `true`:\n\n  ```js\n  const store = createStore(reducer, devToolsEnhancer({ realtime: true }));\n  ```\n\n### Monitoring\n\nUse one of our monitor apps to inspect and dispatch actions:\n* [web](http://remotedev.io/local)\n* [redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension) - Click \"Remote\" button (or press [`Cmd+Ctrl+Arrow up`](https://github.com/zalmoxisus/redux-devtools-extension#keyboard-shortcuts)) to open remote monitoring.\n* [react-native-debugger](https://github.com/jhen0409/react-native-debugger) - Electron app, which already includes `remotedev-server`, `remotedev-app` and even React DevTools.\n* [chrome app](https://chrome.google.com/webstore/detail/remotedev/faicmgpfiaijcedapokpbdejaodbelph).\n* [remote-redux-devtools-on-debugger](https://github.com/jhen0409/remote-redux-devtools-on-debugger) - Used in React Native debugger as a dock monitor.\n* [atom-redux-devtools](https://github.com/zalmoxisus/atom-redux-devtools) - Used in Atom editor.\n* [redux-dispatch-cli](https://github.com/jhen0409/redux-dispatch-cli) - A CLI tool for Redux remote dispatch.\n\nUse [remotedev-app](https://github.com/zalmoxisus/remotedev-app) to create your own monitor app.\n\n### Communicate via local server\n\nIn order to make it simple to use, by default, the module and the monitor app communicate via [remotedev.io](http://remotedev.io) server. Use [remotedev-server](https://github.com/zalmoxisus/remotedev-server) cli to run it locally in order to make the connection faster and not to require an internet connection.\nYou can import it in your `server.js` script and start remotedev server together with your development server:\n```js\nvar remotedev = require('remotedev-server');\nremotedev({ hostname: 'localhost', port: 8000 });\n```\nSee [remotedev-server](https://github.com/zalmoxisus/remotedev-server) repository for more details.\nFor React Native you can use [react-native-debugger](https://github.com/jhen0409/react-native-debugger) or [remote-redux-devtools-on-debugger](https://github.com/jhen0409/remote-redux-devtools-on-debugger), which already include `remotedev-server`.\n\n\n### Parameters\n\nName                  | Description\n-------------         | -------------\n`name`                | *String* representing the instance name to be shown on the remote monitor.\n`realtime`            | *Boolean* specifies whether to allow remote monitoring. By default is `process.env.NODE_ENV === 'development'`. \n`hostname`            | *String* used to specify host for [`remotedev-server`](https://github.com/zalmoxisus/remotedev-server). If `port` is specified, default value is `localhost`.\n`port`                | *Number* used to specify host's port for [`remotedev-server`](https://github.com/zalmoxisus/remotedev-server).\n`secure`              | *Boolean* specifies whether to use `https` protocol for [`remotedev-server`](https://github.com/zalmoxisus/remotedev-server).\n`maxAge`              | *Number* of maximum allowed actions to be stored on the history tree, the oldest actions are removed once maxAge is reached. Default is `30`.\n`filters`             | *Map of arrays* named `whitelist` or `blacklist` to filter action types.  See the example bellow.\n`actionSanitizer`     | *Function* which takes action object and id number as arguments, and should return action object back. See the example bellow.\n`stateSanitizer`      | *Function* which takes state object and index as arguments, and should return state object back. See the example bellow.\n`startOn`             | *String* or *Array of strings* indicating an action or a list of actions, which should start remote monitoring (when `realtime` is `false`). \n`stopOn`              | *String* or *Array of strings* indicating an action or a list of actions, which should stop remote monitoring. \n`sendOn`              | *String* or *Array of strings* indicating an action or a list of actions, which should trigger sending the history to the monitor (without starting it). *Note*: when using it, add a `fetch` polyfill if needed.\n`sendOnError`         | *Numeric* code: `0` - disabled (default), `1` - send all uncaught exception messages, `2` - send only reducers error messages.\n`sendTo`              | *String* url of the monitor to send the history when `sendOn` is triggered. By default is `${secure ? 'https' : 'http'}://${hostname}:${port}`.\n`actionCreators`      | *Array* or *Object* of action creators to dispatch remotely. See [the example](https://github.com/zalmoxisus/remote-redux-devtools/commit/b54652930dfd4e057991df8471c343957fd7bff7).\n`shouldHotReload`     | *Boolean* - if set to `false`, will not recompute the states on hot reloading (or on replacing the reducers). Default to `true`.\n `shouldRecordChanges`| *Boolean* - if specified as `false`, it will not record the changes till clicked on \"Start recording\" button on the monitor app. Default is `true`.\n `shouldStartLocked`  | *Boolean* - if specified as `true`, it will not allow any non-monitor actions to be dispatched till `lockChanges(false)` is dispatched. Default is `false`.\n`id`                  | *String* to identify the instance when sending the history triggered by `sendOn`. You can use, for example, user id here, to know who sent the data.\n\nAll parameters are optional. You have to provide at least `port` property to use `localhost` instead of `remotedev.io` server.\n\nExample:\n```js\nexport default function configureStore(preloadedState) {\n  const store = createStore(\n    reducer,\n    preloadedState,\n    devToolsEnhancer({\n      name: 'Android app', realtime: true,\n      hostname: 'localhost', port: 8000,\n      maxAge: 30, filters: { blacklist: ['EFFECT_RESOLVED'] },\n      actionSanitizer: (action) => (\n       action.type === 'FILE_DOWNLOAD_SUCCESS' && action.data ?\n       { ...action, data: '<<LONG_BLOB>>' } : action\n      ),\n      stateSanitizer: (state) => state.data ? { ...state, data: '<<LONG_BLOB>>' } : state\n    })\n  );\n  return store;\n}\n```\n\n### Demo\n- [Toggle monitoring](http://zalmoxisus.github.io/monitoring/)\n\n### Examples\n- [Web](https://github.com/zalmoxisus/remote-redux-devtools/tree/master/examples)\n- [React Native](https://github.com/chentsulin/react-native-counter-ios-android)\n\n### License\n\nMIT\n"
}