{
  "name": "payform",
  "version": "1.2.0",
  "description": "A general purpose library for building credit card forms, validating inputs, and formatting numbers.",
  "keywords": [
    "payment",
    "form",
    "cc",
    "card",
    "credit card",
    "formatting",
    "validation",
    "jquery-plugin",
    "ecosystem:jquery",
    "ecosystem:browserify"
  ],
  "author": {
    "name": "Jonathan D. Johnson",
    "email": "me@jondavidjohn.com"
  },
  "license": "MIT",
  "repository": {
    "user": "jondavidjohn",
    "repo": "payform",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/jondavidjohn/payform/tarball/master",
    "clone_url": "https://github.com/jondavidjohn/payform",
    "https_url": "https://github.com/jondavidjohn/payform",
    "travis_url": "https://travis-ci.org/jondavidjohn/payform",
    "zip_url": "https://github.com/jondavidjohn/payform/archive/master.zip",
    "api_url": "https://api.github.com/repos/jondavidjohn/payform"
  },
  "main": "dist/payform.js",
  "scripts": {
    "test": "make test",
    "build": "make build",
    "watch": "make watch"
  },
  "devDependencies": {
    "coffee-script": "~1.9.0",
    "watch": "~0.13.0",
    "uglify": "~0.1.1",
    "mocha": "~2.1.0",
    "browserify": "~8.1.3",
    "coffeeify": "~1.0.0",
    "bundle-collapser": "~1.1.1"
  },
  "gitHead": "44c457ad8ed3d02d9997b9230c08eca78bb825fb",
  "homepage": "https://github.com/jondavidjohn/payform#readme",
  "_npmVersion": "2.11.2",
  "_nodeVersion": "0.12.5",
  "dist": {
    "shasum": "5901a6a598c1ad9a93aa8da7768d3d63e0376d2d",
    "tarball": "http://registry.npmjs.org/payform/-/payform-1.2.0.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-02-02T04:08:12.310Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-02-03T15:22:00.466Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-02-06T12:32:55.252Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-02-11T13:00:23.173Z"
    },
    {
      "number": "1.2.0",
      "date": "2015-08-18T22:43:40.686Z"
    }
  ],
  "created": "2015-02-02T04:08:12.310Z",
  "modified": "2015-08-18T22:43:40.686Z",
  "lastPublisher": {
    "name": "jondavidjohn",
    "email": "me@jondavidjohn.com"
  },
  "owners": [
    {
      "name": "jondavidjohn",
      "email": "me@jondavidjohn.com"
    }
  ],
  "readme": "# payform\n\n[![Build Status](https://travis-ci.org/jondavidjohn/payform.svg?branch=master)](https://travis-ci.org/jondavidjohn/payform)\n![Dependencies](https://david-dm.org/jondavidjohn/payform.svg)\n\n[![npm](https://nodei.co/npm/payform.png)](https://npmjs.org/package/payform)\n\nA general purpose library for building credit card forms, validating inputs, and formatting numbers.\n\nSupported card types:\n\n* Visa\n* MasterCard\n* American Express\n* Diners Club\n* Discover\n* UnionPay\n* JCB\n* Visa Electron\n* Maestro\n* Forbrugsforeningen\n* Dankort\n\n(Custom card types are also [supported](#custom-cards))\n\nWorks in IE8+ and all other modern browsers.\n\n[**Demo**](https://jondavidjohn.github.io/payform)\n\n## Installation / Usage\n\n### npm (Node and Browserify)\n\n```sh\nnpm install payform --save\n```\n\n```javascript\nvar payform = require('payform');\n\n// Format input for card number entry\nvar input = document.getElementById('ccnum');\npayform.cardNumberInput(input)\n\n// Validate a credit card number\npayform.validateCardNumber('4242 4242 4242 4242'); //=> true\n\n// Get card type from number\npayform.parseCardType('4242 4242 4242 4242'); //=> 'visa'\n```\n\n### AMD / Require.js\n\n```javascript\nrequire.config({\n    paths: { \"payform\": \"path/to/payform\" }\n});\n\nrequire([\"payform\"], function (payform) {\n  // Format input for card number entry\n  var input = document.getElementById('ccnum');\n  payform.cardNumberInput(input)\n\n  // Validate a credit card number\n  payform.validateCardNumber('4242 4242 4242 4242'); //=> true\n\n  // Get card type from number\n  payform.parseCardType('4242 4242 4242 4242'); //=> 'visa'\n});\n```\n\n### Direct script include / Bower\n\nOptionally via bower (or simply via download)\n```sh\nbower install payform --save\n```\n\n```html\n<script src=\"path/to/payform/dist/payform.js\"></script>\n<script>\n  // Format input for card number entry\n  var input = document.getElementById('ccnum');\n  payform.cardNumberInput(input)\n\n  // Validate a credit card number\n  payform.validateCardNumber('4242 4242 4242 4242'); //=> true\n\n  // Get card type from number\n  payform.parseCardType('4242 4242 4242 4242'); //=> 'visa'\n</script>\n```\n\n### jQuery Plugin (also supports Zepto)\n\nThis library also includes a jquery plugin.  The primary `payform` object\ncan be found at `$.payform`, and there are jquery centric ways to utilize the [browser\ninput formatters.](#browser-input-formatting-helpers)\n\n```html\n<script src=\"path/to/payform/dist/jquery.payform.js\"></script>\n<script>\n  // Format input for card number entry\n  $('input.ccnum').payform('formatCardNumber');\n\n  // Validate a credit card number\n  $.payform.validateCardNumber('4242 4242 4242 4242'); //=> true\n\n  // Get card type from number\n  $.payform.parseCardType('4242 4242 4242 4242'); //=> 'visa'\n</script>\n```\n\n## API\n\n### General Formatting and Validation\n\n#### payform.validateCardNumber(number)\n\nValidates a card number:\n\n* Validates numbers\n* Validates Luhn algorithm\n* Validates length\n\nExample:\n\n``` javascript\npayform.validateCardNumber('4242 4242 4242 4242'); //=> true\n```\n\n#### payform.validateCardExpiry(month, year)\n\nValidates a card expiry:\n\n* Validates numbers\n* Validates in the future\n* Supports year shorthand\n\nExample:\n\n``` javascript\npayform.validateCardExpiry('05', '20'); //=> true\npayform.validateCardExpiry('05', '2015'); //=> true\npayform.validateCardExpiry('05', '05'); //=> false\n```\n\n#### payform.validateCardCVC(cvc, type)\n\nValidates a card CVC:\n\n* Validates number\n* Validates length to 4\n\nExample:\n\n``` javascript\npayform.validateCardCVC('123'); //=> true\npayform.validateCardCVC('123', 'amex'); //=> true\npayform.validateCardCVC('1234', 'amex'); //=> true\npayform.validateCardCVC('12344'); //=> false\n```\n\n#### payform.parseCardType(number)\n\nReturns a card type. Either:\n\n* `visa`\n* `mastercard`\n* `amex`\n* `dinersclub`\n* `discover`\n* `unionpay`\n* `jcb`\n* `visaelectron`\n* `maestro`\n* `forbrugsforeningen`\n* `dankort`\n\nThe function will return `null` if the card type can't be determined.\n\nExample:\n\n``` javascript\npayform.parseCardType('4242 4242 4242 4242'); //=> 'visa'\npayform.parseCardType('hello world?'); //=> null\n```\n\n#### payform.parseCardExpiry(string)\n\nParses a credit card expiry in the form of MM/YYYY, returning an object containing the `month` and `year`. Shorthand years, such as `13` are also supported (and converted into the longhand, e.g. `2013`).\n\n``` javascript\npayform.parseCardExpiry('03 / 2025'); //=> {month: 3: year: 2025}\npayform.parseCardExpiry('05 / 04'); //=> {month: 5, year: 2004}\n```\n\nThis function doesn't perform any validation of the month or year; use `payform.validateCardExpiry(month, year)` for that.\n\n### Browser `<input>` formatting helpers\n\nThese methods are specifically for use in the browser to attach `<input>` formatters.\n\n(alternate [jQuery Plugin](#jquery-plugin) syntax is also provided)\n\n#### payform.cardNumberInput(input)\n\n_jQuery plugin:_ `$(...).payform('formatCardNumber')`\n\nFormats card numbers:\n\n* Includes a space between every 4 digits\n* Restricts input to numbers\n* Limits to 16 numbers\n* Supports American Express formatting\n\nExample:\n\n``` javascript\nvar input = document.getElementById('ccnum');\npayform.cardNumberInput(input);\n```\n\n#### payform.expiryInput(input)\n\n_jQuery plugin:_ `$(...).payform('formatCardExpiry')`\n\nFormats card expiry:\n\n* Includes a `/` between the month and year\n* Restricts input to numbers\n* Restricts length\n\nExample:\n\n``` javascript\nvar input = document.getElementById('expiry');\npayform.expiryInput(input);\n```\n\n#### payform.cvcInput(input)\n\n_jQuery plugin:_ `$(...).payform('formatCardCVC')`\n\nFormats card CVC:\n\n* Restricts length to 4 numbers\n* Restricts input to numbers\n\nExample:\n\n``` javascript\nvar input = document.getElementById('cvc');\npayform.cvcInput(input);\n```\n\n#### payform.numericInput(input)\n\n_jQuery plugin:_ `$(...).payform('formatNumeric')`\n\nGeneral numeric input restriction.\n\nExample:\n\n``` javascript\nvar input = document.getElementById('numeric');\npayform.numericInput(input);\n```\n\n### Custom Cards\n\n#### payform.cards\n\nArray of objects that describe valid card types. Each object should contain the following fields:\n\n``` javascript\n{\n  // Card type, as returned by payform.parseCardType.\n  type: 'mastercard',\n  // Regex used to identify the card type. For the best experience, this should be\n  // the shortest pattern that can guarantee the card is of a particular type.\n  pattern: /^5[0-5]/,\n  // Array of valid card number lengths.\n  length: [16],\n  // Array of valid card CVC lengths.\n  cvcLength: [3],\n  // Boolean indicating whether a valid card number should satisfy the Luhn check.\n  luhn: true,\n  // Regex used to format the card number. Each match is joined with a space.\n  format: /(\\d{1,4})/g\n}\n```\n\nWhen identifying a card type, the array is traversed in order until the card number matches a `pattern`. For this reason, patterns with higher specificity should appear towards the beginning of the array.\n\n## Development\n\nPlease see [CONTRIBUTING.md](https://github.com/jondavidjohn/payform/blob/develop/CONTRIBUTING.md).\n\n## Autocomplete recommendations\n\nWe recommend you turn autocomplete on for credit card forms, except for the CVC field (which should never be stored). You can do this by setting the `autocomplete` attribute:\n\n``` html\n<form autocomplete=\"on\">\n  <input class=\"cc-number\">\n  <input class=\"cc-cvc\" autocomplete=\"off\">\n</form>\n```\n\nYou should also mark up your fields using the [Autofill spec](https://html.spec.whatwg.org/multipage/forms.html#autofill). These are respected by a number of browsers, including Chrome.\n\n``` html\n<input type=\"tel\" class=\"cc-number\" autocomplete=\"cc-number\">\n```\n\nSet `autocomplete` to `cc-number` for credit card numbers and `cc-exp` for credit card expiry.\n\n## Mobile recommendations\n\nWe recommend you to use `<input type=\"tel\">` which will cause the numeric keyboard to be displayed on mobile devices:\n\n``` html\n<input type=\"tel\" class=\"cc-number\">\n```\n\n## A derived work\n\nThis library is derived from a lot of great work done on [`jquery.payment`](https://github.com/stripe/jquery.payment) by the folks at [Stripe](https://stripe.com/).  This aims to\nbuild upon that work, in a module that can be consumed in more diverse situations.\n"
}