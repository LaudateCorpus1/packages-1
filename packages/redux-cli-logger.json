{
  "name": "redux-cli-logger",
  "version": "1.3.1",
  "description": "Redux logger for a node environment",
  "main": "build/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "babel src --out-dir build"
  },
  "repository": {
    "user": "fasterthanlime",
    "repo": "redux-cli-logger",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/fasterthanlime/redux-cli-logger/tarball/master",
    "clone_url": "https://github.com/fasterthanlime/redux-cli-logger",
    "https_url": "https://github.com/fasterthanlime/redux-cli-logger",
    "travis_url": "https://travis-ci.org/fasterthanlime/redux-cli-logger",
    "zip_url": "https://github.com/fasterthanlime/redux-cli-logger/archive/master.zip",
    "api_url": "https://api.github.com/repos/fasterthanlime/redux-cli-logger"
  },
  "keywords": [
    "redux",
    "middleware",
    "logger",
    "logging",
    "node",
    "react"
  ],
  "contributors": [
    {
      "name": "Mike Bagwell",
      "url": "https://github.com/low-ghost"
    },
    {
      "name": "Amos Wenger",
      "url": "https://github.com/fasterthanlime"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "renderkid": "^1.0.0"
  },
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-preset-es2015": "^6.6.0"
  },
  "homepage": "https://github.com/fasterthanlime/redux-cli-logger#readme",
  "gitHead": "35f468c8168d4841fa610fb4a720583c819f446f",
  "_npmVersion": "3.6.0",
  "_nodeVersion": "5.7.1",
  "dist": {
    "shasum": "c1ebdcc4a657cac50bd825a12e7f5a7f37b82d11",
    "tarball": "http://registry.npmjs.org/redux-cli-logger/-/redux-cli-logger-1.3.1.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-03-08T16:33:21.352Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-03-08T16:40:03.403Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-03-08T16:45:55.449Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-03-08T18:05:19.854Z"
    }
  ],
  "created": "2016-03-08T16:33:21.352Z",
  "modified": "2016-03-08T18:05:19.854Z",
  "lastPublisher": {
    "name": "fasterthanlime",
    "email": "amoswenger@gmail.com"
  },
  "owners": [
    {
      "name": "fasterthanlime",
      "email": "amoswenger@gmail.com"
    }
  ],
  "readme": "# redux-cli-logger\n\n### A redux logger for command-line environments (node.js)\n\nNo innovations here, just a logger middleware for\n[redux](https://github.com/rackt/redux) that will write all redux actions and\nstate changes to the node.js console.\n\nConfiguration and output format inspired by [redux-logger](https://github.com/fcomb/redux-logger)\n\n![redux-node-logger screenshot](https://cloud.githubusercontent.com/assets/9889378/9400145/f321b9fe-478b-11e5-9f77-b08baf9573b9.png\n\"A Redux Logger for Node Environments\")\n\n### Installation\n\n```bash\nnpm install --save-dev redux-cli-logger\n```\n\n### Usage\n\nredux-cli-logger must be called as a function before being utilized as\nmiddleware. This allows passing in options to overwrite all colors and arrow\nicons, as well as a predicate that functions like that in redux-logger. Here's\nwhat a simple configureStore function might look like:\n\n```javascript\nimport reducer from '../reducers'\nimport createCLILogger from 'redux-cli-logger'\n\nconst middleware = [\n  // your middleware here\n]\n\nif (process.env.NODE_ENV === 'development') {\n  const loggerOptions = {\n    predicate: (getState, action) => !action.MONITOR_ACTION\n  }\n  const logger = createCLILogger(loggerOptions)\n  middleware.push(logger)\n}\n\nconst enhancer = compose(\n  applyMiddleware(...middleware)\n  // optionally, electron-enhancer, redux-loop, etc.\n)\n\nconst initialState = {}\nconst store = createStore(reducer, initialState, enhancer)\n```\n\n### Configuration\n\nThe options object has overridable defaults that look like this:\n\n```javascript\n{\n  downArrow: '▼',\n  rightArrow: '▶',\n  messageColor: 'bright-yellow',\n  prevColor: 'grey',\n  actionColor: 'bright-blue',\n  nextColor: 'green',\n  // when non-null, only prints if predicate(getState, action) is truthy\n  predicate: null,\n  // useful to trim parts of the state atom that are too verbose\n  stateTransformer: (state) => state,\n  // useful to censor private messages (containing password, etc.)\n  actionTransformer: (action) => action,\n}\n```\n\n"
}