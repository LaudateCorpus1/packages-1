{
  "name": "brave-browser",
  "version": "0.12.9-2",
  "description": "Brave laptop and desktop browser",
  "main": "./app/index.js",
  "config": {
    "port": "8080"
  },
  "scripts": {
    "add-simulated-payment-history": "node ./tools/addSimulatedPaymentHistory.js",
    "build-installer": "node ./tools/buildInstaller.js",
    "build-package": "node ./tools/buildPackage.js",
    "check-security": "nsp check",
    "checks": "npm run check-security",
    "clean": "node ./tools/clean.js",
    "clean-adblock-data": "node ./tools/clean.js userData ABPFilterParserData.dat",
    "clean-httpse-data": "node ./tools/clean.js userData httpse.json",
    "clean-sb-data": "node ./tools/clean.js userData SafeBrowsingData.dat",
    "clean-session-store": "node ./tools/clean.js userData session-store-1",
    "clean-tp-data": "node ./tools/clean.js userData TrackingProtection.dat",
    "docs": "jsdox js/actions/appActions.js js/actions/windowActions.js --output docs",
    "download-languages": "node ./tools/downloadLanguages",
    "electron-rebuild": "electron-rebuild",
    "flow": "flow; test $? -eq 0 -o $? -eq 2",
    "lint": "standard",
    "prepublish": "npm run webpack",
    "postinstall": "webpack",
    "preload-httpse": "node ./preload-httpse.js",
    "start": "node ./tools/start.js --debug=5858 --enable-logging --v=0 --enable-extension-activity-logging --enable-sandbox-logging --enable-dcheck",
    "start-brk": "node ./tools/start.js --debug-brk=5858 -enable-logging --v=0 --enable-dcheck",
    "test": "NODE_ENV=test mocha --require babel-register --require babel-polyfill 'test/**/*Test.js'",
    "unittest": "NODE_ENV=test mocha --require babel-register --require babel-polyfill 'test/unit/**/*Test.js'",
    "uitest": "NODE_ENV=test mocha --require babel-register --require babel-polyfill --recursive $(find test -name '*Test.js' -not -path 'test/unit/*')",
    "update-pdfjs": "rm -r app/extensions/pdfjs/; cp -r ../pdf.js/build/chromium/ app/extensions/pdfjs/",
    "update-psl": "./tools/updatepsl.sh",
    "vagrant-destroy-linux": "VAGRANT_CWD=./test/vms/vagrant/ubuntu-14.04 vagrant destroy",
    "vagrant-halt-linux": "VAGRANT_CWD=./test/vms/vagrant/ubuntu-14.04 vagrant halt",
    "vagrant-rsync-linux": "VAGRANT_CWD=./test/vms/vagrant/ubuntu-14.04 vagrant rsync-auto",
    "vagrant-ssh-linux": "VAGRANT_CWD=./test/vms/vagrant/ubuntu-14.04 vagrant ssh",
    "vagrant-up-linux": "VAGRANT_CWD=./test/vms/vagrant/ubuntu-14.04 vagrant up",
    "watch": "webpack-dev-server --inline --hot --colors --content-base=./app/extensions/brave",
    "watch-all": "npm run watch & npm run watch-test",
    "watch-test": "NODE_ENV=test webpack --watch",
    "webpack": "webpack",
    "win-fixelectron": "powershell ./tools/windows/fix-electron.ps1",
    "win-fixnpm": "powershell ./tools/windows/vs2015-sp3-fix-npm.ps1",
    "win-renpm": "powershell ./tools/windows/re-npm.ps1"
  },
  "repository": {
    "user": "brave",
    "repo": "browser-laptop",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/brave/browser-laptop/tarball/master",
    "clone_url": "https://github.com/brave/browser-laptop",
    "https_url": "https://github.com/brave/browser-laptop",
    "travis_url": "https://travis-ci.org/brave/browser-laptop",
    "zip_url": "https://github.com/brave/browser-laptop/archive/master.zip",
    "api_url": "https://api.github.com/repos/brave/browser-laptop"
  },
  "author": {
    "name": "Brave Software",
    "email": "support+laptop@brave.com"
  },
  "contributors": [
    {
      "name": "Brian R. Bondy",
      "email": "brian@brave.com"
    },
    {
      "name": "Aubrey Keus",
      "email": "aubrey@brave.com"
    },
    {
      "name": "Brian Johnson",
      "email": "bjohnson@brave.com"
    },
    {
      "name": "Yan Zhu",
      "email": "yan@brave.com"
    },
    {
      "name": "Brian Clifton",
      "email": "clifton@brave.com"
    }
  ],
  "license": "MPL-2.0",
  "homepage": "https://www.brave.com/",
  "dependencies": {
    "abp-filter-parser-cpp": "1.2.x",
    "acorn": "3.2.0",
    "aphrodite": "^1.0.0",
    "async": "^2.0.1",
    "electron-localshortcut": "^0.6.0",
    "electron-prebuilt": "github:brave/electron-prebuilt",
    "electron-squirrel-startup": "github:brave/electron-squirrel-startup",
    "file-loader": "^0.8.5",
    "font-awesome": "^4.5.0",
    "font-awesome-webpack": "0.0.4",
    "immutable": "^3.7.5",
    "immutablediff": "^0.4.2",
    "immutablepatch": "github:brave/immutable-js-patch",
    "keytar": "^3.0.0",
    "l20n": "^3.5.1",
    "ledger-balance": "^0.8.61",
    "ledger-client": "^0.8.93",
    "ledger-geoip": "^0.8.72",
    "ledger-publisher": "^0.8.90",
    "lru_cache": "^1.0.0",
    "moment": "^2.15.1",
    "normalize-url": "^1.7.0",
    "punycode": "^2.0.0",
    "qr-image": "^3.1.0",
    "random-lib": "2.1.0",
    "react": "^15.0.1",
    "react-dnd": "^2.1.4",
    "react-dnd-html5-backend": "^2.1.2",
    "react-dom": "^15.0.1",
    "spellchecker": "^3.3.1",
    "string.prototype.endswith": "^0.2.0",
    "string.prototype.startswith": "^0.2.0",
    "tablesort": "4.0.1",
    "tldjs": "1.6.2",
    "tracking-protection": "1.1.x",
    "underscore": "1.8.3",
    "url-loader": "^0.5.7",
    "electron-installer-debian": "^0.3.0",
    "electron-installer-redhat": "^0.3.0"
  },
  "devDependencies": {
    "asar": "^0.11.0",
    "babel": "^6.1.18",
    "babel-core": "^6.3.15",
    "babel-loader": "^6.2.0",
    "babel-plugin-transform-react-constant-elements": "^6.4.0",
    "babel-plugin-transform-react-inline-elements": "^6.4.0",
    "babel-polyfill": "^6.3.14",
    "babel-preset-es2015": "^6.1.18",
    "babel-preset-react": "^6.1.18",
    "babel-register": "^6.3.13",
    "babel-runtime": "^6.3.13",
    "chai": "^3.4.1",
    "chai-as-promised": "^5.1.0",
    "co-mocha": "^1.1.2",
    "css-loader": "^0.23.0",
    "electron-builder": "^2.3.1",
    "electron-packager": "github:brave/electron-packager",
    "electron-rebuild": "^1.1.1",
    "electron-winstaller": "^2.3.0",
    "empty-port": "0.0.2",
    "flow-bin": "^0.22.1",
    "gulp": "^3.9.0",
    "jsdom": "9.4.1",
    "jsdom-global": "2.0.0",
    "jsdox": "^0.4.9",
    "jsonfile": "^2.2.3",
    "less": "^2.5.3",
    "less-loader": "^2.2.1",
    "level": "^1.4.0",
    "leveldown": "^1.4.6",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.4",
    "mockery": "^1.7.0",
    "ncp": "^2.0.0",
    "node-gyp": "^3.2.1",
    "node-libs-browser": "^1.0.0",
    "node-static": "^0.7.7",
    "node-uuid": "^1.4.7",
    "nsp": "^2.2.0",
    "pre-commit": "github:brave/pre-commit",
    "react-addons-perf": "^15.2.1",
    "spectron": "github:brave/spectron",
    "sqlite3": "^3.1.1",
    "standard": "8.1.0",
    "style-loader": "^0.13.0",
    "webdriverio": "4.2.5",
    "webpack": "^1.12.9",
    "webpack-dev-server": "^1.14.0",
    "webpack-notifier": "^1.2.1",
    "xml2js": "^0.4.15"
  },
  "optionalDependencies": {
    "electron-installer-debian": "^0.3.0",
    "electron-installer-redhat": "^0.3.0"
  },
  "standard": {
    "ignore": [
      "app/extensions/**",
      "app/browser/ads/adDivCandidates.js",
      "Brave-darwin-x64/**",
      "less/**",
      "res/**",
      "js/data/**",
      "js/lib/psl.js",
      "dist/**",
      "doc/**",
      "public/**",
      "app/ext/**",
      "app/gen/**",
      "decls/**",
      "tools/lib/rimraf.js"
    ]
  },
  "pre-commit": {
    "run": [
      "lint",
      "docs"
    ],
    "template": "COMMIT_TEMPLATE"
  },
  "engineStrict": true,
  "engines": {
    "node": ">= 6.1.0"
  },
  "gitHead": "1f06f0a8fedce02b7c5c488680930c3c36e37135",
  "_npmVersion": "3.10.9",
  "_nodeVersion": "7.1.0",
  "dist": {
    "shasum": "b51b20dfe322d94b97267cee4993e113da21722e",
    "tarball": "http://registry.npmjs.org/brave-browser/-/brave-browser-0.12.9-2.tgz"
  },
  "versions": [
    {
      "number": "0.12.9",
      "date": "2016-11-10T22:06:54.178Z"
    },
    {
      "number": "0.12.9-2",
      "date": "2016-11-11T01:29:54.793Z"
    }
  ],
  "created": "2016-11-10T22:06:54.178Z",
  "modified": "2016-11-11T01:29:54.793Z",
  "lastPublisher": {
    "name": "posix4e",
    "email": "posix4e@gmail.com"
  },
  "owners": [
    {
      "name": "posix4e",
      "email": "posix4e@gmail.com"
    }
  ],
  "readme": "[![Build Status](https://travis-ci.org/brave/browser-laptop.svg?branch=master)](https://travis-ci.org/brave/browser-laptop)\n\n# Brave Browser\n\nDesktop browser for macOS, Windows, and Linux.\n\nFollow [@brave](https://twitter.com/brave) on Twitter for important news and announcements.\n\nFor other versions of our browser, please see:\n* iPhone - [brave/browser-ios](https://github.com/brave/browser-ios)\n* Android - [brave/browser-android](https://github.com/brave/browser-android)\n\n## Downloads\n\nTo download the latest release, [see our releases page](https://github.com/brave/browser-laptop/releases).\n\nFor a more user-friendly download page, [please visit our website](https://brave.com/downloads.html).\n\n## Useful documentation\n\n* See [CONTRIBUTING.md](.github/CONTRIBUTING.md) for tips and guidelines about contributing.\n* See [docs/tests.md](docs/tests.md) for information on testing, including how to run a subset of the tests.\n* See [docs/debugging.md](docs/debugging.md) for information on debugging.\n* See [docs/translations.md](docs/translations.md) to learn how you can help us with translations (localization).\n\n## Build prerequisites\n\nYou'll need certain packages installed before you can build and run Brave locally.\n\n### Windows\n\nPlease see the [Building on Windows wiki entry](https://github.com/brave/browser-laptop/wiki/Building-on-Windows)\n\n### All other platforms\n\n1. `nodejs` **`>= 6.1`**\n\n    Install from your package manager or download from https://nodejs.org\n\n2. `node-gyp` **`3.3.1`**\n\n        sudo npm install -g node-gyp@3.3.1\n\n###  Linux\n\n* `apt-get install libgnome-keyring-dev build-essential`\n\nOR\n\n* `dnf install libgnome-keyring-devel rpm-build`\n\n## Installation\n\nAfter installing the prerequisites:\n\n1. Clone the git repository from GitHub:\n\n        # For beta testers:\n        git clone --depth 1 https://github.com/brave/browser-laptop\n\n        # For devs over HTTPS:\n        git clone https://github.com/brave/browser-laptop\n\n        # For devs over SSH:\n        git clone git@github.com:brave/browser-laptop.git\n\n2. Open the working directory:\n\n        cd browser-laptop\n\n3. Install the Node (v5+) dependencies:\n\n        npm install\n\nIf this fails on Linux with an error related to `abp-filter-parser-cpp`, try updating to Node 6.1 and `node-gyp` 3.3.1 (see discussion at https://github.com/brave/browser-laptop/issues/214)\n\n### Troubleshooting\n\nAdditional notes on troubleshooting installation issues are in the [Troubleshooting](https://github.com/brave/browser-laptop/wiki/Troubleshooting) page in the Wiki.\n\n### Preconfigured VMs\n\nSome platforms are available as pre-configured VMs. See the [readme](https://github.com/brave/browser-laptop/blob/master/test/vms/vagrant/README.md) for details.\n\n## Development\n\nTo run a development version of the browser requires a few steps. The easiest way is just to use two \nterminals. One terminal can be used just to watch for changes to the code\n\n    npm run watch\n\nNow actually run Brave in another terminal\n\n    npm start\n\nTo run the tests:\n\n    npm run watch-test  or  npm run watch-all\n\n    npm test\n\nSome errors related to [brave/electron](https://github.com/brave/electron) update can be fixed by doing a clean install:\n\n    rm -rf node_modules/\n    npm install\n\nIf this does not work, please clear out your ~/.electron first and try again.\n\n### Port\n\nBrave uses port 8080 to communicate between its client and server sides by default. If you are using port 8080 for something else (e.g. a web proxy) then you can set the node config to make it use a different one.\n\ne.g.\nnpm config set brave:port 9001\n\nAdditional notes on troubleshooting development issues are in the [Troubleshooting](https://github.com/brave/browser-laptop/wiki/Troubleshooting) page in the Wiki.\n\n### Running inside of a development version of Brave's Electron fork\n\nWe are using a [fork of Electron with some minor modifications](https://github.com/brave/electron). We try to upstream everything to [electron/electron](https://github.com/electron/electron) but forking allows us to take patches before upstreaming.\n\nBy default, we provide pre-built binaries when you `npm install` with our own fork of [electron-prebuilt](https://github.com/brave/electron-prebuilt).\n\nIf you want to modify the code to Electron itself, then you'll need to build it.  An example of why you might do that would be exposing a new event to the webview from Electron.\n\nBuild instructions:\n- [macOS build instructions](https://github.com/brave/electron/blob/master/docs/development/build-instructions-osx.md)\n- [Windows build instructions](https://github.com/brave/electron/blob/master/docs/development/build-instructions-windows.md)\n- [Linux build instructions](https://github.com/brave/electron/blob/master/docs/development/build-instructions-linux.md)\n\nOnce you're happy with the changes you've made in the electron fork, you can test the changes locally by building and then copying the output files over the `node_modules/electron-prebuilt` for browser-laptop.\n\nAssuming you have your directories in a structure such as this:\n\n    projects/\n        electron/\n        browser-laptop/\n\nYou can simply run an npm task to build and install your local electron instance:\n\n    npm run install\n\nIf your directory structure isn't side by side, you can run the following (altering the rsync as needed) command from within electron:\n\n    rsync -avz --delete out/D/Brave.app dist {{path-to-browser-laptop}}/node_modules/electron-prebuilt/dist/ \n\n\n## Packaging for bundles, installers, and updates\n\nIn order do run any build commands, you'll need an environment variable set for `CHANNEL` (set to `'dev'`, `'beta'`, or `'stable'`).\n\nFor more information, see [docs/buildingReleases.md](docs/buildingReleases.md) which has a more detailed overview of our release process.\n\n### macOS:\n\nFrom within brave-browser you can create a .app file for distribution:\n\n    CHANNEL=dev npm run build-package\n\nAfter the .app file is built you can create a dmg and update zip with:\n\n    IDENTIFIER=XYZ npm run build-installer\n\nWhere XYZ is your signing identifier.\n\n### Windows 7,8,10 x64:\n\nYou'll also need to set the `CERT` and `CERT_PASSWORD` environment variables with your [authenticode signing cert and password](https://blogs.msdn.microsoft.com/ieinternals/2011/03/22/everything-you-need-to-know-about-authenticode-code-signing/) if you want to build an installer.\n\nTo set these values, you can either set the environment on a per-session basis (`$env:CHANNEL=\"dev\"`) or update your [system/user environment variables](http://www.computerhope.com/issues/ch000549.htm).\n\nYou must also have NSIS 3.0rc2 or later installed and `makensis`'s folder must be in your PATH.\n\nTo create a folder with the app .exe and all dependencies you can run:\n\n    CHANNEL=dev npm run build-package\n\nAfter the above folder is created, you can create a setup (exe, msi, RELEASES file and update nupkg) with:\n\n    npm run build-installer\n\n### Linux:\n\nTo create a package:\n\n    CHANNEL=dev npm run build-package\n\nTo create a dev package:\n\n    CHANNEL=dev npm run build-package\n\nFinally run:\n\n    npm run build-installer\n\nYou will see a .deb and .rpm files in dist/\n"
}