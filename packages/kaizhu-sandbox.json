{
  "name": "kaizhu-sandbox",
  "scripts": {
    "version": "npm info kaizhu-sandbox version"
  },
  "version": "2016.6.12-4",
  "gitHead": "da2fc84be5fd084e602bad798ededd3b60397a78",
  "description": "kaizhu-sandbox ======== <!--- npm_package_description begin ---> this package will run dynamic browser tests with coverage (via istanbul and electron) <!--- npm_package_description end --->",
  "_npmVersion": "3.9.3",
  "_nodeVersion": "6.2.1",
  "dist": {
    "shasum": "039f5fea7c3fe131cf30dc2dc905550ebec5c06c",
    "tarball": "http://registry.npmjs.org/kaizhu-sandbox/-/kaizhu-sandbox-2016.6.12-4.tgz"
  },
  "versions": [
    {
      "number": "2015.5.16-a",
      "date": "2015-05-17T07:50:09.018Z"
    },
    {
      "number": "2015.5.16-0",
      "date": "2015-05-17T08:03:00.823Z"
    },
    {
      "number": "2015.5.16-1",
      "date": "2015-05-17T08:04:42.874Z"
    },
    {
      "number": "2015.5.16-101",
      "date": "2015-05-17T10:04:27.238Z"
    },
    {
      "number": "2015.5.16-100",
      "date": "2015-05-17T16:42:39.243Z"
    },
    {
      "number": "2015.6.1-100",
      "date": "2015-06-08T08:36:22.092Z"
    },
    {
      "number": "2015.6.1-101",
      "date": "2015-06-08T08:50:57.428Z"
    },
    {
      "number": "2015.6.1-102",
      "date": "2015-06-08T09:05:39.227Z"
    },
    {
      "number": "2015.6.1-103",
      "date": "2015-06-08T09:22:38.364Z"
    },
    {
      "number": "2015.6.1-104",
      "date": "2015-06-08T09:29:56.935Z"
    },
    {
      "number": "2015.6.1-105",
      "date": "2015-06-08T11:27:06.605Z"
    },
    {
      "number": "2015.6.1-106",
      "date": "2015-06-08T11:30:57.260Z"
    },
    {
      "number": "2015.6.1-107",
      "date": "2015-06-08T11:39:15.291Z"
    },
    {
      "number": "2015.6.1-108",
      "date": "2015-06-26T09:53:05.932Z"
    },
    {
      "number": "0.0.1",
      "date": "2016-05-23T14:54:53.379Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-05-23T14:56:09.210Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-05-23T15:00:56.781Z"
    },
    {
      "number": "2016.0.1",
      "date": "2016-05-23T15:34:22.776Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-05-23T15:37:51.371Z"
    },
    {
      "number": "0.0.5",
      "date": "2016-05-23T15:39:55.743Z"
    },
    {
      "number": "0.0.6",
      "date": "2016-05-23T15:40:44.555Z"
    },
    {
      "number": "0.0.7",
      "date": "2016-05-23T15:43:06.479Z"
    },
    {
      "number": "0.0.8",
      "date": "2016-05-23T15:43:50.091Z"
    },
    {
      "number": "0.0.9",
      "date": "2016-05-23T15:45:37.418Z"
    },
    {
      "number": "0.0.10",
      "date": "2016-05-23T15:46:55.325Z"
    },
    {
      "number": "2016.4.1",
      "date": "2016-05-23T22:13:19.171Z"
    },
    {
      "number": "2016.4.1-a",
      "date": "2016-05-23T22:15:17.723Z"
    },
    {
      "number": "2016.4.1-b",
      "date": "2016-05-23T22:16:26.297Z"
    },
    {
      "number": "2016.4.1-c",
      "date": "2016-05-23T22:17:58.408Z"
    },
    {
      "number": "2016.4.1-d",
      "date": "2016-05-23T22:18:42.578Z"
    },
    {
      "number": "2016.4.2-a",
      "date": "2016-05-30T11:40:00.035Z"
    },
    {
      "number": "2016.4.3-a",
      "date": "2016-05-30T11:55:16.946Z"
    },
    {
      "number": "2016.4.3-b",
      "date": "2016-05-30T11:56:04.066Z"
    },
    {
      "number": "2016.6.12-1",
      "date": "2016-06-12T03:32:28.542Z"
    },
    {
      "number": "2016.6.12-2",
      "date": "2016-06-12T03:36:31.508Z"
    },
    {
      "number": "2016.6.12-3",
      "date": "2016-06-12T17:12:40.229Z"
    },
    {
      "number": "2016.6.12-4",
      "date": "2016-06-12T17:13:19.831Z"
    }
  ],
  "created": "2015-05-17T07:50:09.018Z",
  "modified": "2016-06-12T17:13:19.831Z",
  "lastPublisher": {
    "name": "kaizhu",
    "email": "kaizhu256@gmail.com"
  },
  "owners": [
    {
      "name": "kaizhu",
      "email": "kaizhu256@gmail.com"
    }
  ],
  "readme": "kaizhu-sandbox\n========\n<!--- npm_package_description begin --->\nthis package will run dynamic browser tests with coverage (via istanbul and electron)\n<!--- npm_package_description end --->\n\n[![travis-ci.org build-status](https://api.travis-ci.org/kaizhu256/node-utility2.svg)](https://travis-ci.org/kaizhu256/node-utility2)\n\n[![NPM](https://nodei.co/npm/utility2.png?downloads=true)](https://www.npmjs.com/package/utility2)\n\n\n\n# documentation\n#### todo\n- npm publish 2016.5.4\n- add run test button\n- deploy heroku test-server\n- add test for build-app\n- merge github-crud into this package\n- add socket-io to repl-server\n- add utility2.middlewareLimit\n- add server stress test using electron\n- none\n\n#### change since 5a1c9f58\n- add file lib.nedb.js\n- add download link for example.js and example.sh\n- add minified asset assets.app.min.js\n- prevent side-effects in function utility2.docApiCreate\n- fix missing screen-capture of npmTestPublished\n- none\n\n#### this package requires\n- darwin or linux os\n- chromium-based browser or firefox browser\n\n#### api-doc\n- [https://kaizhu256.github.io/node-utility2/build/doc.api.html](https://kaizhu256.github.io/node-utility2/build/doc.api.html)\n\n[![api-doc](https://kaizhu256.github.io/node-utility2/build/screen-capture.docApiCreate.browser._2Fhome_2Ftravis_2Fbuild_2Fkaizhu256_2Fnode-utility2_2Ftmp_2Fbuild_2Fdoc.api.html.png)](https://kaizhu256.github.io/node-utility2/build/doc.api.html)\n\n\n\n# live test-server\n- [https://kaizhu256.github.io/node-utility2/build..beta..travis-ci.org/app/index.html](https://kaizhu256.github.io/node-utility2/build..beta..travis-ci.org/app/index.html)\n\n[![github.com test-server](https://kaizhu256.github.io/node-utility2/build/screen-capture.githubDeploy.browser._2Fnode-utility2_2Fbuild..alpha..travis-ci.org_2Fapp_2Findex.html.png)](https://kaizhu256.github.io/node-utility2/build..beta..travis-ci.org/app/index.html)\n\n\n\n# build-status [![travis-ci.org build-status](https://api.travis-ci.org/kaizhu256/node-utility2.svg)](https://travis-ci.org/kaizhu256/node-utility2)\n[![build commit status](https://kaizhu256.github.io/node-utility2/build/build.badge.svg)](https://travis-ci.org/kaizhu256/node-utility2)\n\n| git-branch : | [master](https://github.com/kaizhu256/node-utility2/tree/master) | [beta](https://github.com/kaizhu256/node-utility2/tree/beta) | [alpha](https://github.com/kaizhu256/node-utility2/tree/alpha)|\n|--:|:--|:--|:--|\n| test-server : | [![github.com test-server](https://kaizhu256.github.io/node-utility2/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-utility2/build..master..travis-ci.org/app/index.html) | [![github.com test-server](https://kaizhu256.github.io/node-utility2/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-utility2/build..beta..travis-ci.org/app/index.html) | [![github.com test-server](https://kaizhu256.github.io/node-utility2/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-utility2/build..alpha..travis-ci.org/app/index.html)|\n| test-report : | [![test-report](https://kaizhu256.github.io/node-utility2/build..master..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-utility2/build..master..travis-ci.org/test-report.html) | [![test-report](https://kaizhu256.github.io/node-utility2/build..beta..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-utility2/build..beta..travis-ci.org/test-report.html) | [![test-report](https://kaizhu256.github.io/node-utility2/build..alpha..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-utility2/build..alpha..travis-ci.org/test-report.html)|\n| coverage : | [![istanbul coverage](https://kaizhu256.github.io/node-utility2/build..master..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-utility2/build..master..travis-ci.org/coverage.html/index.html) | [![istanbul coverage](https://kaizhu256.github.io/node-utility2/build..beta..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-utility2/build..beta..travis-ci.org/coverage.html/index.html) | [![istanbul coverage](https://kaizhu256.github.io/node-utility2/build..alpha..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-utility2/build..alpha..travis-ci.org/coverage.html/index.html)|\n| build-artifacts : | [![build-artifacts](https://kaizhu256.github.io/node-utility2/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-utility2/tree/gh-pages/build..master..travis-ci.org) | [![build-artifacts](https://kaizhu256.github.io/node-utility2/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-utility2/tree/gh-pages/build..beta..travis-ci.org) | [![build-artifacts](https://kaizhu256.github.io/node-utility2/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-utility2/tree/gh-pages/build..alpha..travis-ci.org)|\n\n#### master branch\n- stable branch\n- HEAD should be tagged, npm-published package\n\n#### beta branch\n- semi-stable branch\n- HEAD should be latest, npm-published package\n\n#### alpha branch\n- unstable branch\n- HEAD is arbitrary\n- commit history may be rewritten\n\n\n\n# quickstart interactive example\n#### to run this example, follow the instruction in the script below\n- [example.sh](https://kaizhu256.github.io/node-utility2/build/example.sh)\n```shell\n# example.sh\n\n# this shell script will\n    # npm install utility2\n    # serve a webpage that will interactively run browser tests with coverage\n\n# instruction\n    # 1. copy and paste this entire shell script into a console and press enter\n    # 2. open a browser to http://localhost:8081\n    # 3. edit or paste script in browser to cover and test\n\nshExampleSh() {(set -e\n    # npm install utility2\n    npm install utility2\n\n    # serve a webpage that will interactively run browser tests with coverage\n    cd node_modules/utility2 && export PORT=8081 && npm start\n)}\nshExampleSh\n```\n\n#### output from electron\n![screen-capture](https://kaizhu256.github.io/node-utility2/build/screen-capture.testExampleSh.browser..png)\n\n#### output from shell\n![screen-capture](https://kaizhu256.github.io/node-utility2/build/screen-capture.testExampleSh.svg)\n\n\n\n# quickstart node example\n![screen-capture](https://kaizhu256.github.io/node-utility2/build/screen-capture.testExampleJs.browser._2Ftmp_2Fapp_2Ftmp_2Fbuild_2Ftest-report.html.png)\n\n#### to run this example, follow the instruction in the script below\n- [example.js](https://kaizhu256.github.io/node-utility2/build/example.js)\n```javascript\n/*\nexample.js\n\nthis shared browser / node script will run browser tests with coverage\n(via istanbul and electron)\n\ninstruction\n    1. save this js script as example.js\n    2. run the shell command:\n        $ npm install electron-lite utility2 && \\\n            export PATH=\"$(pwd)/node_modules/.bin:$PATH\" && \\\n            export PORT=8081 && \\\n            export npm_config_mode_coverage=1 && \\\n            node_modules/.bin/utility2 test node example.js\n    3. view test-report in ./tmp/build/test-report.html\n    4. view coverage in ./tmp/build/coverage.html/index.html\n*/\n\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        /* istanbul ignore next */\n        // init local\n        local = local.modeJs === 'browser'\n            ? window.utility2.local\n            : module.isRollup\n            ? module\n            : require('utility2').local;\n        // export local\n        local.global.local = local;\n        // init envDict\n        local.utility2.objectSetDefault(local.utility2.envDict, {\n            npm_package_description: 'undefined module',\n            npm_package_name: 'undefined',\n            npm_package_version: '0.0.1'\n        });\n        // init middleware\n        local.middleware = local.utility2.middlewareGroupCreate([\n            local.utility2.middlewareInit,\n            local.utility2.middlewareAssetsCached,\n            local.utility2.middlewareJsonpStateGet\n        ]);\n        // init error-middleware\n        local.middlewareError = local.utility2.middlewareError;\n        // run server-test\n        local.utility2.testRunServer(local);\n        // init assets\n        local.utility2.assetsDict['/assets.hello'] = 'hello';\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // init tests\n        local.testCase_ajax_200 = function (options, onError) {\n        /*\n         * this function will test ajax's \"200 ok\" handling-behavior\n         */\n            options = {};\n            // test ajax-path 'assets.hello'\n            local.utility2.ajax({\n                url: 'assets.hello'\n            }, function (error, xhr) {\n                local.utility2.tryCatchOnError(function () {\n                    // validate no error occurred\n                    local.utility2.assert(!error, error);\n                    // validate data\n                    options.data = xhr.responseText;\n                    local.utility2.assert(options.data === 'hello', options.data);\n                    onError();\n                }, onError);\n            });\n        };\n        local.testCase_ajax_404 = function (options, onError) {\n        /*\n         * this function will test ajax's \"404 not found\" handling-behavior\n         */\n            options = {};\n            // test ajax-path '/undefined'\n            local.utility2.ajax({ url: '/undefined' }, function (error) {\n                local.utility2.tryCatchOnError(function () {\n                    // validate error occurred\n                    local.utility2.assert(error, error);\n                    options.statusCode = error.statusCode;\n                    // validate 404 http statusCode\n                    local.utility2.assert(options.statusCode === 404, options.statusCode);\n                    onError();\n                }, onError);\n            });\n        };\n        break;\n\n\n\n    // run node js-env code - post-init\n    case 'node':\n        // init tests\n        local.testCase_webpage_default = function (options, onError) {\n        /*\n         * this function will test the webpage's default handling-behavior\n         */\n            options = {\n                modeCoverageMerge: true,\n                url: 'http://localhost:' + local.utility2.envDict.PORT +\n                    '?modeTest=consoleLogResult'\n            };\n            local.utility2.browserTest(options, onError);\n        };\n        // export local\n        module.exports = local;\n        // init assets\n        /* istanbul ignore next */\n        local.utility2.assetsDict['/assets.example.js'] = local.global.assetsExampleJs ||\n            local.fs.readFileSync(__filename, 'utf8');\n        /* jslint-ignore-begin */\n        local.utility2.templateIndexHtml = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<title>\\n\\\n{{envDict.npm_package_name}} @ {{envDict.npm_package_version}}\\n\\\n</title>\\n\\\n<link href=\"assets.utility2.css\" rel=\"stylesheet\">\\n\\\n<style>\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background-color: #fff;\\n\\\n    font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 32rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\n.jslintOutputPre {\\n\\\n    color: #f00;\\n\\\n}\\n\\\n.testReportDiv {\\n\\\n    display: none;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n    <div class=\"ajaxProgressDiv\" style=\"display: block;\">\\n\\\n        <div class=\"ajaxProgressBarDiv ajaxProgressBarDivLoading\">loading</div>\\n\\\n    </div>\\n\\\n    <h1>\\n\\\n        <a\\n\\\n            {{#if envDict.npm_package_homepage}}\\n\\\n            href=\"{{envDict.npm_package_homepage}}\"\\n\\\n            {{/if envDict.npm_package_homepage}}\\n\\\n            target=\"_blank\"\\n\\\n        >\\n\\\n            {{envDict.npm_package_name}} @ {{envDict.npm_package_version}}\\n\\\n        </a>\\n\\\n    </h1>\\n\\\n    <h3>{{envDict.npm_package_description}}</h3>\\n\\\n    <h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n    <div>edit or paste script below to cover and test</div>\\n\\\n<textarea class=\"istanbulInputTextarea jslintInputTextarea jsonStringifyInputTextarea\">\\n\\\n/*jslint browser: true*/\\n\\\n(function () {\\n\\\n    \"use strict\";\\n\\\n    var testCaseDict;\\n\\\n    testCaseDict = {};\\n\\\n    testCaseDict.modeTest = true;\\n\\\n\\n\\\n    // comment this testCase to disable the failed assertion demo\\n\\\n    testCaseDict.testCase_failed_assertion_demo = function (\\n\\\n        options,\\n\\\n        onError\\n\\\n    ) {\\n\\\n    /*\\n\\\n     * this function will demo a failed assertion test\\n\\\n     */\\n\\\n        // jslint-hack\\n\\\n        window.utility2.nop(options);\\n\\\n        window.utility2.assert(false, \"this is a failed assertion demo\");\\n\\\n        onError();\\n\\\n    };\\n\\\n\\n\\\n    testCaseDict.testCase_passed_ajax_demo = function (options, onError) {\\n\\\n    /*\\n\\\n     * this function will demo a passed ajax test\\n\\\n     */\\n\\\n        var data;\\n\\\n        options = { url: \"/\" };\\n\\\n        // test ajax request for main-page \"/\"\\n\\\n        window.utility2.ajax(options, function (error, xhr) {\\n\\\n            try {\\n\\\n                // validate no error occurred\\n\\\n                window.utility2.assert(!error, error);\\n\\\n                // validate non-empty data\\n\\\n                data = xhr.responseText;\\n\\\n                window.utility2.assert(data && data.length > 0, data);\\n\\\n                // validate \"200 ok\" status\\n\\\n                if (xhr.statusCode === 200) {\\n\\\n                    window.utility2.assert(data, data);\\n\\\n                }\\n\\\n                onError();\\n\\\n            } catch (errorCaught) {\\n\\\n                onError(errorCaught);\\n\\\n            }\\n\\\n        });\\n\\\n    };\\n\\\n\\n\\\n    if (!window.utility2.modeTest) {\\n\\\n        window.utility2.testRun(testCaseDict);\\n\\\n    }\\n\\\n}());\\n\\\n</textarea>\\n\\\n    <pre class=\"jsonStringifyPre\"></pre>\\n\\\n    <pre class=\"jslintOutputPre\"></pre>\\n\\\n    <div class=\"testReportDiv\"></div>\\n\\\n    <div class=\"istanbulCoverageDiv\"></div>\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.min.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\n<script src=\"assets.utility2.lib.bcrypt.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.cryptojs.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.istanbul.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.jslint.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.nedb.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.uglifyjs.js\"></script>\\n\\\n<script src=\"assets.utility2.js\"></script>\\n\\\n<script src=\"jsonp.utility2.stateGet?callback=window.utility2.stateInit\"></script>\\n\\\n<script>window.utility2.onReadyBefore.counter += 1;</script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<script>window.utility2.onReadyBefore();</script>\\n\\\n{{/if isRollup}}\\n\\\n<script>\\n\\\nwindow.testRun = function () {\\n\\\n    if (window.utility2.modeTest) {\\n\\\n        return;\\n\\\n    }\\n\\\n    // try to JSON.stringify .jsonStringifyInputTextarea\\n\\\n    try {\\n\\\n        document.querySelector(\".jsonStringifyPre\").textContent = JSON.stringify(\\n\\\n            JSON.parse(document.querySelector(\".jsonStringifyInputTextarea\").value),\\n\\\n            null,\\n\\\n            4\\n\\\n        );\\n\\\n    } catch (ignore) {\\n\\\n    }\\n\\\n    // jslint .jslintInputTextarea\\n\\\n    window.utility2_jslint.jslintAndPrint(\\n\\\n        document.querySelector(\".jslintInputTextarea\").value,\\n\\\n        \"jslintInputTextarea.js\"\\n\\\n    );\\n\\\n    document.querySelector(\".jslintOutputPre\").textContent =\\n\\\n        window.utility2_jslint.errorText\\n\\\n        .replace((/\\\\u001b\\\\[\\\\d+m/g), \"\")\\n\\\n        .trim();\\n\\\n    // try to cleanup __coverage__\\n\\\n    try {\\n\\\n        delete window.__coverage__[\"/istanbulInputTextarea.js\"];\\n\\\n    } catch (ignore) {\\n\\\n    }\\n\\\n    // try to eval input-code\\n\\\n    try {\\n\\\n        eval(window.utility2_istanbul.instrumentSync(\\n\\\n            document.querySelector(\".istanbulInputTextarea\").value,\\n\\\n            \"/istanbulInputTextarea.js\"\\n\\\n        ));\\n\\\n        window.utility2_istanbul.coverageReportCreate({\\n\\\n            coverage: window.__coverage__\\n\\\n        });\\n\\\n    } catch (errorCaught) {\\n\\\n        document.querySelector(\".istanbulCoverageDiv\").innerHTML =\\n\\\n            \"<pre>\" + errorCaught.stack.replace((/</g), \"&lt\") + \"</pre>\";\\n\\\n    }\\n\\\n};\\n\\\ndocument.querySelector(\".istanbulInputTextarea\")\\n\\\n    .addEventListener(\"keyup\", window.testRun);\\n\\\nwindow.testRun({});\\n\\\n</script>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        local.utility2.assetsDict['/'] = local.utility2.templateRender(\n            local.utility2.templateIndexHtml,\n            { envDict: local.utility2.envDict }\n        );\n        break;\n    }\n}());\n```\n\n#### output from utility2\n![screen-capture](https://kaizhu256.github.io/node-utility2/build/screen-capture.testExampleJs.browser._2Ftmp_2Fapp_2Ftmp_2Fbuild_2Ftest-report.html.png)\n\n#### output from istanbul\n![screen-capture](https://kaizhu256.github.io/node-utility2/build/screen-capture.testExampleJs.browser._2Ftmp_2Fapp_2Ftmp_2Fbuild_2Fcoverage.html_2Fapp_2Fexample.js.html.png)\n\n#### output from shell\n![screen-capture](https://kaizhu256.github.io/node-utility2/build/screen-capture.testExampleJs.svg)\n\n\n\n# npm-dependencies\n- none\n\n\n\n# package-listing\n[![screen-capture](https://kaizhu256.github.io/node-utility2/build/screen-capture.gitLsTree.svg)](https://github.com/kaizhu256/node-utility2)\n\n\n\n# package.json\n```json\n{\n    \"package.json\": true,\n    \"author\": \"kai zhu <kaizhu256@gmail.com>\",\n    \"bin\": {\n        \"utility2\": \"index.sh\",\n        \"utility2-bcrypt\": \"lib.bcrypt.js\",\n        \"utility2-istanbul\": \"lib.istanbul.js\",\n        \"utility2-jslint\": \"lib.jslint.js\",\n        \"utility2-uglifyjs\": \"lib.uglifyjs.js\"\n    },\n    \"description\": \"this package will run dynamic browser tests with coverage \\\n(via istanbul and electron)\",\n    \"devDependencies\": {\n        \"electron-lite\": \"kaizhu256/node-electron-lite#alpha\"\n    },\n    \"engines\": { \"node\": \">=4.0\" },\n    \"homepage\": \"https://github.com/kaizhu256/node-utility2\",\n    \"keywords\": [\n        \"atom\", \"atom-shell\",\n        \"browser\", \"build\",\n        \"ci\", \"code\", \"continuous-integration\", \"cover\", \"coverage\",\n        \"electron\",\n        \"headless\", \"headless-browser\",\n        \"instrument\", \"istanbul\",\n        \"jscover\", \"jscoverage\",\n        \"phantom\", \"phantomjs\",\n        \"slimer\", \"slimerjs\",\n        \"test\", \"travis\", \"travis-ci\",\n        \"web\"\n    ],\n    \"license\": \"MIT\",\n    \"name\": \"utility2\",\n    \"os\": [\"darwin\", \"linux\"],\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/kaizhu256/node-utility2.git\"\n    },\n    \"scripts\": {\n        \"build-app\": \"npm test --mode-test-case=testCase_build_app\",\n        \"build-ci\": \"./index.sh shRun shReadmeBuild\",\n        \"build-doc\": \"npm test --mode-test-case=testCase_build_doc\",\n        \"env\": \"env\",\n        \"example.js\": \"\\\n. ./index.sh && shInit && shReadmeExportScripts && \\\ncp $(shFileTrimLeft tmp/README.package.json) package.json && \\\nshFileTrimLeft tmp/README.example.js && \\\nshRunScreenCapture shReadmeTestJs example.js\",\n        \"example.sh\": \"\\\n. ./index.sh && shInit && shReadmeExportScripts && \\\ncp $(shFileTrimLeft tmp/README.package.json) package.json && \\\nshRunScreenCapture shReadmeTestSh example.sh\",\n        \"start\": \"export PORT=${PORT:-8080} && \\\nexport npm_config_mode_auto_restart=1 && \\\n./index.sh shRun shIstanbulCover node test.js\",\n        \"test\": \"\\\n. ./index.sh && shInit && shReadmeExportScripts && \\\ncp $(shFileTrimLeft tmp/README.package.json) package.json && \\\nexport PORT=$(./index.sh shServerPortRandom) && \\\nexport npm_config_mode_auto_restart=1 && \\\n./index.sh test node test.js\",\n        \"test-published\": \"./index.sh shRun shNpmTestPublished\"\n    },\n    \"version\": \"2016.5.3\"\n}\n```\n\n\n\n# changelog of last 50 commits\n[![screen-capture](https://kaizhu256.github.io/node-utility2/build/screen-capture.gitLog.svg)](https://github.com/kaizhu256/node-utility2/commits)\n\n\n\n# internal build-script\n- Dockerfile.emscripten\n```shell\n# Dockerfile.emscripten\n# docker build -f tmp/README.Dockerfile.emscripten -t emscripten .\nFROM kaizhu256/node-utility2:latest\nMAINTAINER kai zhu <kaizhu256@gmail.com>\n# https://kripken.github.io/emscripten-site/docs\n# /building_from_source/building_emscripten_from_source_using_the_sdk.html\n# build emscripten @ 1.36.0\nRUN cd / && \\\n    git clone https://github.com/juj/emsdk.git --branch=master --single-branch && \\\n    cd /emsdk && \\\n    ./emsdk install -j2 --shallow sdk-master-64bit && \\\n    ./emsdk activate && \\\n    find . -name \".git\" -print0 | xargs -0 rm -fr && \\\n    find . -name \"src\" -print0 | xargs -0 rm -fr\n```\n\n- Dockerfile.latest\n```shell\n# Dockerfile.latest\n# https://hub.docker.com/_/node/\nFROM node:latest\nMAINTAINER kai zhu <kaizhu256@gmail.com>\nVOLUME [ \\\n  \"/mnt\", \\\n  \"/root\", \\\n  \"/tmp\", \\\n  \"/var/cache\", \\\n  \"/var/lib/apt/lists\", \\\n  \"/var/log\", \\\n  \"/var/tmp\" \\\n]\nWORKDIR /tmp\n# cache apt-get\nRUN apt-get update && \\\n    apt-get install -y \\\n        busybox \\\n        chromium \\\n        cmake \\\n        default-jre \\\n        gconf2 \\\n        less \\\n        libnotify4 \\\n        vim \\\n        xvfb\n# cache electron-lite\nRUN npm install electron-lite && \\\n    cp /tmp/electron-*.zip /\n```\n\n- build.sh\n```shell\n# build.sh\n\n# this shell script will run the build for this package\n\nshBuildCiTestPre() {(set -e\n# this function will run the pre-test build\n    # test example js script\n    (export MODE_BUILD=testExampleJs &&\n        npm run example.js)\n    # screen-capture example.js coverage\n    (export MODE_BUILD=testExampleJs &&\n        export modeBrowserTest=screenCapture &&\n        export url=/tmp/app/tmp/build/coverage.html/app/example.js.html &&\n        shBrowserTest)\n    # screen-capture example.js test-report\n    (export MODE_BUILD=testExampleJs &&\n        export modeBrowserTest=screenCapture &&\n        export url=/tmp/app/tmp/build/test-report.html &&\n        shBrowserTest)\n\n    # test example shell script\n    (export MODE_BUILD=testExampleSh &&\n        export npm_config_timeout_exit=1000 &&\n        npm run example.sh)\n)}\n\nshBuildCiTestPost() {(set -e\n# this function will run the post-test build\n    # if running legacy-node, then exit\n    [ \"$(node --version)\" \\< \"v5.0\" ] && exit || true\n    TEST_URL=\"https://$(printf \"$GITHUB_REPO\" | \\\n        sed 's/\\//.github.io\\//')/build..$CI_BRANCH..travis-ci.org/app/index.html\"\n    # deploy app to gh-pages\n    (export MODE_BUILD=githubTest &&\n        shGithubDeploy)\n    # test deployed app to gh-pages\n    (export MODE_BUILD=githubTest &&\n        export modeBrowserTest=test &&\n        export url=\"$TEST_URL?modeTest=consoleLogResult&timeExit={{timeExit}}\" &&\n        shBrowserTest)\n    # docker build\n    if [ \"$TRAVIS\" ] && [ \"$CI_BRANCH\" = alpha ]\n    then\n        # (CI_BRANCH=docker.latest npm run build-ci)\n        :\n    fi\n)}\n\nshBuild() {(set -e\n# this function will run the main build\n    # init env\n    . ./index.sh && shInit\n    # cleanup github-gh-pages dir\n    export BUILD_GITHUB_UPLOAD_PRE_SH=\"rm -fr build\"\n    # init github-gh-pages commit-limit\n    export COMMIT_LIMIT=16\n    # if branch is alpha, beta, or master, then run default build\n    if [ \"$CI_BRANCH\" = alpha ] ||\n        [ \"$CI_BRANCH\" = beta ] ||\n        [ \"$CI_BRANCH\" = master ]\n    then\n        shBuildCiDefault\n    fi\n    docker --version 2>/dev/null || exit\n    # if running legacy-node, then exit\n    [ \"$TRAVIS\" ] && [ \"$(node --version)\" \\< \"v5.0\" ] && exit || true\n    export DOCKER_TAG=\"$(printf \"$CI_BRANCH\" | sed -e \"s/docker.//\")\"\n    # if $DOCKER_TAG is not unique from $CI_BRANCH, then exit\n    [ \"$DOCKER_TAG\" = \"$CI_BRANCH\" ] && exit || true\n    # docker pull\n    docker pull \"$GITHUB_REPO:$DOCKER_TAG\" || true\n    # docker build\n    (printf \"0\" > \"$npm_config_file_tmp\" &&\n        docker build -f \"tmp/README.Dockerfile.$DOCKER_TAG\" -t \"$GITHUB_REPO:$DOCKER_TAG\" . ||\n        printf $? > \"$npm_config_file_tmp\") | tee \"tmp/build/build.$CI_BRANCH.log\"\n    EXIT_CODE=\"$(cat \"$npm_config_file_tmp\")\"\n    [ \"$EXIT_CODE\" != 0 ] && exit \"$EXIT_CODE\" || true\n    # docker test\n    case \"$CI_BRANCH\" in\n    docker.latest)\n        # npm test utility2\n        for PACKAGE in utility2 \"kaizhu256/node-utility2#alpha\"\n        do\n            docker run \"$GITHUB_REPO:$DOCKER_TAG\" /bin/bash -c \"set -e\n                curl https://raw.githubusercontent.com\\\n/kaizhu256/node-utility2/alpha/index.sh > /tmp/index.sh\n                . /tmp/index.sh\n                npm install '$PACKAGE'\n                cd node_modules/utility2\n                shBuildInsideDocker\n            \"\n        done\n        ;;\n    esac\n    # https://docs.travis-ci.com/user/docker/#Pushing-a-Docker-Image-to-a-Registry\n    # docker push\n    if [ \"$DOCKER_PASSWORD\" ]\n    then\n        docker login -e=\"$DOCKER_EMAIL\" -u=\"$DOCKER_USERNAME\" -p=\"$DOCKER_PASSWORD\"\n        docker push \"$GITHUB_REPO:$DOCKER_TAG\"\n    fi\n)}\nshBuild\n```\n"
}