{
  "name": "piano.js",
  "version": "0.0.3",
  "description": "Customizable virtual keyboard written in pure ES6",
  "main": "./dist/piano.js",
  "style": "piano.css",
  "scripts": {
    "test": "gulp",
    "lint": "gulp lint",
    "test-browser": "gulp test-browser",
    "watch": "gulp watch",
    "build": "gulp build",
    "coverage": "gulp coverage",
    "dev": "budo --live"
  },
  "repository": {
    "user": "soixantecircuits",
    "repo": "piano",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/soixantecircuits/piano/tarball/master",
    "clone_url": "https://github.com/soixantecircuits/piano",
    "https_url": "https://github.com/soixantecircuits/piano",
    "travis_url": "https://travis-ci.org/soixantecircuits/piano",
    "zip_url": "https://github.com/soixantecircuits/piano/archive/master.zip",
    "api_url": "https://api.github.com/repos/soixantecircuits/piano"
  },
  "keywords": [],
  "author": {
    "name": "Soixante circuits",
    "email": "contact@soixantecircuits.fr"
  },
  "license": "MIT",
  "homepage": "https://github.com/soixantecircuits/piano",
  "devDependencies": {
    "babel-core": "^6.3.26",
    "babel-eslint": "^4.1.6",
    "babel-loader": "^6.2.0",
    "babel-plugin-transform-object-assign": "^6.3.13",
    "babel-polyfill": "^6.3.14",
    "babel-preset-es2015": "^6.3.13",
    "babel-register": "^6.3.13",
    "chai": "^3.4.1",
    "del": "^2.2.0",
    "glob": "^6.0.3",
    "gulp": "^3.9.0",
    "gulp-babel": "^6.1.1",
    "gulp-eslint": "^1.1.1",
    "gulp-filter": "^3.0.0",
    "gulp-istanbul": "^0.10.3",
    "gulp-jscs": "^3.0.0",
    "gulp-livereload": "^3.8.1",
    "gulp-load-plugins": "^1.1.0",
    "gulp-mocha": "^2.2.0",
    "gulp-plumber": "^1.0.1",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^1.6.0",
    "gulp-uglify": "^1.5.1",
    "gulp-util": "^3.0.7",
    "isparta": "^4.0.0",
    "json-loader": "^0.5.3",
    "mocha": "^2.3.4",
    "script-loader": "^0.6.1",
    "sinon": "^1.17.2",
    "sinon-chai": "^2.8.0",
    "vinyl-source-stream": "^1.1.0",
    "webpack": "^1.12.9",
    "webpack-stream": "^3.1.0"
  },
  "babelBoilerplateOptions": {
    "entryFileName": "piano",
    "mainVarName": "piano"
  },
  "gitHead": "aa60fc6877ab9b8f2d24ec4e723496920526f87c",
  "_npmVersion": "2.14.4",
  "_nodeVersion": "4.1.1",
  "dist": {
    "shasum": "f8334ec5f5419819678fe387c9bfca5c038b7240",
    "tarball": "http://registry.npmjs.org/piano.js/-/piano.js-0.0.3.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-03-17T14:29:55.655Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-03-18T16:21:57.029Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-03-18T17:15:54.579Z"
    }
  ],
  "created": "2016-03-17T14:29:55.655Z",
  "modified": "2016-03-18T17:15:54.579Z",
  "lastPublisher": {
    "name": "art2b",
    "email": "arthur.battut@gmail.com"
  },
  "owners": [
    {
      "name": "art2b",
      "email": "arthur.battut@gmail.com"
    },
    {
      "name": "gabrielstuff",
      "email": "gabriel@soixantecircuits.fr"
    },
    {
      "name": "hugohil",
      "email": "hugo@soixantecircuits.fr"
    }
  ],
  "readme": "# Piano ‚å®\n\n#### Customizable virtual keyboard written in pure JavaScript.\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n[![Join the chat at https://gitter.im/soixantecircuits/piano](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/soixantecircuits/piano?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n*Piano is still under active development.*\n\n# Usage with webpack\n1. `require('piano.js/piano.css')` (probably `entry.js` is a good place to do that)\n2. `var Piano = require('piano.js')` wherever you want to use _piano.js_\n3. Require layouts you want\n```\nvar azerty = require('piano.js/layouts/azerty')\n  , qwerty = require('piano.js/layouts/qwerty')\n```\n4. Instantiate Piano\n```\nvar keyboard = new Piano({\n  layouts: {\n    'azerty': azerty,\n    'qwerty': qwerty\n  },\n  slideContent: true\n})```\n\n5. Use data-attributes in your view\n```html\n<input type=\"text\" data-piano data-piano-scale=\"1.5\" data-piano-layout=\"azerty\" data-piano-event-id=\"do-stuff\" />\n```\n\n6. Use listener in your code\n```\ndocument.querySelector('[data-piano-event-id=\"do-stuff\"]').addEventListener('do-stuff', doStuffCallback)\n```\n\n7. Enjoy!\n# Usage\n\nDownload [piano](piano.js) and at least the [default layout](layouts/default.js) into your project and load them.\n\n```html\n  <!-- Load the librarie -->\n  <script src=\"path/to/piano.js\"></script>\n  <!-- And at least the default layout -->\n  <script src=\"path/to/layouts/default.js\"></script>\n```\n\nThen, add the `data-piano` attribute to trigger the keyboard on click/touch and call `piano.init()` in your js.\n\nA basic `init()` looks like this:\n\n```\npiano.init({\n  triggers: ['click', 'touchstart'],\n  slideContent: true,\n  slideContainer: '.demo-container',\n  onHidden: function () {\n    console.log(\"hidden\")\n  },\n  onBeforeHidden: function () {\n    console.log(\"hidding...\")\n  }\n})\n```\n\nSee the demo for more information.\n\n#### Demo\n\nMake sure you have `node`, `npm` and `gulp` installed. After you have installed development dependencies with `npm i`, you can run `gulp serve` and go to `http://localhost:8080/demo` to check a demo.\n\nOr you can check it out [here](http://soixantecircuits.github.io/piano).\n\n## Positionning / styling\n\nYou can define positionning with the `data-piano-position` attribute. You can use the following:\n\n`'left', 'center', 'right' -> x axis`\n\n`'top', 'middle', 'bottom' -> y axis`\n\nFor example:\n\n```html\n<input type=\"text\" data-piano data-piano-position=\"left, center\" />\n```\n\nOr, with the `absolute` keyword, you can define absolute x and y positions:\n\n```html\n<input type=\"text\" data-piano data-piano-position=\"absolute, 100, 150\" />\n```\n\nDefault positions are `'center, bottom'`.\n\n## Submit\n\nYou can define a `data-piano-event-id` attribute on your element and then listen to it.\nFor example, if you have a `data-piano-event-id=\"input-event\"`:\n\n```javascript\nelement.addEventListener('input-event', function (event) {\n  console.log('element with id \"%s\" submitted.', event.target.id)\n})\n```\n\n## Animations\n\nPiano provide has built-in but yet optionnal support for [Animate.css](https://daneden.github.io/animate.css/).\n\nBy default, it will add `fadeInUp` and `fadeOutDown` classes to your container. Just load the animate.css stylesheet and you'll have nice animations. You can also use the `data-piano-animation-in` and `data-piano-animation-out` attributes to define custom classes to toggle on hide/show.\n\nYou can also choose to create your own animations, and thus just use the classes toggled by piano to trigger them.\n\n## Tactile events\n\nPiano's support for tactile events is still in development (I know, for a virtual keyboard destined to touchscreens, it's kinda lame ...). However, it should work (though not ideally and efficiently) with the browser emulation of the `click` event on touchscreens. You can also define your own event to listen to in the initialization : `piano.init('touchstart')` for example (default is `'click'`).\n\nThis will be optimized very soon. If you have any ideas, suggestions, or even want to get your hands dirty hand submit a PR, you are more than welcome !\n\n# Options\nYou can pass options to your `piano.init()` call. Here they are:\n- trigger: **Array** of event triggers you want Piano to react\n- slideContent: **bool** [true, false], _default to false_. Allow to define if the content should _slide_\n- slideContainer: **string** ['.demo-container'], _no default_. Allow to define the part of the DOM you want to _slide_\n- onHidden: **function**, _default to empty function_. Allow to call a function when the keyboard is hidden\n- onBeforeHidden: **function**, _default to empty function_. Allow to call a function before the keyboard is hidden\n\n## Layouts\n\n*Soon.*\n\n# Development\n\nCreate a `feature-[name-of-the-feature]` branch and make PR on the `dev` branch. Please use the [standard js coding style](https://github.com/feross/standard).\n\n# To Do\n\n- Support accentuation. (partial support for now).\n- Support hammer.js and/or other touch events librarie.\n- Make sure it works well with ~~requireJS~~, AngularJS, MeteorJS, React.\n- Publish it to bower and be famous.\n- Test with IE11, Chrome, Firefox.\n- Test embeded in ~~electron~~ and nwjs.\n"
}