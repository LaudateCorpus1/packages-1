{
  "name": "pkg-conf",
  "version": "2.0.0",
  "description": "Get namespaced config from the closest package.json",
  "license": "MIT",
  "repository": {
    "user": "sindresorhus",
    "repo": "pkg-conf",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/sindresorhus/pkg-conf/tarball/master",
    "clone_url": "https://github.com/sindresorhus/pkg-conf",
    "https_url": "https://github.com/sindresorhus/pkg-conf",
    "travis_url": "https://travis-ci.org/sindresorhus/pkg-conf",
    "zip_url": "https://github.com/sindresorhus/pkg-conf/archive/master.zip",
    "api_url": "https://api.github.com/repos/sindresorhus/pkg-conf"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "engines": {
    "node": ">=4"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "json",
    "read",
    "parse",
    "file",
    "fs",
    "graceful",
    "load",
    "pkg",
    "package",
    "config",
    "conf",
    "configuration",
    "object",
    "namespace",
    "namespaced"
  ],
  "dependencies": {
    "find-up": "^2.0.0",
    "load-json-file": "^2.0.0"
  },
  "devDependencies": {
    "ava": "*",
    "xo": "*"
  },
  "xo": {
    "esnext": true
  },
  "fixture": {
    "foo": true
  },
  "gitHead": "9c1bba03f9fdd9449e9218eb03d1edc86acc0b28",
  "homepage": "https://github.com/sindresorhus/pkg-conf#readme",
  "_npmVersion": "2.15.9",
  "_nodeVersion": "4.6.0",
  "dist": {
    "shasum": "071c87650403bccfb9c627f58751bfe47c067279",
    "tarball": "http://registry.npmjs.org/pkg-conf/-/pkg-conf-2.0.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-09-02T10:27:59.319Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-09-02T16:44:32.797Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-01-23T22:49:30.062Z"
    },
    {
      "number": "1.1.1",
      "date": "2016-01-24T01:30:19.236Z"
    },
    {
      "number": "1.1.2",
      "date": "2016-03-26T08:46:38.266Z"
    },
    {
      "number": "1.1.3",
      "date": "2016-05-24T04:00:17.609Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-10-10T19:25:09.580Z"
    }
  ],
  "created": "2015-09-02T10:27:59.319Z",
  "modified": "2016-10-10T19:25:09.580Z",
  "lastPublisher": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "owners": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "readme": "# pkg-conf [![Build Status](https://travis-ci.org/sindresorhus/pkg-conf.svg?branch=master)](https://travis-ci.org/sindresorhus/pkg-conf)\n\n> Get namespaced config from the closest package.json\n\nHaving tool specific config in package.json reduces the amount of metafiles in your repo (there are usually a lot!) and makes the config obvious compared to hidden dotfiles like `.eslintrc`, which can end up causing confusion. [XO](https://github.com/sindresorhus/xo), for example, uses the `xo` namespace in package.json, and [ESLint](http://eslint.org) uses `eslintConfig`. Many more tools supports this, like [AVA](https://ava.li), [Babel](https://babeljs.io), [nyc](https://github.com/istanbuljs/nyc), etc.\n\n\n## Install\n\n```\n$ npm install --save pkg-conf\n```\n\n\n## Usage\n\n```json\n{\n\t\"name\": \"some-package\",\n\t\"version\": \"1.0.0\",\n\t\"unicorn\": {\n\t\t\"rainbow\": true\n\t}\n}\n```\n\n```js\nconst pkgConf = require('pkg-conf');\n\npkgConf('unicorn').then(config => {\n\tconsole.log(config.rainbow);\n\t//=> true\n});\n```\n\n\n## API\n\nIt [walks up](https://github.com/sindresorhus/find-up) parent directories until a `package.json` can be found, reads it, and returns the user specified namespace or an empty object if not found.\n\n### pkgConf(namespace, [options])\n\nReturns a `Promise` for the config.\n\n### pkgConf.sync(namespace, [options])\n\nReturns the config.\n\n#### namespace\n\nType: `string`\n\nThe package.json namespace you want.\n\n#### options\n\n##### cwd\n\nType: `string`<br>\nDefault: `process.cwd()`\n\nDirectory to start looking up for a package.json file.\n\n##### defaults\n\nType: `Object`<br>\n\nDefault config.\n\n##### skipOnFalse\n\nType: `boolean`<br>\nDefault: `false`\n\nSkip `package.json` files that have the namespaced config explicitly set to `false`.\n\nContinues searching upwards until the next `package.json` file is reached. This can be useful when you need to support the ability for users to have nested `package.json` files, but only read from the root one, like in the case of [`electron-builder`](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata) where you have one `package.json` file for the app and one top-level for development.\n\nExample usage for the user:\n```json\n{\n\t\"name\": \"some-package\",\n\t\"version\": \"1.0.0\",\n\t\"unicorn\": false\n}\n```\n\n### pkgConf.filepath(config)\n\nPass in the `config` returned from any of the above methods.\n\nReturns the filepath to the package.json file or `null` when not found.\n\n\n## Related\n\n- [read-pkg-up](https://github.com/sindresorhus/read-pkg-up) - Read the closest package.json file\n- [read-pkg](https://github.com/sindresorhus/read-pkg) - Read a package.json file\n- [find-up](https://github.com/sindresorhus/find-up) - Find a file by walking up parent directories\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n"
}