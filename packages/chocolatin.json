{
  "name": "chocolatin",
  "version": "1.3.2",
  "description": "Make life in your project : build, start, dance.",
  "scripts": {
    "lint": "npm run xo -- ./src",
    "test": "npm run jest -- --verbose",
    "testw": "npm run jest -- --watch",
    "ci": "npm run lint && npm run test",
    "up": "ncu -- -a && npm update && npm run yarn upgrade",
    "jest": "jest",
    "yarn": "yarn",
    "xo": "xo",
    "ncu": "npm-check-updates"
  },
  "author": {
    "name": "Meillet Robin",
    "email": "robin.meillet@epitech.eu"
  },
  "main": "src/index.js",
  "license": "MIT",
  "repository": {
    "user": "kMeillet",
    "repo": "chocolatin",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/kMeillet/chocolatin/tarball/master",
    "clone_url": "https://github.com/kMeillet/chocolatin",
    "https_url": "https://github.com/kMeillet/chocolatin",
    "travis_url": "https://travis-ci.org/kMeillet/chocolatin",
    "zip_url": "https://github.com/kMeillet/chocolatin/archive/master.zip",
    "api_url": "https://api.github.com/repos/kMeillet/chocolatin"
  },
  "homepage": "https://github.com/kMeillet/chocolatin/#readme",
  "jest": {
    "testRegex": "/__tests__/.*.js$",
    "moduleFileExtensions": [
      "js"
    ]
  },
  "devDependencies": {
    "jest": "^16.0.2",
    "npm-check-updates": "^2.8.6",
    "yarn": "^0.16.1"
  },
  "dependencies": {
    "angular2-router-loader": "^0.3.3",
    "angular2-template-loader": "^0.5.0",
    "assets-webpack-plugin": "^3.5.0",
    "autoprefixer": "^6.5.1",
    "awesome-typescript-loader": "^2.2.4",
    "babel-core": "^6.18.0",
    "babel-eslint": "^7.1.0",
    "babel-loader": "^6.2.7",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-react": "^6.16.0",
    "babel-preset-stage-0": "^6.16.0",
    "babel-preset-stage-1": "^6.16.0",
    "babel-preset-stage-2": "^6.18.0",
    "clean-webpack-plugin": "^0.1.13",
    "codelyzer": "^1.0.0-beta.3",
    "copy-webpack-plugin": "^4.0.0",
    "css-loader": "^0.25.0",
    "css-mqpacker": "^5.0.1",
    "eslint-plugin-react": "^6.4.1",
    "extract-text-webpack-plugin": "^2.0.0-beta",
    "file-loader": "^0.9.0",
    "html-loader": "^0.4.4",
    "html-webpack-plugin": "^2.24.0",
    "istanbul-instrumenter-loader": "^1.0.0",
    "node-sass": "^3.10.1",
    "postcss-csscomb": "^1.0.2",
    "postcss-loader": "^1.1.0",
    "progress-bar-webpack-plugin": "^1.9.0",
    "pug": "^2.0.0-beta6",
    "pug-loader": "^2.3.0",
    "ramda": "^0.22.1",
    "raw-loader": "^0.5.1",
    "react-hot-loader": "^3.0.0-beta.5",
    "sass-loader": "^4.0.2",
    "style-loader": "^0.13.1",
    "stylus": "^0.54.5",
    "stylus-loader": "^2.3.1",
    "to-string-loader": "^1.1.5",
    "tslint": "^3.15.1",
    "tslint-loader": "^2.1.5",
    "typescript": "^2.0.6",
    "url-loader": "^0.5.7",
    "vue-loader": "^9.7.0",
    "webpack": "^2.1.0-beta.25",
    "webpack-browser-plugin": "^1.0.12",
    "webpack-bundle-analyzer": "^1.3.0",
    "webpack-dashboard": "^0.2.0",
    "webpack-dev-server": "^2.1.0-beta.5",
    "webpack-md5-hash": "0.0.5",
    "xo": "^0.17.0",
    "xo-loader": "^0.7.0"
  },
  "engines": {
    "node": ">= 6",
    "npm": ">= 3"
  },
  "gitHead": "d269c250b012cdb08a0f595adbaf70c565f0d901",
  "_npmVersion": "3.10.8",
  "_nodeVersion": "6.9.1",
  "dist": {
    "shasum": "d76a6e42d62397d431bd4d87e21a93120cf3acbe",
    "tarball": "http://registry.npmjs.org/chocolatin/-/chocolatin-1.3.2.tgz"
  },
  "versions": [
    {
      "number": "0.0.3",
      "date": "2016-10-24T21:51:08.447Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-10-24T22:01:29.423Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-10-24T22:09:29.890Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-10-24T22:25:28.328Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-10-24T22:30:05.357Z"
    },
    {
      "number": "0.3.2",
      "date": "2016-10-24T22:35:28.329Z"
    },
    {
      "number": "0.3.3",
      "date": "2016-10-24T22:56:16.971Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-10-25T00:37:30.766Z"
    },
    {
      "number": "0.5.0",
      "date": "2016-10-25T00:44:41.555Z"
    },
    {
      "number": "0.5.1",
      "date": "2016-10-25T00:53:11.698Z"
    },
    {
      "number": "0.6.0",
      "date": "2016-10-25T01:58:12.831Z"
    },
    {
      "number": "0.6.1",
      "date": "2016-10-25T02:04:48.259Z"
    },
    {
      "number": "0.6.2",
      "date": "2016-10-25T15:14:51.020Z"
    },
    {
      "number": "0.6.3",
      "date": "2016-10-25T17:02:41.451Z"
    },
    {
      "number": "0.7.0",
      "date": "2016-10-25T19:49:52.013Z"
    },
    {
      "number": "0.7.1",
      "date": "2016-10-25T19:53:05.622Z"
    },
    {
      "number": "0.7.2",
      "date": "2016-10-25T19:54:04.073Z"
    },
    {
      "number": "0.7.3",
      "date": "2016-10-25T20:18:25.523Z"
    },
    {
      "number": "0.7.4",
      "date": "2016-10-25T20:34:59.946Z"
    },
    {
      "number": "0.7.5",
      "date": "2016-10-25T20:41:14.904Z"
    },
    {
      "number": "0.7.6",
      "date": "2016-10-25T20:50:52.515Z"
    },
    {
      "number": "0.7.7",
      "date": "2016-10-25T20:57:28.979Z"
    },
    {
      "number": "0.8.0",
      "date": "2016-10-25T21:36:12.861Z"
    },
    {
      "number": "0.8.1",
      "date": "2016-10-25T21:54:35.674Z"
    },
    {
      "number": "0.8.2",
      "date": "2016-10-26T12:01:14.105Z"
    },
    {
      "number": "0.8.3",
      "date": "2016-10-26T12:44:19.529Z"
    },
    {
      "number": "0.9.0",
      "date": "2016-10-26T13:11:57.919Z"
    },
    {
      "number": "0.9.1",
      "date": "2016-10-26T19:49:38.730Z"
    },
    {
      "number": "0.9.2",
      "date": "2016-10-26T19:52:14.017Z"
    },
    {
      "number": "0.9.3",
      "date": "2016-10-26T19:55:02.964Z"
    },
    {
      "number": "0.9.4",
      "date": "2016-10-26T22:42:02.565Z"
    },
    {
      "number": "0.9.5",
      "date": "2016-10-28T22:26:43.111Z"
    },
    {
      "number": "0.9.6",
      "date": "2016-10-29T21:13:47.465Z"
    },
    {
      "number": "0.9.7",
      "date": "2016-10-29T21:43:00.740Z"
    },
    {
      "number": "0.9.8",
      "date": "2016-10-29T22:28:05.889Z"
    },
    {
      "number": "0.9.9",
      "date": "2016-10-29T22:41:33.594Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-10-29T23:08:14.145Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-10-29T23:19:05.977Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-10-30T00:06:05.360Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-10-30T00:17:21.048Z"
    },
    {
      "number": "1.0.4",
      "date": "2016-10-30T01:15:42.023Z"
    },
    {
      "number": "1.0.5",
      "date": "2016-10-30T01:23:47.278Z"
    },
    {
      "number": "1.0.6",
      "date": "2016-10-30T03:05:05.291Z"
    },
    {
      "number": "1.0.7",
      "date": "2016-10-30T22:14:47.588Z"
    },
    {
      "number": "1.0.8",
      "date": "2016-10-30T23:35:54.884Z"
    },
    {
      "number": "1.0.9",
      "date": "2016-10-30T23:48:02.583Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-10-31T00:13:16.273Z"
    },
    {
      "number": "1.2.1",
      "date": "2016-10-31T14:11:16.937Z"
    },
    {
      "number": "1.2.2",
      "date": "2016-10-31T16:13:13.131Z"
    },
    {
      "number": "1.2.3",
      "date": "2016-11-01T15:22:38.359Z"
    },
    {
      "number": "1.2.4",
      "date": "2016-11-01T15:29:41.964Z"
    },
    {
      "number": "1.2.5",
      "date": "2016-11-01T15:43:08.171Z"
    },
    {
      "number": "1.2.6",
      "date": "2016-11-01T18:58:42.982Z"
    },
    {
      "number": "1.2.7",
      "date": "2016-11-01T19:18:34.724Z"
    },
    {
      "number": "1.2.8",
      "date": "2016-11-01T20:04:57.597Z"
    },
    {
      "number": "1.2.9",
      "date": "2016-11-01T20:55:57.711Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-11-01T20:57:00.686Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-11-01T21:07:20.789Z"
    },
    {
      "number": "1.3.2",
      "date": "2016-11-02T13:11:02.846Z"
    }
  ],
  "created": "2016-10-24T21:51:08.447Z",
  "modified": "2016-11-02T13:11:02.846Z",
  "lastPublisher": {
    "name": "kmeillet",
    "email": "robin.meillet@epitech.eu"
  },
  "owners": [
    {
      "name": "kmeillet",
      "email": "robin.meillet@epitech.eu"
    }
  ],
  "readme": "# Chocolatin\n\n[![Build Status](https://travis-ci.org/kMeillet/chocolatin.svg?branch=master)](https://travis-ci.org/kMeillet/chocolatin)\n\nWhen you start with WebPack, you need to :\n\n- Install a lot of package (loaders, plugins, transpiler, ...).\n- Make WebPack configuration with messy deep object in different environment (dev, prod, testing, ...).\n- Setup external tools configuration (linter, .babelrc file, ...).\n\nChocolatin help developers to leverage friction & time-lost with WebPack configuration : focus on project instead of build system.\n\nWe use more functional way to describe your app, with little object configuration.\n\n# How to install\n\nYou need Node.js >= 6 and NPM >= 3.\n\nChocolatin work with WebPack 2 : we will follow WebPack road-map and update package as soon as possible before final release.\n\nSo now, install Chocolatin with NPM in your project :\n\n```sh\nnpm i chocolatin --save-dev\n```\n\nOr with Yarn :\n\n```sh\nyarn add chocolatin --dev\n```\n\n# Usage\n\nTouch a new file and import Chocolatin module.\n\n```js\n// build.js\n'use strict';\n\nconst chocolatin = require('chocolatin');\n\nchocolatin.burn({\n  mixins: [/* Mixins */],\n  loaders: [/* Loaders */],\n  plugins: [/* Plugins */],\n});\n```\n\nThen, simply run file with Node.js :\n\n```sh\nnode ./build.js\n```\n\nYou can ship the \"demo\" directory for some example in different environment with Babel, TypeScript, Node.js, Angular 1 or 2, React, Electron, ...\n\n# Public API\n\n##### provide({ mixins: Array\\<Object>, loaders: Array\\<Object>, plugins: Array\\<Function> )): WebPack Configuration\n\nProvide take Chocolatin configuration and transform into WebPack 2 configuration.\n\nStart with Node.js :\n\n```sh\nnode ./build.js\n```\n\n##### burn({ mixins: Array\\<Object>, loaders: Array\\<Object>, plugins: Array\\<Function> )): WebPack Compiler\n\nBurn take Chocolatin configuration and build them with WebPack.\n\nStart with Node.js :\n\n```sh\nnode ./build.js\n```\n\n##### watch({ mixins: Array\\<Object>, loaders: Array\\<Object>, plugins: Array\\<Function> )): WebPack Watcher\n\nWatch take Chocolatin configuration and watch files with WebPack.\n\nStart with Node.js :\n\n```sh\nnode ./build.js\n```\n\n##### server({ mixins: Array\\<Object>, loaders: Array\\<Object>, plugins: Array\\<Function> )): WebPack Dev Server\n\nServer take Chocolatin configuration and create server on http://localhost:3000. Then, watch files.\n\nYou can use Hmr plugins to start Hot Module replacement.\n\nStart with Node.js :\n\n```sh\nnode ./build.js\n```\n\nIf you need better design, install \"webpack-dashboard\" npm package in your project, add Dashboard plugin and and start server with :\n\n```sh\nwebpack-dashboard -- node ./build.js\n```\n\n##### mixins : all mixins available.\n\n##### loaders : all loaders available.\n\n##### plugins : all plugins available.\n\n# Mixins\n\nMixins are function with n-arity, who return an object who will be merge to WebPack base configuration.\n\nOnly one mixin is available : Io.\n\nThe Io mixin describe how your app work :\n\n- 1st argument is a WebPack entry object. Mandatory.\n- 2nd argument is a WebPack output object. Mandatory.\n- 3rd argument is a string who describe WebPack compiler target : web | webworker | node | electron. Mandatory.\n- 4th argument are externals package who need to stay in node_modules, like socket.io server package. Optional.\n\nThat's all. You can make your own mixin if you need to share and dispatch your own configuration.\n\n# Loaders\n\nLoader handle file in your project.\n\nBasicly, it's just an object with 5 props :\n\n- ext : a list of extension to handle.\n- wrap : an object with loader options.\n- pre : preloader WebPack configuration\n- loader : loader WebPack configuration.\n- post : postloader WebPack configuration.\n\nAvailable loaders: \n\n- AssetsFile : handle assets as file.\n- AssetsUrl : handle assets as url (base64), or file if they're to big.\n- Babel : handle ES6/ES7 with Babel and add linter.\n- BabelStage0 : handle ES6/ES7 with Babel + stage-0 and add linter.\n- BabelStage1 : handle ES6/ES7 with Babel + stage-1 and add linter.\n- BabelStage2 : handle ES6/ES7 with Babel + stage-2 and add linter.\n- BabelDecorators : handle ES6/ES7 with Babel + decorators and add linter.\n- BabelStage0Decorators : handle ES6/ES7 with Babel + stage-0 + decorators and add linter.\n- BabelStage1Decorators : handle ES6/ES7 with Babel + stage-1 + decorators and add linter.\n- BabelStage2Decorators : handle ES6/ES7 with Babel + stage-2 + decorators and add linter.\n- BabelReact : handle ES/ES7 with Babel + React JSX and add linter.\n- BabelReactDecorators : handle ES/ES7 with Babel + React JSX + decorators and add linter.\n- BabelReactStage0 : handle ES/ES7 with Babel + React JSX + stage-0 and add linter.\n- BabelReactStage1 : handle ES/ES7 with Babel + React JSX + stage-1 and add linter.\n- BabelReactStage2 : handle ES/ES7 with Babel + React JSX + stage-2 and add linter.\n- BabelReactStage0Decorators : handle ES/ES7 with Babel + React JSX + stage-0 + decorators and add linter.\n- BabelReactStage1Decorators : handle ES/ES7 with Babel + React JSX + stage-1 + decorators and add linter.\n- BabelReactStage2Decorators : handle ES/ES7 with Babel + React JSX + stage-2 + decorators and add linter.\n- Css : handle CSS as string.\n- CssExtract : handle CSS and extract in output file.\n- CssInline : handle CSS and inline them in document head.\n- Html : handle HTML.\n- HtmlRaw : handle HTML as string.\n- Js : handle JavaScript (without transpiler) and add linter.\n- Json : handle JSON as file.\n- Pug : handle Jade/Pug file.\n- Sass : handle SCSS as string.\n- SassExtract : handle SCSS and extract in output file.\n- SassInline : handle SCSS and inline them in document head.\n- Stylus : handle Stylus as string.\n- StylusExtract : handle Stylus and extract in output file.\n- StylusInline : handle Stylus and inline them in document head.\n- TypeScript : handle TypeScript and add linter.\n- TypeScriptNg2 : handle TypeScript, Angular 2 template/style loader and add linter.\n- TypeScriptNg2Lazy : handle TypeScript, Angular 2 template/style loader + lazy loading module and add linter.\n- Vue : handle Vue file.\n\nNota :\n\n- For Angular2, use TypeScriptNg2 loader.\n- Class decorator is available with TypeScript or Babel if you pickup a \"Decorators\" loader.\n- Css/Sass/Stylus loader and they're brothers have super-power : autoprefixer, group media-query and sort CSS properties.\n- We use Xo linter for JavaScript/Babel (or Tslint with TypeScript).\n- Unused code is removed with three-shaking and module transformation.\n\n# Plugins\n\nPlugins are curried function who can be nullary or unary.\n\nThey return a function who will take WebPack configuration as argument (with mixins + loaders apply) and let you :\n\n- Change WebPack configuration if needed.\n- Return WebPack or personal plugins.\n\nAvailable plugins :\n\n- Analyzer : analyze your build size with statistic heat-map. Disabled in CI (Travis/GitLab).\n- AssetsGenerator : create assets.json file with assets path.\n- Browser : start browser after compilation.\n- Chunk : chunk and split code.\n- Clean : clean file/directory before compilation.\n- Copy : copy file/directory after compilation.\n- Dashboard : enable WebPack dashboard on server. You need to install \"webpack-dashboard\" npm package.\n- Define : define environment and global METADATA.\n- DevTool : enable/disable dev-tool and debug mode.\n- Extract : extract style (needed if you use CssExtract/SassExtract/StylusExtract loader).\n- ForkChecker: deserve TypeScript type check in other thread.\n- Hmr : start Hot Module replacement.\n- HtmlGenerator : copy an HTML file as \"index.html\" with script/style injection.\n- Md5Hash : transform hash in md5.\n- Minify : minify output.\n- Ng2FixContext : mandatory when Angular 2 is used.\n- NoError : disable error.\n- ProgressBar : add progress bar in compilation.\n- Provide : provide external module in global scope (useful for jQuery or external old-lib).\n\n# The Node.js Babel Async \"Hello world\"\n\n- Make a new project.\n\n```sh\nnpm init\nnpm i chocolatin --save-dev\nmkdir src\ntouch build.js src/index.js\n```\n\n- Make new file to test.\n\n```js\n// src/index.js\nconst myAsyncTask = () =>\n  new Promise(resolve =>\n    setTimeout(() => resolve('Hello World'), 2000)\n  );\n\nconst main = async() => {\n  const result = await myAsyncTask();\n\n  console.log(`Test result : ${result}`);\n};\n\nmain();\n```\n\n- Make Chocolatin configuration.\n\n```js\n// build.js\n'use strict';\n\n// Destructuring Chocolatin object\nconst {\n  burn,\n  mixins: { Io },\n  loaders: { BabelStage2 },\n  plugins: { Analyzer, Clean, Define, ProgressBar, Minify },\n} = require('chocolatin');\n\nburn({\n  mixins: [\n    // We take src/index.js, output in ./dist as [name.js (so app.js), for Node.js\n    Io({ app: ['./src/index.js'] }, { path: './dist', filename: '[name].js' }, 'node'),\n  ],\n  loaders: [BabelStage2], // Handle JavaScript file and add linter + Babel in stage-2 for async function\n  plugins: [\n    Clean(['dist']), // Remove old dist files\n    Define('production'), // Set ENV/NODE_ENV === 'production'\n    ProgressBar(), // Add progress bar\n    Analyzer(), // Analyzer statistic\n    Minify(), // Minify output\n  ],\n});\n```\n\n- Build.\n\n```sh\nnode ./build.js\n```\n\n# FAQ\n\n### How i can export Chocolatin configuration to WebPack 2 configuration ?\n\nSimply use \"provide\" function.\n\nFor example, you can export Chocolatin configuration to Karma like the Angular demo.\n\n### How i can add static assets in my project ?\n\nUse Copy plugin : it take an array of object with from/to properties.\n\nYou can copy directory or files.\n\n### How i can manage template and style with Angular 1 ?\n\nImport style and template in component declaration.\n\nCheckout Angular 1 demo project.\n\n### How i can manage template and style with Angular 2 ?\n\nUse templateUrl and styleUrls in @Component with HtmlRaw, Css (or/and Sass/Stylus), TypeScriptNg2 loaders.\n\n### How i can use ES6/ES7 features ?\n\nUse Babel or TypeScript loader.\n\n### How i can add a linter (EsLint or another) ?\n\nYou don't need to add linter.\n\nWe use Xo for JavaScript and TsLint for TypeScript.\n\n### How i can override linter rules ?\n\nWe will do later fix on loaders to make them more configurable.\n\n### How i can override Babel rules ?\n\nMake .babelrc file.\n\n### How i can override TypeScript rules ?\n\nMake tsconfig.json file.\n\n### How i can build multiple configuration for mono-repository big project ?\n\nYou can't, we will provide this later.\n\nFor now, just use \"provide\" function.\n"
}