{
  "name": "random-world",
  "version": "1.2.0",
  "description": "Nodejs. module to generate random collections of data.",
  "main": "index.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "user": "drb",
    "repo": "random-world",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/drb/random-world/tarball/master",
    "clone_url": "https://github.com/drb/random-world",
    "https_url": "https://github.com/drb/random-world",
    "travis_url": "https://travis-ci.org/drb/random-world",
    "zip_url": "https://github.com/drb/random-world/archive/master.zip",
    "api_url": "https://api.github.com/repos/drb/random-world"
  },
  "keywords": [
    "npm",
    "random",
    "random-data"
  ],
  "author": {
    "name": "Dave Bullough",
    "email": "dave.bullough@gmail.com",
    "url": "http://pacosystems.com/"
  },
  "license": "MIT",
  "homepage": "https://github.com/drb/random-world",
  "devDependencies": {
    "chai": "^3.0.0",
    "grunt": "^0.4.5",
    "grunt-simple-mocha": "^0.4.0",
    "mocha": "^2.2.5"
  },
  "dependencies": {
    "seedrandom": "^2.4.2",
    "underscore": "^1.8.3"
  },
  "gitHead": "f0671cc487a6d1bc653f334c9045fc7235885558",
  "_npmVersion": "2.14.12",
  "_nodeVersion": "4.2.4",
  "dist": {
    "shasum": "5e87ea7b2fc005cb59eaaafa20ce0b1cce3dfa63",
    "tarball": "http://registry.npmjs.org/random-world/-/random-world-1.2.0.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-07-16T17:36:24.842Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-07-17T09:15:14.079Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-07-23T20:20:19.510Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-07-26T20:13:27.203Z"
    },
    {
      "number": "1.0.4",
      "date": "2015-07-26T20:16:30.758Z"
    },
    {
      "number": "1.0.5",
      "date": "2015-07-26T20:21:39.976Z"
    },
    {
      "number": "1.0.6",
      "date": "2015-07-30T10:15:18.281Z"
    },
    {
      "number": "1.0.7",
      "date": "2015-07-30T13:56:22.838Z"
    },
    {
      "number": "1.0.8",
      "date": "2015-07-30T15:29:08.916Z"
    },
    {
      "number": "1.0.9",
      "date": "2015-07-31T08:35:04.345Z"
    },
    {
      "number": "1.0.10",
      "date": "2015-07-31T08:52:40.499Z"
    },
    {
      "number": "1.0.11",
      "date": "2015-07-31T09:11:28.684Z"
    },
    {
      "number": "1.0.12",
      "date": "2015-08-03T14:21:13.134Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-09-26T07:19:15.101Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-09-27T17:41:44.518Z"
    },
    {
      "number": "1.1.2",
      "date": "2015-10-03T19:49:07.137Z"
    },
    {
      "number": "1.1.3",
      "date": "2015-11-09T11:31:40.539Z"
    },
    {
      "number": "1.1.4",
      "date": "2015-11-13T16:14:37.440Z"
    },
    {
      "number": "1.1.5",
      "date": "2015-11-16T09:20:38.818Z"
    },
    {
      "number": "1.1.6",
      "date": "2016-02-05T21:22:45.687Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-02-15T20:27:05.253Z"
    }
  ],
  "created": "2015-07-16T17:36:24.842Z",
  "modified": "2016-02-15T20:27:05.253Z",
  "lastPublisher": {
    "name": "drb",
    "email": "dave.bullough@gmail.com"
  },
  "owners": [
    {
      "name": "drb",
      "email": "dave.bullough@gmail.com"
    }
  ],
  "readme": "![NPM Stats](https://nodei.co/npm/random-world.png?downloads=true&downloadRank=true&stars=true)\n\n[![Build Status](https://travis-ci.org/drb/random-world.svg)](https://travis-ci.org/drb/random-world) [![npm version](https://badge.fury.io/js/random-world.svg)](http://badge.fury.io/js/random-world)\n\n# Random World\n\nNode module for generating random data - built for usage with a [RAML-based API mocking server](https://www.npmjs.com/package/raml-mock-server) to generate collections of complex data structures with more realistic values.\n\n## Installation\n\n`npm install random-world`\n\n## Instantiation\n\n```javascript\nvar random = require('random-world');\n```\n## Modules\n\nThese are a work in progress and are added to as the parent project evolves. Method names and options are likely to change.\n\n* [Places](#places)\n* [Collections](#collections)\n* [Dates & Times](#dates)\n* [Files](#files)\n* [Geography](#geography)\n* [Names](#names)\n* [Network](#network)\n* [Numbers](#numbers)\n* [Strings](#strings)\n* [Truth (Booleans)](#truth)\n* [Money](#money)\n* [Complex Structures](#objects)\n\n### Places\n\nLocation-specific methods.\n\n* `random.city()` - Generate a random city name.\n  * `country` - String representing the country to restrict the city to.\n* `random.country()` - Generate a random country name.\n* `random.countrycode()` - Generate a random country code.\n\n---\n\n### Collections\n\nArrays of random data.\n\n* `random.array()` - Generate an array up 12 items long, filled with random numbers between 1-200.\n  * `limit` - Explicit length of the array\n* `random.pickone()` - Returns a random item from a pre-defined list of values, separated by a delimiter. Delimter is defaulted to pipe (|) but can be specified in the options.\n  * `delimiter` - The custom delimiter separating the values\n\n---\n\n### Dates\n\n* `random.now()` - The date and time right now.\n* `random.unixtimestamp()` - A date and time in UNIX timestamp format.\n  * `format` - UK date format is only supported\n  * `start` - Minimum bound the randomisation should start from.\n  * `end` - Maximum bound the randomisation should end at.\n* `random.date()` - A random date\n  * `format` - UK date format is only supported\n  * `start` - Minimum bound the randomisation should start from.\n  * `end` - Maximum bound the randomisation should end at.\n* `random.dayofweek()` - A random day of the week.\n  * `short` - Short 3 character format (i.e. Mon vs Monday).\n* `random.year()` - A random year\n  * `format` - UK date format is only supported\n  * `start` - Minimum bound the year randomisation should start from.\n  * `end` - Maximum bound the year randomisation should end at.\n* `random.month()` - A random day of the week.\n  * `short` - Short 3 character format (i.e. Jul vs July).\n\n---\n\n### Files\n\nReturns random file extensions\n\n* `random.extension()` - A random file extension.\n  * `includeDot` - Returns a dot prefix for the extension (i.e. .png vs png).\n  \n---\n\n### Geography\n\nGenerate randomised lat/long sets.\n\n* `random.latlong()` - Object containing a longitude and latitude.\n* `random.lat()` - A random latitude.\n* `random.long()` - A random longitude.\n\n---\n\n### Names\n\nReturns names for people using a dictionary of popular first and last names - only data from the USA is supported at the moment.\n\n* `random.firstname()` - Returns a person's first name.\n  * `gender` - Limit result to male or female names.\n    * `male|female`\n  * `startsWith` - Return names starting with the supplied substring.\n  * `charCase` - Transform the name to upper or lowercase.\n    * `upper|lower\n* `random.lastname()` - Returns a person's last name (surname).\n  * `startsWith` - Return names starting with the supplied substring.\n  * `charCase` - Transform the name to upper or lowercase.\n    * `upper|lower\n* `random.fullname()` - Returns a person's first name.\n  * `gender` - Limit result to male or female names.\n    * `male|female`\n  * `startsWith` - Return names starting with the supplied substring.\n  * `charCase` - Transform the name to upper or lowercase.\n    * `upper|lower\n* `random.title()` - Returns a random title.\n* `random.email()` - Returns a person's first name.\n  * `hasDot` - Split name section of address (before @) with a dot.\n  * `hasPlusAddress` - Include a plus address in the name section.\n  * `charCase` - Transform the address to upper or lowercase.\n    * `upper|lower\n  * `standard` - Limit the TLDs to a standard set (.com, .org, .co.uk etc).\n\n---\n\n### Network\n\nNetwork specific values.\n\n* `random.domain()` - Returns a mock domain name.\n* `random.ip()` - Returns an IPv4 IP address.\n* `random.ipv6()` - Returns an IPv6 IP address. Not yet implemented.\n* `random.tld()` - Returns a top level domain.\n  * `standard` - Limit the TLDs to a standard set (.com, .org, .co.uk etc).\n\n---\n\n### Numbers\n\nIntegers and floats.\n\n* `random.integer()` - Returns a random integer.\n  * `min` - Minimum value to return.\n  * `max` - Maximum value to return.\n  * `round` - Round the value (to nearest whole number).\n  * `padding` - Zero-pads value up to the length specified.\n* `random.number()` - Alias for `integer()`.\n* `random.float()` - Returns a random float.\n* `random.sum()` - Returns an array of X values that add up to the target value.\n\n---\n\n### Strings\n\nString patterns.\n\n* `random.sentence()` - Returns a sentence retrieved from Lorem Ipsum strings.\n* `random.block()` - Creates a string made up of blocks of characters.\n  * `blockSize` - Length of each block.\n  * `delimiter` - Split each block with specific delimiter.\n  * `chars` - Limit blocks to defined characters. Defaults to A-Z.\n* `random.random()` - A random string created from the default characters, or the supplied chars.\n  * `chars` - Limit string to defined characters. Defaults to A-Za-z0-9.\n  * `len` - Length of the string. Defaults to 16.\n* `random.word()` - A random dictionary word.\n  * `charCase` - Transform the word to upper or lowercase.\n    * `upper|lower`\n  * `limit` - Number of words to return. Defaults to 1.\n  \n---\n\n### Truth\n\nRandomised boolean values.\n\n* `random.boolean()` - Returns a random true or false.\n\n---\n\n### Money\n\nCredit card data specific methods.\n\n* `random.ccnumber()` - Returns a random (valid, MOD10 checked) credit card number.\n  * `shortName` - Limits the returned card number to a specific card type. See following table for supported types.\n  * `hasHyphens` - Boolean. Formats credit card number with a hypen very 4 characters.\n* `random.ccstart()` - Returns a random start date in MM/YY format.\n* `random.ccexpiry()` - Returns a random expiry in MM/YY format.\n* `random.cctype()` - Returns a random credit card type. e.g. MasterCard, VISA etc\n* `random.cvv()` - Returns a random 3 digit CVV value.\n* `random.cv2()` - Alias to `cvv()` method.\n\nSupported card types.\n\n|Card Type|Short Code|\n|---|---|\n| American Express  |AE   |\n| Diners Club - Carte Blanche  | DC-CB  |\n|  Diners Club - International | DC-I  |\n|  Diners Club - USA & Canada | DC  |\n| Discover  | D  |\n| InstaPayment  |  IP |\n|  JCB | JCB  |\n|Laser   |  L |\n|  Maestro | MA  |\n|  MasterCard | MC  |\n|  Visa | V  |\n|  Visa Electron | VE  |\n\n---\n\n### Objects\n\n* `random.fromObject()` - Parses an object for placeholders that represent `random-world` methods. \n\n```\n{\n  \"struct\": {\n    \"name\": \"$fullname\",\n    \"addressId\": \"$number{\\\"min\\\": 100, \\\"max\\\": 2000, \\\"round\\\": true}\",\n    \"description\": \"$word{\\\"charCase\\\": \\\"upper\\\"} Office\",\n    \"addressLine1\": \"$word\",\n    \"city\": \"$city\",\n    \"postcode\": \"$postcode\",\n    \"country\": \"$country\",\n    \"isDeleted\": \"$boolean\"\n  }\n}\n```\n\nNested object parser takes a complex object and converts all placeholders for `random-world` methods to a randomly assigned value. Documentation for this is covered in [more detail here](https://www.npmjs.com/package/raml-mock-server).\n\n---\n\n## Running Tests\n\n`npm test`\n\n[![Build Status](https://travis-ci.org/drb/random-world.svg)](https://travis-ci.org/drb/random-world) [![npm version](https://badge.fury.io/js/random-world.svg)](http://badge.fury.io/js/random-world)\n"
}