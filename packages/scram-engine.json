{
  "name": "scram-engine",
  "version": "0.3.1",
  "description": "Provides access to markup rendering in Node.js. Write your server semantically and declaratively with web components.",
  "repository": {
    "user": "lastmjs",
    "repo": "scram-engine",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/lastmjs/scram-engine/tarball/master",
    "clone_url": "https://github.com/lastmjs/scram-engine",
    "https_url": "https://github.com/lastmjs/scram-engine",
    "travis_url": "https://travis-ci.org/lastmjs/scram-engine",
    "zip_url": "https://github.com/lastmjs/scram-engine/archive/master.zip",
    "api_url": "https://api.github.com/repos/lastmjs/scram-engine"
  },
  "homepage": "https://github.com/lastmjs/scram-engine#readme",
  "devDependencies": {},
  "dependencies": {
    "console-redirect": "^1.0.0",
    "http-server": "0.9.0"
  },
  "license": "MIT",
  "keywords": [
    "web-components"
  ],
  "gitHead": "39ac699c00754a693017bc351e8ef409b6c7f5be",
  "scripts": {},
  "_npmVersion": "3.8.6",
  "_nodeVersion": "6.0.0",
  "dist": {
    "shasum": "595d629a19b25704e0b7dc885f8b5d1e10b8985f",
    "tarball": "http://registry.npmjs.org/scram-engine/-/scram-engine-0.3.1.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-05-03T07:47:04.710Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-05-03T07:50:57.158Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-05-03T08:38:41.642Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-05-05T02:50:43.550Z"
    },
    {
      "number": "0.0.5",
      "date": "2016-05-12T02:35:00.081Z"
    },
    {
      "number": "0.0.6",
      "date": "2016-05-21T23:35:02.693Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-05-28T18:59:59.278Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-05-28T19:05:32.173Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-05-28T19:10:20.100Z"
    },
    {
      "number": "0.1.3",
      "date": "2016-05-28T20:26:35.883Z"
    },
    {
      "number": "0.1.4",
      "date": "2016-05-28T20:30:31.523Z"
    },
    {
      "number": "0.1.5",
      "date": "2016-05-28T20:32:46.565Z"
    },
    {
      "number": "0.1.6",
      "date": "2016-05-30T21:38:55.257Z"
    },
    {
      "number": "0.1.7",
      "date": "2016-05-30T21:53:04.106Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-05-30T23:00:32.892Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-05-30T23:05:28.590Z"
    },
    {
      "number": "0.2.2",
      "date": "2016-05-30T23:09:20.597Z"
    },
    {
      "number": "0.2.3",
      "date": "2016-07-08T16:34:27.104Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-07-09T18:40:05.253Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-07-09T18:51:59.644Z"
    }
  ],
  "created": "2016-05-03T07:47:04.710Z",
  "modified": "2016-07-09T18:51:59.644Z",
  "lastPublisher": {
    "name": "lastmjs",
    "email": "jordan.michael.last@gmail.com"
  },
  "owners": [
    {
      "name": "lastmjs",
      "email": "jordan.michael.last@gmail.com"
    }
  ],
  "readme": "# What is this?\nScram.js offers a simple way to use Electron as a server, allowing you to use HTML, Web APIs, and virtually any other client-side tool to write server-side applications. The recommended way to write these server-side applications is to use web components. If you have not heard of web components, then please [start learning today](http://webcomponents.org/). Web components offer a way to modularize and package functionality into reusable components that can be easily shared and composed to create entire applications. Currently they are used mostly for front-end web development. Well, what about the back-end? Web components are not only useful for visual components, as the Google Polymer project [has shown us](https://elements.polymer-project.org/elements/iron-ajax). Now you can build APIs and other server-side applications, leveraging the same declarativeness of the front-end world. We are one step closer to true Universal JavaScript.\n\n## Server-side Web Components\nThis repo only offers access to the runtime necessary to use server-side web components. To actually begin building applications, you'll need components to work with:\n\n* Express Web Components: https://github.com/scramjs/express-web-components\n\n## Examples\nHere are some example Express.js apps that have been rewritten with web components:\n* https://github.com/scramjs/rest-api-express\n* https://github.com/scramjs/node-api\n* https://github.com/scramjs/node-todo\n* https://github.com/scramjs/node-tutorial-2-restful-app\n* https://github.com/scramjs/node-tutorial-for-frontend-devs\n\n## Development Installation\nScram.js leverages Electron to provide a runtime for server-side web components. The only dependency is Electron and Node.js, and you are free to install any compatible version: \n\n```\nnpm install --save electron-prebuilt\nnpm install --save scram-engine\n```\n\n## Production Installation\nThere are a few more considerations in a production environment. Since Electron needs a graphical environment for rendering on headless LinuxÂ® machines, you may need to install Xvfb to provide a display server.\n\nOn Ubuntu: `sudo apt-get install xvfb`\n\nElectron might require one or more of the following libraries to be installed on certain Ubuntu systems: \n\n```\nlibgtk2.0-0\nlibnotify-bin\nLibgconf-2-4\nlibxss1\n```\n\n### Dokku\nScram.js works well with [Dokku](http://dokku.viewdocs.io/dokku/). Dokku provides a personal PaaS, making it easy to deploy to a production environment.\n* Follow the [official documentation](http://dokku.viewdocs.io/dokku/installation/) to install Dokku\n* Install this [Dokku plugin](https://github.com/F4-Group/dokku-apt) to allow Dokku to automatically install Xvfb and other packages your application might need\n* Add a file to the root directory of your app called `apt-packages`\n* List the packages you would like Dokku to install: e.g. xvfb libgtk2.0-0 libnotify-bin Libgconf-2-4 libxss1\n* Ensure that dependencies are listed correctly in your app's package.json\n* Add a `start` script in your app's package.json for Dokku to use to start your application\n* Add an `engines` property to your app's package.json to specify the version of node Dokku will use to run your app\n* For a full working example of an application deployed with Dokku, see the [Dokku Example](https://github.com/scramjs/dokku-example)\n\n## Usage\n### Development\nProvide Electron with the main.js script from this repo and then the path to your starting `html` file from the root directory of your app:\n\n`node_modules/.bin/electron node_modules/scram-engine/main.js index.html`\n\nIt might be convenient to create a script in your package.json:\n\n```\n{\n  \"name\": \"awesome-repo\",\n  \"version\": \"2.4.2\",\n  \"scripts\": {\n    \"start\": \"electron node_modules/scram-engine/main.js index.html\"\n  }\n}\n```\n\nTo open up an Electron window for access to the dev tools, add the `-d` option:\n\n`node_modules/.bin/electron node_modules/scram-engine/main.js index.html -d`\n\nor\n\n```\n{\n  \"name\": \"awesome-repo\",\n  \"version\": \"2.4.2\",\n  \"scripts\": {\n    \"start\": \"electron node_modules/scram-engine/main.js index.html -d\"\n  }\n}\n```\n\n### Production\nYou need to add the xvfb-run command in front of all other commands on headless Linux machines:\n\n`xvfb-run node_modules/.bin/electron node_modules/scram-engine/main.js index.html`\n\nIf you are using bower to install the Polymer library and other web components (you probably are), you need your development server's build process to install the bower components when deploying:\n\n`npm install -g bower && bower install`\n\nIt might be convenient to create a script in your package.json:\n\n```\n{\n  \"name\": \"awesome-repo\",\n  \"version\": \"2.4.2\",\n  \"scripts\": {\n    \"start\": \"npm install -g bower && bower install && xvfb-run electron node_modules/scram-engine/main.js index.html\",\n    \"dev\": \"electron node_modules/scram-engine/main.js index.html\",\n    \"dev-window\": \"electron node_modules/scram-engine/main.js index.html -d\"\n  },\n  \"engines\": {\n    \"node\": \"6.0.0\"\n  }\n}\n````\n\n### Special Considerations\n\n#### Loading Start File\nIt is important to understand the two different ways in which your starting `html` file is loaded into Electron, as each has subtle differences in behavior:\n\n##### Local Server\nBy default, unless you add the `-f` option when starting the application, the specified starting `html` file is loaded into an Electron BrowserWindow from a local `http` server running on the following address: 0.0.0.0:5050. The port can be changed with the `-p` option. Loading the starting `html` file from a local server allows your server-side application to emulate a client-side application more faithfully. For example, client-side requests that rely on the protocol of their environment will have the protocol set to `http` and the domain to `localhost`, making life much easier than trying to do the same thing with the protocol set to `file`.\n\nLoading the starting `html` file from a local server will cause `__dirname` and `__filename` to be incorrect for any web components included from your starting `html` file. You must include `filesystem-config.js` before any code that relies on `__dirname` or `__filename` to correct those issues.\n\n##### Filesystem\nThe `-f` option will allow you to load your starting `html` file from the filesystem. Be aware that this may cause issues if you are using client-side code because the protocol is set to `file`.\n\n##### Require\nAny relative requires should be done relative to the starting `html` file when requiring from within an imported web component. When requiring from within a required module, relative requires should be done relative to the module (normal require behavior).\n\n##### `__dirname` and `__filename`\n`__dirname` and `__filename` are set relative to the starting `html` file, and should be the same across all components imported throughout your application. `__dirname` referenced directly from a web component script will be set to the absolute path of the directory that your starting `html` file resides in. `__filename` referenced directly from a web component script will be set to the absolute path of the starting `html` file, including that file's name.\n\n`__dirname` and `__filename` inside of required modules act as expected.\n\nWhen loading the starting `html` file from the local server, you must include the `filesystem-config.js` file before referencing `__dirname` or `__filename` in any imported web components:\n\n```\n<script src=\"node_modules/scram-engine/filesystem-config.js\"></script>\n```\n\nDo not include this file when loading the starting `html` file from the filesystem.\n\n### Options\nThere are various options available when loading your application:\n\n* `-d`: Open a browser window for debugging\n* `-f`: Load the starting `html` file from the filesystem\n* `-p`: Specify the port the local server uses to load the starting `html` file\n\n## Compatibility and Testing\nOnly manually tested at the moment. PR with tests if you'd like :)\n\nNode.js is a trademark of Joyent, Inc. and is used with its permission. We are not endorsed by or\naffiliated with Joyent.\n\nLinuxÂ® is the registered trademark of Linus Torvalds in the U.S. and other countries.\n"
}