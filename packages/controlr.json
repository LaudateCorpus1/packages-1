{
  "license": "MIT",
  "description": "R process module",
  "keywords": [
    "R"
  ],
  "name": "controlr",
  "repository": {
    "user": "sdllc",
    "repo": "controlr",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/sdllc/controlr/tarball/master",
    "clone_url": "https://github.com/sdllc/controlr",
    "https_url": "https://github.com/sdllc/controlr",
    "travis_url": "https://travis-ci.org/sdllc/controlr",
    "zip_url": "https://github.com/sdllc/controlr/archive/master.zip",
    "api_url": "https://api.github.com/repos/sdllc/controlr"
  },
  "version": "2.1.3",
  "main": "js/controlr.js",
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "gitHead": "221531b42488298cb1bb251037efbfe73525874c",
  "homepage": "https://github.com/sdllc/controlr#readme",
  "_npmVersion": "3.8.9",
  "_nodeVersion": "6.2.0",
  "dist": {
    "shasum": "b93662ea869478cae3d17f7e4cd91f45c3fa3425",
    "tarball": "http://registry.npmjs.org/controlr/-/controlr-2.1.3.tgz"
  },
  "versions": [
    {
      "number": "1.4.3",
      "date": "2016-03-26T00:01:34.064Z"
    },
    {
      "number": "1.4.4",
      "date": "2016-04-02T19:26:29.305Z"
    },
    {
      "number": "1.4.5",
      "date": "2016-04-02T19:32:21.913Z"
    },
    {
      "number": "1.4.6",
      "date": "2016-04-04T23:46:16.946Z"
    },
    {
      "number": "1.4.7",
      "date": "2016-04-07T13:48:33.930Z"
    },
    {
      "number": "1.4.8",
      "date": "2016-04-11T14:14:14.337Z"
    },
    {
      "number": "1.4.9",
      "date": "2016-04-30T00:50:57.224Z"
    },
    {
      "number": "1.5.0",
      "date": "2016-05-02T14:55:58.342Z"
    },
    {
      "number": "1.6.0",
      "date": "2016-05-16T17:10:21.390Z"
    },
    {
      "number": "1.7.0",
      "date": "2016-05-27T17:28:57.937Z"
    },
    {
      "number": "1.7.1",
      "date": "2016-05-27T18:37:27.303Z"
    },
    {
      "number": "1.7.2",
      "date": "2016-05-31T12:27:28.314Z"
    },
    {
      "number": "1.7.3",
      "date": "2016-05-31T14:26:22.414Z"
    },
    {
      "number": "1.7.4",
      "date": "2016-06-02T00:17:06.217Z"
    },
    {
      "number": "1.7.5",
      "date": "2016-06-06T15:31:21.826Z"
    },
    {
      "number": "1.7.6",
      "date": "2016-06-06T21:46:39.877Z"
    },
    {
      "number": "1.7.7",
      "date": "2016-06-10T16:58:18.451Z"
    },
    {
      "number": "1.8.0",
      "date": "2016-06-22T20:38:33.951Z"
    },
    {
      "number": "1.8.1",
      "date": "2016-06-22T21:44:40.364Z"
    },
    {
      "number": "1.8.2",
      "date": "2016-06-23T14:14:58.699Z"
    },
    {
      "number": "1.8.4",
      "date": "2016-06-23T22:34:29.860Z"
    },
    {
      "number": "1.8.5",
      "date": "2016-06-23T23:19:22.739Z"
    },
    {
      "number": "1.9.0",
      "date": "2016-06-28T14:37:55.859Z"
    },
    {
      "number": "1.9.1",
      "date": "2016-06-28T18:08:23.451Z"
    },
    {
      "number": "1.9.2",
      "date": "2016-06-29T15:13:32.758Z"
    },
    {
      "number": "1.9.3",
      "date": "2016-06-29T16:08:29.725Z"
    },
    {
      "number": "1.9.4",
      "date": "2016-06-29T18:32:12.515Z"
    },
    {
      "number": "1.9.5",
      "date": "2016-06-29T20:59:16.504Z"
    },
    {
      "number": "1.9.6",
      "date": "2016-06-29T21:24:51.858Z"
    },
    {
      "number": "1.9.7",
      "date": "2016-07-20T20:02:05.896Z"
    },
    {
      "number": "1.9.8",
      "date": "2016-07-20T20:43:50.725Z"
    },
    {
      "number": "1.9.9",
      "date": "2016-08-30T14:04:32.464Z"
    },
    {
      "number": "1.9.10",
      "date": "2016-09-01T16:44:26.397Z"
    },
    {
      "number": "2.0.1",
      "date": "2016-09-06T17:06:15.253Z"
    },
    {
      "number": "2.1.1",
      "date": "2016-09-06T19:15:59.575Z"
    },
    {
      "number": "2.1.2",
      "date": "2016-09-07T17:08:04.698Z"
    },
    {
      "number": "2.1.3",
      "date": "2016-10-17T19:31:23.475Z"
    }
  ],
  "created": "2016-03-26T00:01:34.064Z",
  "modified": "2016-10-17T19:31:23.475Z",
  "lastPublisher": {
    "name": "dwerner",
    "email": "dwerner@riskamp.com"
  },
  "owners": [
    {
      "name": "dwerner",
      "email": "dwerner@riskamp.com"
    }
  ],
  "readme": "controlR\r\n========\r\n\r\ncontrolR is a [node][1] module for running commands in an external [R][2] process.\r\n\r\nLicense\r\n-------\r\n\r\ncontrolR is copyright (c) 2016 Structured Data LLC and released under the MIT license.  \r\nSee source files for license details.\r\n\r\nRationale\r\n---------\r\n\r\nR is great for data processing, in particular because of the excellent libraries\r\ndeveloped by [the user community][3].  Once you have developed your data model, you\r\ncan run it through the R shell or GUI provided.  Beyond that, it's pretty easy to\r\nembed R in a C/C++ application.  You can build a full-featured desktop application\r\nor service this way.\r\n\r\nRequiring either the R shell or a C++ host application can be a bit limiting, though.\r\nModern applications tend to use a variety of platforms, languages, and environments\r\nto solve different problems.  Javascript, and in particular javascript through Node,\r\nhas become the de facto language for modern application development.  It's not for\r\neverything; but it solves a lot of problems, provides a complex ecosystem of libraries\r\nand developers, and (via [electron][6], among other platforms) supports desktop\r\napplications as well as services.\r\n\r\nJavascript is not for everything -- that's why we want to use R in the first place.\r\nBut node provides a great environment for building applications.  controlR is built to\r\nbe glue code that lets you build your application in javascript, your data model in\r\nR, and connect the two.\r\n\r\nMoreover because controlR runs R in an external process, you have benefits beyond\r\nwhat you get by embedding in a C++ application -- for example, you can monitor\r\nexecution and kill off runaway processes; or you can start multiple instances and\r\nrun code in parallel.\r\n\r\nThe child process will run R's event loop, meaning it supports things like R's html\r\nhelp server.  This is probably only useful for desktop applications.\r\n\r\nOne further note on rationale -- for our purposes we did not want to modify the R\r\nsource code in any way.  controlR binds against the R shared libraries (DLLs on\r\nwindows) at runtime.  This way we can guarantee fidelity with the standard R\r\ninterpreter, and building against updated versions of R is trivial.\r\n\r\nWhat it is not\r\n--------------\r\n\r\ncontrolR is not designed for, nor is it suitable for, running a web service.  It is\r\ndesigned to support a single client connection; and it adds no limitations on what\r\nrunning R code does to the host system.  \r\n\r\nR has full access to the system (subject to the host process' permissions) and the\r\ninterface imposes no security restrictions on top of this.  Therefore exposing the\r\nR interface to outside users is a significant security risk, even if the host process\r\nis running with minimal permissions.  \r\n\r\nR processes maintain internal state.  If multiple clients connect to the same running\r\ninstance, each client will have access to and can modify that state.  For some purposes\r\nthis is immaterial; but for our purposes this is not desirable.  Therefore there is a\r\ntight binding between a single client and a single R process.  \r\n\r\nOn the other hand, there is no reason you can't run multiple R processes at the same time,\r\nand talk to them from a single client or from multiple logical clients.\r\n\r\nConnection\r\n----------\r\n\r\ncontrolR consists of a javascript module, for use with node; and a standalone executable,\r\nwhich acts as a host for R (via the shared library/dll).  Communication between node and\r\nthe R process runs over a domain socket (named pipe on Windows) or a TCP socket.  All\r\nmessages transferred between the processes are JSON formatted.\r\n\r\nInterface\r\n---------\r\n\r\ncontrolR connects to and talks to a single R instance.  Within the interface there are\r\ntwo separate \"channels\" for communication.  In the API these are generally referred to\r\nas `exec` and `internal`.\r\n\r\nThe `internal` channel uses the embedded R interface.  This is generally what you want\r\nif you want to execute some R code and get a result back.  For most purposes this is\r\nsufficient to build an R application.  The `exec` channel talks to R through R's REPL\r\nloop -- much as if you were using an R shell.  Why do this at all? to support debugging\r\nand R's concept of a `browser` -- a window into executing code.  Without modifying R code,\r\nthis is the only way to support debugging.  We can also use it to build our R shell\r\n(more on that later).\r\n\r\nSo the `internal` channel executes code and returns a result, as a javascript object\r\n(JSON on the wire).  The `exec` channel executes code in a shell context, and (possibly)\r\nprints results to the output console.  Anything R wishes to print to the output console\r\nis sent to the client as a javascript message (again, JSON on the wire), using node's\r\neventemitter interface.\r\n\r\nR is single-threaded, and can run only one operation at a time.  State is maintained by\r\nthe module, which enforces linear execution.  State my be polled via the `busy()` method,\r\nand the module broadcasts state change events.  \r\n\r\nCalls to `exec` or `internal` will fail if another call is in process.  The module\r\nprovides `queued_exec` and `queued_internal` methods which will wait for a change in state\r\nand then execute.\r\n\r\nSee the `js/` directory for API and event documentation.\r\n\r\nThird-Party Dependencies\r\n------------------------\r\n\r\ncontrolR depends on R and node.  See build instructions.  controlR futher depends on\r\n[libuv][4] and [nlohmann::json][5], used under license and included in source distributions.\r\nSee the individual projects for license details.  \r\n\r\nBuilding\r\n--------\r\n\r\nAlthough the node module itself is pure javascript, you need standard node build tools to\r\nbuild the child executable.  You also need R installed.  On linux, R must be built with\r\nsupport for shared libraries.\r\n\r\nTo build, set an environment variable `R_HOME` pointing to the root of the R directory.\r\nThen use `npm` or `node-gyp` to build.\r\n\r\n```\r\n> export R_HOME=/path/to/R-3.2.3\r\n> npm install controlr\r\n```\r\n\r\nExample\r\n-------\r\n\r\nAt runtime, you can either set an `R_HOME` environment variable or pass a value directly\r\nto the initialization method.  Remember to escape backslashes in Windows paths.\r\n\r\n```javascript\r\n\r\nconst ControlR = require( \"controlr\" )\r\n\r\nvar controlr = new ControlR();\r\n\r\ncontrolr.init({\r\n    rhome: \"/path/to/R-3.2.3\"\r\n}).then( function(){\r\n\tconsole.info( \"initialized OK\" );\r\n\treturn controlr.internal( \"1+1\" );\r\n}).then( function(rslt){\r\n\tconsole.info( \"result:\", rslt );\r\n\tconsole.info( \"shutting down\" );\r\n\treturn controlr.shutdown();\r\n}).then( function(){\r\n\tconsole.info( \"shutdown complete\" );\r\n}).catch( function(e){\r\n\tconsole.info( \"error\", e );\r\n});\r\n\r\n```\r\n\r\nSee Also\r\n--------\r\n\r\n[Rserve][13]\r\n\r\n[1]: https://nodejs.org\r\n[2]: https://www.r-project.org/\r\n[3]: https://cran.r-project.org/\r\n[4]: https://github.com/libuv/libuv\r\n[5]: https://github.com/nlohmann/json\r\n[6]: http://electron.atom.io/\r\n[13]: https://rforge.net/Rserve/\r\n"
}