{
  "name": "vw-server",
  "description": "Un servidor personalizado para aplicaciones multiplataforma. Diseñado para jxcore, nodejs, io.js",
  "version": "2.1.45",
  "license": "MIT",
  "author": {
    "name": "James Suárez",
    "email": "xtreme.maicolxt94@gmail.com"
  },
  "dependencies": {
    "express": ">=4.13.3",
    "body-parser": ">=1.14.1",
    "electron-prebuilt": ">=0.34.0",
    "uniqid": ">=1.0.0",
    "mime-types": ">=2.1.7",
    "fake-async": ">=0.0.1"
  },
  "devDependencies": {},
  "repository": {
    "user": "voxsoftware",
    "repo": "vw-server",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/voxsoftware/vw-server/tarball/master",
    "clone_url": "https://github.com/voxsoftware/vw-server",
    "https_url": "https://github.com/voxsoftware/vw-server",
    "travis_url": "https://travis-ci.org/voxsoftware/vw-server",
    "zip_url": "https://github.com/voxsoftware/vw-server/archive/master.zip",
    "api_url": "https://api.github.com/repos/voxsoftware/vw-server"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "scripts": {},
  "homepage": "https://github.com/voxsoftware/vw-server#readme",
  "_npmVersion": "2.14.7",
  "_nodeVersion": "4.2.1",
  "dist": {
    "shasum": "06f857e8b6dc594ca85ef1ceb5fafb5057a162e8",
    "tarball": "http://registry.npmjs.org/vw-server/-/vw-server-2.1.45.tgz"
  },
  "versions": [
    {
      "number": "2.1.0",
      "date": "2015-11-11T19:05:53.959Z"
    },
    {
      "number": "2.1.1",
      "date": "2015-11-12T14:41:06.888Z"
    },
    {
      "number": "2.1.2",
      "date": "2015-11-12T14:46:13.336Z"
    },
    {
      "number": "2.1.3",
      "date": "2015-11-12T14:49:28.347Z"
    },
    {
      "number": "2.1.4",
      "date": "2015-11-27T02:46:51.407Z"
    },
    {
      "number": "2.1.41",
      "date": "2015-11-28T01:31:44.394Z"
    },
    {
      "number": "2.1.42",
      "date": "2015-12-18T17:18:00.477Z"
    },
    {
      "number": "2.1.43",
      "date": "2015-12-20T04:53:47.402Z"
    },
    {
      "number": "2.1.44",
      "date": "2015-12-21T06:19:31.420Z"
    },
    {
      "number": "2.1.45",
      "date": "2016-02-02T07:52:16.729Z"
    }
  ],
  "created": "2015-11-11T19:05:53.959Z",
  "modified": "2016-02-02T07:52:16.729Z",
  "lastPublisher": {
    "name": "voxsoftware",
    "email": "xtreme.maicolxt94@gmail.com"
  },
  "owners": [
    {
      "name": "voxsoftware",
      "email": "xtreme.maicolxt94@gmail.com"
    }
  ],
  "readme": "# vw-server\n\nvw-server, está diseñado como un módulo base para VW (voxwebkit) https://github.com/voxsoftware/vw\n\n  - Crear aplicaciones Linux, Windows, Android (iOs, OSX aún no probados)\n  - Crear un servidor web\n  - Multiproceso (Reinicia un nuevo proceso si uno de ellos falla)\n\n**NOTA**:\nvw-server es un módulo base para vw. Por lo tanto para utilizar toda la funcionalidad utilizelo con **vw**.\n\nSi desea utilizarlo en su proyecto nodejs o io.js, y utilizar con el lenguaje CoffeeScript por favor instale la dependencia https://www.npmjs.com/package/vw.\n\n\n\n\n#### Installation independiente\n\n```sh\n$ npm install vw-server\n```\n\n\n#### Cómo usar\n\nEn CoffeeScript\n```coffeescript\nvwserver= require \"vw-server\"\napp= new vwserver\n\tpath: __dirname, ## Directorio de la aplicacion\n\ttheme: \"default\", ## Directorio donde se encuentran los archivos HTML, JS, CSS3 de la interfaz de usuario\n\tworkercount: 0   ## Número de subprocesos \n\n\napp.prepareHttpServer ( -> \n\t# Acá va la definición de rutas del servidor creado\n\n\t# vox-server utiliza express-app y puede obtener el objeto router así:\n\trouter= app.getRouter()\n\t\n\t# Definir las rutas\n\t# La interfaz gráfica utiliza como ruta inicial: /index\n\trouter.all '/index', (req, res, next) ->\n\t\tres.writeHead 200, 'Content-type': 'text/html'\n\t\tres.write \"Hola mundo\"\n\t\tres.end()\n\t\treturn\n)\n\n# Parámetros de la ventana (opcional)\napp.windowParameters=\n\twidth:640,\n\theight:480,\n\ttoolbar:false\n\n# Iniciar la interfaz gráfica\napp.start()\n\n# O bien puede iniciar la aplicación en un puerto específico.\n# app.start 7000\n```\n\n#### Archivos HTML (interfaz de usuario)\nLos archivos deben ir en la carpeta que se haya definido en las opciones que se dan al crear el servidor (options.theme). \nEsa carpeta debe tener dos subcarpetas\n\n - assets (todos los archivos de estilos, scripts, imágenes, etc)\n - views (los archivos VISTAS. Son archivos HTML, y código fuente juntos)\n\n#### Vistas \nSon archivos híbridos de código HTML, y código fuente de servidor. Podría asimilarse de cierta manera a los archivos PHP que tienen porciones de código y porciones HTML, y estas vistas son muy similares en el uso.\n\n - Dentro de cada vista existen las siguientes variables locales: **vox**, **req**, **res**, **pars**.\n **vox** es una referencia a un objeto que tiene ciertas utilidades como mostrar secciones que se verá más adelante\n **req** es una referencia al objeto request\n **res** es una referencia al objeto response\n **pars** son parámetros que se pueden enviar a la vista\n \n - Las porciones de código se encierran dentro de las etiquetas \"&lt;?\" y \"?&gt;\". El código puede estar en JavaScript o CoffeeScript\n \n - Se puede encerrar variables o expresiones dentro de etiquetas \"{{\" y \"\"}}. Colocar **{{expression}}** es similar al siguiente código CoffeeScript **&lt;? res.write expression ?&gt;**\n \n - Se pueden crear secciones que se pueden utilizar más adelante. Considere el siguiente ejemplo: \n\n``` CoffeeScript\n\n<?section:mysection:\nHello world! Solicitud procesada por el proceso: {{process.pid}}\n:end?>\n\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>App name</title>\n\t</head>\n\t<body>\n\t\t{{vox.section \"mysection\"}}\n\t</body>\n</html>\n``` \n\n\n\n\n### Development\nProducto desarrollado por VoxSoftware\n\n\nLicense\n----\n\nMIT\n\n\n   "
}