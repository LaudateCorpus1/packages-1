{
  "name": "nbind",
  "version": "0.2.1",
  "description": "Magical headers that make your C++ library accessible from JavaScript",
  "main": "dist/nbind.js",
  "typings": "dist/nbind.d.ts",
  "bin": {
    "copyasm": "bin/copyasm.js",
    "emcc-path": "bin/emcc-path.js"
  },
  "scripts": {
    "autogypi": "autogypi",
    "node-gyp": "node-gyp",
    "emcc-path": "emcc-path",
    "copyasm": "copyasm",
    "tsc": "tsc",
    "tslint": "tslint",
    "cbuild": "cbuild",
    "lint": "tslint -c src/tslint.json src/*.ts src/em/*.ts",
    "prepublish": "npm run lint && tsc -p src/em && tsc -p src && cbuild -x -v -s dist/bundle/em-api.js -o dist/em-api.js",
    "clean-asm": "cd test/em && node-gyp clean",
    "test-asm": "npm link nbind && autogypi -c test/autogypi.json && cd test/em && node-gyp configure build --asmjs=1 && tap ../test.js",
    "test": "autogypi -c test/autogypi.json && cd test/v8 && node-gyp configure build           && tap --gc ../test.js"
  },
  "author": {
    "name": "Juha JÃ¤rvi"
  },
  "license": "MIT",
  "repository": {
    "user": "charto",
    "repo": "nbind",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/charto/nbind/tarball/master",
    "clone_url": "https://github.com/charto/nbind",
    "https_url": "https://github.com/charto/nbind",
    "travis_url": "https://travis-ci.org/charto/nbind",
    "zip_url": "https://github.com/charto/nbind/archive/master.zip",
    "api_url": "https://api.github.com/repos/charto/nbind"
  },
  "homepage": "https://github.com/charto/nbind#readme",
  "os": [
    "darwin",
    "linux",
    "win32"
  ],
  "dependencies": {
    "emscripten-library-decorator": "~0.1.6",
    "mkdirp": "~0.5.1",
    "nan": "^2.3.5"
  },
  "devDependencies": {
    "autogypi": "~0.2.2",
    "cbuild": "~0.1.1",
    "node-gyp": "~3.3.1",
    "tap": "~5.7.2",
    "tslint": "^3.10.2",
    "typescript": "^1.8.10"
  },
  "gitHead": "d4d32f7d745eb0bbefbd2e1760dfe7fa329d83f9",
  "_npmVersion": "2.14.4",
  "_nodeVersion": "4.1.1",
  "dist": {
    "shasum": "f78308612a18e78eb497256c5c9a714f6265256d",
    "tarball": "http://registry.npmjs.org/nbind/-/nbind-0.2.1.tgz"
  },
  "versions": [
    {
      "number": "0.0.3",
      "date": "2015-04-04T16:01:31.843Z"
    },
    {
      "number": "0.0.4",
      "date": "2015-04-11T09:32:31.980Z"
    },
    {
      "number": "0.0.5",
      "date": "2015-04-12T18:48:06.496Z"
    },
    {
      "number": "0.0.6",
      "date": "2015-04-18T16:41:07.279Z"
    },
    {
      "number": "0.0.7",
      "date": "2015-07-02T09:00:14.344Z"
    },
    {
      "number": "0.1.0",
      "date": "2015-08-31T00:46:23.152Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-09-29T12:07:37.525Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-05-02T08:10:15.099Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-05-27T14:45:06.465Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-06-07T11:04:26.348Z"
    }
  ],
  "created": "2015-04-04T16:01:31.843Z",
  "modified": "2016-06-07T11:04:26.348Z",
  "lastPublisher": {
    "name": "jjrv",
    "email": "befunge@gmail.com"
  },
  "owners": [
    {
      "name": "jjrv",
      "email": "befunge@gmail.com"
    },
    {
      "name": "charto",
      "email": "befunge@gmail.com"
    }
  ],
  "readme": "[Quick start](#quick-start) |\n[Requirements](#requirements) |\n[Features](#features) |\n[User guide](#user-guide) |\n[Contributing](#contributing) |\n[License](#license)\n\n[![nbind flowchart](doc/images/diagram.png)](doc/images/diagram.png)\n\n`nbind` is a set of headers that make your C++11 library accessible from JavaScript.\nWith a single `#include` statement, your C++ compiler generates the necessary bindings\nwithout any additional tools. Your library is then usable as a Node.js addon or,\nif compiled to asm.js with [Emscripten](http://emscripten.org),\ndirectly in web pages without any plugins.\n\n`nbind` works with the [autogypi](https://github.com/charto/autogypi) dependency management tool,\nwhich sets up `node-gyp` to compile your library without needing any configuration\n(other than listing your source code file names).\n\n`nbind` is **MIT licensed** and based on templates and macros inspired by\n[embind](http://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/embind.html).\n\nQuick start\n===========\n\nC++ everywhere in 5 easy steps using Node.js, `nbind` and [autogypi](https://github.com/charto/autogypi):\n\n<table>\n<tr>\n\t<th>Starting point</th>\n\t<th>Step 1 - bind</th>\n\t<th>Step 2 - prepare</th>\n</tr><tr>\n<td valign=\"top\">Original C++ code <a href=\"https://raw.githubusercontent.com/charto/nbind-example-minimal/master/hello.cc\"><code>hello.cc</code></a>:<br>\n<pre>#include &lt;string&gt;\n#include &lt;iostream&gt;\n&nbsp;\nstruct Greeter {\n  static void sayHello(\n    std::string name\n  ) {\n    std::cout\n      &lt;&lt; \"Hello, \"\n      &lt;&lt; name &lt;&lt; \"!\\n\";\n  }\n};</pre></td>\n<td valign=\"top\">List your <a href=\"#classes-and-constructors\">classes</a> and <a href=\"#methods-and-properties\">methods</a>:<br>\n<pre>// Your original code here\n&nbsp;\n// Add these below it:\n&nbsp;\n#include \"nbind/nbind.h\"\n&nbsp;\nNBIND_CLASS(Greeter) {\n  method(sayHello);\n}</pre></td>\n<td valign=\"top\"><a href=\"#creating-your-project\">Add scripts</a> to <a href=\"https://raw.githubusercontent.com/charto/nbind-example-minimal/master/package.json\"><code>package.json</code></a>:<br>\n<pre>{\n  \"scripts\": {\n    \"autogypi\": \"autogypi\",\n    \"node-gyp\": \"node-gyp\",\n    \"emcc-path\": \"emcc-path\",\n    \"copyasm\": \"copyasm\"\n  }\n}</pre></td>\n</tr><tr>\n\t<th>Step 3 - install</th>\n\t<th>Step 4 - build</th>\n\t<th>Step 5 - use!</th>\n</tr><tr>\n<td valign=\"top\">Run on the command line:<br>\n<pre>npm install --save \\\n  nbind autogypi node-gyp\n&nbsp;\nnpm run -- autogypi \\\n  --init-gyp \\\n  -p nbind -s hello.cc</pre></td>\n<td valign=\"top\">Compile to native binary:<br>\n<pre>npm run -- node-gyp \\\n  configure build</pre>\nOr to Asm.js:<br>\n<pre>npm run -- node-gyp \\\n  configure build \\\n  --asmjs=1</pre></td>\n<td valign=\"top\">Call from Node.js:<br>\n<pre>var nbind = require('nbind');\nvar lib = nbind.init().lib;\n&nbsp;\nlib.Greeter.sayHello('you');</pre>\nOr from a web browser (<a href=\"#using-in-web-browsers\">see below</a>).\n</td></tr>\n</table>\n\nThe above is **all** of the required code. Just copy and paste in the mentioned files and prompts or take a shortcut:\n\n```bash\ngit clone https://github.com/charto/nbind-example-minimal.git\ncd nbind-example-minimal\nnpm install && npm test\n```\n\nSee it run!\n\n(Note: [nbind-example-universal](https://github.com/charto/nbind-example-universal)\nis a better starting point for development)\n\nRequirements\n============\n\nYou need:\n\n- [Node.js](https://nodejs.org/en/) 0.10.x - 6.x.x (newer may also work).\n- Python 2.7, NOT 3.x (required by `node-gyp`, [see instructions](https://github.com/nodejs/node-gyp#installation)).\n\nAnd one of the following C++ compilers:\n\n- GCC 4.8 or above.\n- Clang 3.6 or above.\n- Emscripten 1.35.0 or above.\n- Visual Studio 2015 ([the Community version](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx) is fine).\n\nFeatures\n========\n\n`nbind` allows you to:\n\n- Use your C++ API from JavaScript without any extra effort.\n  - From **Node.js**, **Electron** and web browsers (using asm.js on **Chrome**, **Firefox** and **Edge**).\n  - On Linux, OS X and Windows.\n  - Without changes to your C++ code. Simply add a separate short description at the end.\n- Distribute both **native** code and an **asm.js** fallback binary.\n\nIn more detail:\n\n- Export multiple C++ classes, even ones not visible from other files.\n- Export C++ methods simply by mentioning their names.\n- Auto-detect argument and return types from C++ declarations.\n- [Automatically convert types](#type-conversion) and data structures between languages.\n- Call C++ methods from JavaScript with type checking.\n- Pass JavaScript callbacks to C++ and call them with any types.\n- Pass instances of compatible classes by value between languages (through the C++ stack).\n\nThe goal is to provide a **stable API** for binding C++ to JavaScript.\nAll internals related to JavaScript engines are hidden away,\nand a single API already supports *extremely* different platforms.\n\nWorks on your platform\n----------------------\n\n<table>\n\t<tr>\n\t\t<th>Target</th>\n\t\t<th colspan=2>Development platform</th>\n\t</tr><tr>\n\t\t<th></th>\n\t\t<th>Linux / OS X</th>\n\t\t<th>Windows</th>\n\t</tr><tr>\n\t\t<td>Native</td>\n\t\t<td>\n\t\t\t<a href=\"http://travis-ci.org/charto/nbind\">\n\t\t\t\t<img src=\"https://travis-ci.org/charto/nbind.svg?branch=master\" alt=\"Build status\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td>\n\t\t\t<a href=\"https://ci.appveyor.com/project/jjrv/nbind/branch/master\">\n\t\t\t\t<img src=\"https://ci.appveyor.com/api/projects/status/xu5ooh1m3mircpde/branch/master?svg=true\" alt=\"Build status\">\n\t\t\t</a>\n\t\t</td>\n\t</tr><tr>\n\t\t<td>Asm.js</td>\n\t\t<td>\n\t\t\t<a href=\"http://travis-ci.org/charto/nbind-ci-emscripten\">\n\t\t\t\t<img src=\"https://travis-ci.org/charto/nbind-ci-emscripten.svg?branch=master\" alt=\"Build status\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td>Tested manually</td>\n\t</tr>\n</table>\n\n[![dependency status](https://david-dm.org/charto/nbind.svg)](https://david-dm.org/charto/nbind)\n[![npm version](https://img.shields.io/npm/v/nbind.svg)](https://www.npmjs.com/package/nbind)\n\nRoadmap\n-------\n\nMore is coming! Work is ongoing to:\n\n- Automatically generate TypeScript `.d.ts` definition files from C++ code for IDE autocompletion and compile-time checks of JavaScript side code.\n- Support native Android and iPhone apps.\n\nFuture `0.x.y` versions *should* remain completely backwards-compatible between matching `x` and otherwise with minor changes.\nBreaking changes will be listed in release notes of versions where `y` equals `0`.\n\nContributing\n============\n\nPull requests are very welcome.\nWhen developing new features, writing tests first works best.\nPlease report issues through Github.\n\nWarning: rebase is used within develop and feature branches (but not master).\n\nUser guide\n==========\n\n- [Installing the examples](#installing-the-examples)\n- [Creating your project](#creating-your-project)\n- [Configuration](#configuration)\n- [Calling from Node.js](#calling-from-nodejs)\n- [Using nbind headers](#using-nbind-headers)\n- [Classes and constructors](#classes-and-constructors)\n- [Methods and properties](#methods-and-properties)\n- [Getters and setters](#getters-and-setters)\n- [Passing data structures](#passing-data-structures)\n- [Callbacks](#callbacks)\n- [Using objects](#using-objects)\n- [Type conversion](#type-conversion)\n- [Error handling](#error-handling)\n- [Publishing on npm](#publishing-on-npm)\n- [Shipping an asm.js fallback](#shipping-an-asmjs-fallback)\n- [Using in web browsers](#using-in-web-browsers)\n- [Using with TypeScript](#using-with-typescript)\n- [Debugging](#debugging)\n\nInstalling the examples\n-----------------------\n\n`nbind` examples shown in this user guide are also available to download\nfor easier testing as follows:\n\nExtract [this zip package](https://github.com/charto/nbind-examples/archive/master.zip) or run:\n\n```bash\ngit clone https://github.com/charto/nbind-examples.git\n```\n\nEnter the examples directory and install:\n\n```bash\ncd nbind-examples\nnpm install\n```\n\nCreating your project\n---------------------\n\nOnce you have all [requirements](#requirements) installed, run:\n\n```bash\nnpm init\nnpm install --save nbind autogypi node-gyp\n```\n\n`nbind`, `autogypi` and `node-gyp` are all needed to compile\na native Node.js addon from source when installing it.\nIf you only distribute an asm.js version, you can use\n`--save-dev` instead of `--save` because users won't need to compile it.\n\nNext, to run commands without installing them globally, it's practical\nto add them in the `scripts` section of your `package.json` that `npm init`\njust generated. Let's add an install script as well:\n\n```json\n  \"scripts\": {\n    \"autogypi\": \"autogypi\",\n    \"node-gyp\": \"node-gyp\",\n    \"emcc-path\": \"emcc-path\",\n    \"copyasm\": \"copyasm\",\n\n    \"install\": \"autogypi && node-gyp configure build\"\n  }\n```\n\n`emcc-path` is needed internally by `nbind` when compiling for asm.js.\nIt fixes some command line options that `node-gypi` generates on OS X\nand the Emscripten compiler doesn't like.\nYou can leave it out if only compiling native addons.\n\nThe `install` script runs when anyone installs your package.\nIt calls `autogypi` and then uses `node-gyp` to compile a native addon.\n\n`autogypi` uses npm package information to set correct include paths\nfor C/C++ compilers. It's needed when distributing addons on npm\nso the compiler can find header files from the `nbind` and `nan` packages\ninstalled on the user's machine. Initialize it like this:\n\n```bash\nnpm run -- autogypi --init-gyp -p nbind -s hello.cc\n```\n\nReplace `hello.cc` with the name of your C++ source file.\nYou can add multiple `-s` options, one for each source file.\n\nThe `-p nbind` means the C++ code uses `nbind`. Multiple `-p`\noptions can be added to add any other packages compatible with `autogypi`.\n\nThe `--init-gyp` command generates files `binding.gyp` and `autogypi.json`\nthat you should distribute with your package, so that `autogypi` and `node-gyp`\nwill know what to do when the `install` script runs.\n\nNow you're ready to start writing code and compiling.\n\nConfiguration\n-------------\n\nRefer to [autogypi documentation](https://github.com/charto/autogypi#readme)\nto set up dependencies of your package, and how other packages\nshould include it if it's a library usable directly from C++.\n\n`--asmjs=1` is the only existing configuration option for `nbind` itself.\nYou pass it to `node-gyp` by calling it like `node-gyp configure build --asmjs=1`.\nIt compiles your package using Emscripten instead of your default C++ compiler\nand produces asm.js output.\n\nCalling from Node.js\n--------------------\n\nFirst `nbind` needs to be initialized by calling `nbind.init` which takes\nthe following optional arguments:\n\n- Base path under which to look for compiled binaries.\n  Default is `process.cwd()` and `__dirname` is a good alternative.\n- Binary code exports object. Any classes from C++ API exported using `nbind`\n  will be added as members. Default is an empty object.\n  Any existing options will be seen by asm.js code and can be used to\n  [configure Emscripten output](https://kripken.github.io/emscripten-site/docs/api_reference/module.html).\n  Must follow base path (which may be set to `null` or `undefined`).\n- Node-style callback with 2 parameters:\n  - Error if present, otherwise `null`.\n  - Binary code exports object containing C++ classes.\n\n`nbind` can be initialized synchronously on Node.js and asynchronously on\nbrowsers and Node.js. Purely synchronous is easier but not as future-proof:\n\n```JavaScript\nvar nbind = require('nbind');\nvar lib = nbind.init().lib;\n\n// Use the library.\n```\n\nUsing a callback also supports asynchronous initialization:\n\n```JavaScript\nvar nbind = require('nbind');\n\nnbind.init(function(err, binding) {\n  var lib = binding.lib;\n\n  // Use the library.\n});\n```\n\nThe callback passed to init currently gets called synchronously in Node.js\nand asynchronously in browsers. To avoid releasing\n[zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\nyou can for example wrap the call in a\n[bluebird](http://bluebirdjs.com/docs/api/promise.promisify.html) promise:\n\n```JavaScript\nvar bluebird = require('bluebird');\nvar nbind = require('nbind');\n\nbluebird.promisify(nbind.init)().then(function(binding) {\n  var lib = binding.lib;\n\n  // Use the library.\n});\n```\n\nUsing nbind headers\n-------------------\n\nThere are two possible files to include:\n\n- `nbind/api.h` for using types from the `nbind` namespace such as JavaScript callbacks inside your C++ code.\n  - `#include` **before** your own class definitions.\n  - Causes your code to depend on `nbind`.\n- `nbind/nbind.h` for exposing your C++ API to JavaScript.\n  - `#include` **after** your own class definitions to avoid accidentally invoking its macros.\n  - The header automatically hides itself if not targeting Node.js or asm.js.\n  - Safe to use in any projects.\n\nUse `#include \"nbind/nbind.h\"` at the end of your source file with only the bindings after it.\nThe header defines macros with names like `construct` and `method` that may otherwise break\nyour code or conflict with other headers.\n\nIt's OK to include `nbind/nbind.h` also when not targeting any JavaScript environment.\n`node-gyp` defines a `BUILDING_NODE_EXTENSION` macro and Emscripten defines an `EMSCRIPTEN` macro\nso when those are undefined, the include file does nothing.\n\nUse `#include \"nbind/api.h\"` in your header files to use types in the nbind namespace\nif you need to [report errors](#error-handling) without throwing exceptions,\nor want to pass around [callbacks](#callbacks) or [objects](#using-objects).\n\nYou can use an `#ifdef NBIND_CLASS` guard to skip your `nbind` export definitions when the headers weren't loaded.\n\nExample that uses an `nbind` callback in C++ code:\n\n**[`1-headers.cc`](https://raw.githubusercontent.com/charto/nbind-examples/master/1-headers.cc)**\n\n```C++\n#include <string>\n#include <iostream>\n\n// For nbind::cbFunction type.\n#include \"nbind/api.h\"\n\nclass HeaderExample {\n\npublic:\n\n  static void callJS(nbind::cbFunction &callback) {\n    std::cout << \"JS says: \" << callback.call<std::string>(1, 2, 3);\n  }\n\n};\n\n// For NBIND_CLASS() and method() macros.\n#include \"nbind/nbind.h\"\n\n#ifdef NBIND_CLASS\n\nNBIND_CLASS(HeaderExample) {\n  method(callJS);\n}\n\n#endif\n```\n\nExample used from JavaScript:\n\n**[`1-headers.js`](https://raw.githubusercontent.com/charto/nbind-examples/master/1-headers.js)**\n\n```JavaScript\nvar nbind = require('nbind');\n\nvar lib = nbind.init().lib;\n\nlib.HeaderExample.callJS(function(a, b, c) {\n  return('sum = ' + (a + b + c) + '\\n');\n});\n```\n\nRun the example with `node 1-headers.js` after [installing](#installing-the-examples). It prints:\n\n```\nJS says: sum = 6\n```\n\nClasses and constructors\n------------------------\n\nThe `NBIND_CLASS(className)` macro takes the name of your C++ class as an argument (without any quotation marks), and exports it to JavaScript using the same name. It's followed by a curly brace enclosed block of method exports, as if it was a function definition.\n\nConstructors are exported with a macro call `construct<types...>();` where `types` is a comma-separated list of arguments to the constructor, such as `int, int`. Calling `construct` multiple times allows overloading it, but **each overload must have a different number of arguments**.\n\nConstructor arguments are the only types that `nbind` cannot detect automatically.\n\nExample with different constructor argument counts and types:\n\n**[`2-classes.cc`](https://raw.githubusercontent.com/charto/nbind-examples/master/2-classes.cc)**\n\n```C++\n#include <iostream>\n\nclass ClassExample {\n\npublic:\n\n  ClassExample() {\n    std::cout << \"No arguments\\n\";\n  }\n  ClassExample(int a, int b) {\n    std::cout << \"Ints: \" << a << \" \" << b << \"\\n\";\n  }\n  ClassExample(const char *msg) {\n    std::cout << \"String: \" << msg << \"\\n\";\n  }\n\n};\n\n#include \"nbind/nbind.h\"\n\nNBIND_CLASS(ClassExample) {\n  construct<>();\n  construct<int, int>();\n  construct<const char *>();\n}\n```\n\nExample used from JavaScript:\n\n**[`2-classes.js`](https://raw.githubusercontent.com/charto/nbind-examples/master/2-classes.js)**\n\n```JavaScript\nvar nbind = require('nbind');\n\nvar lib = nbind.init().lib;\n\nvar a = new lib.ClassExample();\nvar b = new lib.ClassExample(42, 54);\nvar c = new lib.ClassExample(\"Don't panic\");\n```\n\nRun the example with `node 2-classes.js` after [installing](#installing-the-examples). It prints:\n\n```\nNo arguments\nInts: 42 54\nString: Don't panic\n```\n\nMethods and properties\n----------------------\n\nMethods are exported inside an `NBIND_CLASS` block with a macro call `method(methodName);`\nwhich takes the name of the method as an argument (without any quotation marks).\nThe C++ method gets exported to JavaScript with the same name.\n\nProperties should be accessed through [getter and setter functions](#getters-and-setters).\n\nData types of method arguments and its return value are detected automatically\nso you don't have to specify them. Note the [supported data types](#type-conversion)\nbecause using other types may cause compiler errors that are difficult to understand.\n\nIf the method is `static`, it becomes a property of the JavaScript constructor function\nand can be accessed like `className.methodName()`. Otherwise it becomes a property of\nthe prototype and can be accessed like `obj = new className(); obj.methodName();`\n\nExample with a method that counts a cumulative checksum of ASCII character values in strings,\nand a static method that processes an entire array of strings:\n\n**[`3-methods.cc`](https://raw.githubusercontent.com/charto/nbind-examples/master/3-methods.cc)**\n\n```C++\n#include <string>\n#include <vector>\n\nclass MethodExample {\n\npublic:\n\n  unsigned int add(std::string part) {\n    for(char &c : part) sum += c;\n\n    return(sum);\n  }\n\n  static std::vector<unsigned int> check(std::vector<std::string> list) {\n    std::vector<unsigned int> result;\n    MethodExample example;\n\n    for(auto &&part : list) result.push_back(example.add(part));\n\n    return(result);\n  }\n\n  unsigned int sum = 0;\n\n};\n\n#include \"nbind/nbind.h\"\n\nNBIND_CLASS(MethodExample) {\n  construct<>();\n\n  method(add);\n  method(check);\n}\n```\n\nExample used from JavaScript, first calling a method in a loop from JS\nand then a static method returning an array:\n\n**[`3-methods.js`](https://raw.githubusercontent.com/charto/nbind-examples/master/3-methods.js)**\n\n```JavaScript\nvar nbind = require('nbind');\n\nvar lib = nbind.init().lib;\n\nvar parts = ['foo', 'bar', 'quux'];\n\nvar checker = new lib.MethodExample();\n\nconsole.log(parts.map(function(part) {\n  return(checker.add(part));\n}));\n\nconsole.log(lib.MethodExample.check(parts));\n```\n\nRun the example with `node 3-methods.js` after [installing](#installing-the-examples). It prints:\n\n```\n[ 324, 633, 1100 ]\n[ 324, 633, 1100 ]\n```\n\nThe example serves to illustrate passing data.\nIn practice, such simple calculations are faster to do in JavaScript\nrather than calling across languages because copying data is quite expensive.\n\nGetters and setters\n-------------------\n\nProperty getters are exported inside an `NBIND_CLASS` block with a macro call\n`getter(getterName)` with the name of the getter method as an argument.\n`nbind` automatically strips a `get`/`Get`/`get_`/`Get_` prefix and\nconverts the next letter to lowercase, so for example `getX` and `get_x`\nboth would become getters of `x` to be accessed like `obj.x`\n\nProperty setters are exported together with getters using a macro call\n`getset(getterName, setterName)` which works much like `getter(getterName)` above.\nBoth `getterName` and `setterName` are mangled individually so\nyou can pair `getX` with `set_x` if you like.\nFrom JavaScript, `++obj.x` would then call both of them to read and change the property.\n\nExample class and property with a getter and setter:\n\n**[`4-getset.cc`](https://raw.githubusercontent.com/charto/nbind-examples/master/4-getset.cc)**\n\n```C++\nclass GetSetExample {\n\npublic:\n\n  void setValue(int value) { this->value = value; }\n  int getValue() { return(value); }\n\nprivate:\n\n  int value = 42;\n\n};\n\n#include \"nbind/nbind.h\"\n\nNBIND_CLASS(GetSetExample) {\n  construct<>();\n\n  getset(getValue, setValue);\n}\n```\n\nExample used from JavaScript:\n\n**[`4-getset.js`](https://raw.githubusercontent.com/charto/nbind-examples/master/4-getset.js)**\n\n```JavaScript\nvar nbind = require('nbind');\n\nvar lib = nbind.init().lib;\n\nvar obj = new lib.GetSetExample();\n\nconsole.log(obj.value++); // 42\nconsole.log(obj.value++); // 43\n```\n\nRun the example with `node 4-getset.js` after [installing](#installing-the-examples).\n\nPassing data structures\n-----------------------\n\n`nbind` supports automatically converting between JavaScript arrays and C++\n`std::vector` or `std::array` types. Just use them as arguments or return values\nin C++ methods.\n\nNote that data structures don't use the same memory layout in both languages,\nso the data always gets copied which takes more time for more data.\nFor example the strings in an array of strings also get copied,\none character at a time. In asm.js data is copied twice, first to a temporary\nspace using a common format both languages can read and write.\n\nCallbacks\n---------\n\nCallbacks can be passed to C++ methods by simply adding an argument of type\n`nbind::cbFunction &` to their declaration.\n\nThey can be called with any number of any supported types without having to declare in any way what they accept.\nThe JavaScript code will receive the parameters as JavaScript variables to do with them as it pleases.\n\nA callback argument `arg` can be called like `arg(\"foobar\", 42);` in which case the return value is ignored.\nIf the return value is needed, the callback must be called like `arg.call<type>(\"foobar\", 42);`\nwhere type is the desired C++ type that the return value should be converted to.\nThis is because the C++ compiler cannot otherwise know what the callback might return.\n\nWarning: currently callbacks have a very short lifetime!\nThey can be called only until the first function that received them returns.\nThat means it's possible to create a function like `Array.map`\nwhich calls a callback zero or more times and then returns, never using the callback again.\nIt's currently not possible to create a function like `setTimeout`\nwhich calls the callback after it has returned.\n\nUsing objects\n-------------\n\nC++ objects can be passed to and from JavaScript *by reference* using pointers\nor *by value* using objects as parameters and return values in C++ code.\n\nNote: currently passing objects by pointer on Node.js requires the class\nto have a \"copy constructor\" initializing itself from a pointer.\nThis will probably be fixed later.\n\nUsing pointers is particularly:\n\n- **dangerous** because the pointer may become invalid\n  without JavaScript noticing it.\n- **annoying** in asm.js because browsers give no access to the garbage collector,\n  so memory may leak when pointers become garbage without C++ noticing it.\n  Smart pointers are not supported until a workaround for this comes up.\n\nPassing data by value using *value objects* solves both issues.\nThey're based on a `toJS` function on the C++ side\nand a `fromJS` function on the JavaScript side.\nBoth receive a callback as an argument, and calling it with any parameters\ncalls the constructor of the equivalent type in the other language.\n\nThe callback on the C++ side is of type `nbind::cbOutput`.\nValue objects are passed through the C++ stack to and from the exported function.\n`nbind` uses C++11 move semantics to avoid creating some additional copies on the way.\n\nThe equivalent JavaScript constructor must be registered on the JavaScript side\nby calling `binding.bind('CppClassName', JSClassName)`\nso that `nbind` knows which types to translate between each other.\n\nExample with a class `Coord` used as a value object, and a class\n`ObjectExample` which uses objects passed by values and references:\n\n**[`5-objects.cc`](https://raw.githubusercontent.com/charto/nbind-examples/master/5-objects.cc)**\n\n```C++\n#include <iostream>\n\n#include \"nbind/api.h\"\n\nclass Coord {\n\npublic:\n\n  Coord(signed int x = 0, signed int y = 0) : x(x), y(y) {}\n  explicit Coord(const Coord *other) : x(other->x), y(other->y) {}\n\n  void toJS(nbind::cbOutput output) {\n    output(x, y);\n  }\n\n  signed int getX() { std::cout << \"Get X\\n\"; return(x); }\n  signed int getY() { std::cout << \"Get Y\\n\"; return(y); }\n\n  void setX(signed int x) { this->x = x; }\n  void setY(signed int y) { this->y = y; }\n\n  signed int x, y;\n\n};\n\nclass ObjectExample {\n\npublic:\n\n  static void showByValue(Coord coord) {\n    std::cout << \"C++ value \" << coord.x << \", \" << coord.y << \"\\n\";\n  }\n\n  static void showByRef(Coord *coord) {\n    std::cout << \"C++ ref \" << coord->x << \", \" << coord->y << \"\\n\";\n  }\n\n  static Coord getValue() {\n    return(Coord(12, 34));\n  }\n\n  static Coord *getRef() {\n    static Coord coord(56, 78);\n    return(&coord);\n  }\n\n};\n\n#include \"nbind/nbind.h\"\n\nNBIND_CLASS(Coord) {\n  construct<>();\n  construct<const Coord *>();\n  construct<signed int, signed int>();\n\n  getset(getX, setX);\n  getset(getY, setY);\n}\n\nNBIND_CLASS(ObjectExample) {\n  method(showByValue);\n  method(showByRef);\n  method(getValue);\n  method(getRef);\n}\n```\n\nExample used from JavaScript:\n\n**[`5-objects.js`](https://raw.githubusercontent.com/charto/nbind-examples/master/5-objects.js)**\n\n```JavaScript\nvar nbind = require('nbind');\n\nvar binding = nbind.init();\nvar lib = binding.lib;\n\nfunction Coord(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nCoord.prototype.fromJS = function(output) {\n  output(this.x, this.y);\n}\n\nCoord.prototype.show = function() {\n  console.log('JS value ' + this.x + ', ' + this.y);\n}\n\nbinding.bind('Coord', Coord);\n\nvar value1 = new Coord(123, 456);\nvar value2 = lib.ObjectExample.getValue();\nvar ref = lib.ObjectExample.getRef();\n\nlib.ObjectExample.showByValue(value1);\nlib.ObjectExample.showByValue(value2);\nvalue1.show();\nvalue2.show();\n\nlib.ObjectExample.showByRef(ref);\nconsole.log('JS ref ' + ref.x + ', ' + ref.y);\n```\n\nRun the example with `node 5-objects.js` after [installing](#installing-the-examples). It prints:\n\n```\nC++ value 123, 456\nC++ value 12, 34\nJS value 123, 456\nJS value 12, 34\nC++ ref 56, 78\nGet X\nGet Y\nJS ref 56, 78\n```\n\nType conversion\n---------------\n\nParameters and return values of function calls between languages\nare automatically converted between equivalent types:\n\n| JavaScript | C++                               |\n| ---------- | --------------------------------- |\n| number     | (un)signed char, short, int, long |\n| number     | float, double                     |\n| boolean    | bool                              |\n| string     | const (unsigned) char *           |\n| string     | std::string                       |\n| Array      | std::vector&lt;type&gt;           |\n| Array      | std::array&lt;type, size&gt;      |\n| Function   | nbind::cbFunction<br>(only as a parameter)<br>See [callbacks](#callbacks) |\n| Instance of any prototype<br>(with a fromJS method) | Instance of any class<br>(with a toJS method)<br>See [using objects](#using-objects) |\n\nError handling\n--------------\n\nYou can use the `NBIND_ERR(\"message here\");` macro to report an error before returning from C++\n(`#include \"nbind/api.h\"` first). It will be thrown as an error on the JavaScript side\n(C++ environments like Emscripten may not support throwing exceptions, but the JavaScript side will).\n\nPublishing on npm\n-----------------\n\nMake sure your `package.json` file has at least the required `emcc-path`\nand `install` scripts:\n\n```json\n  \"scripts\": {\n    \"emcc-path\": \"emcc-path\",\n\n    \"install\": \"autogypi && node-gyp configure build\"\n  }\n```\n\nThe `dependencies` section should have at least:\n\n```json\n  \"dependencies\": {\n    \"autogypi\": \"^0.2.2\",\n\t\"nbind\": \"^0.2.1\",\n    \"node-gyp\": \"^3.3.1\"\n  }\n```\n\nYour package should also include `binding.gyp` and `autogypi.json` files.\n\nShipping an asm.js fallback\n---------------------------\n\n[nbind-example-universal](https://github.com/charto/nbind-example-universal)\nis a good minimal example of compiling a native Node.js addon if possible,\nand otherwise using a pre-compiled asm.js version.\n\nIt has two temporary build directories `build/native` and `build/asmjs`,\nfor compiling both versions. `nbind` provides a binary `copyasm`\nthat can then be used to copy the compiled asm.js library\ninto a nicer location for publishing inside the final npm package.\n\nNote that the native version should be compiled in the `install` script\nso it runs for all users of the package, and the asm.js version should be\ncompiled in the `prepublish` script so it gets packaged in npm for usage\nwithout the Emscripten compiler. See the\n[example `package.json` file](https://github.com/charto/nbind-example-universal/blob/master/package.json).\n\nUsing in web browsers\n---------------------\n\n[nbind-example-universal](https://github.com/charto/nbind-example-universal)\nis a good minimal example also of calling compiled asm.js code from inside\nweb browsers. The simplest way to get `nbind` working is to add\nthese scripts in your HTML code as seen in the\n[example `index.html`](https://github.com/charto/nbind-example-universal/blob/master/public/index.html):\n\n```html\n<script type=\"text/javascript\">\n  var Module = {\n    onRuntimeInitialized: function() {\n      this.ccall('nbind_init');\n      var lib = this;\n\n      // Use the library.\n    }\n  };\n</script>\n\n<script src=\"nbind.js\"></script>\n```\n\nMake sure to fix the path to `nbind.js` on the last line if necessary.\n\nUsing with TypeScript\n---------------------\n\nFirst see [calling from Node.js](#calling-from-nodejs).\nInitialization using TypeScript is similar.\n\nPurely synchronous:\n\n```TypeScript\nimport * as nbind from 'nbind';\n\nconst lib = nbind.init<any>().lib;\n\n// Use the library.\n```\n\nAsynchronous-aware:\n\n```TypeScript\nimport * as nbind from 'nbind';\n\nnbind.init((err: any, binding: nbind.Binding<any>) => {\n  const lib = binding.lib;\n\n  // Use the library.\n});\n```\n\nPromise-based:\n\n```TypeScript\nimport * as bluebird from 'bluebird';\nimport * as nbind from 'nbind';\n\nbluebird.promisify(nbind.init)().then((binding: nbind.Binding<any>) => {\n  const lib = binding.lib;\n\n  // Use the library.\n});\n```\n\nNote how there is a type argument `<any>` for the init call\nin all of the examples. It specifies the contents of `binding.lib` which are\ndefined in C++ code so the TypeScript compiler cannot guess them.\n\nIn a future version `nbind` will also generate a `.ts` file containing an\ninterface definition for the C++ API. You can then import and use it as the\ntype argument to get full type checking for API calls from TypeScript.\n\nDebugging\n---------\n\nIn the browser it can be difficult to stop and debug at the correct spot in\noptimized C++ code. `nbind` provides an `_nbind_debug()` function in `api.h`\nthat you can call from C++ to invoke the browser's debugger when using asm.js.\n\nAuthors\n=======\n\n- Juha JÃ¤rvi, befunge<img src=\"doc/images/gmail.png\" alt=\"domain\" width=\"87\" height=\"16\" align=\"absmiddle\">\n\nLicense\n=======\n\n[The MIT License](https://raw.githubusercontent.com/charto/nbind/master/LICENSE)\n\nCopyright (c) 2014-2016 BusFaster Ltd\n"
}