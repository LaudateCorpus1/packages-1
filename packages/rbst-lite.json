{
  "package.json": true,
  "author": {
    "name": "kaizhu256@gmail.com"
  },
  "description": "this package will provide a javascript implementation of randomized-binary-search-tree derived from http://kukuruku.co/hub/cpp/randomized-binary-search-trees with zero npm-dependencies",
  "devDependencies": {
    "electron-lite": "github:kaizhu256/node-electron-lite#alpha",
    "utility2": "github:kaizhu256/node-utility2#alpha"
  },
  "homepage": "https://github.com/kaizhu256/node-rbst-lite",
  "keywords": [
    "binary-search-tree",
    "bst",
    "heap",
    "randomized-binary-search-tree",
    "rbst",
    "self-balancing",
    "treap"
  ],
  "license": "MIT",
  "name": "rbst-lite",
  "repository": {
    "user": "kaizhu256",
    "repo": "node-rbst-lite",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/kaizhu256/node-rbst-lite/tarball/master",
    "clone_url": "https://github.com/kaizhu256/node-rbst-lite",
    "https_url": "https://github.com/kaizhu256/node-rbst-lite",
    "travis_url": "https://travis-ci.org/kaizhu256/node-rbst-lite",
    "zip_url": "https://github.com/kaizhu256/node-rbst-lite/archive/master.zip",
    "api_url": "https://api.github.com/repos/kaizhu256/node-rbst-lite"
  },
  "scripts": {
    "build-ci": "utility2 shRun shReadmeBuild",
    "start": "utility2 start index.js",
    "test": "export PORT=$(utility2 shServerPortRandom) && utility2 test test.js"
  },
  "version": "2016.10.10",
  "_npmVersion": "3.10.8",
  "_nodeVersion": "6.8.0",
  "dist": {
    "shasum": "17836ebcb444b0d837675c3cf832f88258d8b97d",
    "tarball": "http://registry.npmjs.org/rbst-lite/-/rbst-lite-2016.10.10.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-10-25T14:52:05.944Z"
    },
    {
      "number": "2016.10.9",
      "date": "2016-10-25T15:47:35.817Z"
    },
    {
      "number": "2016.10.10",
      "date": "2016-10-27T18:39:36.831Z"
    }
  ],
  "created": "2016-10-25T14:52:05.944Z",
  "modified": "2016-10-27T18:39:36.831Z",
  "lastPublisher": {
    "name": "kaizhu",
    "email": "kaizhu256@gmail.com"
  },
  "owners": [
    {
      "name": "kaizhu",
      "email": "kaizhu256@gmail.com"
    }
  ],
  "readme": "rbst-lite\n=========\nthis package will provide a javascript implementation of randomized-binary-search-tree derived from http://kukuruku.co/hub/cpp/randomized-binary-search-trees with zero npm-dependencies\n\n[![travis-ci.org build-status](https://api.travis-ci.org/kaizhu256/node-rbst-lite.svg)](https://travis-ci.org/kaizhu256/node-rbst-lite)\n\n[![NPM](https://nodei.co/npm/rbst-lite.png?downloads=true)](https://www.npmjs.com/package/rbst-lite)\n\n[![package-listing](https://kaizhu256.github.io/node-rbst-lite/build/screen-capture.gitLsTree.svg)](https://github.com/kaizhu256/node-rbst-lite)\n\n\n\n# documentation\n#### api-doc\n- [https://kaizhu256.github.io/node-rbst-lite/build/doc.api.html](https://kaizhu256.github.io/node-rbst-lite/build/doc.api.html)\n\n[![api-doc](https://kaizhu256.github.io/node-rbst-lite/build/screen-capture.docApiCreate.browser._2Fhome_2Ftravis_2Fbuild_2Fkaizhu256_2Fnode-rbst-lite_2Ftmp_2Fbuild_2Fdoc.api.html.png)](https://kaizhu256.github.io/node-rbst-lite/build/doc.api.html)\n\n#### todo\n- none\n\n#### change since 4fb90e68\n- npm publish 2016.10.10\n- add api-doc\n- add testCase_rbst_default\n- fix sizeUpdate\n- none\n\n\n\n# build-status [![travis-ci.org build-status](https://api.travis-ci.org/kaizhu256/node-rbst-lite.svg)](https://travis-ci.org/kaizhu256/node-rbst-lite)\n[![build commit status](https://kaizhu256.github.io/node-rbst-lite/build/build.badge.svg)](https://travis-ci.org/kaizhu256/node-rbst-lite)\n\n| git-branch : | [master](https://github.com/kaizhu256/node-rbst-lite/tree/master) | [beta](https://github.com/kaizhu256/node-rbst-lite/tree/beta) | [alpha](https://github.com/kaizhu256/node-rbst-lite/tree/alpha)|\n|--:|:--|:--|:--|\n| test-report : | [![test-report](https://kaizhu256.github.io/node-rbst-lite/build..master..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-rbst-lite/build..master..travis-ci.org/test-report.html) | [![test-report](https://kaizhu256.github.io/node-rbst-lite/build..beta..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-rbst-lite/build..beta..travis-ci.org/test-report.html) | [![test-report](https://kaizhu256.github.io/node-rbst-lite/build..alpha..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-rbst-lite/build..alpha..travis-ci.org/test-report.html)|\n| coverage : | [![istanbul coverage](https://kaizhu256.github.io/node-rbst-lite/build..master..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-rbst-lite/build..master..travis-ci.org/coverage.html/index.html) | [![istanbul coverage](https://kaizhu256.github.io/node-rbst-lite/build..beta..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-rbst-lite/build..beta..travis-ci.org/coverage.html/index.html) | [![istanbul coverage](https://kaizhu256.github.io/node-rbst-lite/build..alpha..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-rbst-lite/build..alpha..travis-ci.org/coverage.html/index.html)|\n| build-artifacts : | [![build-artifacts](https://kaizhu256.github.io/node-rbst-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-rbst-lite/tree/gh-pages/build..master..travis-ci.org) | [![build-artifacts](https://kaizhu256.github.io/node-rbst-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-rbst-lite/tree/gh-pages/build..beta..travis-ci.org) | [![build-artifacts](https://kaizhu256.github.io/node-rbst-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-rbst-lite/tree/gh-pages/build..alpha..travis-ci.org)|\n\n#### master branch\n- stable branch\n- HEAD should be tagged, npm-published package\n\n#### beta branch\n- semi-stable branch\n- HEAD should be latest, npm-published package\n\n#### alpha branch\n- unstable branch\n- HEAD is arbitrary\n- commit history may be rewritten\n\n\n\n# quickstart example\n```javascript\n/*\n * rbst-lite.js\n * https://github.com/kaizhu256/node-rbst-lite\n *\n * this package will provide a javascript implementation of randomized-binary-search-tree\n * derived from http://kukuruku.co/hub/cpp/randomized-binary-search-trees\n * with zero npm-dependencies\n *\n * quickstart example:\n *     copy and paste this entire script into the browser or nodejs console and press <enter>\n */\n\n\n\n/* istanbul instrument in package rbst-lite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n    local = {};\n    // globally export local\n    /* istanbul ignore next */\n    if (typeof global === 'object' && global) {\n        global.rbst_lite = local;\n    }\n    /* istanbul ignore next */\n    if (typeof module === 'object' && module) {\n        module.exports = local;\n    }\n    /* istanbul ignore next */\n    if (typeof window === 'object' && window) {\n        window.rbst_lite = local;\n    }\n\n\n\n    // run shared js-env code - lib.rbst.js\n    (function (local) {\n        var compare,\n            create,\n            find,\n            findInKeyRange,\n            insert,\n            insertAsRoot,\n            join,\n            print,\n            remove,\n            rotateLeft,\n            rotateRight,\n            sizeUpdate;\n\n        compare = function (aa, bb) {\n        /*\n         * this function will compare aa vs bb and return:\n         * -1 if aa < bb\n         *  0 if aa === bb\n         *  1 if aa > bb\n         * the priority for comparing different typeof's is:\n         * number < boolean < string < object < undefined\n         */\n            var typeof1, typeof2;\n            if (aa === bb) {\n                return 0;\n            }\n            // handle undefined case\n            if (aa === undefined) {\n                return 1;\n            }\n            if (bb === undefined) {\n                return -1;\n            }\n            typeof1 = typeof aa;\n            typeof2 = typeof bb;\n            if (typeof1 === typeof2) {\n                return typeof1 === 'object'\n                    ? 0\n                    : aa < bb\n                    ? -1\n                    : 1;\n            }\n            if (typeof1 === 'number') {\n                return -1;\n            }\n            if (typeof2 === 'number') {\n                return 1;\n            }\n            if (typeof1 === 'boolean') {\n                return -1;\n            }\n            if (typeof2 === 'boolean') {\n                return 1;\n            }\n            if (typeof1 === 'string') {\n                return -1;\n            }\n            if (typeof2 === 'string') {\n                return 1;\n            }\n            return 0;\n        };\n\n        create = function (key, data) {\n        /*\n         * this function will create a tree with the given key and data\n         */\n            return {\n                key: key,\n                data: data,\n                left: null,\n                right: null,\n                size: 1\n            };\n        };\n\n        find = function (tree, key) {\n        /*\n         * this function will find the node in the tree with the given key\n         */\n            var node, tmp;\n            node = tree;\n            tmp = node && compare(node.key, key);\n            while (tmp) {\n                node = tmp === -1\n                    ? node.right\n                    : node.left;\n                tmp = node && compare(node.key, key);\n            }\n            return node;\n        };\n\n        findInKeyRange = function (tree, aa, bb, fnc) {\n        /*\n         * this function will iteratively call fnc on all nodes in the tree,\n         * with keys in the inclusive key-range [aa, bb]\n         */\n            var node, sentinel, stack, tmp, traversedList;\n            if (!tree) {\n                return;\n            }\n            // find first node with key >= aa\n            node = tree;\n            stack = [node];\n            tmp = node && compare(node.key, aa);\n            while (node) {\n                stack.push(node);\n                node = tmp === -1\n                    ? node.right\n                    : node.left;\n                tmp = node && compare(node.key, aa);\n            }\n            traversedList = stack.slice();\n            // find last node with key <= bb\n            sentinel = null;\n            node = tree;\n            tmp = compare(node.key, bb);\n            while (node) {\n                sentinel = node;\n                node = tmp === 1\n                    ? node.left\n                    : node.right;\n                tmp = node && compare(node.key, bb);\n            }\n            sentinel = node || sentinel;\n            // begin traversal with first node with key >= aa\n            while (stack.length) {\n                node = stack.pop();\n                tmp = compare(node.key, bb);\n                if (compare(node.key, aa) >= 0 && compare(node.key, bb) <= 0) {\n                    fnc(node);\n                }\n                // end traversal with last node with key <= bb\n                if (node === sentinel) {\n                    return;\n                }\n                node = node.right;\n                if (traversedList.indexOf(node) < 0) {\n                    while (node) {\n                        stack.push(node);\n                        node = node.left;\n                    }\n                }\n            }\n        };\n\n        insert = function (tree, key, data) {\n        /*\n         * this function will insert a new node in the tree with the given key and data,\n         * with random re-balancing\n         */\n            if (!tree) {\n                return create(key, data);\n            }\n            if (Math.floor(Math.random() * 0x10000000000000) % (tree.size + 1) === 0 &&\n                    typeof key !== 'object') {\n                return insertAsRoot(tree, key, data);\n            }\n            if (compare(key, tree.key) === -1) {\n                tree.left = insert(tree.left, key, data);\n            } else {\n                tree.right = insert(tree.right, key, data);\n            }\n            sizeUpdate(tree);\n            return tree;\n        };\n\n        insertAsRoot = function (tree, key, data) {\n        /*\n         * this function will insert a new node in the tree with the given key and data,\n         * and rebalance it as the root node\n         */\n            if (!tree) {\n                return create(key, data);\n            }\n            if (compare(key, tree.key) === -1) {\n                tree.left = insertAsRoot(tree.left, key, data);\n                return rotateRight(tree);\n            }\n            tree.right = insertAsRoot(tree.right, key, data);\n            return rotateLeft(tree);\n        };\n\n        join = function (left, right) {\n        /*\n         * this function will join the left and right trees after deleting their parent tree\n         */\n            if (!left) {\n                return right;\n            }\n            if (!right) {\n                return left;\n            }\n            // left is heavy, so move it up\n            if (left.size > right.size) {\n                left.right = join(left.right, right);\n                sizeUpdate(left);\n                return left;\n            }\n            // right is heavy, so move it up\n            right.left = join(left, right.left);\n            sizeUpdate(right);\n            return right;\n        };\n\n        print = function (tree) {\n        /*\n         * this function will print the tree\n         */\n            var height, ii, recurse;\n            recurse = function (tree, depth) {\n                if (!tree) {\n                    return;\n                }\n                recurse(tree.left, depth + '* ');\n                ii += 1;\n                if (depth > height) {\n                    height = depth;\n                }\n                console.log('(' + ii + ',' + (depth.length / 2) + ',' + tree.size + ') ' +\n                    depth + JSON.stringify(tree.key));\n                recurse(tree.right, depth + '* ');\n            };\n            height = '';\n            ii = -1;\n            console.log('\\ntree\\n(ii,depth,size) key');\n            recurse(tree, '');\n            console.log('height = ' + height.length / 2);\n        };\n\n        remove = function (tree, key) {\n        /*\n         * this function will remove the node in the tree with the given key\n         */\n            if (!tree) {\n                return tree;\n            }\n            if (tree.key === key) {\n                return join(tree.left, tree.right);\n            }\n            if (compare(key, tree.key) === -1) {\n                tree.left = remove(tree.left, key);\n            } else {\n                tree.right = remove(tree.right, key);\n            }\n            sizeUpdate(tree);\n            return tree;\n        };\n\n        rotateLeft = function (tree) {\n        /*\n         * this function will rotate-left tree.right up to its parent tree's position\n         */\n            var right;\n            right = tree.right;\n            tree.right = right.left;\n            sizeUpdate(tree);\n            right.left = tree;\n            sizeUpdate(right);\n            return right;\n        };\n\n        rotateRight = function (tree) {\n        /*\n         * this function will rotate-right tree.left up to its parent tree's position\n         */\n            var left;\n            left = tree.left;\n            tree.left = left.right;\n            sizeUpdate(tree);\n            left.right = tree;\n            sizeUpdate(left);\n            return left;\n        };\n\n        sizeUpdate = function (tree) {\n        /*\n         * this function will update tree.size\n         */\n            tree.size = 1 +\n                ((tree.left && tree.left.size) || 0) +\n                ((tree.right && tree.right.size) || 0);\n        };\n\n        // init local\n        local.rbstCompare = compare;\n        local.rbstCreate = create;\n        local.rbstFind = find;\n        local.rbstFindInKeyRange = findInKeyRange;\n        local.rbstInsert = insert;\n        local.rbstPrint = print;\n        local.rbstRemove = remove;\n    }(local));\n\n\n\n    // run browser js-env code - test\n    (function (local) {\n        var assert, testCase_rbst_default;\n\n        assert = function (passed, data) {\n        /*\n         * this function will, if passed is falsey, throw an error with the given data\n         */\n            if (!passed) {\n                throw new Error(JSON.stringify(data));\n            }\n        };\n\n        testCase_rbst_default = function (options, onError) {\n            options = options || {};\n            // create tree\n            options.tree = local.rbstCreate(null, null);\n            [\n                -1, -0.5, 0, 0, 1, 2, 3,\n                false, true,\n                '-1', '0', '1', 'a', 'b',\n                null, undefined, {}, []\n            ]\n                // shuffle list\n                .sort(function () {\n                    return Math.floor(Math.random() * 3) - 1;\n                })\n                .forEach(function (key, data) {\n                    // insert\n                    options.tree = local.rbstInsert(options.tree, key, data);\n                });\n            // find\n            console.log('\\nfind 0');\n            options.data = local.rbstFind(options.tree, 0);\n            console.log(options.data);\n            assert(options.data.key === 0, options.data);\n            console.log('\\nfind undefined');\n            options.data = local.rbstFind(options.tree, 'undefined');\n            console.log(options.data);\n            assert(options.data === null, options.data);\n            // findInKeyRange\n            console.log('\\nfindInKeyRange [0, Infinity]');\n            options.data = [];\n            local.rbstFindInKeyRange(options.tree, 0, Infinity, function (node) {\n                options.data.push(node.key);\n            });\n            console.log(options.data);\n            assert(JSON.stringify(options.data) === '[0,0,1,2,3]', options.data);\n            // print\n            local.rbstPrint(options.tree);\n            // output:\n            // options.tree\n            // (ii,depth) key\n            // (0,3) * * * -1\n            // (1,2) * * -0.5\n            // (2,5) * * * * * 0\n            // (3,4) * * * * 0\n            // (4,3) * * * 1\n            // (5,1) * 2\n            // (6,3) * * * 3\n            // (7,2) * * false\n            // (8,0) true\n            // (9,3) * * * \"-1\"\n            // (10,5) * * * * * \"0\"\n            // (11,4) * * * * \"1\"\n            // (12,2) * * \"a\"\n            // (13,1) * \"b\"\n            // (14,2) * * null\n            // (15,3) * * * []\n            // (16,4) * * * * null\n            // (17,6) * * * * * * {}\n            // (18,5) * * * * * undefined\n            // height = 6\n            // remove\n            options.tree = local.rbstRemove(options.tree, true);\n            // print\n            local.rbstPrint(options.tree);\n            // coverage-hack - assert\n            try {\n                assert(false);\n            } catch (ignore) {\n            }\n            // coverage-hack - compare\n            options.symbolCreate = Symbol;\n            options.data = local.rbstCompare({}, options.symbolCreate());\n            assert(options.data === 0, options.data);\n            // coverage-hack - remove\n            options.tree = local.rbstRemove();\n            local.rbstFindInKeyRange(null, null, null, console.log);\n            for (options.ii = 0; options.ii < 0x100; options.ii += 1) {\n                // coverage-hack - insert\n                if (Math.random() >= 0.5) {\n                    options.tree = local.rbstInsert(\n                        options.tree,\n                        options.ii,\n                        'options.data' + options.ii\n                    );\n                }\n                // coverage-hack - find\n                local.rbstFind(options.tree, 'options.data' + options.ii);\n                local.rbstFindInKeyRange(options.tree, -Infinity, undefined, assert);\n            }\n            options.data = [];\n            local.rbstFindInKeyRange(options.tree, 0.5, 256.5, function (node) {\n                options.data.push(node);\n            });\n            options.data.forEach(function (node) {\n                // remove\n                if (Math.random() >= 0.5) {\n                    options.tree = local.rbstRemove(options.tree, node.key);\n                }\n            });\n            // print\n            // local.rbstPrint(options.tree);\n            onError();\n        };\n\n        // run test\n        testCase_rbst_default(null, function (error) {\n            // validate no error occurred\n            console.assert(!error, error);\n        });\n    }(local));\n}());\n```\n\n\n\n# package.json\n```json\n{\n    \"package.json\": true,\n    \"author\": \"kaizhu256@gmail.com\",\n    \"description\": \"{{packageJson.description}}\",\n    \"devDependencies\": {\n        \"electron-lite\": \"kaizhu256/node-electron-lite#alpha\",\n        \"utility2\": \"kaizhu256/node-utility2#alpha\"\n    },\n    \"homepage\": \"https://github.com/kaizhu256/node-rbst-lite\",\n    \"keywords\": [\n        \"binary-search-tree\", \"bst\",\n        \"heap\",\n        \"randomized-binary-search-tree\", \"rbst\",\n        \"self-balancing\",\n        \"treap\"\n    ],\n    \"license\": \"MIT\",\n    \"name\": \"rbst-lite\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/kaizhu256/node-rbst-lite.git\"\n    },\n    \"scripts\": {\n        \"build-ci\": \"utility2 shRun shReadmeBuild\",\n        \"start\": \"utility2 start index.js\",\n        \"test\": \"export PORT=$(utility2 shServerPortRandom) && utility2 test test.js\"\n    },\n    \"version\": \"2016.10.10\"\n}\n```\n\n\n\n# internal build-script\n- build.sh\n```shell\n# build.sh\n\n# this shell script will run the build for this package\n\nshBuildCiTestPre() {(set -e\n# this function will run the pre-test build\n    # test published-package\n    (export MODE_BUILD=npmTestPublished &&\n        shRunScreenCapture shNpmTestPublished) || return $?\n)}\n\nshBuildCiTestPost() {(set -e\n# this function will run the post-test build\n    # if running legacy-node, then return\n    [ \"$(node --version)\" \\< \"v5.0\" ] && return || true\n    export NODE_ENV=production\n)}\n\nshBuild() {(set -e\n# this function will run the main build\n    # init env\n    . node_modules/.bin/utility2 && shInit\n    # cleanup github-gh-pages dir\n    # export BUILD_GITHUB_UPLOAD_PRE_SH=\"rm -fr build\"\n    # init github-gh-pages commit-limit\n    export COMMIT_LIMIT=16\n    # if branch is alpha, beta, or master, then run default build\n    if [ \"$CI_BRANCH\" = alpha ] ||\n        [ \"$CI_BRANCH\" = beta ] ||\n        [ \"$CI_BRANCH\" = master ]\n    then\n        shBuildCiDefault\n    fi\n)}\nshBuild\n```\n"
}