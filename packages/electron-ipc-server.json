{
  "name": "electron-ipc-server",
  "version": "0.1.2",
  "repository": {
    "user": "loque",
    "repo": "electron-ipc-server",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/loque/electron-ipc-server/tarball/master",
    "clone_url": "https://github.com/loque/electron-ipc-server",
    "https_url": "https://github.com/loque/electron-ipc-server",
    "travis_url": "https://travis-ci.org/loque/electron-ipc-server",
    "zip_url": "https://github.com/loque/electron-ipc-server/archive/master.zip",
    "api_url": "https://api.github.com/repos/loque/electron-ipc-server"
  },
  "description": "An IPC server with an API similar to Express.js' for Electron",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "electron",
    "ipc"
  ],
  "author": {
    "name": "Lucas Soler"
  },
  "license": "MIT",
  "dependencies": {
    "parseurl": "^1.3.1",
    "path-to-regexp": "^1.6.0",
    "qs": "^6.2.1",
    "uuid": "^2.0.3"
  },
  "gitHead": "26456e0fd4308f3aa9ea68ae4353ba619a8e806f",
  "homepage": "https://github.com/loque/electron-ipc-server#readme",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.7.0",
  "dist": {
    "shasum": "a2419daa6ee15301f5a02a820c3840556d5d25e0",
    "tarball": "http://registry.npmjs.org/electron-ipc-server/-/electron-ipc-server-0.1.2.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-10-08T18:00:23.692Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-10-08T18:25:08.105Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-10-09T12:43:20.910Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-10-12T01:13:40.120Z"
    }
  ],
  "created": "2016-10-08T18:00:23.692Z",
  "modified": "2016-10-12T01:13:40.120Z",
  "lastPublisher": {
    "name": "loque",
    "email": "hola@lucassoler.com.ar"
  },
  "owners": [
    {
      "name": "loque",
      "email": "lucassoler2@gmail.com"
    }
  ],
  "readme": "electron-ipc-server\n===\n[![NPM](https://nodei.co/npm/electron-ipc-server.png)](https://nodei.co/npm/electron-ipc-server/)\n\nAn IPC server with an API similar to [Express](https://github.com/expressjs/express)' for [Electron](https://github.com/electron/electron).\n\nHandling IPC messages in [Electron](https://github.com/electron/electron) can be a pain if you are building an app with a very active communication between processes. Instead of reinventing the wheel `electron-ipc-server` aims to reduce the learning curve by reimplementing well known patterns such as those used for routing in [Express](https://github.com/expressjs/express) on the server side and a fetch*-ish* API on the client side. Internally it' still using [ipcRenderer](https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md) and [ipcMain](https://github.com/electron/electron/blob/master/docs/api/ipc-main.md) so there's nothing magic going on.\n\n## Quick example\n```javascript\n// In main process\nconst server = require('electron-ipc-server').createServer(app)\n\nserver.get('/users', (req, res) =>\n{\n    let users = // you get the users from your backend\n    res.status(200).send(users)\n})\n```\n\n```javascript\n// In render process\nconst client = require('electron-ipc-server').createClient()\n\nclient.get('/users')\n.then(response =>\n{\n    console.log(`users`, response.body)\n    // now go and do something with your list of users!\n})\n```\n\n## Installation\n```\nnpm i electron-ipc-server --save\n```\n\n## Features\n### What the client (renderer process) can do\n* Send requests to the main process and handle responses using Promises.\n* Use regular HTTP verbs like GET, POST, PUT and DELETE.\n* Still use regular events with `client.on()`.\n\n### What the server (main process) can do\n* Respond to regular HTTP verbs like GET, POST, PUT and DELETE.\n* Use an API similar to what Express offers, with middleware, params, query-strings, and much more.\n* Broadcast messages (by definition, to all clients).\n\n## Documentation\n* [Server](docs/api/server.md)\n* [Client](docs/api/client.md)\n* [Routing](docs/api/routing.md)\n* [Request](docs/api/request.md)\n* [Response](docs/api/response.md)\n\n## TODO\n- [ ] Add guides to /docs\n- [ ] Add /examples\n\n## License\n\n  [MIT](LICENSE)\n"
}