{
  "name": "electron-builder",
  "description": "Complete solution to build ready for distribution and 'auto update' Electron App installers",
  "version": "5.12.1",
  "main": "out/index.js",
  "files": [
    "out",
    "templates",
    "certs/root_certs.keychain"
  ],
  "bin": {
    "build": "./out/build-cli.js",
    "cleanup": "./out/cleanup.js",
    "install-app-deps": "./out/install-app-deps.js"
  },
  "scripts": {
    "compile": "npm run compile-production && npm run compile-test",
    "compile-production": "ts-babel",
    "compile-test": "ts-babel test",
    "lint": "tslint src/*.ts test/src/*.ts",
    "pretest": "npm run compile && npm run lint",
    "test": "node ./test/out/helpers/runTests.js",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "//": "Update wiki if docs changed. Update only if functionalily are generally available (latest release, not next)",
    "update-wiki": "git subtree split -b wiki --prefix docs/ && git push -f wiki wiki:master",
    "whitespace": "whitespace src/*.ts",
    "docker-images": "docker/build.sh"
  },
  "repository": {
    "user": "electron-userland",
    "repo": "electron-builder",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/electron-userland/electron-builder/tarball/master",
    "clone_url": "https://github.com/electron-userland/electron-builder",
    "https_url": "https://github.com/electron-userland/electron-builder",
    "travis_url": "https://travis-ci.org/electron-userland/electron-builder",
    "zip_url": "https://github.com/electron-userland/electron-builder/archive/master.zip",
    "api_url": "https://api.github.com/repos/electron-userland/electron-builder"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "keywords": [
    "electron",
    "builder",
    "build",
    "installer",
    "install",
    "packager",
    "pack",
    "nsis",
    "appdmg",
    "app",
    "dmg",
    "msi",
    "exe",
    "setup",
    "Windows",
    "OS X",
    "MacOS",
    "Mac"
  ],
  "author": {
    "name": "Stefan Judis"
  },
  "license": "MIT",
  "homepage": "https://github.com/electron-userland/electron-builder",
  "dependencies": {
    "7zip-bin": "^1.0.5",
    "ansi-escapes": "^1.4.0",
    "asar": "^0.11.0",
    "bluebird": "^3.4.1",
    "chalk": "^1.1.3",
    "cli-cursor": "^1.0.2",
    "debug": "^2.2.0",
    "electron-osx-sign": "^0.4.0-beta4",
    "electron-packager-tf": "~7.5.3",
    "electron-winstaller-fixed": "~2.11.7",
    "fs-extra-p": "^1.0.5",
    "hosted-git-info": "^2.1.5",
    "image-size": "^0.5.0",
    "lodash.template": "^4.2.5",
    "mime": "^1.3.4",
    "minimatch": "^3.0.2",
    "path-sort": "^0.1.0",
    "pretty-ms": "^2.1.0",
    "progress": "^1.1.8",
    "progress-stream": "^1.2.0",
    "read-package-json": "^2.0.4",
    "sanitize-filename": "^1.6.0",
    "semver": "^5.2.0",
    "signcode-tf": "~0.7.3",
    "source-map-support": "^0.4.1",
    "typescript": "2.0.0-dev.20160705",
    "update-notifier": "^1.0.2",
    "uuid-1345": "^0.99.6",
    "yargs": "^4.8.0",
    "appdmg": "^0.4.5"
  },
  "optionalDependencies": {
    "appdmg": "^0.4.5"
  },
  "config": {
    "pre-git": {
      "commit-msg": "conventional"
    },
    "pre-commit": [
      "npm run whitespace"
    ]
  },
  "devDependencies": {
    "@types/debug": "0.0.27-alpha",
    "@types/mime": "0.0.27-alpha",
    "@types/progress": "^1.1.26-alpha",
    "@types/semver": "^4.3.25-alpha",
    "@types/source-map-support": "^0.2.26-alpha",
    "ava-tf": "^0.15.3",
    "babel-plugin-array-includes": "^2.0.3",
    "babel-plugin-transform-es2015-destructuring": "^6.9.0",
    "babel-plugin-transform-es2015-parameters": "^6.9.0",
    "babel-plugin-transform-es2015-spread": "^6.8.0",
    "decompress-zip": "^0.3.0",
    "diff": "^2.2.3",
    "electron-download": "^2.1.2",
    "json8": "^0.9.0",
    "plist": "^1.2.0",
    "pre-git": "^3.10.0",
    "@develar/semantic-release": "^6.3.1",
    "should": "^9.0.2",
    "ts-babel": "^1.0.3",
    "tslint": "3.13.0",
    "typescript": "2.0.0-dev.20160620-1.0",
    "whitespace": "^2.0.0"
  },
  "babel": {
    "plugins": [
      "transform-es2015-parameters",
      "transform-es2015-spread",
      "transform-es2015-destructuring",
      "array-includes"
    ]
  },
  "ava": {
    "verbose": true,
    "cache": false,
    "files": [
      "test/out/*.js"
    ]
  },
  "release": {
    "verifyConditions": []
  },
  "typings": "./out/electron-builder.d.ts",
  "publishConfig": {
    "tag": "next"
  },
  "gitHead": "1bd32a700a5ab19ee0a22a44a6b63654a0c0307a",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.3.0",
  "dist": {
    "shasum": "b66e11a995b1185210e7bdb055d2ad7ec660e3b3",
    "tarball": "http://registry.npmjs.org/electron-builder/-/electron-builder-5.12.1.tgz"
  },
  "stars": 21,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-05-26T13:08:36.993Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-05-28T21:36:55.305Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-06-04T20:53:18.447Z"
    },
    {
      "number": "2.0.0",
      "date": "2015-06-18T19:32:44.060Z"
    },
    {
      "number": "2.0.1",
      "date": "2015-10-06T21:49:21.926Z"
    },
    {
      "number": "2.0.2",
      "date": "2015-10-15T22:12:53.040Z"
    },
    {
      "number": "2.1.0",
      "date": "2015-11-01T13:22:43.429Z"
    },
    {
      "number": "2.1.1",
      "date": "2015-11-01T13:32:28.190Z"
    },
    {
      "number": "2.2.0",
      "date": "2015-11-18T22:44:00.411Z"
    },
    {
      "number": "2.3.0",
      "date": "2015-11-25T07:55:14.455Z"
    },
    {
      "number": "2.3.1",
      "date": "2015-12-02T07:46:35.552Z"
    },
    {
      "number": "2.4.0",
      "date": "2015-12-11T19:35:34.286Z"
    },
    {
      "number": "2.5.0",
      "date": "2015-12-21T17:27:15.611Z"
    },
    {
      "number": "2.6.0",
      "date": "2016-01-09T12:03:05.881Z"
    },
    {
      "number": "2.7.0",
      "date": "2016-02-07T15:30:01.221Z"
    },
    {
      "number": "2.7.1",
      "date": "2016-02-07T17:56:09.800Z"
    },
    {
      "number": "2.7.2",
      "date": "2016-02-09T21:02:53.528Z"
    },
    {
      "number": "2.8.0",
      "date": "2016-02-23T09:00:02.078Z"
    },
    {
      "number": "2.8.1",
      "date": "2016-02-23T10:12:56.561Z"
    },
    {
      "number": "2.8.2",
      "date": "2016-02-23T18:49:26.462Z"
    },
    {
      "number": "2.8.3",
      "date": "2016-02-25T07:41:19.421Z"
    },
    {
      "number": "2.8.4",
      "date": "2016-03-03T13:53:34.558Z"
    },
    {
      "number": "2.8.5",
      "date": "2016-03-04T07:09:21.828Z"
    },
    {
      "number": "2.8.6",
      "date": "2016-03-08T12:31:54.422Z"
    },
    {
      "number": "2.9.0",
      "date": "2016-03-09T11:24:49.213Z"
    },
    {
      "number": "2.9.1",
      "date": "2016-03-09T14:35:51.325Z"
    },
    {
      "number": "2.9.2",
      "date": "2016-03-10T17:47:32.219Z"
    },
    {
      "number": "2.9.3",
      "date": "2016-03-11T06:47:30.070Z"
    },
    {
      "number": "2.9.4",
      "date": "2016-03-13T09:35:40.556Z"
    },
    {
      "number": "2.9.5",
      "date": "2016-03-13T12:12:05.630Z"
    },
    {
      "number": "2.10.0",
      "date": "2016-03-13T19:11:27.341Z"
    },
    {
      "number": "2.10.1",
      "date": "2016-03-14T15:24:59.683Z"
    },
    {
      "number": "2.11.0",
      "date": "2016-03-17T11:04:17.528Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-03-23T09:36:47.938Z"
    },
    {
      "number": "3.0.1",
      "date": "2016-03-24T13:23:08.374Z"
    },
    {
      "number": "3.0.2",
      "date": "2016-03-25T09:43:02.859Z"
    },
    {
      "number": "3.1.0",
      "date": "2016-03-25T19:00:35.331Z"
    },
    {
      "number": "3.1.1",
      "date": "2016-03-28T10:29:03.219Z"
    },
    {
      "number": "3.1.2",
      "date": "2016-04-01T23:31:51.625Z"
    },
    {
      "number": "3.2.0",
      "date": "2016-04-02T17:31:52.956Z"
    },
    {
      "number": "3.3.0",
      "date": "2016-04-05T13:43:16.203Z"
    },
    {
      "number": "3.3.1",
      "date": "2016-04-08T12:04:14.181Z"
    },
    {
      "number": "3.4.0",
      "date": "2016-04-09T14:53:20.179Z"
    },
    {
      "number": "3.5.0",
      "date": "2016-04-10T15:38:23.395Z"
    },
    {
      "number": "3.5.1",
      "date": "2016-04-14T12:28:33.955Z"
    },
    {
      "number": "3.5.2",
      "date": "2016-04-15T06:55:20.438Z"
    },
    {
      "number": "3.6.0",
      "date": "2016-04-16T19:55:45.168Z"
    },
    {
      "number": "3.6.1",
      "date": "2016-04-17T12:54:06.213Z"
    },
    {
      "number": "3.6.2",
      "date": "2016-04-19T08:52:34.249Z"
    },
    {
      "number": "3.6.3",
      "date": "2016-04-19T16:27:46.259Z"
    },
    {
      "number": "3.7.0",
      "date": "2016-04-20T06:10:14.504Z"
    },
    {
      "number": "3.8.0",
      "date": "2016-04-20T17:05:10.190Z"
    },
    {
      "number": "3.9.0",
      "date": "2016-04-21T06:06:30.008Z"
    },
    {
      "number": "3.10.0",
      "date": "2016-04-23T19:13:41.256Z"
    },
    {
      "number": "3.11.0",
      "date": "2016-04-25T06:41:48.147Z"
    },
    {
      "number": "3.12.0",
      "date": "2016-04-27T09:00:11.678Z"
    },
    {
      "number": "3.13.0",
      "date": "2016-04-28T07:51:30.217Z"
    },
    {
      "number": "3.13.1",
      "date": "2016-04-28T08:31:25.400Z"
    },
    {
      "number": "3.14.0",
      "date": "2016-04-29T18:39:36.544Z"
    },
    {
      "number": "3.15.0",
      "date": "2016-05-02T07:14:20.676Z"
    },
    {
      "number": "3.16.0",
      "date": "2016-05-02T16:51:36.219Z"
    },
    {
      "number": "3.16.1",
      "date": "2016-05-03T15:40:47.430Z"
    },
    {
      "number": "3.17.0",
      "date": "2016-05-04T16:27:56.065Z"
    },
    {
      "number": "3.17.1",
      "date": "2016-05-05T08:08:22.975Z"
    },
    {
      "number": "3.18.0",
      "date": "2016-05-09T17:39:37.826Z"
    },
    {
      "number": "3.19.0",
      "date": "2016-05-10T07:51:34.981Z"
    },
    {
      "number": "3.20.0",
      "date": "2016-05-11T18:39:18.586Z"
    },
    {
      "number": "3.21.0",
      "date": "2016-05-12T20:17:44.711Z"
    },
    {
      "number": "3.22.0",
      "date": "2016-05-13T08:55:53.752Z"
    },
    {
      "number": "3.22.1",
      "date": "2016-05-13T16:17:45.412Z"
    },
    {
      "number": "3.22.2",
      "date": "2016-05-14T16:36:09.183Z"
    },
    {
      "number": "3.23.0",
      "date": "2016-05-14T17:37:37.437Z"
    },
    {
      "number": "3.24.0",
      "date": "2016-05-15T16:59:26.246Z"
    },
    {
      "number": "3.25.0",
      "date": "2016-05-18T10:30:35.897Z"
    },
    {
      "number": "3.26.0",
      "date": "2016-05-23T06:18:43.415Z"
    },
    {
      "number": "3.26.1",
      "date": "2016-05-23T07:20:06.402Z"
    },
    {
      "number": "3.26.2",
      "date": "2016-05-23T13:38:58.094Z"
    },
    {
      "number": "3.26.3",
      "date": "2016-05-24T05:25:39.969Z"
    },
    {
      "number": "3.27.0",
      "date": "2016-05-26T07:55:26.749Z"
    },
    {
      "number": "4.0.0",
      "date": "2016-05-29T08:17:23.197Z"
    },
    {
      "number": "4.1.0",
      "date": "2016-05-30T12:09:55.946Z"
    },
    {
      "number": "4.2.0",
      "date": "2016-06-02T05:45:33.614Z"
    },
    {
      "number": "4.2.1",
      "date": "2016-06-03T07:18:16.984Z"
    },
    {
      "number": "4.2.2",
      "date": "2016-06-03T19:31:37.471Z"
    },
    {
      "number": "4.2.3",
      "date": "2016-06-05T14:26:48.598Z"
    },
    {
      "number": "4.2.4",
      "date": "2016-06-06T07:55:29.598Z"
    },
    {
      "number": "4.2.5",
      "date": "2016-06-06T10:06:45.785Z"
    },
    {
      "number": "4.2.6",
      "date": "2016-06-06T19:03:12.149Z"
    },
    {
      "number": "5.0.0",
      "date": "2016-06-08T18:34:14.007Z"
    },
    {
      "number": "5.0.1",
      "date": "2016-06-09T08:00:47.811Z"
    },
    {
      "number": "5.0.2",
      "date": "2016-06-09T08:28:25.487Z"
    },
    {
      "number": "5.0.3",
      "date": "2016-06-10T07:51:19.952Z"
    },
    {
      "number": "5.1.0",
      "date": "2016-06-10T13:22:38.995Z"
    },
    {
      "number": "5.2.0",
      "date": "2016-06-11T14:50:05.613Z"
    },
    {
      "number": "5.2.1",
      "date": "2016-06-12T09:05:11.538Z"
    },
    {
      "number": "5.3.0",
      "date": "2016-06-14T05:29:53.065Z"
    },
    {
      "number": "5.4.0",
      "date": "2016-06-14T08:51:04.360Z"
    },
    {
      "number": "5.4.1",
      "date": "2016-06-14T18:04:51.619Z"
    },
    {
      "number": "5.4.2",
      "date": "2016-06-16T08:06:49.084Z"
    },
    {
      "number": "5.4.3",
      "date": "2016-06-16T15:45:23.268Z"
    },
    {
      "number": "5.4.4",
      "date": "2016-06-17T17:18:45.111Z"
    },
    {
      "number": "5.5.0",
      "date": "2016-06-19T14:30:22.616Z"
    },
    {
      "number": "5.6.0",
      "date": "2016-06-21T19:52:08.000Z"
    },
    {
      "number": "5.6.1",
      "date": "2016-06-22T11:40:38.209Z"
    },
    {
      "number": "5.6.2",
      "date": "2016-06-23T07:32:31.986Z"
    },
    {
      "number": "5.6.3",
      "date": "2016-06-23T17:04:36.292Z"
    },
    {
      "number": "5.7.0",
      "date": "2016-06-24T08:20:28.621Z"
    },
    {
      "number": "5.8.0",
      "date": "2016-06-26T16:15:34.379Z"
    },
    {
      "number": "5.9.0",
      "date": "2016-06-26T17:38:11.116Z"
    },
    {
      "number": "5.10.0",
      "date": "2016-06-26T18:27:59.840Z"
    },
    {
      "number": "5.10.1",
      "date": "2016-06-27T07:19:17.058Z"
    },
    {
      "number": "5.10.2",
      "date": "2016-06-28T07:41:05.020Z"
    },
    {
      "number": "5.10.3",
      "date": "2016-07-01T07:55:00.586Z"
    },
    {
      "number": "5.10.4",
      "date": "2016-07-02T18:29:20.236Z"
    },
    {
      "number": "5.10.5",
      "date": "2016-07-03T08:29:06.463Z"
    },
    {
      "number": "5.11.0",
      "date": "2016-07-07T06:47:36.860Z"
    },
    {
      "number": "5.11.1",
      "date": "2016-07-07T07:30:49.887Z"
    },
    {
      "number": "5.11.2",
      "date": "2016-07-07T19:32:37.126Z"
    },
    {
      "number": "5.11.3",
      "date": "2016-07-09T13:17:22.001Z"
    },
    {
      "number": "5.12.0",
      "date": "2016-07-09T18:37:42.270Z"
    },
    {
      "number": "5.12.1",
      "date": "2016-07-11T09:58:14.965Z"
    }
  ],
  "created": "2015-05-26T13:08:36.993Z",
  "modified": "2016-07-11T09:58:14.965Z",
  "lastPublisher": {
    "name": "develar",
    "email": "develar@gmail.com"
  },
  "owners": [
    {
      "name": "develar",
      "email": "develar@gmail.com"
    },
    {
      "name": "stefanjudis",
      "email": "stefanjudis@gmail.com"
    }
  ],
  "readme": "# electron-builder [![npm version](https://img.shields.io/npm/v/electron-builder.svg)](https://npmjs.org/package/electron-builder) [![donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=W6V79R2RGCCHL)\nComplete solution to package and build ready for distribution and \"auto update\" Electron app for MacOS, Windows and Linux.\n\n* NPM packages management:\n  * [Native application dependencies](http://electron.atom.io/docs/latest/tutorial/using-native-node-modules/) compilation (only if [two-package.json project structure](#two-packagejson-structure) used).\n  * Development dependencies are never included. You don't need to ignore it explicitly.\n* [Code Signing](https://github.com/electron-userland/electron-builder/wiki/Code-Signing) on a CI server or development machine.\n* [Auto Update](#auto-update) ready application packaging.\n* [Build version management](https://github.com/electron-userland/electron-builder/wiki/Options#build-version-management).\n* Numerous target formats:\n  * All platforms: `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`.\n  * [MacOS](https://github.com/electron-userland/electron-builder/wiki/Options#MacOptions-target): `dmg`, `mas`.\n  * [Linux](https://github.com/electron-userland/electron-builder/wiki/Options#LinuxBuildOptions-target): `AppImage`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`.\n  * [Windows](https://github.com/electron-userland/electron-builder/wiki/Options#WinBuildOptions-target): NSIS, Squirrel.Windows.\n* [Publishing artifacts to GitHub Releases](https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts).\n\n[electron-packager](https://github.com/electron-userland/electron-packager) and\n[appdmg](https://github.com/LinusU/node-appdmg) are used under the hood.\n\nReal project example — [onshape-desktop-shell](https://github.com/develar/onshape-desktop-shell).\n\n# Two package.json structure\n\nWe recommend to use two package.json files (it is not required, you can build project with any structure).\n\n1. For development\n\n   In the root of the project. Here you declare dependencies for your development environment and build scripts.\n\n2. For your application\n\n   In the `app` directory. *Only this directory is distributed with real application.*\n\nWhy?\n\n1. Native npm modules (those written in C, not JavaScript) need to be compiled, and here we have two different compilation targets for them. Those used in application need to be compiled against electron runtime, and all `devDependencies` need to be compiled against your locally installed node.js. Thanks to having two files this is trivial (see [#39](https://github.com/electron-userland/electron-builder/issues/39)).\n2. No need to specify which [files](https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files) to include in the app (because development files reside outside the `app` directory).\n\nPlease see [Loading App Dependencies Manually](https://github.com/electron-userland/electron-builder/wiki/Loading-App-Dependencies-Manually) and [#379](https://github.com/electron-userland/electron-builder/issues/379#issuecomment-218503881).\n\n# Configuration\n\nSee [options](https://github.com/electron-userland/electron-builder/wiki/Options), but consider to follow simple guide outlined below at first.\n\nFor a production app you need to sign your application, see [Where to buy code signing certificate](https://github.com/electron-userland/electron-builder/wiki/Code-Signing#where-to-buy-code-signing-certificate).\n\n## In short\n1. Specify standard fields in the application `package.json` — [name](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata-name), `description`, `version` and [author](https://docs.npmjs.com/files/package.json#people-fields-author-contributors) (for Linux [homepage](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata-homepage) and [license](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata-license) are also required).\n\n2. Specify [build](https://github.com/electron-userland/electron-builder/wiki/Options#build) field in the development `package.json`:\n    ```json\n    \"build\": {\n      \"appId\": \"your.id\",\n      \"app-category-type\": \"your.app.category.type\",\n      \"win\": {\n        \"iconUrl\": \"(windows-only) https link to icon\"\n      }\n    }\n    ```\n   See [options](https://github.com/electron-userland/electron-builder/wiki/Options). This object will be used as a source of [electron-packager](https://www.npmjs.com/package/electron-packager#packageropts-callback) options. You can specify any other options here.\n\n3. Create directory `build` in the root of the project and put your `background.png` (MacOS DMG background), `icon.icns` (MacOS app icon) and `icon.ico` (Windows app icon).\n\n   <a id=\"user-content-linuxIcon\" class=\"anchor\" href=\"#linuxIcon\" aria-hidden=\"true\"></a>Linux icon set will be generated automatically on the fly from the MacOS `icns` file (or you can put them into the `build/icons` directory — filename must contains size (e.g. `32x32.png`)).\n\n4. Add [scripts](https://docs.npmjs.com/cli/run-script) to the development `package.json`:\n    ```json\n    \"scripts\": {\n      \"postinstall\": \"install-app-deps\",\n      \"pack\": \"build --dir\",\n      \"dist\": \"build\"\n    }\n    ```\n    And then you can run `npm run dist` (to package in a distributable format (e.g. dmg, windows installer, deb package)) or `npm run pack` (useful to test).\n\n5. Install [required system packages](https://github.com/electron-userland/electron-builder/wiki/Multi-Platform-Build).\n\nPlease note — packaged into an asar archive [by default](https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-asar).\n\n# Auto Update\n`electron-builder` produces all required artifacts:\n\n* `.dmg`: MacOS installer, required for MacOS user to initial install.\n* `-mac.zip`: required for Squirrel.Mac.\n* `.exe` and `-ia32.exe`: Windows installer, required for Windows user to initial install. Please note — [your app must handle Squirrel.Windows events](https://github.com/electronjs/windows-installer#handling-squirrel-events). See [real example](https://github.com/develar/onshape-desktop-shell/blob/master/src/WinSquirrelStartupEventHandler.ts).\n* `.full-nupkg`: required for Squirrel.Windows.\n\nFor auto updating to work, you must implement and configure Electron's [`autoUpdater`](http://electron.atom.io/docs/latest/api/auto-updater/) module ([example](https://github.com/develar/onshape-desktop-shell/blob/master/src/AppUpdater.ts)).\nYou also need to deploy your releases to a server.\nConsider using [Nuts](https://github.com/GitbookIO/nuts) (GitHub as a backend to store assets) or [Electron Release Server](https://github.com/ArekSredzki/electron-release-server).\nSee the [Publishing Artifacts](https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts) section of the [Wiki](https://github.com/electron-userland/electron-builder/wiki) for information on configuring your CI environment for automatic deployment.\n\nFor windows consider only [distributing 64-bit versions](https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130).\n\n# CLI Usage\nExecute `node_modules/.bin/build --help` to get actual CLI usage guide.\n```\nBuilding:\n  --mac, -m, -o, --osx  Build for MacOS, accepts target list (see\n                        https://goo.gl/HAnnq8).                          [array]\n  --linux, -l           Build for Linux, accepts target list (see\n                        https://goo.gl/O80IL2)                           [array]\n  --win, -w, --windows  Build for Windows, accepts target list (see\n                        https://goo.gl/dL4i8i)                           [array]\n  --x64                 Build for x64                                  [boolean]\n  --ia32                Build for ia32                                 [boolean]\n  --dir                 Build unpacked dir. Useful to test.            [boolean]\n\nPublishing:\n  --publish, -p  Publish artifacts (to GitHub Releases), see\n                 https://goo.gl/WMlr4n\n                           [choices: \"onTag\", \"onTagOrDraft\", \"always\", \"never\"]\n  --draft        Create a draft (unpublished) release                  [boolean]\n  --prerelease   Identify the release as a prerelease                  [boolean]\n\nDeprecated:\n  --platform  The target platform (preferred to use --mac, --win or --linux)\n               [choices: \"mac\", \"osx\", \"win\", \"linux\", \"darwin\", \"win32\", \"all\"]\n  --arch      The target arch (preferred to use --x64 or --ia32)\n                                                 [choices: \"ia32\", \"x64\", \"all\"]\n\nOther:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n\nExamples:\n  build -mwl                build for MacOS, Windows and Linux\n  build --linux deb tar.xz  build deb and tar.xz for Linux\n  build --win --ia32        build for Windows ia32\n```\n\n# Programmatic Usage\nSee `node_modules/electron-builder/out/electron-builder.d.ts`. [Typings](https://github.com/Microsoft/TypeScript/wiki/Typings-for-npm-packages) is supported.\n\n```js\n\"use strict\"\n\nconst builder = require(\"electron-builder\")\nconst Platform = builder.Platform\n\n// Promise is returned\nbuilder.build({\n  targets: Platform.MAC.createTarget(),\n  devMetadata: {\n    \"//\": \"build and other properties, see https://goo.gl/5jVxoO\"\n  }\n})\n  .then(() => {\n    // handle result\n  })\n  .catch((error) => {\n    // handle error\n  })\n```\n\n# Donations\n\n[Donate with PayPal.](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=W6V79R2RGCCHL)\n\n# Further Reading\nSee the [Wiki](https://github.com/electron-userland/electron-builder/wiki) for more documentation.\n\n\n"
}