{
  "name": "grunt-electron-installer",
  "version": "2.1.0",
  "description": "Grunt task to generate Windows installers for Electron apps",
  "main": "./tasks/index.js",
  "license": "MIT",
  "repository": {
    "user": "atom",
    "repo": "grunt-electron-installer",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/atom/grunt-electron-installer/tarball/master",
    "clone_url": "https://github.com/atom/grunt-electron-installer",
    "https_url": "https://github.com/atom/grunt-electron-installer",
    "travis_url": "https://travis-ci.org/atom/grunt-electron-installer",
    "zip_url": "https://github.com/atom/grunt-electron-installer/archive/master.zip",
    "api_url": "https://api.github.com/repos/atom/grunt-electron-installer"
  },
  "scripts": {
    "test": "jasmine-focused --captureExceptions spec"
  },
  "dependencies": {
    "electron-winstaller": "^2.2.0"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "jasmine-focused": "^1.0.5",
    "temp": "^0.8.1"
  },
  "gitHead": "0b1d3588990d902a0940b671fc158cc33f3fde9a",
  "homepage": "https://github.com/atom/grunt-electron-installer#readme",
  "_npmVersion": "2.10.1",
  "_nodeVersion": "0.12.4",
  "dist": {
    "shasum": "b39e7eb1abb4488a1d8b7587fd4e72d68a741030",
    "tarball": "http://registry.npmjs.org/grunt-electron-installer/-/grunt-electron-installer-2.1.0.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "0.30.0",
      "date": "2015-04-20T16:41:23.977Z"
    },
    {
      "number": "0.31.0",
      "date": "2015-04-21T18:23:45.140Z"
    },
    {
      "number": "0.32.0",
      "date": "2015-05-20T22:21:39.184Z"
    },
    {
      "number": "0.33.0",
      "date": "2015-05-21T22:36:05.709Z"
    },
    {
      "number": "0.34.0",
      "date": "2015-07-21T00:35:07.293Z"
    },
    {
      "number": "0.35.0",
      "date": "2015-07-28T14:49:05.177Z"
    },
    {
      "number": "0.36.0",
      "date": "2015-07-29T01:32:40.778Z"
    },
    {
      "number": "0.37.0",
      "date": "2015-07-31T17:01:05.442Z"
    },
    {
      "number": "1.0.0",
      "date": "2015-08-25T20:00:03.903Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-09-05T14:41:11.737Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-09-09T02:11:58.639Z"
    },
    {
      "number": "1.0.3-0",
      "date": "2015-09-11T00:31:23.516Z"
    },
    {
      "number": "1.0.3-1",
      "date": "2015-09-24T23:00:20.541Z"
    },
    {
      "number": "1.0.3-2",
      "date": "2015-09-24T23:36:35.606Z"
    },
    {
      "number": "1.0.3-3",
      "date": "2015-09-25T00:13:35.498Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-09-25T20:27:58.034Z"
    },
    {
      "number": "1.0.4",
      "date": "2015-09-30T21:07:16.560Z"
    },
    {
      "number": "1.0.5",
      "date": "2015-10-05T22:37:16.946Z"
    },
    {
      "number": "1.0.6",
      "date": "2015-10-13T23:15:06.261Z"
    },
    {
      "number": "1.0.7",
      "date": "2015-10-15T19:08:24.139Z"
    },
    {
      "number": "1.0.8",
      "date": "2015-10-15T21:15:44.729Z"
    },
    {
      "number": "1.0.9",
      "date": "2015-11-06T01:06:16.192Z"
    },
    {
      "number": "1.0.10",
      "date": "2015-11-06T17:44:46.948Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-11-12T01:25:19.534Z"
    },
    {
      "number": "1.2.0",
      "date": "2015-12-04T00:27:39.748Z"
    },
    {
      "number": "1.2.1",
      "date": "2016-01-19T21:32:23.149Z"
    },
    {
      "number": "1.2.2",
      "date": "2016-02-16T22:21:33.924Z"
    },
    {
      "number": "1.2.3",
      "date": "2016-03-07T23:01:12.701Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-03-16T18:29:36.132Z"
    },
    {
      "number": "2.1.0",
      "date": "2016-04-14T18:26:53.138Z"
    }
  ],
  "created": "2015-04-20T16:41:23.977Z",
  "modified": "2016-04-14T18:26:53.138Z",
  "lastPublisher": {
    "name": "kevinsawicki",
    "email": "kevinsawicki@gmail.com"
  },
  "owners": [
    {
      "name": "jlord",
      "email": "to.jlord@gmail.com"
    },
    {
      "name": "kevinsawicki",
      "email": "kevinsawicki@gmail.com"
    },
    {
      "name": "maxbrunsfeld",
      "email": "maxbrunsfeld@gmail.com"
    },
    {
      "name": "zcbenz",
      "email": "zcbenz@gmail.com"
    },
    {
      "name": "zeke",
      "email": "zeke@sikelianos.com"
    }
  ],
  "readme": "# Electron Installer Grunt Plugin\n\n[![Build status](https://ci.appveyor.com/api/projects/status/yd1ybqg3eq397i26/branch/master?svg=true)](https://ci.appveyor.com/project/kevinsawicki/grunt-electron-installer/branch/master)\n\nGrunt plugin that builds Windows installers for\n[Electron](https://github.com/atom/electron) apps using\n[Squirrel](https://github.com/Squirrel/Squirrel.Windows).\n\n## Installing\n\n```sh\nnpm install --save-dev grunt-electron-installer\n```\n\n## Configuring\n\nIn your `Gruntfile.coffee` or `Gruntfile.js` add the following:\n\n```js\ngrunt.loadNpmTasks('grunt-electron-installer')\n```\n\nThen assuming you have an Electron app built at the given `appDirectory`,\nyou can configure the installer task like so:\n\n```js\n'create-windows-installer': {\n  x64: {\n    appDirectory: '/tmp/build/my-app-64',\n    outputDirectory: '/tmp/build/installer64',\n    authors: 'My App Inc.',\n    exe: 'myapp.exe'\n  },\n  ia32: {\n    appDirectory: '/tmp/build/my-app-32',\n    outputDirectory: '/tmp/build/installer32',\n    authors: 'My App Inc.',\n    exe: 'myapp.exe'\n  }\n}\n```\n\nThen run `grunt create-windows-installer` and you will have an `.nupkg`, a\n`RELEASES` file, and a `.exe` installer file in the `outputDirectory` folder\nfor each multi task target given under the config entry.\n\nThere are several configuration settings supported:\n\n| Config Name           | Required | Description |\n| --------------------- | -------- | ----------- |\n| `appDirectory`        | Yes      | The folder path of your Electron app |\n| `outputDirectory`     | No       | The folder path to create the `.exe` installer in. Defaults to the `installer` folder at the project root. |\n| `loadingGif`          | No       | The local path to a `.gif` file to display during install. |\n| `authors`             | Yes      | The authors value for the nuget package metadata. Defaults to the `author` field from your app's package.json file when unspecified. |\n| `owners`              | No       | The owners value for the nuget package metadata. Defaults to the `authors` field when unspecified. |\n| `exe`                 | No       | The name of your app's main `.exe` file. This uses the `name` field in your app's package.json file with an added `.exe` extension when unspecified. |\n| `description`         | No       | The description value for the nuget package metadata. Defaults to the `description` field from your app's package.json file when unspecified. |\n| `version`             | No       | The version value for the nuget package metadata. Defaults to the `version` field from your app's package.json file when unspecified. |\n| `title`               | No       | The title value for the nuget package metadata. Defaults to the `productName` field and then the `name` field from your app's package.json file when unspecified. |\n| `certificateFile`     | No       | The path to an Authenticode Code Signing Certificate |\n| `certificatePassword` | No       | The password to decrypt the certificate given in `certificateFile` |\n| `signWithParams`      | No       | Params to pass to signtool.  Overrides `certificateFile` and `certificatePassword`. |\n| `iconUrl`             | No       | A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Atom icon. |\n| `setupIcon`           | No       | The ICO file to use as the icon for the generated Setup.exe |\n| `noMsi`               | No       | Should Squirrel.Windows create an MSI installer? |\n| `remoteReleases`      | No       | A URL to your existing updates. If given, these will be downloaded to create delta updates |\n\n## Sign your installer or else bad things will happen\n\nFor development / internal use, creating installers without a signature is okay, but for a production app you need to sign your application. Internet Explorer's SmartScreen filter will block your app from being downloaded, and many anti-virus vendors will consider your app as malware unless you obtain a valid cert.\n\nAny certificate valid for \"Authenticode Code Signing\" will work here, but if you get the right kind of code certificate, you can also opt-in to [Windows Error Reporting](http://en.wikipedia.org/wiki/Windows_Error_Reporting). [This MSDN page](http://msdn.microsoft.com/en-us/library/windows/hardware/hh801887.aspx) has the latest links on where to get a WER-compatible certificate. The \"Standard Code Signing\" certificate is sufficient for this purpose.\n\n## Handling Squirrel Events\n\nSquirrel will spawn your app with command line flags on first run, updates,\nand uninstalls. it is **very** important that your app handle these events as _early_\nas possible, and quit **immediately** after handling them. Squirrel will give your\napp a short amount of time (~15sec) to apply these operations and quit.\n\nYou should handle these events in your app's `main` entry point with something\nsuch as:\n\n```js\nvar app = require('app');\n\nvar handleStartupEvent = function() {\n  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  var squirrelCommand = process.argv[1];\n  switch (squirrelCommand) {\n    case '--squirrel-install':\n    case '--squirrel-updated':\n\n      // Optionally do things such as:\n      //\n      // - Install desktop and start menu shortcuts\n      // - Add your .exe to the PATH\n      // - Write to the registry for things like file associations and\n      //   explorer context menus\n\n      // Always quit when done\n      app.quit();\n\n      return true;\n    case '--squirrel-uninstall':\n      // Undo anything you did in the --squirrel-install and\n      // --squirrel-updated handlers\n\n      // Always quit when done\n      app.quit();\n\n      return true;\n    case '--squirrel-obsolete':\n      // This is called on the outgoing version of your app before\n      // we update to the new version - it's the opposite of\n      // --squirrel-updated\n      app.quit();\n      return true;\n  }\n};\n\nif (handleStartupEvent()) {\n  return;\n}\n```\n"
}