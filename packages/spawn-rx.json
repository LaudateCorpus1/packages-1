{
  "name": "spawn-rx",
  "version": "2.0.3",
  "description": "An Rx-version of child_process.spawn",
  "scripts": {
    "doc": "esdoc -c ./esdoc.json",
    "compile": "babel -d lib/ src/",
    "prepublish": "npm run compile",
    "test": "mocha --compilers js:babel-register ./test/*"
  },
  "repository": {
    "user": "paulcbetts",
    "repo": "spawn-rx",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/paulcbetts/spawn-rx/tarball/master",
    "clone_url": "https://github.com/paulcbetts/spawn-rx",
    "https_url": "https://github.com/paulcbetts/spawn-rx",
    "travis_url": "https://travis-ci.org/paulcbetts/spawn-rx",
    "zip_url": "https://github.com/paulcbetts/spawn-rx/archive/master.zip",
    "api_url": "https://api.github.com/repos/paulcbetts/spawn-rx"
  },
  "keywords": [
    "spawn",
    "rx"
  ],
  "author": {
    "name": "Paul Betts",
    "email": "paul@paulbetts.org"
  },
  "license": "MIT",
  "main": "lib/index.js",
  "homepage": "https://github.com/paulcbetts/spawn-rx",
  "dependencies": {
    "debug-electron": "^0.0.1",
    "rxjs": "^5.0.0-beta.12"
  },
  "devDependencies": {
    "babel-cli": "^6.11.4",
    "babel-eslint": "^5.0.0-beta6",
    "babel-plugin-transform-async-to-generator": "^6.8.0",
    "babel-preset-es2016-node5": "^1.1.2",
    "babel-register": "^6.11.6",
    "chai": "^3.5.0",
    "chai-as-promised": "^5.3.0",
    "esdoc": "^0.4.8",
    "esdoc-es7-plugin": "0.0.3",
    "esdoc-plugin-async-to-sync": "^0.5.0",
    "eslint": "^1.10.3",
    "mocha": "^3.0.2"
  },
  "gitHead": "5257978aebcc005a6d45cc66658b42a0642fa5e5",
  "_npmVersion": "3.10.6",
  "_nodeVersion": "6.2.0",
  "dist": {
    "shasum": "9e1908e8b354c8be799e5442efcbda4d5de39412",
    "tarball": "http://registry.npmjs.org/spawn-rx/-/spawn-rx-2.0.3.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-03-22T05:06:16.434Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-03-22T05:43:51.798Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-03-22T06:48:58.365Z"
    },
    {
      "number": "0.1.3",
      "date": "2016-03-23T05:10:14.311Z"
    },
    {
      "number": "0.1.4",
      "date": "2016-03-23T05:30:37.823Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-03-30T22:28:20.677Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-07-07T23:12:58.481Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-08-16T20:52:31.620Z"
    },
    {
      "number": "2.0.1",
      "date": "2016-08-16T20:59:22.128Z"
    },
    {
      "number": "2.0.2",
      "date": "2016-09-28T18:31:02.315Z"
    },
    {
      "number": "2.0.3",
      "date": "2016-09-28T22:38:41.969Z"
    }
  ],
  "created": "2016-03-22T05:06:16.434Z",
  "modified": "2016-09-28T22:38:41.969Z",
  "lastPublisher": {
    "name": "paulcbetts",
    "email": "paul@paulbetts.org"
  },
  "owners": [
    {
      "name": "paulcbetts",
      "email": "paul@paulbetts.org"
    }
  ],
  "readme": "# spawn-rx: A better version of spawn\r\n\r\n`spawn-rx` is a package that adds an Observable as well as a Promise version of \r\nthe `child_process.spawn` API, and fixes some deficiencies in `spawn` that come \r\nup especially on Windows. For example:\r\n\r\n* `spawn` searches PATH on POSIX platforms but will not on Windows, you need to\r\n  provide an exact path. spawn-rx makes Windows act like other platforms.\r\n  \r\n* On Windows, `{detached: true}` doesn't actually create a process group properly.\r\n  `spawn-rx` provides a `spawnDetached` method that allows you to spawn a detached\r\n  process and kill the entire process group if needed.\r\n  \r\n* POSIX platforms allow you to directly execute scripts that have a shebang at \r\n  the top of the file, whereas Windows can only natively `spawn` EXE files, which\r\n  makes executing npm binaries annoying. `spawn-rx` automatically rewrites your\r\n  `cmd` and `args` parameters for CMD scripts, PowerShell scripts, and node.js\r\n  files.\r\n\r\n## Examples\r\n\r\nspawn-as-promise:\r\n\r\n```js\r\n// Will run down path to find C:\\Windows\\System32\\wmic.exe, whereas normal \r\n// 'spawn' would require an absolute path.\r\nspawnPromise('wmic', [])\r\n  .then((result) => console.log(result));\r\n```\r\n\r\nHandle failed processes as errors:\r\n\r\n```js\r\ntry {\r\n  await spawnPromise('exit', ['-1']);\r\n} catch (e) {\r\n  console.log(\"Processes that return non-zero exit codes throw\")\r\n}\r\n```\r\n\r\nKill running process trees:\r\n\r\n```js\r\nlet disp = spawnDetached('takesALongTime', []).subscribe();\r\nawait Promise.delay(1000);\r\n\r\n// Kill the process and its children by unsubscribing.\r\ndisp.dispose();\r\n```\r\n\r\nStream process output:\r\n\r\n```js\r\nspawn('ls', ['-r'])\r\n  .subscribe(\r\n    (x) => console.log(x), \r\n    (e) => console.log(\"Process exited with an error\"));\r\n```\r\n\r\nExecute scripts:\r\n\r\n```js\r\n// Executes ./node_modules/.bin/uuid.cmd on Windows if invoked via `npm run`\r\nlet result = await spawnPromise('uuid');\r\n```\r\n\r\n\r\n## What's Jobber?\r\n\r\nJobber is a Windows executable that will execute a command in a process group,\r\nand if signaled via a named pipe, will terminate that process group. It's used\r\nin the implementation of `spawnDetached`.\r\n\r\n## Spawn output\r\n\r\nBy default spawn will merge stdout and stderr into the returned observable.\r\nYou can exclude one or the other by passing `ignore` in the `stdio` option of spawn.\r\n\r\nAlternatively if you call it with `{ split: true }` option, the observable output\r\n will be an object `{ source: 'stdout', text: '...' }` so you can distinguish\r\n the outputs.\r\n\r\n## Stdin support\r\n\r\nIf you provide an `observable<string>` in `opts.stdin`, it'll be subscribed upon\r\n and fed into the child process stdin. Its completion will terminate stdin stream.\r\n\r\n## Methods\r\n\r\n```js\r\n/**\r\n * Spawns a process attached as a child of the current process. \r\n * \r\n * @param  {string} exe               The executable to run\r\n * @param  {Array<string>} params     The parameters to pass to the child\r\n * @param  {Object} opts              Options to pass to spawn.\r\n *\r\n * @return {Observable<string>}       Returns an Observable that when subscribed\r\n *                                    to, will create a child process. The\r\n *                                    process output will be streamed to this\r\n *                                    Observable, and if unsubscribed from, the\r\n *                                    process will be terminated early. If the\r\n *                                    process terminates with a non-zero value,\r\n *                                    the Observable will terminate with onError.\r\n */\r\nfunction spawn(exe, params=[], opts=null)\r\n```\r\n\r\n```js\r\n/**\r\n * Spawns a process but detached from the current process. The process is put \r\n * into its own Process Group that can be killed by unsubscribing from the \r\n * return Observable.\r\n * \r\n * @param  {string} exe               The executable to run\r\n * @param  {Array<string>} params     The parameters to pass to the child\r\n * @param  {Object} opts              Options to pass to spawn.\r\n *\r\n * @return {Observable<string>}       Returns an Observable that when subscribed\r\n *                                    to, will create a detached process. The\r\n *                                    process output will be streamed to this\r\n *                                    Observable, and if unsubscribed from, the\r\n *                                    process will be terminated early. If the\r\n *                                    process terminates with a non-zero value,\r\n *                                    the Observable will terminate with onError.\r\n */\r\nfunction spawnDetached(exe, params, opts=null)\r\n```\r\n\r\n```js\r\n/**\r\n * Spawns a process as a child process.\r\n * \r\n * @param  {string} exe               The executable to run\r\n * @param  {Array<string>} params     The parameters to pass to the child\r\n * @param  {Object} opts              Options to pass to spawn.\r\n *\r\n * @return {Promise<string>}       Returns an Promise that represents a child\r\n *                                 process. The value returned is the process \r\n *                                 output. If the process terminates with a \r\n *                                 non-zero value, the Promise will resolve with \r\n *                                 an Error.\r\n */\r\nfunction spawnPromise(exe, params, opts=null)\r\n```\r\n\r\n```js\r\n/**\r\n * Spawns a process but detached from the current process. The process is put \r\n * into its own Process Group.\r\n * \r\n * @param  {string} exe               The executable to run\r\n * @param  {Array<string>} params     The parameters to pass to the child\r\n * @param  {Object} opts              Options to pass to spawn.\r\n *\r\n * @return {Promise<string>}       Returns an Promise that represents a detached \r\n *                                 process. The value returned is the process \r\n *                                 output. If the process terminates with a \r\n *                                 non-zero value, the Promise will resolve with \r\n *                                 an Error.\r\n */\r\nfunction spawnDetachedPromise(exe, params, opts=null)\r\n```\r\n\r\n```js\r\n/**\r\n * Finds the actual executable and parameters to run on Windows. This method \r\n * mimics the POSIX behavior of being able to run scripts as executables by \r\n * replacing the passed-in executable with the script runner, for PowerShell, \r\n * CMD, and node scripts.\r\n *\r\n * This method also does the work of running down PATH, which spawn on Windows\r\n * also doesn't do, unlike on POSIX.\r\n * \r\n * @param  {string} exe           The executable to run\r\n * @param  {Array<string>} args   The arguments to run\r\n *\r\n * @return {Object}               The cmd and args to run\r\n * @property {string} cmd         The command to pass to spawn\r\n * @property {Array<string>} args The arguments to pass to spawn\r\n */\r\nfunction findActualExecutable(exe, args)\r\n```\r\n"
}