{
  "name": "electron-compile",
  "version": "4.0.2",
  "description": "Electron supporting package to compile JS and CSS in Electron applications",
  "scripts": {
    "doc": "esdoc -c ./esdoc.json",
    "compile": "git clean -xdf lib && babel -d lib/ src",
    "prepublish": "npm run compile",
    "start": "npm run compile && electron ./test-dist/electron-smoke-test.js",
    "test": "mocha --compilers js:babel-register test/*.js"
  },
  "bin": {
    "electron-compile": "lib/cli.js",
    "electron-packager-compile": "lib/packager-cli.js"
  },
  "repository": {
    "user": "paulcbetts",
    "repo": "electron-compile",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/paulcbetts/electron-compile/tarball/master",
    "clone_url": "https://github.com/paulcbetts/electron-compile",
    "https_url": "https://github.com/paulcbetts/electron-compile",
    "travis_url": "https://travis-ci.org/paulcbetts/electron-compile",
    "zip_url": "https://github.com/paulcbetts/electron-compile/archive/master.zip",
    "api_url": "https://api.github.com/repos/paulcbetts/electron-compile"
  },
  "keywords": [
    "electron"
  ],
  "author": {
    "name": "Paul Betts",
    "email": "paul@paulbetts.org"
  },
  "license": "MIT",
  "homepage": "https://github.com/paulcbetts/electron-compile",
  "main": "lib/index.js",
  "engines": {
    "node": ">= 5.0"
  },
  "dependencies": {
    "@paulcbetts/mime-types": "^2.1.10",
    "btoa": "^1.1.2",
    "debug-electron": "^0.0.2",
    "lru-cache": "^4.0.1",
    "mkdirp": "^0.5.1",
    "pify": "^2.3.0",
    "rimraf": "^2.5.4",
    "spawn-rx": "^2.0.3",
    "yargs": "^4.8.1"
  },
  "devDependencies": {
    "asar": "^0.12.1",
    "babel-cli": "^6.11.4",
    "babel-eslint": "^6.1.2",
    "babel-plugin-array-includes": "^2.0.3",
    "babel-plugin-transform-async-to-generator": "^6.8.0",
    "babel-preset-es2016-node5": "^1.1.2",
    "babel-preset-react": "^6.11.1",
    "babel-register": "^6.11.6",
    "chai": "^3.5.0",
    "chai-as-promised": "^5.3.0",
    "cheerio": "^0.20.0",
    "electron-compilers": "^4.0.1",
    "electron-packager": "^7.5.1",
    "electron-prebuilt": "^1.3.3",
    "esdoc": "^0.4.8",
    "esdoc-es7-plugin": "0.0.3",
    "esdoc-plugin-async-to-sync": "^0.5.0",
    "eslint": "^3.3.0",
    "mocha": "^3.0.2"
  },
  "gitHead": "c08b8a75ae84f74a442a2cd4da8b54e5401eaadd",
  "_npmVersion": "3.10.8",
  "_nodeVersion": "6.8.0",
  "dist": {
    "shasum": "314a249d787ed2138d879733fe62ef24f85d7a7e",
    "tarball": "http://registry.npmjs.org/electron-compile/-/electron-compile-4.0.2.tgz"
  },
  "stars": 8,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-05-19T06:14:49.451Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-05-19T06:28:44.039Z"
    },
    {
      "number": "0.1.2",
      "date": "2015-05-22T21:52:51.558Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-06-07T23:57:16.394Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-06-20T00:23:40.385Z"
    },
    {
      "number": "0.3.1",
      "date": "2015-06-20T00:28:52.827Z"
    },
    {
      "number": "0.4.0",
      "date": "2015-07-01T04:44:35.406Z"
    },
    {
      "number": "0.5.0",
      "date": "2015-07-12T18:10:58.299Z"
    },
    {
      "number": "0.6.0",
      "date": "2015-07-14T20:04:29.188Z"
    },
    {
      "number": "0.6.1",
      "date": "2015-07-15T21:31:58.031Z"
    },
    {
      "number": "0.6.2",
      "date": "2015-07-15T21:54:35.650Z"
    },
    {
      "number": "0.6.3",
      "date": "2015-07-16T00:14:55.876Z"
    },
    {
      "number": "0.6.4",
      "date": "2015-07-16T18:48:24.033Z"
    },
    {
      "number": "0.6.5",
      "date": "2015-07-17T19:22:39.007Z"
    },
    {
      "number": "0.6.6",
      "date": "2015-07-17T22:05:16.996Z"
    },
    {
      "number": "0.7.0",
      "date": "2015-07-20T08:06:39.450Z"
    },
    {
      "number": "0.7.1",
      "date": "2015-07-28T04:52:33.805Z"
    },
    {
      "number": "0.7.2",
      "date": "2015-07-29T07:58:34.217Z"
    },
    {
      "number": "0.7.3",
      "date": "2015-07-30T09:25:38.335Z"
    },
    {
      "number": "0.7.4",
      "date": "2015-07-30T13:43:28.418Z"
    },
    {
      "number": "0.8.0",
      "date": "2015-08-12T21:30:31.578Z"
    },
    {
      "number": "0.8.1",
      "date": "2015-08-14T01:05:20.674Z"
    },
    {
      "number": "0.8.2",
      "date": "2015-08-15T12:04:35.027Z"
    },
    {
      "number": "0.8.3",
      "date": "2015-08-19T02:47:45.802Z"
    },
    {
      "number": "0.9.0",
      "date": "2015-09-01T17:21:42.940Z"
    },
    {
      "number": "0.9.1",
      "date": "2015-09-02T22:26:43.176Z"
    },
    {
      "number": "0.9.2",
      "date": "2015-09-09T21:35:29.102Z"
    },
    {
      "number": "1.0.0",
      "date": "2015-09-27T05:56:04.325Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-10-23T22:27:33.779Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-12-17T17:30:18.340Z"
    },
    {
      "number": "2.0.0-beta1",
      "date": "2015-12-29T07:19:04.324Z"
    },
    {
      "number": "2.0.0-beta2",
      "date": "2015-12-29T07:22:20.257Z"
    },
    {
      "number": "2.0.0-beta3",
      "date": "2015-12-29T07:46:38.440Z"
    },
    {
      "number": "2.0.0-beta4",
      "date": "2015-12-29T19:34:23.311Z"
    },
    {
      "number": "2.0.0-beta5",
      "date": "2016-01-03T20:08:30.049Z"
    },
    {
      "number": "2.0.0-beta6",
      "date": "2016-01-04T01:28:10.639Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-01-04T05:29:30.355Z"
    },
    {
      "number": "2.0.1",
      "date": "2016-01-04T06:08:47.079Z"
    },
    {
      "number": "2.0.2",
      "date": "2016-01-04T15:10:01.081Z"
    },
    {
      "number": "2.0.3",
      "date": "2016-01-05T22:00:43.038Z"
    },
    {
      "number": "2.0.4",
      "date": "2016-01-06T04:49:20.619Z"
    },
    {
      "number": "2.0.5",
      "date": "2016-01-10T18:48:37.732Z"
    },
    {
      "number": "2.0.6",
      "date": "2016-01-25T22:37:18.830Z"
    },
    {
      "number": "2.0.7",
      "date": "2016-02-17T23:09:00.989Z"
    },
    {
      "number": "2.0.8",
      "date": "2016-02-26T20:34:47.613Z"
    },
    {
      "number": "2.1.0",
      "date": "2016-02-29T23:50:05.636Z"
    },
    {
      "number": "2.1.1",
      "date": "2016-03-01T05:26:23.027Z"
    },
    {
      "number": "2.1.2",
      "date": "2016-03-01T05:40:06.334Z"
    },
    {
      "number": "2.1.3",
      "date": "2016-03-15T16:39:45.637Z"
    },
    {
      "number": "2.1.4",
      "date": "2016-04-03T17:53:21.602Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-04-11T00:29:31.364Z"
    },
    {
      "number": "3.0.1",
      "date": "2016-04-11T07:59:18.799Z"
    },
    {
      "number": "3.1.0",
      "date": "2016-04-25T04:55:48.059Z"
    },
    {
      "number": "3.1.1",
      "date": "2016-05-09T19:38:15.156Z"
    },
    {
      "number": "3.1.2",
      "date": "2016-05-16T00:09:03.380Z"
    },
    {
      "number": "3.1.3",
      "date": "2016-05-18T18:12:24.078Z"
    },
    {
      "number": "3.2.0",
      "date": "2016-05-23T18:02:09.987Z"
    },
    {
      "number": "3.2.1",
      "date": "2016-05-30T02:56:30.024Z"
    },
    {
      "number": "3.2.2",
      "date": "2016-05-30T03:26:00.348Z"
    },
    {
      "number": "3.2.3",
      "date": "2016-05-30T08:16:46.317Z"
    },
    {
      "number": "3.2.4",
      "date": "2016-06-08T20:32:05.100Z"
    },
    {
      "number": "3.2.5",
      "date": "2016-06-09T00:50:57.270Z"
    },
    {
      "number": "3.2.6",
      "date": "2016-06-19T04:57:23.664Z"
    },
    {
      "number": "3.3.0",
      "date": "2016-06-29T21:15:54.482Z"
    },
    {
      "number": "3.3.1",
      "date": "2016-07-03T03:53:11.214Z"
    },
    {
      "number": "3.3.2",
      "date": "2016-07-12T19:00:32.548Z"
    },
    {
      "number": "3.3.3",
      "date": "2016-07-12T19:02:55.193Z"
    },
    {
      "number": "3.3.4",
      "date": "2016-07-12T19:17:07.682Z"
    },
    {
      "number": "3.3.5",
      "date": "2016-07-21T22:09:06.917Z"
    },
    {
      "number": "4.0.0",
      "date": "2016-10-04T05:19:52.798Z"
    },
    {
      "number": "3.3.6",
      "date": "2016-10-04T19:49:14.681Z"
    },
    {
      "number": "4.0.1",
      "date": "2016-11-09T21:29:29.556Z"
    },
    {
      "number": "4.0.2",
      "date": "2016-11-09T21:55:11.658Z"
    }
  ],
  "created": "2015-05-19T06:14:49.451Z",
  "modified": "2016-11-09T21:55:11.658Z",
  "lastPublisher": {
    "name": "paulcbetts",
    "email": "paul@paulbetts.org"
  },
  "owners": [
    {
      "name": "paulcbetts",
      "email": "paul@paulbetts.org"
    }
  ],
  "readme": "## electron-compile\r\n\r\n![](https://img.shields.io/npm/dm/electron-compile.svg) <a href=\"http://electron.github.io/electron-compile/docs\">![](http://electron.github.io/electron-compile/docs/badge.svg)</a>\r\n\r\nelectron-compile compiles JS and CSS on the fly with a single call in your app's 'ready' function.\r\n\r\nFor JavaScript:\r\n\r\n* JavaScript ES6/ES7 (via Babel)\r\n* TypeScript\r\n* CoffeeScript\r\n\r\nFor CSS:\r\n\r\n* Less\r\n* Stylus\r\n\r\nFor HTML:\r\n\r\n* Jade\r\n\r\nFor JSON:\r\n\r\n* CSON\r\n\r\n### How does it work? (Easiest Way)\r\n\r\nUse `electron-prebuilt-compile` instead of the `electron-prebuilt` module. Tada! You did it.\r\n\r\n### Wait, seriously?\r\n\r\nYeah. `electron-prebuilt-compile` is like an `electron-prebuilt` that Just Works with all of these languages above.\r\n\r\n### How does it work? (Slightly Harder Way)\r\n\r\nFirst, add `electron-compile` and `electron-compilers` as a `devDependency`.\r\n\r\n```sh\r\nnpm install --save electron-compile\r\nnpm install --save-dev electron-compilers\r\n```\r\n\r\nCreate a new file that will be the entry point of your app (perhaps changing 'main' in package.json) - you need to pass in the root directory of your application, which will vary based on your setup. The root directory is the directory that your `package.json` is in.\r\n\r\n```js\r\n// Assuming this file is ./src/es6-init.js\r\nvar appRoot = path.join(__dirname, '..');\r\n\r\n// ...and that your main app is called ./src/main.js. This is written as if\r\n// you were going to `require` the file from here.\r\nrequire('electron-compile').init(appRoot, './main');\r\n```\r\n\r\n\r\n### I did it, now what?\r\n\r\nFrom then on, you can now simply include files directly in your HTML, no need for cross-compilation:\r\n\r\n```html\r\n<head>\r\n  <script src=\"main.coffee\"></script>\r\n  <link rel=\"stylesheet\" href=\"main.less\" />\r\n</head>\r\n```\r\n\r\nor just require them in:\r\n\r\n```js\r\nrequire('./mylib')   // mylib.ts\r\n```\r\n\r\n### Something isn't working / I'm getting weird errors\r\n\r\nelectron-compile uses the [debug module](https://github.com/visionmedia/debug), set the DEBUG environment variable to debug what electron-compile is doing:\r\n\r\n```sh\r\n## Debug just electron-compile\r\nDEBUG=electron-compile:* npm start\r\n\r\n## Grab everything except for Babel which is very noisy\r\nDEBUG=*,-babel npm start\r\n```\r\n\r\n### How do I set up (Babel / Less / whatever) the way I want?\r\n\r\nIf you've got a `.babelrc` and that's all you want to customize, you can simply use it directly. electron-compile will respect it, even the environment-specific settings. If you want to customize other compilers, use a `.compilerc` or `.compilerc.json` file. Here's an example:\r\n\r\n```js\r\n{\r\n  \"application/javascript\": {\r\n    \"presets\": [\"es2016-node5\", \"react\"],\r\n    \"sourceMaps\": \"inline\"\r\n  },\r\n  \"text/less\": {\r\n    \"dumpLineNumbers\": \"comments\"\r\n  }\r\n}\r\n```\r\n\r\n`.compilerc` also accepts environments with the same syntax as `.babelrc`:\r\n\r\n```js\r\n{\r\n  \"env\": {\r\n    \"development\": {\r\n      \"application/javascript\": {\r\n        \"presets\": [\"es2016-node5\", \"react\"],\r\n        \"sourceMaps\": \"inline\"\r\n      },\r\n      \"text/less\": {\r\n        \"dumpLineNumbers\": \"comments\"\r\n      }\r\n    },\r\n    \"production\": {\r\n      \"application/javascript\": {\r\n        \"presets\": [\"es2016-node5\", \"react\"],\r\n        \"sourceMaps\": \"none\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe opening Object is a list of MIME Types, and options passed to the compiler implementation. These parameters are documented here:\r\n\r\n* Babel - http://babeljs.io/docs/usage/options\r\n* CoffeeScript - http://coffeescript.org/documentation/docs/coffee-script.html#section-5\r\n* TypeScript - https://github.com/Microsoft/TypeScript/blob/v1.5.0-beta/bin/typescriptServices.d.ts#L1076\r\n* Less - http://lesscss.org/usage/index.html#command-line-usage-options\r\n* Jade - http://jade-lang.com/api\r\n\r\n## How can I compile only some file types but not others?\r\n\r\nWith `passthrough` enabled, electron-compile will return your source files completely unchanged!\r\n\r\nIn this example `.compilerc`, JavaScript files won't be compiled:\r\n\r\n```js\r\n{\r\n  \"application/javascript\": {\r\n    \"passthrough\": true\r\n  },\r\n  \"text/less\": {\r\n    \"dumpLineNumbers\": \"comments\"\r\n  }\r\n}\r\n```\r\n\r\n## How can I precompile my code for release-time?\r\n\r\nelectron-compile comes with a wrapper around the [electron-packager](https://github.com/electron-userland/electron-packager) project, `electron-packager-compile` (if you use the `electron-prebuilt-compile` project, this will just be `electron-packager`). Run it the same way you run `electron-packager` and the compilation wire-up will be done in the background.\r\n\r\n## How can I precompile my code for release-time? (the hard way)\r\n\r\nelectron-compile comes with a command-line application to pre-create a cache for you.\r\n\r\n```sh\r\nUsage: electron-compile --appdir [root-app-dir] paths...\r\n\r\nOptions:\r\n  -a, --appdir  The top-level application directory (i.e. where your\r\n                package.json is)\r\n  -v, --verbose  Print verbose information\r\n  -h, --help     Show help\r\n```\r\n\r\nRun `electron-compile` on all of your application assets, even if they aren't strictly code (i.e. your static assets like PNGs). electron-compile will recursively walk the given directories.\r\n\r\n```sh\r\nelectron-compile --appDir /path/to/my/app ./src ./static\r\n```\r\n\r\n### But I use Grunt / Gulp / I want to do Something Interesting\r\n\r\nCompilation also has its own API, check out the [documentation](http://electron.github.io/electron-compile/docs/) for more information.\r\n"
}