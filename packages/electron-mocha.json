{
  "name": "electron-mocha",
  "version": "3.1.1",
  "description": "Mocha tests in Electron.",
  "main": "index.js",
  "scripts": {
    "test": "standard && node bin/electron-mocha test/main && node bin/electron-mocha --renderer test/renderer",
    "mocha": "node bin/electron-mocha",
    "prepublish": "npm test"
  },
  "bin": {
    "electron-mocha": "./bin/electron-mocha"
  },
  "repository": {
    "user": "jprichardson",
    "repo": "electron-mocha",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/jprichardson/electron-mocha/tarball/master",
    "clone_url": "https://github.com/jprichardson/electron-mocha",
    "https_url": "https://github.com/jprichardson/electron-mocha",
    "travis_url": "https://travis-ci.org/jprichardson/electron-mocha",
    "zip_url": "https://github.com/jprichardson/electron-mocha/archive/master.zip",
    "api_url": "https://api.github.com/repos/jprichardson/electron-mocha"
  },
  "keywords": [
    "mocha",
    "electron",
    "electron-tool",
    "test",
    "testing",
    "tdd",
    "bdd",
    "browser",
    "browser testing"
  ],
  "author": {
    "name": "JP Richardson"
  },
  "license": "MIT",
  "homepage": "https://github.com/jprichardson/electron-mocha#readme",
  "dependencies": {
    "commander": "^2.8.1",
    "electron-window": "^0.8.0",
    "fs-extra": "^0.30.0",
    "mocha": "^3.0.0",
    "which": "^1.1.1"
  },
  "devDependencies": {
    "electron": "^1.3.0",
    "standard": "^8.0.0"
  },
  "gitHead": "de689c2833d160ac52cfa2aa5b698d96685cb339",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.5.0",
  "dist": {
    "shasum": "3685203b5537fe7186528bfb5750b36958619881",
    "tarball": "http://registry.npmjs.org/electron-mocha/-/electron-mocha-3.1.1.tgz"
  },
  "stars": 4,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-07-10T22:01:35.931Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-07-10T22:32:42.963Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-07-15T10:48:56.787Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-07-22T14:15:11.522Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-07-30T18:28:40.245Z"
    },
    {
      "number": "0.3.1",
      "date": "2015-08-27T19:38:31.821Z"
    },
    {
      "number": "0.4.0",
      "date": "2015-10-16T19:15:19.834Z"
    },
    {
      "number": "0.5.0",
      "date": "2015-10-21T11:45:20.943Z"
    },
    {
      "number": "0.5.1",
      "date": "2015-10-31T01:46:43.292Z"
    },
    {
      "number": "0.6.0",
      "date": "2015-11-05T16:15:41.542Z"
    },
    {
      "number": "0.6.1",
      "date": "2015-11-05T16:25:18.817Z"
    },
    {
      "number": "0.6.2",
      "date": "2015-11-21T18:17:03.992Z"
    },
    {
      "number": "0.6.3",
      "date": "2015-11-26T16:20:35.219Z"
    },
    {
      "number": "0.7.0",
      "date": "2015-12-15T09:30:49.908Z"
    },
    {
      "number": "0.8.0",
      "date": "2016-01-15T01:00:31.392Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-03-22T02:56:44.447Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-04-04T20:59:29.605Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-04-04T21:24:52.473Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-04-07T16:14:38.492Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-04-10T16:30:54.788Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-04-12T15:38:37.567Z"
    },
    {
      "number": "1.2.1",
      "date": "2016-04-20T03:12:02.770Z"
    },
    {
      "number": "1.2.2",
      "date": "2016-04-20T20:16:37.233Z"
    },
    {
      "number": "1.2.3",
      "date": "2016-05-06T11:46:11.405Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-05-11T13:46:58.975Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-05-12T17:35:23.546Z"
    },
    {
      "number": "2.1.0",
      "date": "2016-05-16T22:43:53.585Z"
    },
    {
      "number": "2.2.0",
      "date": "2016-05-30T18:54:03.003Z"
    },
    {
      "number": "2.2.1",
      "date": "2016-06-22T15:57:37.104Z"
    },
    {
      "number": "2.3.0",
      "date": "2016-07-07T14:46:19.650Z"
    },
    {
      "number": "2.3.1",
      "date": "2016-07-13T09:45:31.770Z"
    },
    {
      "number": "3.0.0",
      "date": "2016-08-01T09:52:56.711Z"
    },
    {
      "number": "3.0.1",
      "date": "2016-08-16T09:01:47.513Z"
    },
    {
      "number": "3.0.2",
      "date": "2016-08-18T10:33:58.619Z"
    },
    {
      "number": "3.0.3",
      "date": "2016-08-18T10:37:37.667Z"
    },
    {
      "number": "3.0.4",
      "date": "2016-08-18T12:22:33.405Z"
    },
    {
      "number": "3.0.5",
      "date": "2016-08-24T20:03:46.018Z"
    },
    {
      "number": "3.0.6",
      "date": "2016-09-11T10:45:05.652Z"
    },
    {
      "number": "3.1.0",
      "date": "2016-09-14T11:19:07.208Z"
    },
    {
      "number": "3.1.1",
      "date": "2016-09-27T09:13:07.576Z"
    }
  ],
  "created": "2015-07-10T22:01:35.931Z",
  "modified": "2016-09-27T09:13:07.576Z",
  "lastPublisher": {
    "name": "inukshuk",
    "email": "sylvester@keil.or.at"
  },
  "owners": [
    {
      "name": "inukshuk",
      "email": "sylvester@keil.or.at"
    },
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    }
  ],
  "readme": "electron-mocha\n==============\n[![Build Status](https://travis-ci.org/jprichardson/electron-mocha.svg?branch=master)](https://travis-ci.org/jprichardson/electron-mocha)\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/github/jprichardson/electron-mocha?branch=master&svg=true)](https://ci.appveyor.com/project/jprichardson/electron-mocha)\n[![npm](https://img.shields.io/npm/v/electron-mocha.svg?maxAge=2592000)]()\n\nMocha testing in [Electron](http://electron.atom.io/). This project has\ntwo main value propositions:\n\n1. You can now easily test any JavaScript app in a real browser (Chromium)\nwithout hassling with PhantomJS or Webdriver.\n2. You can now easily test your Electron apps!\n\n\nInstall\n-------\n\n    npm i -g electron-mocha\n\n\nUsage\n-----\n\n### Install Electron\n\nFirst, you need to install Electron. You can either run:\n\n    npm i -g electron-prebuilt\n\nand then `electron` will be added to your path. Or, you\ncan download a version from https://github.com/atom/electron/releases and\nthen set an environment variable `ELECTRON_PATH` pointing to the binary.\nNote if you're using Mac OS X, the path would be to the actual executable\nand not the app directory e.g. `/Applications/Electron.app/Contents/MacOS/Electron`.\n\nYou should probably just install `electron-prebuilt` as it simplifies things.\n\n\n### Run Tests\n\n`electron-mocha` is almost a drop-in replacement for the regular `mocha` command.\nHere's the help output:\n\n```\n\nUsage: electron-mocha [options] [files]\n\n  Options:\n\n    -h, --help             output usage information\n    -V, --version          output the version number\n    -C, --no-colors        force disabling of colors\n    -R, --reporter <name>  specify the reporter to use\n    -S, --sort             sort test files\n    -b, --bail             bail after first test failure\n    -g, --grep <pattern>   only run tests matching <pattern>\n    -f, --fgrep <string>   only run tests containing <string>\n    -i, --invert           inverts --grep and --fgrep matches\n    -r, --require <name>   require the given module\n    -s, --slow <ms>        \"slow\" test threshold in milliseconds [75]\n    -t, --timeout <ms>     set test-case timeout in milliseconds [2000]\n    -u, --ui <name>        specify user-interface (bdd|tdd|exports)\n    --check-leaks          check for global variable leaks\n    --compilers            use the given module(s) to compile files\n    --debug                enable Electron debugger on port [5858]; for --renderer tests show window and dev-tools\n    --debug-brk            like --debug but pauses the script on the first line\n    --globals <names>      allow the given comma-delimited global [names]\n    --inline-diffs         display actual/expected differences inline within each string\n    --interfaces           display available interfaces\n    --no-timeouts          disables timeouts\n    --opts <path>          specify opts path [test/mocha.opts]\n    --recursive            include sub directories\n    --renderer             run tests in renderer process\n    --preload <name>       preload the given script in renderer process\n    --require-main <name>  load the given script in main process before executing tests\n\n```\n\nSo if you run:\n\n    electron-mocha ./tests\n\nThis runs the tests in the [`main`](https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md#main-process)\nprocess. The output that you could expect would be pretty similar to that of io.js with one exception,\nit supports all of Electron libraries since it's running\nin Electron! So you don't need to mock those libraries out anymore and can actually write tests to integrate with them.\n\nIf you run:\n\n    electron-mocha --renderer ./tests\n\nThis runs the tests in the [`renderer`](https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md#main-process).\nYes, this means that you have access to the entirety of the DOM, web storage, etc. This is because it's actually\nrunning in a [Chromium](https://en.wikipedia.org/wiki/Chromium_(web_browser)) process.\n\n### Using on Travis\n\nYour `.travis.yml` will need two extra lines of configuration to run this headless on Travis:\n\n```yaml\nbefore_script:\n  - export DISPLAY=:99.0; sh -e /etc/init.d/xvfb start\n```\n\n###  Debugger Support\n\nUse the `--debug` or `--debug-brk` options to enable Electron's debugger. When using `--renderer` this will open the test window and open the dev-tools: use that option in combination with a `debugger` statement anywhere in your tests or code to start debugging.\n\nRoadmap\n-------\n- Implement a way to allow tests to run in either `main`/`renderer` from within\nthe same test file for the purposes of integration testing.\n\n\nLicense\n-------\n\nMIT\n"
}