{
  "name": "gulp-awesome-electron",
  "version": "1.2.2",
  "description": "Fork from João's gulp-atom-electron - allows to integrade icons for win32 when building on the mac",
  "main": "src/index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "user": "ThorstenHans",
    "repo": "gulp-awesome-electron",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/ThorstenHans/gulp-awesome-electron/tarball/master",
    "clone_url": "https://github.com/ThorstenHans/gulp-awesome-electron",
    "https_url": "https://github.com/ThorstenHans/gulp-awesome-electron",
    "travis_url": "https://travis-ci.org/ThorstenHans/gulp-awesome-electron",
    "zip_url": "https://github.com/ThorstenHans/gulp-awesome-electron/archive/master.zip",
    "api_url": "https://api.github.com/repos/ThorstenHans/gulp-awesome-electron"
  },
  "keywords": [
    "gulpplugin",
    "atom",
    "shell",
    "atom-shell",
    "electron",
    "github"
  ],
  "author": {
    "name": "João Moreno"
  },
  "contributors": [
    {
      "name": "Thorsten Hans"
    }
  ],
  "license": "MIT",
  "homepage": "https://github.com/ThorstenHans/gulp-awesome-electron",
  "dependencies": {
    "event-stream": "^3.3.4",
    "github-releases": "^0.3.2",
    "gulp-filter": "^4.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-symdest": "^1.1.0",
    "gulp-vinyl-zip": "^1.4.0",
    "mkdirp": "^0.5.1",
    "object-assign": "^4.1.0",
    "plist": "^2.0.1",
    "progress": "^1.1.8",
    "rcedit": "^0.7.0",
    "rimraf": "^2.5.4",
    "semver": "^5.3.0",
    "temp": "^0.8.3",
    "vinyl": "^1.2.0",
    "vinyl-fs": "^2.4.3"
  },
  "devDependencies": {
    "gulp-buffer": "0.0.2",
    "gulp-vinyl-zip": "^1.4.0",
    "mocha": "^3.1.0"
  },
  "gitHead": "f0d58c7043fae8ed8b9c90160384b94e83c473f9",
  "_npmVersion": "3.8.6",
  "_nodeVersion": "6.0.0",
  "dist": {
    "shasum": "65897d1823c04b54dfb39ddf516ce13ea394a71d",
    "tarball": "http://registry.npmjs.org/gulp-awesome-electron/-/gulp-awesome-electron-1.2.2.tgz"
  },
  "versions": [
    {
      "number": "1.2.0",
      "date": "2016-07-19T08:09:17.916Z"
    },
    {
      "number": "1.2.1",
      "date": "2016-09-29T10:01:05.407Z"
    },
    {
      "number": "1.2.2",
      "date": "2016-09-29T10:11:39.350Z"
    }
  ],
  "created": "2016-07-19T08:09:17.916Z",
  "modified": "2016-09-29T10:11:39.350Z",
  "lastPublisher": {
    "name": "thorstenhans",
    "email": "thorsten.hans@gmail.com"
  },
  "owners": [
    {
      "name": "thorstenhans",
      "email": "thorsten.hans@gmail.com"
    }
  ],
  "readme": "# gulp-awesome-electron\n\n**This is a fork from `gulp-atom-electron`**\n\nUse this if you want to include icons for windows executables also from a mac.\n\n**Warning>** Wine is still required!\n\n### Installation\n\n```bash\nnpm install --save-dev https://github.com/ThorstenHans/gulp-awesome-electron\n```\n\n### Usage\n\nYou can use this module in two distinct ways: **to package your application** and/or\n**to download a version of Electron** to disk.\n\n#### How to Package Your Application\n\nYou should source your app's files using `gulp.src` and pipe them through\n`gulp-atom-electron`. The following task will create your application in\nthe `app` folder, ready for launch.\n\n```javascript\nvar gulp = require('gulp');\nvar symdest = require('gulp-symdest');\nvar electron = require('gulp-awesome-electron');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/**')\n\t\t.pipe(electron({ version: '0.34.1', platform: 'darwin' }))\n\t\t.pipe(symdest('app'));\n});\n```\n\n**Note:** It is important to use `gulp-symdest` only because of the OS X\nplatform. An application bundle has symlinks within and if you use `gulp.dest`\nto pipe the built app to disk, those will be missing. `symdest` will make\nsure symlinks are taken into account.\n\nFinally, you can always pipe it to a **zip archive** for easy distribution.\n[joaomoreno/gulp-vinyl-zip](https://github.com/joaomoreno/gulp-vinyl-zip) is recommended:\n\n```javascript\nvar gulp = require('gulp');\nvar zip = require('gulp-vinyl-zip');\nvar electron = require('gulp-awesome-electron');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/**')\n\t\t.pipe(electron({ version: '0.34.1', platform: 'darwin' }))\n\t\t.pipe(zip.dest('app-darwin.zip'));\n});\n```\n\n#### How to Download Electron\n\nThere's also a very handy export `electron.dest()` function that\nmakes sure you always have the exact version of Electron in a directory:\n\n```javascript\nvar gulp = require('gulp');\nvar electron = require('gulp-awesome-electron');\n\ngulp.task('default', function () {\n\treturn electron.dest('electron-build', { version: '0.34.1', platform: 'darwin' });\n});\n```\n\nThis will place a vanilla Electron build into the `electron-build` directory.\nIf you run it consecutively and it detects that the version in the destination directory\nis the intended one, it will end up in a no-op. Else it will download the provided version\nand replace it.\n\n\n### Options\n\nYou **must** provide the following options:\n- `version` - the [Electron version](https://github.com/atom/electron/releases) to use\n- `platform` - kind of OS (`darwin`, `linux`, `win32`)\n\nThe following options are **optional**:\n- `quiet` - suppress a progress bar when downloading\n- `cache` - provide a custom folder path where electron binaries will be cached. (Defaults to `os.tempDir/gulp-awesome-electron-cache`)\n- `token` - GitHub access token(to avoid request limit. You can grab it [here](https://github.com/settings/tokens))\n\n- `arch` - the processor architecture (`ia32`, `x64`)\n\n- **Windows**\n\t- `winIcon` - path to an `.ico` file\n\t- `companyName` - company name\n\t- `copyright` - copyright statement\n\n- **Darwin**\n\t- `darwinIcon` - path to an `.icns` file\n\t- `darwinBundleDocumentTypes` - ([reference](https://developer.apple.com/library/ios/documentation/filemanagement/conceptual/documentinteraction_topicsforios/Articles/RegisteringtheFileTypesYourAppSupports.html)) array of dictionaries, each containing the following structure:\n\t - `name` - the `CFBundleTypeName` value\n\t - `role` - the `CFBundleTypeRole` value\n\t - `ostypes` - the `CFBundleTypeOSTypes` value, a `string` array\n\t - `extensions` - the `CFBundleTypeExtensions` value, a `string` array of file extensions\n\t - `iconFile` - the `CFBundleTypeIconFile` value\n\n- **Linux**\n\t- `linuxExecutableName` - overwrite the name of the executable in Linux\n"
}