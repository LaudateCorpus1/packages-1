{
  "name": "nightmare-gremlins",
  "version": "1.0.2",
  "description": "Monkey testing via Gremlins.js for Nightmare.js",
  "main": "nightmare-gremlins.js",
  "scripts": {
    "build": "npm run lint && npm run transpile && npm run copy-gremlins",
    "copy-gremlins": "cp ./node_modules/gremlin-monkeys/gremlins.min.js ./",
    "lint": "eslint src",
    "test": "mocha -t 15000 tests/**/*.spec.js",
    "transpile": "babel src --out-dir ."
  },
  "repository": {
    "user": "camacho",
    "repo": "nightmare-gremlins",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/camacho/nightmare-gremlins/tarball/master",
    "clone_url": "https://github.com/camacho/nightmare-gremlins",
    "https_url": "https://github.com/camacho/nightmare-gremlins",
    "travis_url": "https://travis-ci.org/camacho/nightmare-gremlins",
    "zip_url": "https://github.com/camacho/nightmare-gremlins/archive/master.zip",
    "api_url": "https://api.github.com/repos/camacho/nightmare-gremlins"
  },
  "keywords": [
    "monkey",
    "nightmare",
    "electron",
    "gremlin"
  ],
  "author": {
    "name": "Patrick Camacho",
    "email": "patrick@daftdevelopers.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/camacho/nightmare-gremlins#readme",
  "devDependencies": {
    "babel-cli": "^6.9.0",
    "babel-eslint": "^6.0.4",
    "babel-plugin-transform-decorators-legacy": "1.3.4",
    "babel-plugin-transform-runtime": "6.9.0",
    "babel-preset-es2015": "6.9.0",
    "babel-preset-stage-0": "6.5.0",
    "chai": "^3.5.0",
    "eslint": "^2.10.2",
    "eslint-config-airbnb": "^9.0.1",
    "eslint-plugin-import": "^1.8.1",
    "eslint-plugin-jsx-a11y": "^1.2.2",
    "eslint-plugin-react": "^5.1.1",
    "mocha": "^2.5.3",
    "nightmare": "^2.5.0",
    "npm-check": "^5.2.1"
  },
  "dependencies": {
    "gremlin-monkeys": "^0.1.0"
  },
  "gitHead": "d89ecfda7511e9bd42e56c18c22c0cf401609a08",
  "_npmVersion": "3.8.9",
  "_nodeVersion": "6.2.0",
  "dist": {
    "shasum": "3a973e37d58e9b731d91181013e0374989783175",
    "tarball": "http://registry.npmjs.org/nightmare-gremlins/-/nightmare-gremlins-1.0.2.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-05-27T18:02:50.364Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-05-27T19:03:02.040Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-05-31T21:02:03.857Z"
    }
  ],
  "created": "2016-05-27T18:02:50.364Z",
  "modified": "2016-05-31T21:02:03.857Z",
  "lastPublisher": {
    "name": "camachgk",
    "email": "patrick@daftdevelopers.com"
  },
  "owners": [
    {
      "name": "camachgk",
      "email": "patrick@daftdevelopers.com"
    }
  ],
  "readme": "# Nightmare Gremlins\n[Gremlin.js](https://github.com/marmelab/gremlins.js) actions for [Nightmare.js](https://github.com/segmentio/nightmare) to allow for monkey testing\n\n![Running Gremlins in Nightmare](/example.gif)\n\n## Introduction\nNightmare Gremlins is an action and collection of tasks for Nightmare.js that allows for monkey testing via the [Electron](http://electron.atom.io/) app.\n\nThere are two ways to use this npm:\n\n1) Singular action that extends the Nightmare prototype via `Nightmare.action`\n\n2) Series of individual tasks to be consumed by a Nightmare instance via `nightmare.use`.\n\n## Singular Action\n\nThe Nightmare prototype can be extended by using the [`Nightmare.action`](https://github.com/segmentio/nightmare#extending-nightmare) method:\n\n```js\nimport Nightmare from 'nightmare';\nimport gremlins from 'nightmare-gremlins';\n\nNightmare.action('gremlins', gremlins);\nconst nightmare = Nightmare();\n\nconst gremlinOptions = {\n  seed: Date.now(),\n  unleash: {\n    nb: 10000,\n  },\n  wait: {\n    maxErrors: 100,\n    maxTime: 10 * 1000,\n  },\n};\n\nnightmare\n  .goto('https://google.com')\n  .gremlins(gremlinOptions) // Run gremlins on the page\n  .then((errors) => { console.log('Page errors:\\n', errors); });\n\n```\n\n## Series of tasks\n\nAlternatively, Nightmare Gremlins also exposes a series of individual functions that can be used on an instance of Nightmare for custom composing via [`.use`](https://github.com/segmentio/nightmare#useplugin):\n\n```js\nimport Nightmare from 'nightmare';\nimport * as gremlins from 'nightmare-gremlins';\n\nNightmare.action('gremlins', gremlins);\nconst nightmare = Nightmare();\n\nconst gremlinOptions = {\n  seed: Date.now(),\n  unleash: {\n    nb: 10000,\n  },\n  wait: {\n    maxErrors: 100,\n    maxTime: 10 * 1000,\n  },\n};\n\nconst errors = [];\n\nnightmare\n  .use(gremlins.recordErrors(errors))\n  .use(gremlins.injectGremlins())\n  .use(gremlins.createHorde())\n  .use(gremlins.seedHorde(gremlinOptions.seed))\n  .use(gremlins.unleashHorde(gremlinOptions.unleash))\n  .use(gremlins.waitForGremlins(errors, gremlinOptions.wait))\n  .then((errors) => { console.log('Page errors:\\n', errors); });\n```\n\nBy using a series of tasks, it is possible to add individual steps or functionality:\n\n```js\n...\n\nconst errors = [];\n\nnightmare\n  .use(gremlins.recordErrors(errors))\n  .use(gremlins.injectGremlins())\n  .evaluate((seed) => {\n    const horde = window.gremlins.createHorde();\n    horde.seed(seed);\n    horde.unleash();\n  }, Date.now())\n  .use(gremlins.waitForGremlins(errors, gremlinOptions.wait))\n  .then(() => { console.log('Page errors:\\n', errors); });\n```\n\n### Available Actions\n\nNightmare Gremlins exposes the following tasks (with **arguments** and *defaults*):\n\n* recordErrors(**Array** - *[]*) - adds a listener to the page that will look for all errors and push the error message and stack onto the array passed in\n* injectGremlins - injects a specially modified version of the gremlins.js script that supports keyboard entry on Electron\n* createHorde - runs a script on the page that creates a horde under the `window.horde` namespace\n* seedHorde(**Number|String** - *Date.now()*) - [seeds the horde](https://github.com/marmelab/gremlins.js/blob/master/README.md#seeding-the-randomizer) with a specific number to allow for behavior replication\n* unleashHorde(**Object** - *{}*) - runs a script on the page that unleashes the horde with the [options](https://github.com/marmelab/gremlins.js#basic-usage) argument having been JSON serialized and deserialized to be passed to the browser\n* waitForGremlins(**Object** - *{maxTime: 10000, maxErrors: 100}*) - a waiting function that looks for 1 of 2 conditions to be met: time passed is longer than `maxTime` or the number of errors recorded is greater than `maxErrors`\n\n### Bonus Action\n\nNightmare Gremlins includes an additional \"super task\", that is the same as the action used to extend the Nightmare prototype, but intended to be used on an instance instead:\n\n```js\nimport Nightmare from 'nightmare';\nimport {unleashGremlins} from 'nightmare-gremlins';\n\nconst nightmare = Nightmare();\n\nconst gremlinOptions = {\n  seed: Date.now(),\n  unleash: {\n    nb: 10000,\n  },\n  wait: {\n    maxErrors: 100,\n    maxTime: 10 * 1000,\n  },\n};\n\nnightmare\n  .use(unleashGremlins(gremlinOptions))\n  .then((errors) => { console.log('Page errors:\\n', errors); });\n```\n"
}