{
  "name": "patchbay",
  "description": "a pluggable patchwork",
  "version": "1.7.3",
  "homepage": "https://github.com/dominictarr/patchbay",
  "repository": {
    "user": "dominictarr",
    "repo": "patchbay",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/dominictarr/patchbay/tarball/master",
    "clone_url": "https://github.com/dominictarr/patchbay",
    "https_url": "https://github.com/dominictarr/patchbay",
    "travis_url": "https://travis-ci.org/dominictarr/patchbay",
    "zip_url": "https://github.com/dominictarr/patchbay/archive/master.zip",
    "api_url": "https://api.github.com/repos/dominictarr/patchbay"
  },
  "dependencies": {
    "cont": "^1.0.3",
    "depject": "^0.1.0",
    "hyperlightbox": "^0.1.0",
    "hyperscript": "^1.4.7",
    "hypertabs": "^1.2.0",
    "mime-types": "^2.1.11",
    "moment": "^2.13.0",
    "multiserver": "^1.1.3",
    "pull-cat": "^1.1.9",
    "pull-next": "0.0.0",
    "pull-paramap": "^1.1.6",
    "pull-reconnect": "0.0.1",
    "pull-scroll": "^0.2.0",
    "pull-stream": "^3.3.2",
    "split-buffer": "^1.0.0",
    "ssb-avatar": "0.0.2",
    "ssb-client": "^4.0.0",
    "ssb-feed": "^2.1.3",
    "ssb-keys": "^5.1.0",
    "ssb-markdown": "^3.0.0",
    "ssb-mentions": "^0.1.0",
    "ssb-sort": "0.0.0",
    "suggest-box": "^2.0.0",
    "text-node-searcher": "^1.1.0"
  },
  "devDependencies": {
    "brfs": "^1.4.3",
    "indexhtmlify": "^1.2.1"
  },
  "scripts": {
    "build": "node build.js > modules/index.js; browserify -t brfs index.js | indexhtmlify > test.html",
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "gitHead": "26c51d9bb5bfa9290085f0bc5f03055e6a881167",
  "_npmVersion": "3.8.9",
  "_nodeVersion": "6.2.0",
  "dist": {
    "shasum": "c642b260cbc361a58346204a092a7ed9998986eb",
    "tarball": "http://registry.npmjs.org/patchbay/-/patchbay-1.7.3.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2014-09-15T06:18:32.976Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-05-29T03:25:17.331Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-05-29T12:53:23.508Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-06-11T00:37:28.877Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-06-11T00:53:15.311Z"
    },
    {
      "number": "1.0.4",
      "date": "2016-06-20T23:52:46.547Z"
    },
    {
      "number": "1.0.5",
      "date": "2016-06-21T04:21:25.487Z"
    },
    {
      "number": "1.0.6",
      "date": "2016-06-23T03:11:00.828Z"
    },
    {
      "number": "1.0.7",
      "date": "2016-06-23T11:39:34.361Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-06-23T12:34:55.631Z"
    },
    {
      "number": "1.1.1",
      "date": "2016-06-26T02:21:14.908Z"
    },
    {
      "number": "1.1.2",
      "date": "2016-06-28T00:23:22.076Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-06-30T01:18:34.361Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-06-30T08:29:44.761Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-06-30T08:39:50.261Z"
    },
    {
      "number": "1.4.0",
      "date": "2016-06-30T21:52:21.165Z"
    },
    {
      "number": "1.4.1",
      "date": "2016-07-01T00:44:01.496Z"
    },
    {
      "number": "1.5.0",
      "date": "2016-07-01T03:01:38.974Z"
    },
    {
      "number": "1.5.1",
      "date": "2016-07-02T01:32:20.345Z"
    },
    {
      "number": "1.5.2",
      "date": "2016-07-02T03:33:03.933Z"
    },
    {
      "number": "1.5.3",
      "date": "2016-07-04T22:58:00.289Z"
    },
    {
      "number": "1.6.0",
      "date": "2016-07-07T02:51:22.893Z"
    },
    {
      "number": "1.7.0",
      "date": "2016-07-10T23:51:52.158Z"
    },
    {
      "number": "1.7.1",
      "date": "2016-07-11T23:33:47.270Z"
    },
    {
      "number": "1.7.2",
      "date": "2016-07-12T07:15:13.286Z"
    },
    {
      "number": "1.7.3",
      "date": "2016-07-13T03:33:29.818Z"
    }
  ],
  "created": "2014-09-15T06:18:32.976Z",
  "modified": "2016-07-13T03:33:29.818Z",
  "lastPublisher": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "owners": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "readme": "# patchbay\n\nPrototype of a pluggable patchwork.\n\nPatchbay uses [depject](https://npm.im/depject) to provide\na highly composable api. all scripts in the `./modules` directory\nare loaded and combined using [depject](https://npm.im/depject)\n\nThis makes in very easy to create say, a renderer for a new message type,\nor switch to a different method for choosing user names.\n\nCurrently, this is a proof of concept, there is a basic way to switch\nbetween tabs, and you can view the main log, user feeds, or threads.\nThis should obviously be improved with a module that can\nscroll properly scoll through a feed.\n\nNo \"write\" methods have been implemented yet.\n\n## overview\n\nCurrently, the main module is `tabs.js` which plugs into\nthe `app` socket, and provides the `screen_view` socket.\nwhen you click a link, `screen_view` socket with the link path,\nwhich returns a html element which becomes a new tab.\n\ncurrently, `main.js` `feed.js` and `thread.js` plug into `screen_view`\nand then in turn, call the `message_render` socket, which calls\n`message_content` `avatar` `message_meta` `message_action` and `message_link`.\n\n`avatar.js` plugs into `avatar`, and provides the `avatar_name` socket.\nit just returns a link to the public key, labled with what it gets back\nfrom `avatar_name` socket. this is in turn provided by the `names.js` module.\n\nTwo modules plug into `message_content`, `post.js` and `like.js`\n\nNo plugs into the `message_action` socket have been implemented yet,\nbut whatever is returned from this will inserted into the dom at the bottom\nof the message (by the `message` module) so this would be the plug to\nuse for implementing a like/+1/fav/dig/yup button, or a reply button.\n\n## other ideas\n\nEditable messages would probably need to plug into several sockets.\nfirstly they would render content differently, so probably use the `message_content` socket.\nsecondly they would need to show edit state, which would probably use `message_meta`\nand finially they'd need to provide the ability to edit the message!\nthat would use `message_action`\n\nImplementing a \"events\" message type would be easy, just implement another\nplug for `message_content`, that renders events.\n\nInstead of reading all the modules in a directory, it would be better\nto load these from configuration. Then, modules could be distributed\nas browserify bundles, and distributed over ssb. Configuration\ncould just be a list of hashes - but you could also disable specific\nsockets or plugs if necessary (leaving them unconnected).\n\nThen, that configuration could be shared over ssb!\n\n## Running\n\n```\nnpm install scuttlebot@latest -g\n# make sure you have secure-scuttlebutt@15.2.0\nnpm ls secure-scuttlebutt -g\nsbot server\n# OR, install and run patchwork. (must have at least >= 2.8)\n\n# then in another tab (these must be two separate commands)\nsbot plugins.install ssb-links\nsbot plugins.install ssb-query\n# restart sbot server (go back to previous tab and kill it)\n```\nnow clone and run patchboard.\n```\ngit clone https://github.com/dominictarr/patchbay.git\ncd patchbay\nnpm install electro electron-prebuilt -g\n# for node@6, you'll currently need to use js crypto.\nCHLORIDE_JS=1 electro index.js\n\n# otherwise\nelectro index.js\n```\n\n\n## License\n\nMIT\n\n\n\n"
}