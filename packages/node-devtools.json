{
  "name": "node-devtools",
  "author": {
    "name": "Winter Liu"
  },
  "version": "0.3.3",
  "description": "The simplest way to debug node.js with Chrome DevTools.",
  "homepage": "https://github.com/winter95/node-devtools",
  "bin": {
    "node-devtools": "./bin/node-devtools.js"
  },
  "repository": {
    "user": "winter95",
    "repo": "node-devtools",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/winter95/node-devtools/tarball/master",
    "clone_url": "https://github.com/winter95/node-devtools",
    "https_url": "https://github.com/winter95/node-devtools",
    "travis_url": "https://travis-ci.org/winter95/node-devtools",
    "zip_url": "https://github.com/winter95/node-devtools/archive/master.zip",
    "api_url": "https://api.github.com/repos/winter95/node-devtools"
  },
  "keywords": [
    "node",
    "nodejs",
    "profiler",
    "debug",
    "chrome",
    "devtools"
  ],
  "license": "MIT",
  "dependencies": {
    "electron": "^1.4.3",
    "minimist": "^1.2.0"
  },
  "gitHead": "73fd3e3e77f5c2aff4461bf8cfc816b32163ad7f",
  "scripts": {},
  "_npmVersion": "3.10.8",
  "_nodeVersion": "6.9.0",
  "dist": {
    "shasum": "1532eae89ad1a0358d553e842ca6b43233c11a0c",
    "tarball": "http://registry.npmjs.org/node-devtools/-/node-devtools-0.3.3.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-10-12T17:34:54.893Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-10-22T14:02:29.531Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-10-22T14:12:06.623Z"
    },
    {
      "number": "0.2.2",
      "date": "2016-10-22T14:28:09.844Z"
    },
    {
      "number": "0.2.3",
      "date": "2016-10-23T06:13:12.292Z"
    },
    {
      "number": "0.2.4",
      "date": "2016-10-23T16:36:03.428Z"
    },
    {
      "number": "0.2.5",
      "date": "2016-10-24T04:34:15.910Z"
    },
    {
      "number": "0.2.6",
      "date": "2016-10-24T06:27:54.592Z"
    },
    {
      "number": "0.2.8",
      "date": "2016-10-25T11:10:30.299Z"
    },
    {
      "number": "0.2.9",
      "date": "2016-10-25T11:13:16.995Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-10-28T11:42:42.993Z"
    },
    {
      "number": "0.3.2",
      "date": "2016-10-29T14:35:42.210Z"
    },
    {
      "number": "0.3.3",
      "date": "2016-10-29T17:38:01.745Z"
    }
  ],
  "created": "2016-10-12T17:34:54.893Z",
  "modified": "2016-10-29T17:38:01.745Z",
  "lastPublisher": {
    "name": "winterliu",
    "email": "laoyiu@gmail.com"
  },
  "owners": [
    {
      "name": "winterliu",
      "email": "laoyiu@gmail.com"
    }
  ],
  "readme": "# node-devtools\r\n\r\n[中文版在这里](./README.zh_cn.md)\r\n\r\nChrome devtools is a sharp weapon in web development and javascript debugging, but it should't only be used on the browser side, it can also play an important role with node.js.\r\n\r\nNow, with node-devtools（built on [electron](http://electron.atom.io/)）, debugging your node work with chrome devtools can be quite easy.\r\n\r\nHere is a javascript file named `index.js`:\r\n\r\n```js\r\nconsole.log(require('http'));\r\n```\r\n\r\nThen open a command line and type:\r\n\r\n```\r\n$ node-devtools index.js\r\n```\r\n\r\nAnd then, chrome devtools will be presented to you:\r\n\r\n![demo](./img/demo.jpg)\r\n\r\nWhen devtools opend, you can push `ctrl+r` or `F5` to reload current script.\r\n\r\n## Install\r\n\r\nWith npm:\r\n\r\n```\r\n$ npm install node-devtools -g\r\n```\r\n\r\n## Usage\r\n\r\nThe usage is highly consistent with node:\r\n\r\n```\r\n$ node-devtools [options] [v8 options] [entry script] [arguments]\r\n```\r\n\r\nYou can execute without `entry script` and `arguments` to start the REPL.\r\n\r\n### Options\r\n\r\n#### -v, --version\r\n\r\nPrint versions of node-devtools and its underlying tools.\r\n\r\n#### -e, --electron\r\n\r\nNode-devtools will download and use the latest version of electron automatically. If you want to use a different version, you should download it and specify the filename of your electron binary file by this option.\r\n\r\nHere is a table mapping node.js versions to electron versions:\r\n\r\n| Node.js Version | Electron Version |\r\n| :----- | :----- |\r\n| 6.5.0  | 1.4.0  |\r\n| 6.3.0  | 1.3.0  |\r\n| 6.1.0  | 1.1.0  |\r\n| 5.10.0 | 0.37.5 |\r\n| 5.1.1  | 0.36.0 |\r\n| 4.1.1  | 0.34.0 |\r\n\r\n#### -w, --watch\r\n\r\nWatch file or directory, auto refresh when they have changed, default is 0.\r\n\r\n- 0: do not watch.\r\n- 1: watch the entry file.\r\n- 2: watch the directory（and all its subdirectories）of the entry file.\r\n- a string: specify a file or directory to be watched.\r\n\r\n#### -r, --reserve\r\n\r\nBy default, node-devtools will try to trim all global variables which only exists on browser side, you can use `-r` flag to reserve them.\r\n\r\nOr just reserve some of them, separate them by spaces like `node-devtools --reserve=\"alert confirm\" index.js`.\r\n\r\nNotice `window, document, location, top, caches` are read-only and non-configurable, these global variables cannot be trimmed.\r\n\r\n### V8 options\r\n\r\nAdd v8 flags as you do with node, for example, `node-devtools --harmony index.js`.\r\n\r\nAn unofficial, community-maintained list of options and their effects is available [here](https://github.com/thlorenz/v8-flags/blob/master/flags-0.11.md).\r\n\r\n## Modules\r\n\r\nThe require strategy has been shimmed, so whether a module was installed locally or globally, if it can be accessed when you run your code with node, it is sure that it can also be accessed when using node-devtools.\r\n\r\n## Differences\r\n\r\nThere is a few differences between running your code with node-devtools and directly with node.\r\n\r\n### global\r\n\r\nThe following browser-side global variables cannot be removed from `global`:\r\n\r\n- `window, document, location, top, caches` are read-only and non-configurable.\r\n\r\n### process\r\n\r\nBecause the process was created by electron instead of node, several information may be different. For example, `process.title, process.argv0, process.release, process.versions`.\r\n\r\nSpecifically, `process.argv`, `process.execArgv` and `process.execPath` have no difference from using node:\r\n\r\n```\r\n$ node-devtools -w=1 --harmony test.js arg1 arg2\r\n```\r\n\r\n```js\r\n// test.js\r\nconsole.log(process.argv); // ['path/to/node', 'path/to/test.js', 'arg1', 'arg2']\r\nconsole.log(process.execArgv); // ['-w=1', '--harmony']\r\nconsole.log(process.execPath); // path/to/node\r\n```\r\n\r\nIf your code is running with node-devtools, `process.devtools` will be `true`, this can be useful in some cases:\r\n\r\n```js\r\nif (process.devtools) console.profile('go');\r\ndoSomeThings();\r\nif (process.devtools) console.profileEnd('go');\r\n```\r\n\r\n## Sublime Text Package\r\n\r\nThere is also a [Sublime Text package](https://github.com/winter95/node-devtools-sublime) for node-devtools.\r\n\r\nWith it, you can execute your script with node-devtools just like this:\r\n\r\n![sublime](./img/sublime.jpg)\r\n\r\n\r\n\r\n\r\n\r\n"
}