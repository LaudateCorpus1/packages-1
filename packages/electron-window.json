{
  "name": "electron-window",
  "version": "0.8.1",
  "description": "Convenience methods for Electron windows.",
  "main": "./lib/index.js",
  "scripts": {
    "test": "standard && find ./lib -name *.test.js | xargs mocha"
  },
  "repository": {
    "user": "jprichardson",
    "repo": "electron-window",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/jprichardson/electron-window/tarball/master",
    "clone_url": "https://github.com/jprichardson/electron-window",
    "https_url": "https://github.com/jprichardson/electron-window",
    "travis_url": "https://travis-ci.org/jprichardson/electron-window",
    "zip_url": "https://github.com/jprichardson/electron-window/archive/master.zip",
    "api_url": "https://api.github.com/repos/jprichardson/electron-window"
  },
  "keywords": [
    "window",
    "atom",
    "atom-shell",
    "electron",
    "gui",
    "electron-component"
  ],
  "author": {
    "name": "JP Richardson"
  },
  "license": "MIT",
  "homepage": "https://github.com/jprichardson/electron-window",
  "devDependencies": {
    "mocha": "2.x",
    "proxyquire": "^1.6.0",
    "standard": "^6.0.8",
    "stubo": "^0.1.0"
  },
  "dependencies": {
    "is-electron-renderer": "^2.0.0"
  },
  "gitHead": "26fcfcbab7f54d7ca85cdc10d7a591aa321680bb",
  "_npmVersion": "3.8.6",
  "_nodeVersion": "6.1.0",
  "dist": {
    "shasum": "16ca187eb4870b0679274fc8299c5960e6ab2c5e",
    "tarball": "http://registry.npmjs.org/electron-window/-/electron-window-0.8.1.tgz"
  },
  "stars": 5,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-05-22T15:11:42.898Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-05-22T15:18:35.789Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-05-22T16:55:23.246Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-05-22T16:59:23.322Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-05-27T22:31:31.511Z"
    },
    {
      "number": "0.4.0",
      "date": "2015-07-10T00:36:44.544Z"
    },
    {
      "number": "0.4.1",
      "date": "2015-07-10T08:43:37.730Z"
    },
    {
      "number": "0.4.2",
      "date": "2015-07-10T09:30:52.476Z"
    },
    {
      "number": "0.4.3",
      "date": "2015-07-13T09:54:15.308Z"
    },
    {
      "number": "0.5.0",
      "date": "2015-07-15T10:42:36.058Z"
    },
    {
      "number": "0.6.0",
      "date": "2015-08-27T19:03:01.234Z"
    },
    {
      "number": "0.6.1",
      "date": "2015-12-11T03:26:34.090Z"
    },
    {
      "number": "0.6.2",
      "date": "2015-12-11T12:12:29.971Z"
    },
    {
      "number": "0.6.3",
      "date": "2016-04-06T11:23:24.149Z"
    },
    {
      "number": "0.6.4",
      "date": "2016-04-08T03:15:01.955Z"
    },
    {
      "number": "0.7.0",
      "date": "2016-05-06T11:11:35.819Z"
    },
    {
      "number": "0.8.0",
      "date": "2016-05-11T13:36:53.266Z"
    },
    {
      "number": "0.8.1",
      "date": "2016-05-14T17:05:07.944Z"
    }
  ],
  "created": "2015-05-22T15:11:42.898Z",
  "modified": "2016-05-14T17:05:07.944Z",
  "lastPublisher": {
    "name": "jprichardson",
    "email": "jprichardson@gmail.com"
  },
  "owners": [
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    }
  ],
  "readme": "electron-window\n===============\n\nConvenience methods for Electron windows.\n\n\nInstallation\n------------\n\n    npm i --save electron-window\n\n\nUsage\n-----\n\n### TL;DR:\n\n`electron-window` converts this:\n\n```js\nconst { \n  app, \n  BrowserWindow \n} = require('electron')\n\nconst path = require('path')\nconst url = require('url')\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the javascript object is GCed.\nlet mainWindow = null\n\napp.on('ready', () => {\n  mainWindow = new BrowserWindow({ width: 1000, height: 400, show: false })\n\n  const someArgs = { data: 'hi' }\n  const indexPath = path.resolve(__dirname, '..', 'weird-location', 'index.html')\n  const indexUrl = url.format({\n    protocol: 'file',\n    pathname: indexPath,\n    slashes: true,\n    hash: encodeURIComponent(JSON.stringify(someArgs))\n  })\n\n  mainWindow.on('closed', () => {\n    mainWindow = null\n  })\n\n  mainWindow.webContents.on('did-finish-load', () => {\n    mainWindow.show()\n    console.log('window is now visible!')\n  })\n\n  mainWindow.loadUrl(indexUrl)\n})\n```\n\nto this:\n\n```js\nconst { app } = require('electron')\nconst path = require('path')\nconst window = require('electron-window')\n\napp.on('ready', () => {\n  const mainWindow = window.createWindow({ width: 1000, height: 400 })\n  const someArgs = { data: 'hi' }\n  const indexPath = path.resolve(__dirname, '..', 'weird-location', 'index.html')\n  \n  mainWindow.showUrl(indexPath, someArgs, () => {\n    console.log('window is now visible!')\n  })\n})\n```\n\n\n### API Methods\n\n#### createWindow(options)\n\nClass method that creates a new [BrowserWindow](https://github.com/atom/electron/blob/master/docs/api/browser-window.md) with\nthe following default `options`: `{ show: false }`. No need to worry about keeping a global reference\nto prevent garbage collection, this is handled for you.\n\n\n#### parseArgs()\n\nInstance method to parse arguments in window. You would only need to call from your renderer preload script if you pass in\n[`preload`](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions).\n\n\n#### showUrl(httpOrFileUrl, [argsForRenderer], [callback])\n\nInstance method that shows the url. When the url is finished loading, the callback is returned. If the optional `argsForRenderer` is set\nthen `__args__` will be a global object for the page in the renderer process. This is a convenient way to pass\narguments from the main process to the renderer process.\n\n\n#### unref()\n\nInstance method to call if you ever want to remove the global reference. Should only need to be called if\n[`destroy()`](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#browserwindowdestroy) is ever called.\nMost likely, you won't need to use this.\n\n\n### API Properties\n\n#### windows\n\nClass property to get a reference to all windows created and their ids. This is in the form of an object where the keys are window ids, and the values are instances of `BrowserWindow`.\n\n\n\n### Example\n\n**main process**\n\n```js\nconst window = require('electron-window')\n\nconst windowOptions = {\n  width: 1000,\n  height: 400\n}\n\nconst mainWindow = window.createWindow(windowOptions)\n\n// can access at window.__args__ from scripts\n// ran from index.html\nconst args = {\n  data: 'some secret data'\n}\n\nmainWindow.showUrl('index.html', args, () => {\n  console.log('the window should be showing with the contents of the URL now')\n})\n```\n\n**renderer process**\n\n```js\n// only call if `preload` is set in `windowOptions`\nrequire('electron-window').parseArgs()\n\nconsole.log(window.__args__)\n// => Object {data: \"some secret data\"}\n```\n\n\nLicense\n-------\n\nMIT\n\n\n"
}