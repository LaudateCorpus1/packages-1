{
  "name": "norm-sql",
  "version": "1.3.0",
  "description": "A SQL builder that doesn't force its opinions on you. Paste SQL together, but with flexibility.",
  "main": "norm.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "user": "william-silversmith",
    "repo": "norm",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/william-silversmith/norm/tarball/master",
    "clone_url": "https://github.com/william-silversmith/norm",
    "https_url": "https://github.com/william-silversmith/norm",
    "travis_url": "https://travis-ci.org/william-silversmith/norm",
    "zip_url": "https://github.com/william-silversmith/norm/archive/master.zip",
    "api_url": "https://api.github.com/repos/william-silversmith/norm"
  },
  "keywords": [
    "orm",
    "sql",
    "sql-builder",
    "xor",
    "mysql",
    "postgres"
  ],
  "author": {
    "name": "William Silversmith"
  },
  "license": "ISC",
  "homepage": "https://github.com/william-silversmith/norm",
  "devDependencies": {
    "mocha": "^2.2.1",
    "should": "^5.2.0"
  },
  "dependencies": {},
  "gitHead": "5404d4da5dbb5d756ee2b0fcb93cb61981846fc0",
  "_npmVersion": "2.14.4",
  "_nodeVersion": "4.1.1",
  "dist": {
    "shasum": "d5f85c12498bb17ef6c440f4a35804adc5aca186",
    "tarball": "http://registry.npmjs.org/norm-sql/-/norm-sql-1.3.0.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-03-19T04:28:39.945Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-03-22T01:32:30.876Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-04-10T15:23:13.274Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-04-10T15:39:02.837Z"
    },
    {
      "number": "1.1.2",
      "date": "2015-04-12T17:14:46.034Z"
    },
    {
      "number": "1.2.0",
      "date": "2015-04-15T00:17:41.821Z"
    },
    {
      "number": "1.2.1",
      "date": "2015-04-15T00:44:38.347Z"
    },
    {
      "number": "1.3.0",
      "date": "2015-09-30T03:12:54.583Z"
    }
  ],
  "created": "2015-03-19T04:28:39.945Z",
  "modified": "2015-09-30T03:12:54.583Z",
  "lastPublisher": {
    "name": "wms",
    "email": "william.silversmith+npm@gmail.com"
  },
  "owners": [
    {
      "name": "wms",
      "email": "william.silversmith+npm@gmail.com"
    }
  ],
  "readme": "[![Build Status](https://travis-ci.org/william-silversmith/norm.svg?branch=master)](https://travis-ci.org/william-silversmith/norm)\n\n# norm\nA SQL builder that doesn't force its opinions on you. Just pastes SQL together in a constructive manner.\n\nHow will this make your life better? If you've never used a SQL builder:\n\n- SQL objects are composable like functions\n- SQL looks much more natural inside of your code\n- Binds tracking is handled for you\n- Arrays of values are gracefully handled\n\nWhat's different about norm-sql?\n\n- No setting up copies of schemas in javascript, just start writing SQL\n- Expressive logical operators that are simple to use\n- Easy to adapt to most SQL engines\n- Small module size - no mysteries!\n- No production dependencies \n- Supports MySQL/MariaDB/Oracle binds (?) and Postgres prepared statements ($1)\n\nCheck out the examples below to get a handle on what this looks like in practice.\n\n# Installation\n\n`npm install norm-sql`\n\n# Examples\n\n## Simple Select Example\n\nSupported Clauses: select, distinct, from, where, groupby, having, orderby, limit\n\n    var norm = require('norm-sql');\n    \n    var query = norm()\n    \t.select(\"users.id\", \"users.username\")\n    \t.from(\"users\")\n    \t.where(\n\t\t\t[ \"users.powerlevel >= ?\", 9000 ],\n\t\t\t\"users.created >= NOW() - INTERVAL 1000 YEAR\"\n    \t)\n    \t.limit(1);\n\n\tconsole.log(query.sql());\n\tconsole.log(query.binds());\n\n    Output:\n\t>> 'select users.id, users.username from users where users.powerlevel >= ? limit 1'\n\t>> [ 9000 ]\n\n## Subquery Example\n\n\tvar norm = require('norm-sql');\n\n\tvar national_query = norm()\n\t\t.select(\"sum(nations.gdp)\")\n\t\t.from(\"nations\")\n\t\t.where(\n\t\t\t\"nations.planetid = planets.id\",\n\t\t\t\"nations.deleted is null\"\n\t\t);\n\n\tvar planetary_query = norm()\n\t\t\t.select(\n\t\t\t\t\"planets.id\", \n\t\t\t\t\"planets.name\",\n\t\t\t\t[ \"(?) GPP\", national_query ]\n\t\t\t)\n\t\t\t.from(\"planets\")\n\t\t\t.where(\n\t\t\t\t\"GPP > 0\",\n\t\t\t\t[ \"planets.au < ?\", 50 ]\n\t\t\t);\n\n\tconsole.log(planetary_query.sql());\n\tconsole.log(planetary_query.binds());\n\n\tOutput:\n\t>> 'select planets.id, planets.name, (select sum(nations.gdp) from nations where nations.planetid = planets.id and nations.deleted is null) GPP from planets where GPP > 0 and planets.au < ?'\n\t>> [ 50 ]\n\n## Constructing Similar Queries\n\nStart with the planetary_query from the last example:\n\n\tvar real_planetary_query = planetary_query.clone().where(\"planets.deleted is null\");\n\n\tconsole.log(planetary_query.sql());\n\n\tOutput:\n\t>> 'select planets.id, planets.name, (select sum(nations.gdp) from nations where nations.planetid = planets.id and nations.deleted is null) GPP from planets where GPP > 0 and planets.amu < ? and planets.deleted is null'\n\nSorry Pluto....\n\n## Array Binds\n\nHere's a feature that's bizzarely missing in a variety of SQL programming contexts: Array Binds.\n\t\n\tvar norm = require('norm-sql');\n\n\tvar query = norm()\n\t\t.select(\n\t\t\t\"meme.id\"\n\t\t)\n\t\t.from(\n\t\t\t\"meme\"\n\t\t)\n\t\t.where(\n\t\t\t[\"meme.name in (?)\", [ 'doge', 'nyan', 'ggg' ]]\n\t\t);\n\n\tconsole.log(query.sql());\n\tconsole.log(query.binds());\n\n\tOutput:\n\t>> 'select meme.id from meme where meme.name in (?,?,?)'\n\t>> [ 'doge', 'nyan', 'ggg' ]\n\n## Synthesizing Logical Expressions\n\nSupported Operators: and, or, nand, nor, xor\n\nBy default, clauses like where and having use the and conjunction as it is the most common filter. However, sometimes you want a more complex query.\n\n\tvar norm = require('norm-sql');\n\n\tvar query = norm().select(\n\t\t\t\"breakfasts.id\",\n\t\t\t\"breakfasts.date\",\n\t\t\t\"breakfasts.type\"\n\t\t)\n\t\t.from(\"breakfasts\")\n\t\t.where(\n\t\t\t\"breakfasts.date > NOW() - INTERVAL 1 YEAR\",\n\t\t\tnorm.or(\n\t\t\t\t[ \"breakfasts.type in (?, ?)\", 'brunch', 'standard'],\n\t\t\t\t[ \"breakfasts.friend_count > ?\", 20 ]\n\t\t\t)\n\t\t);\n\n\tconsole.log(query.sql());\n\tconsole.log(query.binds());\n\n\tOutput:\n\t>> 'select breakfasts.id, breakfasts.date, breakfasts.type from breakfasts where breakfasts.date > NOW() - INTERVAL 1 YEAR and (breakfasts.type in (?, ?) or breakfasts.friend_count > ?)'\n\t>> [ 'brunch', 'standard', 20 ]\n\nNote: For more than two inputs, xor is defined as one and only one as opposed to nested binary xors as this is probably more useful.\n\n## Update \n\nSupported Clauses: update, set, where, orderby, limit\n\n\tvar norm = require('norm-sql');\n\n\tvar query = norm()\n\t\t.update(\"superheros\")\n\t\t.set([\"superheros.real_first_name = ?\", 'bruce'])\n\t\t.where([\"superheros.id = ?\", 1])\n\t\t.limit(1);\n\n\tconsole.log(query.sql());\n\t\n\tOutput:\n\t>> 'update superheros set superheros.real_first_name = ? where superheros.id = ?'\n\n## Insert \n\nSupported Clauses: insert, values, select\n\n\tvar norm = require('norm-sql');\n\n\tvar values_query_array = norm()\n\t\t.insert(\"superweapons (name)\")\n\t\t.values(['Death Star'], ['World Devastators']);\n\n\tconsole.log(values_query_array.sql())\n\tconsole.log(values_query_array.binds())\n\n\t>> 'insert into superweapons (name) values (?),(?)'\n\t>> [ 'Death Star', 'World Devastators' ]\n\n\tvar values_query_hashes = norm()\n\t\t.insert(\"superweapons\")\n\t\t.values(\n\t\t\t{ name: \"Death Star\", date: \"A Long Time Ago\" }, \n\t\t\t{ name: \"World Devastators\", date: \"A Very Slightly Less Long Time Ago\" },\n\t\t\t{ \n\t\t\t\tname: \"Sun Crusher\", \n\t\t\t\tdate: { \n\t\t\t\t\traw: true, \n\t\t\t\t\tvalue: \"NOW() - INTERVAL 401241 YEAR\",\n\t\t\t\t}, \n\t\t\t}\n\t\t);\n\n\tconsole.log(values_query_array.sql())\n\tconsole.log(values_query_array.binds())\n\n\t>> 'insert into superweapons (name, date) values (?,?),(?,?),(?,NOW() - INTERVAL 401241 YEAR)'\n\t>> [ 'Death Star', 'A Long Time Ago', 'World Devastators', 'A Very Slightly Less Long Time Ago', 'Sun Crusher' ]\n\n\tvar select_query = norm()\n\t\t.insert(\"superweapons (name)\")\n\t\t.select(\"catastrophes.cause\")\n\t\t.distinct()\n\t\t.from(\"catastrophes\")\n\t\t.where(\"catastrophes.destruction_level > 9000\");\n\n\tconsole.log(values_query_array.sql())\n\tconsole.log(values_query_array.binds())\n\n\t>> 'insert into superweapons (name) select distinct catastrophes.cause from catastophes where catastrophes.destruction_level > 9000'\n\t>> []\n\t\n## Delete\n\nSupported Clauses: delete, using, where, orderby, limit\n\n\tvar norm = require('norm-sql');\n\n\tvar dml = norm()\n\t\t.delete(\"particles\")\n\t\t.where(\n\t\t\t[\"particles.membership = ?\", 'atom'],\n\t\t\t[\"particles.class in (?)\", ['electron', 'neutron']]\n\t\t);\n\n\tconsole.log(dml.sql());\n\tconsole.log(dml.binds());\n\n\tOutput:\n\t>> 'delete from particles where particles.membership = ? and particles.class in (?,?)'\n\t>> [ 'atom', 'electron', 'neutron' ]\n\nBoom.\n\n## Switch DB Engines\n\n\tvar norm = require('norm-sql');\n\n\tnorm.engine('postgres'); // default is mysql\n\n\tvar sql = norm()\n\t\t.select(\"game, finished\")\n\t\t.from(\"matches\")\n\t\t.where(\n\t\t\t[ \"game in (?, ?)\", 'chess', 'thermonuclear_war' ],\n\t\t\t[ \"finished = date '?'\", '1983-01-01' ]\n\t\t);\n\n\tconsole.log(dml.sql());\n\tconsole.log(dml.binds());\n\n\tOutput:\n\t> \"select game, finished from matches where game in ($1, $2) and finished = date '$3'\"\n\t> [ 'chess', 'themonuclear_war', '1983-01-01' ]\n\nLesser boom.\n\n\n"
}