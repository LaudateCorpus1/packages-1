{
  "name": "card-verification",
  "version": "1.0.8",
  "description": "Card verification - verify card number, verify card cvv, clean card number, authenticate card make",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/node"
  },
  "keywords": [
    "card",
    "card validation",
    "cvv",
    "verify",
    "validate"
  ],
  "author": {
    "name": "Stepan Sypachev",
    "email": "sypachev_s_s@mail.ru"
  },
  "license": "ISC",
  "dependencies": {},
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.5.3",
    "qunitjs": "^2.0.1",
    "randomstring": "^1.1.5"
  },
  "repository": {
    "type": "git",
    "url": "git+https://bitbucket.org/sypachev_s_s/card-validation.git"
  },
  "homepage": "https://bitbucket.org/sypachev_s_s/card-validation#readme",
  "gitHead": "3396c75bd8acac7fefa7122c4f6d77d9a6db41b9",
  "_npmVersion": "2.15.8",
  "_nodeVersion": "4.4.7",
  "dist": {
    "shasum": "fb3594451119a9c622785d51a139ab236d3cb0ce",
    "tarball": "http://registry.npmjs.org/card-verification/-/card-verification-1.0.8.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-10-04T19:05:58.632Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-10-04T19:26:11.477Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-10-05T08:08:07.036Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-10-05T10:49:21.110Z"
    },
    {
      "number": "1.0.4",
      "date": "2016-10-05T10:58:05.543Z"
    },
    {
      "number": "1.0.5",
      "date": "2016-10-05T11:18:52.186Z"
    },
    {
      "number": "1.0.6",
      "date": "2016-10-06T09:02:04.666Z"
    },
    {
      "number": "1.0.7",
      "date": "2016-10-06T12:03:31.592Z"
    },
    {
      "number": "1.0.8",
      "date": "2016-10-08T20:05:05.751Z"
    }
  ],
  "created": "2016-10-04T19:05:58.632Z",
  "modified": "2016-10-08T20:05:05.751Z",
  "lastPublisher": {
    "name": "sypachev_s_s",
    "email": "sypachev_s_s@mail.ru"
  },
  "owners": [
    {
      "name": "sypachev_s_s",
      "email": "sypachev_s_s@mail.ru"
    }
  ],
  "readme": "Ôªø# Card Validation Library\r\n\r\nPlease, refer to repository [homepage](https://bitbucket.org/sypachev_s_s/card-validation#readme), to avoid possible\r\nmisspellings.\r\n\r\nLibrary validates card number, gets type of card issuer (Visa, Discover, etc), validates CVV, valiudates US zipcodes and \r\nCanada Postal Numbers.\r\n\r\nCard validator supports (current version 1.0.8)\r\n\r\n- American Express\r\n- Diners Club - Carte Blanch\r\n- Diners Club - International\r\n- Discover\r\n- JCB\r\n- InterPayment\r\n- Laser\r\n- Maestro\r\n- Mastercard\r\n- MIR\r\n- Visa \r\n- Visa Dankort\r\n- Visa Electron\r\n- UATP\r\n- UnionPay\r\n\r\n# Usecase\r\n\r\nInstallation\r\n\r\n    npm install card-verification --save\r\n\t\r\nIf you want to use library in browser, refer to\r\n\r\n\t<script src=\"../node_modules/card-verification/card-validation.js\"></script>\r\n\r\nMain object - `CardValidator`, contains several objects to verify cards\r\n\r\n    var CardValidator = require(\"card-verification\").CardValidator;\r\n\t\r\n# Methods\r\n\r\n### Boolean `CardValidator.luhn` ( Number|String )\r\n\r\nImplementation of [Luhn algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm).\r\n\t\r\nReturns `true` if argument matches, false if not, or argument has bad type (undefined, null, neither string nor number, string containing no numbers).\r\n`luhn` authomatically extract numbers from string, so you can pass dirty strings.\r\n\r\n\t//true\r\n    CardValidator.luhn(\"4242424242424242\");\r\n    CardValidator.luhn(\"4242 4242 4242 4242\");\r\n    CardValidator.luhn(4242424242424242);\r\n    CardValidator.luhn(\"4242 oh my ... 424242424242üêπ\");\r\n\t\r\n\t//false\r\n\tCardValidator.luhn(\"4242424242424243\");\r\n    CardValidator.luhn(\"4242 4242 4242 4243\");\r\n    CardValidator.luhn(4242424242424243);\r\n    CardValidator.luhn(\"4242 oh my ... 424242424243üêπ\");\r\n\t\r\n### String `CardValidator.getNums` (String)\r\n\r\nReturns all numbers from string argument\r\n\r\n    //returns \"1234567890\"\r\n\tCardValidator.getNums(\"1234-56!.78*9üëäüí•0\");\r\n\t\r\n### String | Boolean `CardValidator.firstMatch` ( String )\r\n\r\nReturns first matching type of card. Possible values are\r\n\r\n- American Express\r\n- Diners Club - Carte Blanch\r\n- Diners Club - International\r\n- Discover\r\n- JCB\r\n- InterPayment\r\n- Laser\r\n- Maestro\r\n- Mastercard\r\n- MIR\r\n- Visa \r\n- Visa Dankort\r\n- Visa Electron\r\n- UATP\r\n- UnionPay\r\n\r\nIf nothing was found, or argument was not a string, returns false.\r\n\r\n**Note**: some cards have differen names but belong to one family (for example, Visa Electron is still Visa). To deal\r\nwith family, use `family` field of `Card Validator.cards` object.\r\n\r\n**Note**: firstMatch does not check against Luhn algorithm, so cards with wrong numbers match too.\r\n\r\n### Function `CardValidator.isValidCard` ( String cardType )\r\n\r\nReturns function that validate card number and cvv against sent cardType argument. Anonymous function\r\nreturns array of booleans, or boolean.\r\n\r\n    Array function (String|Number cardNumber, [optional String|Number cvv])\r\n\r\nIn case of unknown type returns false\r\n\r\n\t//returns false\r\n    isValidCard(\"Robocop\")(\"4242424242424242\");\r\n\t\r\nIn case of valid card returns array, where first boolean is Luhn test, second is card type test\r\n\r\n    //returns [true, true]\r\n\tCardValidator.isValidCard(\"Visa\")(\"4242424242424242\");\r\n\t\r\n\t//returns [false, true]\r\n\tCardValidator.isValidCard(\"Visa\")(\"4242424242424243\");\r\n\t\r\n\t//returns [true, false]\r\n\tCardValidator.isValidCard(\"Visa\")(\"3242424242424244\");\r\n\t\r\n\t//returns [false, false]\r\n\tCardValidator.isValidCard(\"Visa\")(\"3242424242424243\");\r\n\t\r\n\t//returns [true, true]\r\n\tCardValidator.isValidCard(\"Visa\")(4242424242424242);\r\n\t\r\n\t//returns [false, false]\r\n\tCardValidator.isValidCard(\"Visa\")();\r\n\t\r\nOne can also check dirty strings\r\n\r\n    CardValidator.isValidCard(\"Visa\")(\"4242 4242 4242 4242\");\r\n\t\r\nIn case two arguments were sent, second one is interpreted as cvv, and return type contains three booleans: Luhn test, card number test and cvv test\r\n\r\n    //returns [true, true, true]\r\n    CardValidator.isValidCard(\"Visa\")(\"4242424242424242\", \"123\");\r\n\t\r\nOne can also send numbers or dirty strings as arguments\r\n\r\n\t//returns [true, true, true]\r\n    CardValidator.isValidCard(\"Visa\")(\"4242 4242 4242 4242\", \"wholala!456\")\r\n\t\r\n### CardValidator.cards\r\n\r\nMain object, contains fields\r\n\r\n- `name` - equals key of object\r\n- `family` - general card type. For example, \"Diners Club\", \"Diners Club - International\" and \"Diners Club - Enroute\"\r\n\tboth have family \"Diners Club\"\r\n- `aka` - also known as, possible name of card. For example, Mastercard aka Eurocard\r\n- `vn` - function that checks string representation of card number against card make\r\n- `vc` - function that checks string representation of cvv\r\n\r\n\r\n    console.log(CardValidator.cards);\r\n\r\n### CardValidator.cardsOrder\r\n\r\nArray of strings, contains all keys of `cards` object. Strings are order in a way they are\r\nbeing tested. Because some cards have wider regexps than others, order matters.\r\n\r\n### Boolean `CardValidator.matchUSZip` ( String | Number zipCode )\r\n\r\nMatches US zip code. Returns false if doesn't match or bad argument was sent (undefined, null, neither string nor number).\r\n\r\nMatches `xxxxx` or `xxxxx-xxxx` zip codes and extracts numeric symbols and hyphens. Also checks for '10022-SHOE'.\r\n\r\n    //returns true\r\n\tCardValidator.matchUSZip(\"12345\");\r\n\tCardValidator.matchUSZip(\" 1 2 3 4 5 \");\r\n\tCardValidator.matchUSZip(\" 1 2 3 4 5 - 34 67 \");\r\n\tCardValidator.matchUSZip(\" 10022 - shoe \"));\r\n\tCardValidator.matchUSZip(12345);\r\n\tCardValidator.matchUSZip(\"12345-1234\");\r\n\t\r\n\t//returns false\r\n\tCardValidator.matchUSZip(02345);\r\n\tCardValidator.matchUSZip(\"12345 1234\");\r\n\tCardValidator.matchUSZip(\"12345-1234-\");\r\n\t\r\n### Boolean `CardValidator.matchCanadaPostal` ( String )\r\n\r\nMatches Canada Postal Code. Extracts alphanumeric symbols and uppercase them. Returns boolean result of test, or false, if bad argument was sent (not a string)\r\n\r\n\t//returns true\r\n\tCardValidator.matchCanadaPostal('X0A1A1');\r\n\tCardValidator.matchCanadaPostal(' X0A1A1 ');\r\n\tCardValidator.matchCanadaPostal(' X0A-1A1 ');\r\n\tCardValidator.matchCanadaPostal('X0A 1A1');\r\n\tCardValidator.matchCanadaPostal('x0a 1a1');\r\n\tCardValidator.matchCanadaPostal('x0aüåê1a1');\r\n\t\r\n\t//returns false\r\n\tCardValidator.matchCanadaPostal('1A11A1');\r\n\tCardValidator.matchCanadaPostal('Z0A1A1');\r\n\tCardValidator.matchCanadaPostal('X0A1A12');\r\n\tCardValidator.matchCanadaPostal('X011O1');\r\n\tCardValidator.matchCanadaPostal();\r\n\tCardValidator.matchCanadaPostal(null);\r\n\tCardValidator.matchCanadaPostal(123456);\r\n\t\r\n# Dependencies\r\n\r\nProject has no dependencies for product version. For testing issues requires `mocha`, `chai` & `randomstring`\r\n\t\r\n# Test\r\n\r\nClone this repo for test\r\n\r\n\tgit clone https://bitbucket.org/sypachev_s_s/card-validation --depth 1\r\n\tcd card-validation\r\n\tnpm install\r\n\tnpm run test\r\n\t\r\nTo test browser version, open `test/browser/index.html`, or `test/browser/require.html` (AMD)\r\n\r\n# What's new\r\n\r\n- **1.0.3** - MIR, InterPayment card support. enRoute removed as inactive issuer\r\n- **1.0.5** - Mastercard 2017 - 2221-2720 IIN, Mastercard bug - only 16 digit card available\r\n- **1.0.6** - bug with MIR and InterPayment cvv verification, add test to cover possible inconsistency\r\n- **1.0.7** - Canada postal code validation\r\n- **1.0.8** - Browser support, AMD\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
}