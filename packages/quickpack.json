{
  "name": "quickpack",
  "version": "0.4.4",
  "description": "Webpack is an incredibly capable tool, but the jungle of configuration options can be overwhelming for new comers.",
  "main": "build-config.js",
  "bin": {
    "quickpack": "./bin/quickpack.js",
    "qpack": "./bin/quickpack.js"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "assets-webpack-plugin": "^3.2.0",
    "autoprefixer": "^6.3.1",
    "babel-core": "^6.4.0",
    "babel-fast-presets": "0.0.2",
    "babel-loader": "^6.2.1",
    "babel-plugin-transform-inline-environment-variables": "^6.5.0",
    "babel-polyfill": "^6.5.0",
    "babel-preset-react": "^6.3.13",
    "babel-preset-react-hmre": "^1.0.1",
    "babel-runtime": "^6.5.0",
    "css-loader": "^0.23.1",
    "detect-port": "^0.1.4",
    "extract-text-webpack-plugin": "^1.0.1",
    "file-loader": "^0.8.5",
    "find-port": "^1.0.1",
    "import-glob": "^1.4.0",
    "imports-loader": "^0.6.5",
    "json-loader": "^0.5.4",
    "less": "^2.6.0",
    "less-loader": "^2.2.2",
    "merge-dirs": "^0.2.1",
    "node-sass": "^3.4.2",
    "postcss-loader": "^0.8.0",
    "progress": "^1.1.8",
    "quickpack-presets": "0.0.4",
    "react": "^0.14.6",
    "sass-loader": "^3.1.2",
    "style-loader": "^0.13.0",
    "supports-color": "^3.1.2",
    "ts-loader": "^0.8.0",
    "typescript": "^1.8.0-dev.20160122",
    "url-loader": "^0.5.7",
    "webpack": "^1.12.11",
    "webpack-dev-server": "^1.14.1",
    "yargs": "^3.32.0"
  },
  "gitHead": "94a686da598cc1492714e80972cf116517b4e081",
  "_npmVersion": "2.14.7",
  "_nodeVersion": "4.2.1",
  "dist": {
    "shasum": "07241cd431863e66ad5f18b2a7588ae7715a9bfa",
    "tarball": "http://registry.npmjs.org/quickpack/-/quickpack-0.4.4.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-01-18T10:15:21.476Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-01-21T13:40:18.933Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-01-23T00:46:07.613Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-01-23T06:12:24.101Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-01-23T06:36:09.255Z"
    },
    {
      "number": "0.2.2",
      "date": "2016-01-23T06:39:28.717Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-01-24T03:49:05.738Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-01-24T08:32:06.601Z"
    },
    {
      "number": "0.3.2",
      "date": "2016-01-28T03:32:59.587Z"
    },
    {
      "number": "0.3.3",
      "date": "2016-01-28T04:52:40.995Z"
    },
    {
      "number": "0.3.4",
      "date": "2016-02-03T04:45:08.747Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-02-14T12:36:33.115Z"
    },
    {
      "number": "0.4.1",
      "date": "2016-02-15T17:22:50.234Z"
    },
    {
      "number": "0.4.2",
      "date": "2016-02-16T01:21:24.098Z"
    },
    {
      "number": "0.4.3",
      "date": "2016-02-16T15:54:38.200Z"
    },
    {
      "number": "0.4.4",
      "date": "2016-03-07T00:37:30.155Z"
    },
    {
      "number": "0.4.5-0",
      "date": "2016-03-07T08:38:22.886Z"
    },
    {
      "number": "0.4.5-1",
      "date": "2016-03-07T11:21:16.995Z"
    },
    {
      "number": "0.4.5-2",
      "date": "2016-03-10T03:22:54.845Z"
    },
    {
      "number": "0.4.5-3",
      "date": "2016-03-13T09:49:37.407Z"
    },
    {
      "number": "0.4.5-4",
      "date": "2016-06-12T23:10:02.185Z"
    }
  ],
  "created": "2016-01-18T10:15:21.476Z",
  "modified": "2016-06-12T23:10:02.185Z",
  "lastPublisher": {
    "name": "hayeah",
    "email": "howard@metacircus.com"
  },
  "owners": [
    {
      "name": "hayeah",
      "email": "howard@metacircus.com"
    }
  ],
  "readme": "# The Quickest Way To Start Using Webpack\n\nWebpack is an incredibly capable tool, but the jungle of configuration options can be overwhelming for new comers.\n\nQuickpack is [omakase](http://david.heinemeierhansson.com/2012/rails-is-omakase.html). As long as your project follows a set of best practices, quickpack just works.\n\n```\nnpm install quickpack -g\n```\n\nSuppose your project entry file is `index.js`:\n\n```js\n// ES6 Module + NPM\nimport React from \"react\";\nimport {render} from \"react-dom\";\n\n// PostCSS support with autoprefixer.\nimport \"normalize.css\";\n\n// CSS Module\nimport style from \"./App.css\"\n\n// JSX support\nclass App extends React.Component {\n  render() {\n    return <span className={style.hello}>hello quickpack</span>;\n  }\n}\n\nwindow.onload = () => {\n  render(<App/>,document.querySelector(\"#react-root\"));\n};\n```\n\nQuickpack can build this project without any configuration:\n\n```\n# Default output to build/index.js\nquickpack build index.js\n```\n\nAnd to watch the project, add the `--watch` flag:\n\n```\nquickpack build index.js --watch\n```\n\nTo build multiple entry files simultaneously:\n\n```\nquickpack build entry1.js entry2.js\n```\n\nAnd you can change the output file names:\n\n```\nquickpack build page1=entry1.js page2=entry2.js\n```\n\nSee: [Example Project](https://github.com/hayeah/quickpack/tree/master/example)\n\n# Fit For Production\n\nWhen building a C program for release, you don't think about what compiler optimizations to enable. You tell the compiler \"please optimize the heck out of my program\". Similiarly with `quickpack`, you simply turn on the `production` option:\n\n```\nquickpack build index.js --production\n```\n\nProduction mode enables these optimizations:\n\n+ Minifying with uglify.\n+ Static resource loading.\n+ Extract CSS into separate files.\n+ Long-term caching with unique md5 hash.\n+ Chunk splitting (coming...).\n\nIt would also disable development features like source map.\n\n# A Productive Development Environment\n\nWebpack already has sophisticated development tools. The only problem is getting all the tools to work! Quickpack gives you a productive development environment with one command:\n\n```\n# visit: localhost:8080/\nquickpack server index.js\n```\n\nNo flags. No config. The server comes with these features:\n\n+ Static server.\n+ Fast source map.\n+ Live-edit.\n+ React Hot-Reload.\n+ React error page.\n\n# Evolving Best Practices\n\nEven experienced Webpack users rely on various boilerplates to kickstart new projects. But as new best practices and new tools emerge, it's hard to upgrade old projects that grew out of boilerplates.\n\nBoilerplate projects are trapped in the best practices and tools of yesterday.\n\nQuickpack will makes sure that as long as you use the same major version, your project will keep working, even as new features are added.\n\nAs new incompatible best practices emerge, a new major version will be released, perhaps with a [migration tool](https://blog.golang.org/introducing-gofix) to ease your upgrade.\n\nBy removing all configuration from projects, we can evolve the way we work by upgrading a single tool.\n\n# Help\n\n```\n$ quickpack build -h\nquickpack build page1=./entry1 page2=./entry2 ...\n\nOptions:\n  -w, --watch        Watch mode                                                      [boolean] [default: false]\n  -t, --target       Target platform                                                  [string] [default: \"web\"]\n  -p, --production   Build for production environment                                [boolean] [default: false]\n  -o, --output       Output directory                                               [string] [default: \"build\"]\n  --hash             Enable long-term cache hashing                                  [boolean] [default: false]\n  --source-map       source map (dev only)                                            [boolean] [default: true]\n  --source-map-type  source map type                         [string] [default: \"cheap-module-eval-source-map\"]\n  --library          Build as CommonJS module                                        [boolean] [default: false]\n  --uglify           source map (production only)                                     [boolean] [default: true]\n  -h, --help         Show help                                                                        [boolean]\n\nExamples:\n  quickpack build entry.js                              Build entry.js\n  quickpack build entry1.js entry1.js                   Build multiple entries\n  quickpack build page2=./entry1.js page2=./entry2.js   Multiple entries with output names\n  quickpack build index.js --target=node                Build for NodeJS\n  quickpack build index.js --library                    Outout CommonJS module\n```\n\n```\n$ quickpack server -h\nquickpack server page1=./entry1 page2=./entry2 ...\n\nOptions:\n  --port             port number (default: 8000)\n  -p, --production   Build for production environment                                [boolean] [default: false]\n  -o, --output       Output directory                                               [string] [default: \"build\"]\n  --hash             Enable long-term cache hashing                                  [boolean] [default: false]\n  --source-map       source map (dev only)                                            [boolean] [default: true]\n  --source-map-type  source map type                         [string] [default: \"cheap-module-eval-source-map\"]\n  --library          Build as CommonJS module                                        [boolean] [default: false]\n  --uglify           source map (production only)                                     [boolean] [default: true]\n  -h, --help         Show help                                                                        [boolean]\n\nExamples:\n  PORT=4321 quickpack server  use ENV to specify port\n```\n\n# Contribute\n\nTry quickpack for prototypes and personal projects.\n\nAs of now, the set of \"best practices\" is not yet well defined. Before version 1, this tool is a summary of my personal preferences and quirks. Together we'll determine what the best practices are, and move this tool to version 1.\n\nImprove the build tool, and everybody benefits.\n\n### Experimental: NodeJS\n\n+ It might not be a bad idea to build NodeJS projects with Webpack.\n+ Electron turns out to be the best NodeJS debugger.\n\n\n### Experimental: TypeScript\n\nShould use TypeScript nightly. The upcoming 1.8 has better support for JavaScript modules.\n\n+ https://github.com/Microsoft/TypeScript/pull/5471\n\nRun this command to configure VSCode:\n\n```\nqpack setup\n```\n\nNote: To force VSCode to use a particular version of TypeScript language service, see http://stackoverflow.com/a/32380584"
}