{
  "name": "marsdb-sync-client",
  "version": "0.2.12",
  "author": {
    "name": "Artem Artemev",
    "email": "art@studytime.me"
  },
  "contributors": [
    {
      "name": "Artem Artemev"
    }
  ],
  "description": "Standalone Meteor DDP client based on MarsDB",
  "keywords": [
    "client",
    "minimongo",
    "marsdb",
    "meteor",
    "ddp",
    "meteor"
  ],
  "homepage": "https://github.com/c58/marsdb-sync-client",
  "repository": {
    "user": "c58",
    "repo": "marsdb-sync-client",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/c58/marsdb-sync-client/tarball/master",
    "clone_url": "https://github.com/c58/marsdb-sync-client",
    "https_url": "https://github.com/c58/marsdb-sync-client",
    "travis_url": "https://travis-ci.org/c58/marsdb-sync-client",
    "zip_url": "https://github.com/c58/marsdb-sync-client/archive/master.zip",
    "api_url": "https://api.github.com/repos/c58/marsdb-sync-client"
  },
  "dependencies": {
    "invariant": "^2.2.0",
    "fast.js": "^0.1.1"
  },
  "peerDependencies": {
    "marsdb": "0.6.x"
  },
  "devDependencies": {
    "marsdb": "^0.6.0",
    "core-js": "^2.0.0",
    "babel-cli": "^6.3.17",
    "babel-eslint": "^5.0.0-beta6",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "babel-register": "^6.3.13",
    "babelify": "^7.2.0",
    "brfs": "^1.4.1",
    "browserify": "^13.0.0",
    "bulk-require": "^0.2.1",
    "bulkify": "^1.1.1",
    "chai": "^3.4.1",
    "chai-as-promised": "^5.2.0",
    "coveralls": "^2.11.6",
    "del": "^2.2.0",
    "envify": "^3.4.0",
    "fbjs-scripts": "^0.5.0",
    "gulp": "^3.9.0",
    "gulp-babel": "^6.1.1",
    "gulp-eslint": "^1.1.1",
    "gulp-if": "^2.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.5.1",
    "istanbul": "^1.0.0-alpha.2",
    "sinon": "^1.17.2",
    "sinon-chai": "^2.8.0",
    "mocha": "^2.3.4",
    "mocha-lcov-reporter": "^1.0.0",
    "mocha-phantomjs": "^4.0.2",
    "require-dir": "^0.3.0",
    "run-sequence": "^1.1.5",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "scripts": {
    "test_some": "mocha --require babelhook --reporter spec --timeout 1000",
    "test_browser": "gulp build:browser:tests && mocha-phantomjs --reporter spec browser_tests.html",
    "test": "mocha --require babelhook --reporter spec --timeout 1000 test/both test/node",
    "coverage": "babel-node ./node_modules/istanbul/lib/cli cover _mocha test/both test/node -- -u exports -R spec && open coverage/lcov-report/index.html",
    "coveralls": "babel-node ./node_modules/istanbul/lib/cli cover _mocha test/both test/node --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js ./lib && rm -rf ./coverage"
  },
  "main": "index.js",
  "license": "MIT",
  "gitHead": "5a62e297fac4bb17f57950f031838baac0848485",
  "_npmVersion": "3.8.3",
  "_nodeVersion": "5.10.1",
  "dist": {
    "shasum": "ec4d4b9940459bbb683bc6b4e6c69b44033be4fc",
    "tarball": "http://registry.npmjs.org/marsdb-sync-client/-/marsdb-sync-client-0.2.12.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-02-04T08:00:54.786Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-02-04T16:26:36.576Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-02-12T07:53:26.429Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-02-12T18:12:37.394Z"
    },
    {
      "number": "0.0.5",
      "date": "2016-02-12T18:27:00.636Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-02-13T15:35:10.334Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-02-14T19:08:31.769Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-02-15T10:45:25.253Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-02-15T12:28:09.358Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-02-15T14:02:25.170Z"
    },
    {
      "number": "0.2.2",
      "date": "2016-02-15T14:34:56.446Z"
    },
    {
      "number": "0.2.3",
      "date": "2016-03-13T15:25:57.729Z"
    },
    {
      "number": "0.2.4",
      "date": "2016-09-05T18:33:18.668Z"
    },
    {
      "number": "0.2.5",
      "date": "2016-09-05T18:50:18.969Z"
    },
    {
      "number": "0.2.6",
      "date": "2016-09-06T07:36:24.989Z"
    },
    {
      "number": "0.2.7",
      "date": "2016-09-06T08:56:36.804Z"
    },
    {
      "number": "0.2.8",
      "date": "2016-09-06T10:19:49.303Z"
    },
    {
      "number": "0.2.9",
      "date": "2016-09-06T10:38:02.475Z"
    },
    {
      "number": "0.2.10",
      "date": "2016-09-06T17:02:46.200Z"
    },
    {
      "number": "0.2.11",
      "date": "2016-09-06T17:34:02.042Z"
    },
    {
      "number": "0.2.12",
      "date": "2016-09-07T09:17:52.671Z"
    }
  ],
  "created": "2016-02-04T08:00:54.786Z",
  "modified": "2016-09-07T09:17:52.671Z",
  "lastPublisher": {
    "name": "a.artemev",
    "email": "art@studytime.me"
  },
  "owners": [
    {
      "name": "a.artemev",
      "email": "art@studytime.me"
    }
  ],
  "readme": "[MarsDB DDP Client](https://github.com/c58/marsdb-sync-client)\n=========\n\n[![Build Status](https://travis-ci.org/c58/marsdb-sync-client.svg?branch=master)](https://travis-ci.org/c58/marsdb-sync-client)\n[![npm version](https://badge.fury.io/js/marsdb-sync-client.svg)](https://www.npmjs.com/package/marsdb-sync-client)\n[![Coverage Status](https://coveralls.io/repos/c58/marsdb-sync-client/badge.svg?branch=master&service=github)](https://coveralls.io/github/c58/marsdb-sync-client?branch=master)\n[![Dependency Status](https://david-dm.org/c58/marsdb-sync-client.svg)](https://david-dm.org/c58/marsdb-sync-client)\n\nIt's a Meteor compatible [DDP](https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md) client, based on [MarsDB](https://github.com/c58/marsdb). It supports **methods**, **pub/sub** and **collection operations**. It is very similar to Meteor, but it also have some killer features...\n\n## Features\n\n* **Cache collections** – with [LocalForage](https://github.com/c58/marsdb-localforage), for example\n* **Auto subcribe/unsubscribe** - see [examples](https://github.com/c58/marsdb-sync-client#examples)\n* **Smart subscriptions** – any subscription will be stopped only after 15 sec delay.\n* **Framework agnostic**\n* **Works in any JS environment** – browser, Node.JS, Electron, NW.js, Cordova\n\n## WARNING\n\nIt's only a concept until 1.0. Use it for your own risk.\n\n## Examples\n\n### Basic example\nThe repository comes with a simple example. To try it out:\n\n```\ngit clone https://github.com/c58/marsdb-sync-client.git\ncd marsdb-sync-client/example && npm install\nnpm start\n```\n\nThen, just point your browser at `http://localhost:3000`.\n\n### Usage with Meteor server and LocalForage\n`marsdb-sync-client` is a DDP client, so it should work well with Meteor server.\nBut it have an extension for syncing local cache with a server side. The extension is\nimplemented by `marsdb-sync-server` and is follow:\n\n  * Each collection have additional server method called `/${myCollection}/sync`\n  * This method invoked by MarsSync client on init stage for each collection\n  * Method invoked with one argument: list of all available document ids in a local cache\n  * Method must return a sublist of given ids that is NOT presented in a server anymore (deleted ids).\n\nYou should implement it by yourself for each collection in Meteor's server-side code.\nIn the future it might be a package for Meteor (it would be great if you implement it).\n\nExample of a sync method for some collection:\n\n```javascript\n// /server/collections/Posts.js\nPosts = new Meteor.Collection('posts');\n\nMeteor.methods({\n  '/posts/sync': function(remoteIds) {\n    const existingDocs = Posts.find({_id: {$in: remoteIds}}, {fields: {_id: 1}}).fetch();\n    const existingIdsSet = new Set(existingDocs.map(doc => doc._id));\n    return remoteIds.filter(id => !existingIdsSet.has(id));\n  }\n});\n```\n\n### Configure a client\n```javascript\nimport Collection from 'marsdb';\nimport * as MarsSync from 'marsdb-sync-client';\n\n// Setup marsdb-sync-client\nMarsSync.configure({ url: 'ws://localhost:3000' });\n\n// User your collections\nconst posts = new Collection('posts');\nconst observer = posts.find(\n  {author: 'me'},\n  {sub: ['postsByAuthor', 'me']}\n).observe((posts) => {\n  // Subscribe to \"postsByAuthor\" publisher and update any time when\n  // some documents added (but with debounce)\n});\n\n// When you stop all observers of a cursor\n// subscription will be automatically stopped\n// (after 15 sec for optimal client/server communication)\nobserver.stop();\n```\n\n### Wait for subscription ready\n```javascript\n// Sometimes you need to show a result only when\n// all documents of a subscription received.\n// There is special options \"waitReady\" for this.\nconst posts = new Collection('posts');\nposts.find(\n  {author: 'me'},\n  {sub: ['postsByAuthor', 'me'], waitReady: true}\n).observe((posts) => {\n  // Subscribe to \"postsByAuthor\" publisher and wait until\n  // subscription ready (observer called only when sub ready)\n});\n```\n\n### Decide when to use cache\n```javascript\n// Cache is good, but sometimes you need to decide when to use\n// cache, and when to wait new data from the server...\nconst posts = new Collection('posts');\nposts.find(\n  {author: 'me'},\n  {sub: ['postsByAuthor', 'me'], tryCache: true}\n).observe((posts) => {\n  // Subscribe to \"postsByAuthor\" publisher and try\n  // to get posts from cache. If \"tryCache\" is true, then\n  // cache is used when it's not empty array or not empty object.\n  // In other cases it will wait subscription ready.\n});\n\nposts.find(\n  {author: 'not_me'},\n  {sub: ['postsByAuthor', 'not_me'], tryCache: (posts) => true}\n).observe((posts) => {\n  // Subscribe to \"postsByAuthor\" publisher and try\n  // to get posts from cache. If \"tryCache\" is a function, then\n  // the function will be called with cache result. If function returns\n  // true, then cache will be used.\n});\n```\n\n### Methods and subscriptions\n```javascript\nimport * as MarsSync from 'marsdb-sync-client';\n\nMarsSync.call('myMethod', 1, 2, 3).result().then((res) => {\n  // Result of the method in \"res\"\n}).updated().then(() => {\n  // Invoked when \"updated\" message received.\n});\n\n// Similar for \"apply\"\nMarsSync.apply('myMethod', [1, 2, 3])\n\n// You can also subscribe just like in Meteor\nconst sub = MarsSync.subscribe('myPublisher', 1, 2, '3th arg');\nsub.ready().then(() => {\n  // When ready\n}).stopped().then(() => {\n  // When stopped\n});\n// Stop the subscription\nsub.stop();\n```\n\n## Roadmap\n* More examples of usage and tests\n* Documentation\n\n## Contributing\nI'm waiting for your pull requests and issues.\nDon't forget to execute `gulp lint` before requesting. Accepted only requests without errors.\n\n## License\nSee [License](LICENSE)\n"
}