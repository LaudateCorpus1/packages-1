{
  "name": "marsdb",
  "version": "0.6.11",
  "author": {
    "name": "Artem Artemev",
    "email": "art@studytime.me"
  },
  "contributors": [
    {
      "name": "Artem Artemev"
    }
  ],
  "description": "MarsDB is a lightweight client-side MongoDB-like database, Promise based, written in ES6",
  "keywords": [
    "database",
    "datastore",
    "embedded",
    "levelup",
    "mongoose",
    "linvodb3",
    "nedb"
  ],
  "homepage": "https://github.com/c58/marsdb",
  "repository": {
    "user": "c58",
    "repo": "marsdb",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/c58/marsdb/tarball/master",
    "clone_url": "https://github.com/c58/marsdb",
    "https_url": "https://github.com/c58/marsdb",
    "travis_url": "https://travis-ci.org/c58/marsdb",
    "zip_url": "https://github.com/c58/marsdb/archive/master.zip",
    "api_url": "https://api.github.com/repos/c58/marsdb"
  },
  "dependencies": {
    "check-types": "^6.0.0",
    "double-ended-queue": "^0.9.7",
    "eventemitter3": "1.1.1",
    "fast.js": "^0.1.1",
    "geojson-utils": "^1.1.0",
    "invariant": "^2.2.0"
  },
  "devDependencies": {
    "core-js": "^2.0.1",
    "lodash": "3.10.x",
    "babel-cli": "^6.3.17",
    "babel-eslint": "^5.0.0-beta6",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "babel-register": "^6.3.13",
    "babelify": "^7.2.0",
    "brfs": "^1.4.1",
    "browserify": "^13.0.0",
    "bulk-require": "^0.2.1",
    "bulkify": "^1.1.1",
    "chai": "^3.4.1",
    "chai-as-promised": "^5.2.0",
    "coveralls": "^2.11.6",
    "del": "^2.2.0",
    "envify": "^3.4.0",
    "fbjs-scripts": "^0.5.0",
    "gulp": "^3.9.0",
    "gulp-babel": "^6.1.1",
    "gulp-eslint": "^1.1.1",
    "gulp-if": "^2.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.5.1",
    "istanbul": "^1.0.0-alpha.2",
    "mocha": "^2.3.4",
    "mocha-lcov-reporter": "^1.0.0",
    "mocha-phantomjs": "^4.0.2",
    "sinon": "^1.17.2",
    "sinon-chai": "^2.8.0",
    "require-dir": "^0.3.0",
    "run-sequence": "^1.1.5",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "scripts": {
    "test_some": "mocha --require babelhook --reporter spec --timeout 1000",
    "test_browser": "gulp build:browser:tests && mocha-phantomjs --reporter spec browser_tests.html",
    "test": "mocha --require babelhook --reporter spec --timeout 1000 test/both test/node",
    "coverage": "babel-node ./node_modules/istanbul/lib/cli cover _mocha test/both test/node -- -u exports -R spec && open coverage/lcov-report/index.html",
    "coveralls": "babel-node ./node_modules/istanbul/lib/cli cover _mocha test/both test/node --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js ./lib && rm -rf ./coverage"
  },
  "main": "index.js",
  "license": "MIT",
  "gitHead": "33856a1f929d46cbb6b4ea4a463fde3ded0f6278",
  "_npmVersion": "3.8.3",
  "_nodeVersion": "5.10.1",
  "dist": {
    "shasum": "005b4af67e41df4efe73efed577adf29135d9712",
    "tarball": "http://registry.npmjs.org/marsdb/-/marsdb-0.6.11.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-10-13T12:06:57.993Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-10-19T18:18:48.121Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-10-21T20:58:23.664Z"
    },
    {
      "number": "0.2.2",
      "date": "2015-10-22T11:37:01.181Z"
    },
    {
      "number": "0.2.3",
      "date": "2015-10-22T11:51:50.298Z"
    },
    {
      "number": "0.2.4",
      "date": "2015-10-22T11:53:41.526Z"
    },
    {
      "number": "0.2.5",
      "date": "2015-10-22T13:02:39.776Z"
    },
    {
      "number": "0.2.6",
      "date": "2015-10-22T14:51:23.921Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-10-22T18:27:07.637Z"
    },
    {
      "number": "0.3.1",
      "date": "2015-10-22T18:52:19.129Z"
    },
    {
      "number": "0.3.2",
      "date": "2015-10-23T08:38:01.217Z"
    },
    {
      "number": "0.3.3",
      "date": "2015-10-23T08:50:08.379Z"
    },
    {
      "number": "0.3.4",
      "date": "2015-10-23T15:43:23.021Z"
    },
    {
      "number": "0.3.5",
      "date": "2015-10-23T17:54:40.993Z"
    },
    {
      "number": "0.3.6",
      "date": "2015-10-24T20:30:04.595Z"
    },
    {
      "number": "0.3.7",
      "date": "2015-11-30T10:52:32.920Z"
    },
    {
      "number": "0.3.8",
      "date": "2015-11-30T14:09:08.261Z"
    },
    {
      "number": "0.3.9",
      "date": "2015-11-30T15:32:34.051Z"
    },
    {
      "number": "0.3.10",
      "date": "2015-12-09T17:48:49.940Z"
    },
    {
      "number": "0.3.11",
      "date": "2015-12-10T11:38:11.362Z"
    },
    {
      "number": "0.3.12",
      "date": "2015-12-11T18:30:25.924Z"
    },
    {
      "number": "0.3.13",
      "date": "2015-12-11T19:35:40.513Z"
    },
    {
      "number": "0.3.14",
      "date": "2015-12-13T09:47:52.193Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-01-01T22:10:42.481Z"
    },
    {
      "number": "0.4.1",
      "date": "2016-01-01T22:24:38.171Z"
    },
    {
      "number": "0.4.2",
      "date": "2016-01-01T22:59:50.606Z"
    },
    {
      "number": "0.4.3",
      "date": "2016-01-02T15:03:41.223Z"
    },
    {
      "number": "0.4.4",
      "date": "2016-01-12T08:20:19.972Z"
    },
    {
      "number": "0.5.0",
      "date": "2016-01-12T12:24:17.800Z"
    },
    {
      "number": "0.5.1",
      "date": "2016-01-12T19:02:27.099Z"
    },
    {
      "number": "0.5.2",
      "date": "2016-01-12T21:11:15.825Z"
    },
    {
      "number": "0.5.3",
      "date": "2016-01-13T08:47:12.414Z"
    },
    {
      "number": "0.5.4",
      "date": "2016-01-17T16:36:37.564Z"
    },
    {
      "number": "0.5.5",
      "date": "2016-01-21T17:52:12.028Z"
    },
    {
      "number": "0.5.6",
      "date": "2016-01-21T18:22:52.324Z"
    },
    {
      "number": "0.5.7",
      "date": "2016-01-22T21:01:40.535Z"
    },
    {
      "number": "0.5.8",
      "date": "2016-01-23T21:24:36.006Z"
    },
    {
      "number": "0.5.9",
      "date": "2016-01-25T10:47:43.746Z"
    },
    {
      "number": "0.5.10",
      "date": "2016-01-25T20:41:19.639Z"
    },
    {
      "number": "0.5.11",
      "date": "2016-01-26T12:47:04.318Z"
    },
    {
      "number": "0.5.12",
      "date": "2016-01-26T16:30:28.629Z"
    },
    {
      "number": "0.5.13",
      "date": "2016-01-29T09:56:14.850Z"
    },
    {
      "number": "0.5.14",
      "date": "2016-01-29T11:08:07.089Z"
    },
    {
      "number": "0.5.15",
      "date": "2016-02-01T08:28:09.094Z"
    },
    {
      "number": "0.5.16",
      "date": "2016-02-01T11:53:20.304Z"
    },
    {
      "number": "0.5.17",
      "date": "2016-02-01T18:46:22.524Z"
    },
    {
      "number": "0.5.18",
      "date": "2016-02-03T18:41:13.418Z"
    },
    {
      "number": "0.5.19",
      "date": "2016-02-04T13:11:37.751Z"
    },
    {
      "number": "0.5.20",
      "date": "2016-02-04T15:56:31.887Z"
    },
    {
      "number": "0.5.21",
      "date": "2016-02-04T16:05:11.297Z"
    },
    {
      "number": "0.5.22",
      "date": "2016-02-05T08:29:25.215Z"
    },
    {
      "number": "0.5.23",
      "date": "2016-02-12T07:26:21.679Z"
    },
    {
      "number": "0.5.24",
      "date": "2016-02-12T07:50:58.206Z"
    },
    {
      "number": "0.5.25",
      "date": "2016-02-12T17:32:18.394Z"
    },
    {
      "number": "0.6.0",
      "date": "2016-02-13T15:23:08.827Z"
    },
    {
      "number": "0.6.1",
      "date": "2016-02-24T18:38:47.615Z"
    },
    {
      "number": "0.6.2",
      "date": "2016-02-25T10:21:05.172Z"
    },
    {
      "number": "0.6.3",
      "date": "2016-03-01T22:12:48.621Z"
    },
    {
      "number": "0.6.4",
      "date": "2016-03-02T10:07:48.882Z"
    },
    {
      "number": "0.6.5",
      "date": "2016-03-09T12:56:37.153Z"
    },
    {
      "number": "0.6.6",
      "date": "2016-03-10T05:21:12.571Z"
    },
    {
      "number": "0.6.7",
      "date": "2016-03-11T20:59:52.660Z"
    },
    {
      "number": "0.6.8",
      "date": "2016-03-11T21:33:32.094Z"
    },
    {
      "number": "0.6.9",
      "date": "2016-03-18T08:41:43.580Z"
    },
    {
      "number": "0.6.10",
      "date": "2016-09-06T09:56:08.035Z"
    },
    {
      "number": "0.6.11",
      "date": "2016-09-07T15:53:13.240Z"
    }
  ],
  "created": "2015-10-13T12:06:57.993Z",
  "modified": "2016-09-07T15:53:13.240Z",
  "lastPublisher": {
    "name": "a.artemev",
    "email": "art@studytime.me"
  },
  "owners": [
    {
      "name": "a.artemev",
      "email": "art@studytime.me"
    }
  ],
  "readme": "<div style=\"text-align:center\"><img src=\"https://static.studytime.me/marsdb.png\" /></div>\n\n[MarsDB](https://github.com/c58/marsdb)\n=========\n\n[![Build Status](https://travis-ci.org/c58/marsdb.svg?branch=master)](https://travis-ci.org/c58/marsdb)\n[![npm version](https://badge.fury.io/js/marsdb.svg)](https://www.npmjs.com/package/marsdb)\n[![Coverage Status](https://coveralls.io/repos/c58/marsdb/badge.svg?branch=master&service=github)](https://coveralls.io/github/c58/marsdb?branch=master)\n[![Dependency Status](https://david-dm.org/c58/marsdb.svg)](https://david-dm.org/c58/marsdb)\n[![bitHound Overall Score](https://www.bithound.io/github/c58/marsdb/badges/score.svg)](https://www.bithound.io/github/c58/marsdb)\n[![Join the chat at https://gitter.im/c58/marsdb](https://badges.gitter.im/c58/marsdb.svg)](https://gitter.im/c58/marsdb?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![GitHub stars](https://img.shields.io/github/stars/c58/marsdb.svg?style=social)](https://github.com/c58/marsdb)\n\nMarsDB is a lightweight client-side database.\nIt's based on a Meteor's **minimongo** matching/modifying implementation. It's carefully written on **ES6**, have a **Promise based** interface and may be backed with any storage implementation ([see plugins](https://github.com/c58/marsdb#plugins)). It's also supports **observable** cursors.\n\nMarsDB supports any kind of find/update/remove operations that Meteor's minimongo does. So, go to the Meteor docs for supported query/modifier operations.\n\nYou can use it in any JS environment (Browser, Electron, NW.js, Node.js).\n\n## Features\n\n* **Promise based API**\n* **Carefully written on ES6**\n* **Very very flexible** – just take a look to the [plugins section](https://github.com/c58/marsdb#plugins)\n* **Supports many of MongoDB query/modify operations** – thanks to a Meteor's minimongo\n* **Flexible pipeline** – map, reduce, custom sorting function, filtering. All with a sexy JS interface (no ugly mongo's aggregation language)\n* **Persistence API** – all collections can be stored (and restored) with any kind of storage (in-memory, LocalStorage, LevelUP, etc)\n* **Observable queries** - live queries just like in Meteor, but with simplier interface\n* **Reactive joins** – out of the box\n\n## Bindings\n\n* [React](https://github.com/c58/marsdb-react)\n* [AngularJS 1.x](https://github.com/c58/marsdb-angular)\n\n## Plugins\n\n* In-memory storage (built-in default)\n* [LocalForage storage](https://github.com/c58/marsdb-localforage) – fastest in-browser storage (InexedDB, WebSQL and fallback to localStorage)\n* [LocalStorage storage](https://github.com/c58/marsdb-localstorage) – not recommended, better prefer LocalForage\n* [LevelUP storage](https://github.com/c58/marsdb-levelup) – lightweight server-less Node.js storage\n* [MongoDB wrapper](https://github.com/c58/marsdb-mongo) – use MarsDB for comfortable work with MongoDB\n* [Validation via Mongoose](https://github.com/c58/marsdb-validation) – validate objects with Mongoose\n\n## Meteor compatible client/server\nSometimes you can't use Meteor infrastructure. Maybe you need to build a custom client. Maybe you need to build a custom server with express and other modules. In meteor it can be done with a ton of hack. But the only reason why it's so ugly to do a simple things is because Meteor forces you to use their infrastructure. I'm trying to solve this issue with DDP client/server modules, based on MarsDB.\n\n* [DDP client](https://github.com/c58/marsdb-sync-client)\n* [DDP server](https://github.com/c58/marsdb-sync-server)\n\n## Examples\n\n### Using within non-ES6 environment\nThe `./dist` folder contains already compiled to a ES5 code, but some polyfills needed. For using in a browser you must to include `marsdb.polyfills.js` before `marsdb.min.js`. In node.js you need to `require('marsdb/polyfills')`.\nIt sets in a window/global: Promise, Set and Symbol.\n\n### Create a collection\n```javascript\nimport Collection from 'marsdb';\nimport LocalForageManager from 'marsdb-localforage';\n\n// Default storage is in-memory\n// Setup different storage managers\n// (all documents will be save in a browser cache)\nCollection.defaultStorageManager(LocalForageManager);\n\n// Create collection wit new default storage\nconst users = new Collection('users');\n```\n\n### Create an in-memory collection\n```javascript\nimport Collection from 'marsdb';\nimport LocalStorageManager from 'marsdb-localstorage';\n\n// Set some defaults and create collection\nCollection.defaultStorageManager(LocalStorageManager);\nconst users = new Collection('users');\n\n// But it may be useful to create in-memory\n// collection without defined defaults\n// (for example to save some session state)\nconst session = new Collection('session', {inMemory: true});\n```\n\n### Find documents\n```javascript\nconst posts = new Collection('posts');\nposts.find({author: 'Bob'})\n  .project({author: 1})\n  .sort(['createdAt'])\n  .then(docs => {\n    // do something with docs\n  });\n```\n\n### Find with pipeline (map, reduce, filter)\nAn order of pipeline methods invokation is important. Next pipeline operation gives as argument a result of a previous operation.\n```javascript\nconst posts = new Collection('posts');\n\n// Get number of all comments in the DB\nposts.find()\n  .limit(10)\n  .sortFunc((a, b) => a - b + 10)\n  .filter(doc => Matsh.sqrt(doc.comment.length) > 1.5)\n  .map(doc => doc.comments.length)\n  .reduce((acum, val) => acum + val)\n  .then(result => {\n    // result is a number of all comments\n    // in all found posts\n  });\n\n// Result is `undefined` because posts\n// is not exists and additional processing\n// is not ran (thanks to `.ifNotEmpty()`)\nposts.find({author: 'not_existing_name'})\n  .aggregate(docs => docs[0])\n  .ifNotEmpty()\n  .aggregate(user => user.name)\n```\n\n### Find with observing changes\nObservable cursor returned by a `find` and `findOne` methods of a collection. Updates of the cursor is batched and debounced (default batch size is `20` and debounce time is `1000 / 15` ms). You can change the paramters by `batchSize` and `debounce` methods of an observable cursor (methods is chained).\n\n```javascript\nconst posts = new Collection('posts');\nconst stopper = posts.find({tags: {$in: ['marsdb', 'is', 'awesome']}})\n  .observe(docs => {\n    // invoked on every result change\n    // (on initial result too)\n    stopper.stop(); // stops observing\n  }).then(docs => {\n    // invoked once on initial result\n    // (after `observer` callback)\n  });\n```\n\n### Find with joins\n```javascript\nconst users = new Collection('users');\nconst posts = new Collection('posts');\nposts.find()\n  .join(doc => {\n    // Return a Promise for waiting of the result.\n    return users.findOne(doc.authorId).then(user => {\n      doc.authorObj = user;\n      // any return is ignored\n    });\n  })\n  .join(doc => {\n    // For reactive join you must invoke `observe` instead `then`\n    // That's it!\n    return users.findOne(doc.authorId).observe(user => {\n      doc.authorObj = user;\n    });\n  })\n  .join((doc, updated) => {\n    // Also any other “join” mutations supported\n    doc.another = _cached_data_by_post[doc._id];\n\n    // Manually update a joined parameter and propagate\n    // update event from current cursor to a root\n    // (`observe` callback invoked)\n    setTimeout(() => {\n      doc.another = 'some another user';\n      updated();\n    }, 10);\n  })\n  // Or just pass join spec object for fast joining\n  // (only one `find` will be produced for all posts)\n  .join({ authorId: users }) // posts[i].authorId will be user object\n  .observe((posts) => {\n    // do something with posts with authors\n    // invoked any time when posts changed\n    // (and when observed joins changed too)\n  })\n```\n\n### Inserting\n```javascript\nconst posts = new Collection('posts');\nposts.insert({text: 'MarsDB is awesome'}).then(docId => {\n  // Invoked after persisting document\n})\nposts.insertAll(\n  {text: 'MarsDB'},\n  {text: 'is'},\n  {text: 'awesome'}\n).then(docsIds => {\n  // invoked when all documents inserted\n});\n```\n\n### Updating\n```javascript\nconst posts = new Collection('posts');\nposts.update(\n  {authorId: {$in: [1, 2, 3]}},\n  {$set: {text: 'noop'}}\n).then(result => {\n  console.log(result.modified) // count of modified docs\n  console.log(result.updated) // array of updated docs\n  console.log(result.original) // array of original docs\n});\n\n// Upsert (insert when nothing found)\nposts.update(\n  {authorId: \"123\"},\n  {$set: {text: 'noop'}},\n  {upsert: true}\n).then(result => {\n  // { authorId: \"123\", text: 'noop', _id: '...' }\n});\n```\n\n### Removing\n```javascript\nconst posts = new Collection('posts');\nposts.remove({authorId: {$in: [1,2,3]}})\n  .then(removedDocs => {\n    // do something with removed documents array\n  });\n```\n\n## Roadmap\n* Indexes support for some kind of simple requests {a: '^b'}, {a: {$lt: 9}}\n* Documentation\n\n## Contributing\nI'm waiting for your pull requests and issues.\nDon't forget to execute `gulp lint` before requesting. Accepted only requests without errors.\n\n## License\nSee [License](LICENSE)\n"
}