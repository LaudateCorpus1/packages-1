{
  "name": "micro-app-framework",
  "version": "0.1.4",
  "description": "Framework for building/running micro-apps",
  "main": "lib/micro-app-framework.js",
  "scripts": {
    "start": "node lib/micro-app-framework.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "basic-auth": "~1.0.3",
    "bcryptjs": "~2.3.0",
    "crypto-js": "~3.1.5"
  },
  "repository": {
    "user": "mhdawson",
    "repo": "micro-app-framework",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mhdawson/micro-app-framework/tarball/master",
    "clone_url": "https://github.com/mhdawson/micro-app-framework",
    "https_url": "https://github.com/mhdawson/micro-app-framework",
    "travis_url": "https://travis-ci.org/mhdawson/micro-app-framework",
    "zip_url": "https://github.com/mhdawson/micro-app-framework/archive/master.zip",
    "api_url": "https://api.github.com/repos/mhdawson/micro-app-framework"
  },
  "keywords": [
    "micro-app",
    "framework"
  ],
  "author": {
    "name": "Michael Dawson"
  },
  "license": "MIT",
  "homepage": "https://github.com/mhdawson/micro-app-framework#readme",
  "contributors": [
    {
      "name": "Michael Dawson",
      "email": "mdawson@devrus.com"
    }
  ],
  "gitHead": "238f34b022545579b3fdca2224090345b3a0604a",
  "_npmVersion": "2.14.12",
  "_nodeVersion": "4.3.2",
  "dist": {
    "shasum": "7515eb2187617f82b03c10cd0779340003d4ed0b",
    "tarball": "http://registry.npmjs.org/micro-app-framework/-/micro-app-framework-0.1.4.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2015-12-22T01:53:58.346Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-12-27T23:36:05.814Z"
    },
    {
      "number": "0.1.2",
      "date": "2015-12-31T16:46:01.368Z"
    },
    {
      "number": "0.1.3",
      "date": "2016-02-13T17:59:19.295Z"
    },
    {
      "number": "0.1.4",
      "date": "2016-03-27T17:18:13.775Z"
    }
  ],
  "created": "2015-12-22T01:53:58.346Z",
  "modified": "2016-03-27T17:18:13.775Z",
  "lastPublisher": {
    "name": "mhdawson1",
    "email": "mdawson@devrus.com"
  },
  "owners": [
    {
      "name": "mhdawson1",
      "email": "mdawson@devrus.com"
    }
  ],
  "readme": "# micro-app-framework\n\nSimple framework in Node,js  for building small one page apps when you\ndon't need/want a more sophisticated framework.\n\nI had built a number of small apps that I keep ruinning on my desktop and\nextracted the common framework so that it could be more easily used for \nfuture apps.  Typically the apps have a small single page GUI.  \n\nThe framework makes it easy to create the app where you only need to \nfocus on the app functionality and page layout while the framework\ncan handle the common requirements like the http server, tls support,\nauthentication etc.\n\nThe framework handles opening a pop-up page with the appropriate\nsize of the application GUI page. If you configure the browser to\nallow javascript to close windows it will also close the window/page\nfrom which the application is launched.\n\n**New** You can now get native look and feel for micro-apps without\nchanging the app itself. It also removes the browser address bar\nmaking the application window more compact.  See the project\n[micro-app-electron-launcher]\n(https://github.com/mhdawson/micro-app-electron-launcher)\nfor details.\n\n# Examples\n\nExamples of existing apps using the framework are shown in the following sections.\n\nThese existing micro-apps are a good starting point when you want\nto create your first application based on the framework.\n\n## micro-app-timezones\n\nSimple micro-app to keep track of the current time for people you work with.\n\n[micr-app-timezones](https://www.npmjs.com/package/micro-app-timezones)\n\n![sample timezones page](https://raw.githubusercontent.com/mhdawson/micro-app-timezones/master/pictures/timezones-window.jpg)\n\n## micro-app-phone-dialer\n\nSimple phone dialer for cisco phones.\n\n[micro-app-phone-dialer](https://www.npmjs.com/package/micro-app-phone-dialer)\n\n![sample phone-dialer page](https://raw.githubusercontent.com/mhdawson/micro-app-phone-dialer/master/pictures/phone-dialer-window.jpg)\n\n## micro-app-simple-dashboard\n\nMicro app to display a home dashboard showing temperature, power usage and other data collected\nfrom local sensors. The dashboard is updated in realtime using socket.io.\n\n[micro-app-simple-dashboard](https://www.npmjs.com/package/micro-app-simple-dashboard)\n\n![picture of dashboard main window](https://raw.githubusercontent.com/mhdawson/micro-app-simple-dashboard/master/pictures/dashboard_main_window.jpg?raw=true)\n\n\n# Usage\n\nTo build a micro-app using the framework you need to do the following:\n\n* create Node.js application called **server.js**\n* create html page template called **page.html.template**\n* create configuration file called **config.json** \n* create **package.json** so that micro-app can be published as an npm\n\n## Server.js\n\nServer.js must define an object called \"Sever\" which must support \nthe following methods:\n\n* **getDefaults()** - must return an object which has fields which define\n  the default configuration values for the application. For example\n  returning { 'title': 'House Data' } sets the default title to \n  House Data.  These values can be overridden by the conents of\n  config.json.\n* **getTemplateReplacemnts()** - must return an array of objects each\n  of which has a 'key' and 'value' field.  Each instance of the key\n  in page.html.template will be substituted with the value provided.\n* **startServer(server)** - called when the configuration has been read in\n  and the application is ready to start.  At this point Server.config\n  will have all of the configuration values for the application.\n* **handleSupportingPages(request, response)** - this can optionally be \n  provided to support returning page content other than the main page.\n  If this function handles a page it should return true and have \n  both written and ended the response.  Otherwise its should return\n  false. This can be used to provide supporting scripts for the main\n  page. \n\nThe applicaiton can define its own substitutions in **page.html.template**\nbut in addition the framework uses/provides the following by default:\n\n* &lt;URL_TYPE&gt; - either http or https depending on wether tls is enabled.\n  This is provided by the framework, no need to provide in \n  getTemplateReplacements().\n* &lt;TITLE&gt; - title for the app page.\n* &lt;PAGE_WIDTH&gt; - width for the page opened for the application.\n* &lt;PAGE_HEIGHT&gt; - height for the page opened for the application.\n \n\nIn order to allow the micro-app to be started on its own (as opposed\nto being started by the framework which will be supported in later\nversions) the following should be at the end of server.js\n\n<PRE>\nif (require.main === module) {\n  var path = require('path');\n  var microAppFramework = require('micro-app-framework');\n  microAppFramework(path.join(__dirname), Server);\n}\n\nmodule.exports = Server;\n</PRE>\n\n## page.html.template\n\npage.html.template provides the main page with the GUI for the applications.\n\nIt should use &lt;TITLE&gt; as the title so that uses the value from the\nconfiguration files.\n\nOther values can be used as required by the html/javascript defined for\nthe application.\n\nFor addtional connections (ex using socket.io) it should use &lt;URL_TYPE&gt; for\nthe connection type and something allong these lines for the connection\nback to the application:\n\n<PRE>\n'&lt;URL_TYPE&lt;://' + window.location.host\n</PRE>\n\n## config.json\n\nconfig.json acts as the configuration file for the application.  It can\ninclude application specific values which server.js can read by accessing\nthe values in Server.config.\n\nThe following are supported by the framework itself:\n\n* **serverPort** - the port on which the server will listen (currently required\n  although a default will be supported in a later version).\n* **title** - the value that will be used for the &lt;TITLE&gt; substitution.\n* **scrollBars** - allow vertical scrollbars if content it bigger than\n  window\n* **tls** - if this value is the string \"true\" then the server will only \n  support connections using tls.  In this case there must be a\n  cert.pem and key.pem which contain the key and certificate that\n  will be used by the server.  \n* **authenticate** - if the value is the string \"true\" then basic authentication\n  will be required by the application and config.json must include \n  the field 'authInfo\" as described below.\n* **authInfo** - object with the fields 'username', 'password' and 'realm'.  \n  The password is a hashed value which can be created using the script\n  gen_password.js which is located in the lib directory for the \n  micro-app-framework.\n\nThe application can add any additional configuration values that will \nbe accessible through Server.config.  In addition, if authentication is\nenabled the value can be encrypted. In this case, the value can \nbe decrypted using Server.decryptConfigValue(value).  The function\ndecryptConfigValue() will be added to the Server object after \nauthentication is complete and can be used in getTemplateReplacements().\n\nIf required the key/certificate can be created using a command along \nthese lines:\n\n<PRE>\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout key.pem -out cert.pem\n</PRE>\n\nThe script lib/gen_password.js can be used to generate the hashed password for\nauthInfo as follows:\n\n<PRE>\nnode lib/gen_passwword.js mypassword\n</PRE>\n\nThe script lib/enc_config_value.js can be used to encrypt a configuration value\nas follows:\n\n<PRE>\nnode lib/enc_config_value.js value mypassword\n</PRE>\n\nwhere value is the configuration value to be encrypted and mypassword must\nbe the same password configured for basic authentication.\n\n\nThe following are are also supported by the framework and useful for debugging:\n\n* **useLaunchWindow** - if set to the string \"true\" open the micro-app in the\n  launch window/tab as opposed to a pop-up. Useful for debugging so you can\n  more easily get the developer tools for the page.\n\n* **closeLaunchWindow** - if set to the string \"true\" and useLaunchWindow is\n  not set, then after opening the pop-up don't close the original launch\n  window/tab.  Useful for debugging or when you just don't want the window\n  to be closed after launch.\n\n\n## package.json\n\npackage.json whould be as required for your application but it should include the\ndependency on the lastest version of the micro-app-framework. For example:\n\n<PRE>\n  \"dependencies\": {\n    \"micro-app-framework\": \"^0.1.1\",\n  },\n</PRE>\n\nand should include the following to support starting the micro-app with npm:\n\n<PRE>\n  \"scripts\": {\n    \"start\": \"node lib/server.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n</PRE>\n\n## File layout\n\nThe framework expects the files to be layed out as follows:\n\n<PRE>\npackage.json\nlib/server.js\nlib/page.html.template\nlib/config.json\nlib/key.pem (only needed if tls is enabled)\nlib/cert.pem (only needed if tls is enabled)\n</PRE>\n\nand expects that the application will be started using:\n\n<PRE>\nnpm start\n</PRE>\n\nin the root directory for the application (the directory with \npackage.json)\n\n\n# TODO\n\n* add option to configure the server, in particular need to be \n  able to limit it to using only the loopback address.\n* move over [HomeAlarm}(https://github.com/mhdawson/HomeAlarm) \n  and any updates required for it.\n\n\n"
}