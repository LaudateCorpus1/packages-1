{
  "name": "electron-meteor",
  "version": "0.3.0",
  "description": "Full Meteor Client for Electron",
  "main": "dist/src/Meteor.js",
  "scripts": {
    "compile": "npm run compilesrc && npm run compilelib",
    "watch": "npm run compilelib && ./node_modules/babel-cli/bin/babel.js -d dist/src src/ -w",
    "compilesrc": "./node_modules/babel-cli/bin/babel.js -d dist/src src/",
    "compilelib": "./node_modules/babel-cli/bin/babel.js -d dist/lib lib/",
    "prepublish": "npm run compile"
  },
  "repository": {
    "user": "inProgress-team",
    "repo": "electron-meteor",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/inProgress-team/electron-meteor/tarball/master",
    "clone_url": "https://github.com/inProgress-team/electron-meteor",
    "https_url": "https://github.com/inProgress-team/electron-meteor",
    "travis_url": "https://travis-ci.org/inProgress-team/electron-meteor",
    "zip_url": "https://github.com/inProgress-team/electron-meteor/archive/master.zip",
    "api_url": "https://api.github.com/repos/inProgress-team/electron-meteor"
  },
  "keywords": [
    "react-component",
    "ddp",
    "meteor",
    "react",
    "electron"
  ],
  "author": {
    "name": "Th√©o Mathieu"
  },
  "license": "MIT",
  "homepage": "https://github.com/inProgress-team/electron-meteor#readme",
  "dependencies": {
    "base-64": "^0.1.0",
    "crypto-js": "^3.1.6",
    "ejson": "^2.1.2",
    "electron-json-storage": "^2.0.0",
    "minimongo-cache": "0.0.48",
    "react": "^0.14.0 || ^15.0.1",
    "react-mixin": "^3.0.3",
    "trackr": "^2.0.2",
    "wolfy87-eventemitter": "^4.3.0"
  },
  "devDependencies": {
    "babel-cli": "^6.8.0",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-runtime": "^6.8.0",
    "babel-polyfill": "^6.8.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0"
  },
  "gitHead": "0c3cc4451759b1b0658cbeebafcaf402049199c2",
  "_npmVersion": "3.8.6",
  "_nodeVersion": "6.1.0",
  "dist": {
    "shasum": "c304db9696b92b2f384373425e5ab8b61b975751",
    "tarball": "http://registry.npmjs.org/electron-meteor/-/electron-meteor-0.3.0.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-05-14T17:20:15.914Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-05-14T17:37:04.474Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-05-14T17:37:27.351Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-05-15T04:57:07.500Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-05-23T20:54:01.548Z"
    }
  ],
  "created": "2016-05-14T17:20:15.914Z",
  "modified": "2016-05-23T20:54:01.548Z",
  "lastPublisher": {
    "name": "theo-mathieu",
    "email": "theo.mathieu@in-progress.io"
  },
  "owners": [
    {
      "name": "theo-mathieu",
      "email": "theo.mathieu@in-progress.io"
    }
  ],
  "readme": "# electron-meteor [![electron-meteor](http://img.shields.io/npm/dm/electron-meteor.svg)](https://www.npmjs.org/package/electron-meteor) [![npm version](https://badge.fury.io/js/electron-meteor.svg)](http://badge.fury.io/js/electron-meteor) [![Dependency Status](https://david-dm.org/inProgress-team/electron-meteor.svg)](https://david-dm.org/inProgress-team/electron-meteor)\n\nMeteor-like methods for React Native.\n\n## What is it for ?\n\nThe purpose of this library is :\n* to set up and maintain a ddp connection with a ddp server, freeing the developer from having to do it on their own.\n* be fully compatible with react-native and help react-native developers.\n* **to match with [Meteor documentation](http://docs.meteor.com/) used with React.**\n\n## Install\n\n    npm i --save electron-meteor@latest\n\n[!! See detailed installation guide](https://github.com/inProgress-team/electron-meteor/blob/master/docs/Install.md)\n\n## Example usage\n\n```javascript\n\nimport { View, Text, Component } from 'react-native';\nimport Meteor, { createContainer } from 'electron-meteor';\n\nMeteor.connect('http://192.168.X.X:3000/websocket');//do this only once\n\nclass App extends Component {\n  renderRow(todo) {\n    return (\n      <Text>{todo.title}</Text>\n    );\n  }\n  render() {\n    const { settings, todosReady } = this.data;\n\n    <View>\n      <Text>{settings.title}</Text>\n        {!todosReady && <Text>Not ready</Text>}\n\n        <MeteorListView\n          collection=\"todos\"\n          selector={{done: true}}\n          options={{sort: {createdAt: -1}}}\n          renderRow={this.renderRow}\n        />\n    </View>\n\n  }\n}\n\nexport default createContainer(params=>{\n  const handle = Meteor.subscribe('todos');\n  Meteor.subscribe('settings');\n\n  return {\n    todosReady: handle.ready(),\n    settings: Meteor.collection('settings').findOne()\n  };\n})\n```\n\n# createContainer\n\n[Since Meteor 1.3, createContainer is the recommended way to go to populate your React Classes](http://guide.meteor.com/v1.3/react.html#using-createContainer). Very similar to getMeteorData but your separate container components from presentational components.\n\n## Example\n\n```javascript\nimport Meteor, { createContainer } from 'electron-meteor';\n\n\nclass Orders extends Component {\n  render() {\n    const { pendingOrders } = this.props;\n\n    //...\n    );\n  }\n}\n\nexport default createContainer(params=>{\n  return {\n    pendingOrders: Meteor.collection('orders').find({status: \"pending\"}),\n  };\n}, Orders)\n```\n\n# connectMeteor && getMeteorData\n\nconnectMeteor is a React Mixin which enables getMeteorData (the old way of populating meteor data into your components).\n\n## Example\n\n```javascript\nimport Meteor, { connectMeteor } from 'electron-meteor';\n\n/*\n* Uses decorators (see detailed installation to activate it)\n* Or use :\n\n  class Todos extends Component {\n    ...\n  }\n  connectMeteor(Todos);\n  export default Todos;\n\n*/\n\n@connectMeteor\nclass Orders extends Component {\n  getMeteorData() {\n    return {\n      pendingOrders: Meteor.collection('orders').find({status: \"pending\"}),\n    };\n  }\n  render() {\n    const { pendingOrders } = this.props;\n\n    //...\n    );\n  }\n}\n```\n\n# Reactive variables\n\nThese variables can be used inside getMeteorData or createContainer. They will be populated into your component if they change.\n\n* [Meteor.subscribe](http://docs.meteor.com/#/full/meteor_subscribe) : returns an handle. !! If the component which called subscribe is unmounted, the subscription is automatically canceled.\n* Meteor.collection(collectionName)\n  * [.find(selector, options)](http://docs.meteor.com/#/full/find)\n  * [.findOne(selector, options)](http://docs.meteor.com/#/full/findone)\n* [Meteor.user()](http://docs.meteor.com/#/full/meteor_user)\n* [Meteor.userId()](http://docs.meteor.com/#/full/meteor_userid)\n* [Meteor.status()](http://docs.meteor.com/#/full/meteor_status)\n* [Meteor.loggingIn()](http://docs.meteor.com/#/full/meteor_loggingin)\n\n# Additionals collection methods\n\nThese methods (except update) work offline. That means that elements are correctly updated offline, and when you reconnect to ddp, Meteor calls are taken care of.\n\n* Meteor.collection(collectionName)\n  * [.insert(doc, callback)](http://docs.meteor.com/#/full/insert)\n  * [.update(id, modifier, [options], [callback])](http://docs.meteor.com/#/full/update)\n  * [.remove(id, callback(err, countRemoved))](http://docs.meteor.com/#/full/remove)\n\n\n# MeteorListView Component\n\nSame as [ListView](https://facebook.github.io/react-native/docs/listview.html) Component but does not need dataSource and accepts three arguments :\n\n- `collection` **string** *required*\n- `selector` [**string** / **object**]\n- `options` **object**\n- `listViewRef` [**string** / **function**] ref to ListView component.\n\n\n### Example usage\n\n```javascript\n<MeteorListView\n  collection=\"todos\"\n  selector={{done: true}}\n  options={{sort: {createdAt: -1}}}\n  renderRow={this.renderItem}\n  //...other listview props\n/>\n```\n\n# MeteorComplexListView Component\n\nSame as [ListView](https://facebook.github.io/react-native/docs/listview.html) Component but does not need dataSource and accepts one argument. You may need it if you make complex requests combining multiples collections.\n\n- `elements` **function** *required* : a reactive function which returns an array of elements.\n- `listViewRef` [**string** / **function**] ref to ListView component.\n\n### Example usage\n\n```javascript\n<MeteorComplexListView\n  elements={()=>{return Meteor.collection('todos').find()}}\n  renderRow={this.renderItem}\n  //...other listview props\n/>\n```\n\n# API\n\n## Meteor DDP connection\n\n#### Meteor.connect(endpoint, options)\n\nConnect to a DDP server. You only have to do this once in your app.\n\n#### Arguments\n\n- `url` **string** *required*\n- `options` **object** Available options are :\n  - autoConnect **boolean** [true] whether to establish the connection to the server upon instantiation. When false, one can manually establish the connection with the Meteor.ddp.connect method.\n  - autoReconnect **boolean** [true] whether to try to reconnect to the server when the socket connection closes, unless the closing was initiated by a call to the disconnect method.\n  - reconnectInterval **number** [10000] the interval in ms between reconnection attempts.\n\n#### Meteor.disconnect()\n\nDisconnect from the DDP server.\n\n## Meteor methods\n\n* [Meteor.call](http://docs.meteor.com/#/full/meteor_call)\n* [Meteor.loginWithPassword](http://docs.meteor.com/#/full/meteor_loginwithpassword) (Please note that user is auto-resigned in - like in Meteor Web applications - thanks to React Native AsyncStorage.)\n* [Meteor.logout](http://docs.meteor.com/#/full/meteor_logout)\n* [Meteor.logoutOtherClients](http://docs.meteor.com/#/full/meteor_logoutotherclients)\n\n## Meteor.Accounts\n\n* [Accounts.createUser](http://docs.meteor.com/#/full/accounts_createuser)\n* [Accounts.changePassword](http://docs.meteor.com/#/full/accounts_forgotpassword)\n* [Accounts.forgotPassword](http://docs.meteor.com/#/full/accounts_changepassword)\n* [Accounts.onLogin](http://docs.meteor.com/#/full/accounts_onlogin)\n* [Accounts.onLoginFailure](http://docs.meteor.com/#/full/accounts_onloginfailure)\n\n## Meteor.ddp\n\nOnce connected to the ddp server, you can access every method available in [ddp.js](https://github.com/mondora/ddp.js/).\n* Meteor.ddp.on('connected')\n* Meteor.ddp.on('added')\n* Meteor.ddp.on('changed')\n* ...\n\n## CollectionFS\n\n* Meteor.FSCollection(collectionName) : Helper for [Meteor-CollectionFS](https://github.com/CollectionFS/Meteor-CollectionFS). Full documentation [here](https://github.com/inProgress-team/electron-meteor/blob/master/docs/FSCollection.md)\n* This plugin also exposes a FSCollectionImagesPreloader component which helps you preload every image you want in CollectionFS (only available on ios)\n\n```javascript\nimport { FSCollectionImagesPreloader } from 'electron-meteor';\n\n<FSCollectionImagesPreloader\n  collection=\"imagesFiles\"\n  selector={{metadata.owner: XXX}}\n/>\n```\n\n\n## react-native-router-flux\n\n* [Github repository](https://github.com/inProgress-team/electron-meteor-router-flux)\n* npm i --save electron-meteor-router-flux@latest\n* [Custom scene renderer](https://github.com/aksonov/react-native-router-flux#switch-new-feature) which allows to select tab scene to show depending from app state. It could be useful for authentication, restricted scenes, etc.\n\n\n# Want to help ?\n\nPull Requests and issues reported are welcome ! :)\n"
}