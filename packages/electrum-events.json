{
  "name": "electrum-events",
  "version": "2.2.1",
  "description": "Electrum Events forwards web component events to the bus.",
  "main": "lib/index.js",
  "scripts": {
    "babel": "babel --quiet --out-dir lib src && babel --quiet --out-dir lib.test src.test",
    "clean": "rimraf ./lib && rimraf ./lib.test",
    "compile": "npm run clean && require-self && npm run babel",
    "mocha": "mocha lib.test/**/*.js",
    "prepublish": "npm run compile",
    "test": "npm run compile && npm run mocha"
  },
  "repository": {
    "user": "epsitec-sa",
    "repo": "electrum-events",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/epsitec-sa/electrum-events/tarball/master",
    "clone_url": "https://github.com/epsitec-sa/electrum-events",
    "https_url": "https://github.com/epsitec-sa/electrum-events",
    "travis_url": "https://travis-ci.org/epsitec-sa/electrum-events",
    "zip_url": "https://github.com/epsitec-sa/electrum-events/archive/master.zip",
    "api_url": "https://api.github.com/repos/epsitec-sa/electrum-events"
  },
  "keywords": [
    "electrum"
  ],
  "author": {
    "name": "Epsitec SA"
  },
  "license": "MIT",
  "homepage": "https://github.com/epsitec-sa/electrum-events#readme",
  "dependencies": {
    "electrum-utils": "^1.6.0"
  },
  "devDependencies": {
    "babel-env": "^1.2.2",
    "generic-js-env": "^1.5.0",
    "mai-chai": "^2.6.0",
    "react": "^15.0.2",
    "react-dom": "^15.0.2",
    "require-self": "^0.1.0",
    "rimraf": "^2.5.2"
  },
  "gitHead": "c863d6773cfce51aa4fa128345ef1003655defb9",
  "_npmVersion": "3.8.8",
  "_nodeVersion": "5.10.1",
  "dist": {
    "shasum": "5b05155b0836903e76c239b7da9bca65cb7023af",
    "tarball": "http://registry.npmjs.org/electrum-events/-/electrum-events-2.2.1.tgz"
  },
  "versions": [
    {
      "number": "0.9.0",
      "date": "2015-12-07T13:43:12.535Z"
    },
    {
      "number": "1.0.0",
      "date": "2015-12-08T05:33:54.526Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-12-08T05:52:31.872Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-12-08T05:56:32.470Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-12-08T08:03:51.369Z"
    },
    {
      "number": "1.0.4",
      "date": "2015-12-10T08:22:59.360Z"
    },
    {
      "number": "1.0.5",
      "date": "2015-12-10T08:57:40.458Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-12-11T04:45:52.201Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-12-11T05:13:44.157Z"
    },
    {
      "number": "1.1.2",
      "date": "2015-12-11T05:39:24.947Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-01-27T06:21:28.220Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-02-01T06:14:25.437Z"
    },
    {
      "number": "1.4.0",
      "date": "2016-03-15T20:10:40.796Z"
    },
    {
      "number": "1.5.0",
      "date": "2016-04-19T07:22:20.107Z"
    },
    {
      "number": "1.6.0",
      "date": "2016-04-19T09:39:22.656Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-05-11T09:45:09.385Z"
    },
    {
      "number": "2.1.0",
      "date": "2016-05-17T15:59:53.037Z"
    },
    {
      "number": "2.2.0",
      "date": "2016-06-14T15:47:35.504Z"
    },
    {
      "number": "2.2.1",
      "date": "2016-06-14T16:10:16.039Z"
    }
  ],
  "created": "2015-12-07T13:43:12.535Z",
  "modified": "2016-06-14T16:10:16.039Z",
  "lastPublisher": {
    "name": "epsitec",
    "email": "arnaud@epsitec.ch"
  },
  "owners": [
    {
      "name": "epsitec",
      "email": "arnaud@epsitec.ch"
    },
    {
      "name": "samlebarbare",
      "email": "samuel.loup@gmail.com"
    },
    {
      "name": "schroeterm",
      "email": "mathieu@schroetersa.ch"
    }
  ],
  "readme": "# Electrum Events\r\n\r\n[![NPM version](https://img.shields.io/npm/v/electrum-events.svg)](https://www.npmjs.com/package/electrum-events)\r\n[![Build Status](https://travis-ci.org/epsitec-sa/electrum-events.svg?branch=master)](https://travis-ci.org/epsitec-sa/electrum-events)\r\n[![Build status](https://ci.appveyor.com/api/projects/status/0kuudrbhwiunp0k0?svg=true)](https://ci.appveyor.com/project/epsitec/electrum-events)\r\n\r\nThe `electrum-events` module forwards web component events to the bus.\r\n\r\n# Mouse capture utilities\r\n\r\nCapturing the mouse on Chrome (and electron) is [tricky](http://code.fitness/post/2016/06/capture-mouse-events.html).\r\n`electrum-events` provides some helper functions to make the developer's\r\nlife easier:\r\n\r\n* `captureMouseEvents(e, listeners)` captures the mouse until the mouse\r\n  button gets released. The `listeners` object can specify functions\r\n  `onMouseMove(e)` and `onMouseUp(e)` to process these events.  \r\n* `preventGlobalMouseEvents()` and `restoreGlobalMouseEvents()` can be\r\n  used to disable mouse events on a complete HTML document. This can come\r\n  in handy if you want to make an HTML page passive.\r\n\r\nNote that `captureMouseEvents()` makes use of `preventGlobalMouseEvents()`\r\nso there is no need to call these functions when capturing the mouse events. \r\n\r\n# The EventHandlers class\r\n\r\nThe `EventHandlers` class provides implementations for the various event\r\nhandlers needed by React web components:\r\n\r\n* `handleBlur` and `handleFocus`\r\n* `handleChange`\r\n* `handleKeyDown`, `handleKeyUp` and `handleKeyPress`\r\n* `handleSelect`\r\n\r\nEvents are of two categories:\r\n\r\n* Events which modify a value (change, key up/down, select).  \r\n  They are sent with the `bus.notify()` function.\r\n* Events which trigger an action (focus, defocus, button click).  \r\n  They are sent with the `bus.dispatch()` function.\r\n\r\n## Using EventHandlers\r\n\r\nUsually, you won't use `EventHandlers` yourself. It is Electrum's\r\nresponsibility to _inject_ the handlers into wrapped components.\r\nThis is handled by Electrum's `InjectingMiddleware`:\r\n\r\n```javascript\r\nclass Electrum {\r\n  ...\r\n  reset () {\r\n    ...\r\n    this._injectingMiddleware = new InjectingMiddleware ();\r\n    this._injectingMiddleware.register ('events', obj => {\r\n      obj._eventHandlers = EventHandlers.inject (obj, () => this.bus);\r\n    });\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\nThe instance of the event handlers class attached to a component\r\ncan be accessed through `obj._eventHandlers`. This might be useful\r\nwhen debugging (see below).\r\n\r\n## EventHandlers properties\r\n\r\nEvery event handlers instance provides the following public properties:\r\n\r\n* `component` &rarr; the component to which the handlers are attached.\r\n* `props` &rarr; the properties of the component.\r\n* `bus` &rarr; the bus to which the events will be sent.\r\n\r\n## Debug with active logging\r\n\r\nClass `EventHandlers` has a property `debug` which can be set to log\r\nevents to the console, which may prove convenient to better understand\r\nwhat happens.\r\n\r\nFor customized logging, set `debug` to a function:\r\n\r\n```javascript\r\nconst eh = new EventHandlers (obj, bus);\r\neh.debug = (component, source, event) => { /* ... */ };\r\n```\r\n\r\nThe `component` argument refers to the component on which the event\r\nwas notified. The `source` argument is one of `focus`, `change`,\r\n`key-down`, `key-up`, `key-press` and `select`, while the `event`\r\nargument gives full access to the event being processed.\r\n"
}