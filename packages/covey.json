{
  "name": "covey",
  "version": "1.2.0",
  "description": "Declarative process manager for long- and short-running background worker processes, most useful in Electron and CLI apps, and servers with heavy CPU-bound loads.",
  "main": "lib/index.js",
  "scripts": {
    "typings": "typings install",
    "pretest": "npm run build-test",
    "test": "mocha -R spec -r babel-register",
    "build": "rm -rf es6-src && tsc --listFiles -p . && babel es6-src --out-dir lib && cp es6-src/*.ts lib/",
    "build-test": "tsc test/*.ts",
    "postbuild": "rm -f src/*.js",
    "posttest": "rm -f test/*.js"
  },
  "repository": {
    "user": "swift-nav",
    "repo": "covey",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/swift-nav/covey/tarball/master",
    "clone_url": "https://github.com/swift-nav/covey",
    "https_url": "https://github.com/swift-nav/covey",
    "travis_url": "https://travis-ci.org/swift-nav/covey",
    "zip_url": "https://github.com/swift-nav/covey/archive/master.zip",
    "api_url": "https://api.github.com/repos/swift-nav/covey"
  },
  "keywords": [
    "covey",
    "manager",
    "groups",
    "workers",
    "process",
    "electron",
    "cli",
    "fleet"
  ],
  "author": {
    "name": "Joshua Gross",
    "email": "josh@swift-nav.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/swift-nav/covey#readme",
  "devDependencies": {
    "babel-cli": "^6.14.0",
    "babel-core": "^6.9.0",
    "babel-eslint": "^6.0.4",
    "babel-loader": "^6.2.4",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-dev-expression": "^0.2.1",
    "babel-plugin-transform-remove-console": "^6.8.0",
    "babel-plugin-transform-remove-debugger": "^6.8.0",
    "babel-plugin-webpack-loaders": "^0.7.0",
    "babel-polyfill": "^6.9.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.9.0",
    "ts-node": "^1.6.1",
    "typescript": "^2.0.6",
    "typings": "^1.5.0"
  },
  "devEngines": {
    "node": "4.x || 6.x",
    "npm": "2.x || 3.x"
  },
  "dependencies": {
    "deep-freeze": "0.0.1",
    "event-resource": "^1.1.1",
    "json-stable-stringify": "^1.0.1",
    "lodash": "^4.16.6",
    "md5": "^2.2.1"
  },
  "gitHead": "e57c5e4297136df770b1d95c1f0e8634dd81315b",
  "_npmVersion": "3.10.8",
  "_nodeVersion": "6.9.1",
  "dist": {
    "shasum": "10614b5de0dbf76c3e77cf443dee8a17e68222a5",
    "tarball": "http://registry.npmjs.org/covey/-/covey-1.2.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2014-04-05T16:07:36.648Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-11-04T18:18:14.759Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-11-08T01:27:31.409Z"
    },
    {
      "number": "1.1.1",
      "date": "2016-11-08T02:30:56.309Z"
    },
    {
      "number": "1.1.2",
      "date": "2016-11-08T02:47:12.325Z"
    },
    {
      "number": "1.1.3",
      "date": "2016-11-08T02:51:59.326Z"
    },
    {
      "number": "1.1.4",
      "date": "2016-11-08T03:04:32.625Z"
    },
    {
      "number": "1.1.5",
      "date": "2016-11-08T03:15:36.426Z"
    },
    {
      "number": "1.1.6",
      "date": "2016-11-08T03:19:27.344Z"
    },
    {
      "number": "1.1.7",
      "date": "2016-11-08T03:22:52.614Z"
    },
    {
      "number": "1.1.8",
      "date": "2016-11-08T03:31:23.857Z"
    },
    {
      "number": "1.1.9",
      "date": "2016-11-08T03:42:42.591Z"
    },
    {
      "number": "1.1.10",
      "date": "2016-11-09T21:33:33.316Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-11-09T23:36:44.890Z"
    }
  ],
  "created": "2014-04-05T16:07:36.648Z",
  "modified": "2016-11-09T23:36:44.890Z",
  "lastPublisher": {
    "name": "joshuagross",
    "email": "joshua.gross@gmail.com"
  },
  "owners": [
    {
      "name": "joshuagross",
      "email": "joshua.gross@gmail.com"
    }
  ],
  "readme": "# covey\n\nCovey is a Node.js manager for long- or short-running background processes.\n\nUsing Covey, you declaratively state what work you want done, and Covey will make sure that\nthe work is completed.\n\nCovey is similar to [forever][forever] or [worker-manager][worker-manager] in that it is a\nuseful way of keeping a long-running process alive and retrying on exits. It is different in\nthat it is only meant for managing Node.js processes that adhere to a specific\ninterface that need to convey status and completion information.\n\nCovey is useful for splitting up an application into multiple independent pieces in situations\nwhere you need processes to be resilient to crashing and block the event loop more than normal,\nor when you simply want to declaratively sequence an application.\n\n## Limitations\n\nCovey is probably better-suited for CLI utilities and Electron applications than server\napplications. Currently covey will only run one worker per process, and will not reuse processes.\n\nIn addition, errors are usually thrown globally instead of simply notifying interested parties.\nThis makes a `CoveyManager` in \"host mode\" very vulnerable to crashes, which is acceptable for usage\nin Electron apps under controlled environment, but not with many users.\n\nBecause Covey uses introspection to get worker constructor names, you cannot currently use\nUglifyJS name mangling with your workers.\n\n## Roadmap\n\n* option to completely nuke a group, reset, stop, and clear all workers inside\n* Test multiple groups - no duplicate workers across groups\n* Test running bogus headless runner\n* Add support for results and data but as a proper pubsub channel, readable stream, promise\n  * support streaming data within a reduxy app, to stream input\n* Add support for health checks\n* Add support for logging, especially across IPC boundaries\n* Add examples, in vanilla JS and TypeScript\n* Better story and testing around error handling in general\n* Better story around handling workers that refuse to stop\n* Maybe get rid of client / host manager stuff or simplify it\n* Document foreign process workers, managers, manager clients/hosts, headless runners\n\n## Concepts\n\n### Covey Manager\n\nA Covey Manager is an object that manages covey workers - usually one process per application will\nbe responsible for managing workers.\n\n### Covey Workers\n\nA class that adheres to the `CoveyWorker` interface and a process that runs the worker.\n\n### Covey Group\n\nA Covey Group is a named grouping of `CoveyWorker`s within a `CoveyManager`. You can `set`\na group declaratively (\"here is a list of all workers I want run in this group\"): the manager\nwill diff declared workers with existing workers; new workers will be started, workers that\nare no longer listed are torn down, and workers in both sets are untouched. You can also use groups\nin a less declarative way to `add` new workers or `remove` existing workers.\n\n## Usage\n\nDeclare a worker:\n\n```javascript\nimport { CoveyWorker, CoveyWorkerLifecycleState } from 'covey';\nimport SerialPort from 'serialport';\nimport http from 'http';\n\nconst { Crashed, Stopping, Stopped } = CoveyWorkerLifecycleState;\n\nclass StreamSerialPortToHttp extends CoveyWorker {\n  params: {\n    serialport:string,\n    baudrate:number,\n    port:number,\n  };\n\n  /**\n   * A worker constructor must complete synchronously, and should take\n   * configuration. It may synchronously validate input.\n   * All parameters must be JSON-serializable!\n   */\n  constructor (serialport: string, baudrate: number, port: number) {\n    super();\n    this.params = {\n      serialport,\n      baudrate,\n      port\n    };\n  }\n\n  /**\n   * Called a maximum of once per worker instance.\n   */\n  runWorker () {\n    this.starting('begin'); // status update\n\n    const s = new SerialPort(this.serialport, { baudRate: this.baudrate });\n\n    this.state.serialLink = s;\n\n    s.on('open', () => {\n      this.starting('serial port opened'); // status update\n\n      const responder = (req, res) => {\n        s.pipe(res);\n      };\n\n      const server = http.createServer(responder).listen(this.port);\n\n      this.state.server = server;\n\n      server.on('close', () => {\n        this.state.server = null;\n        if (this.lifecycle.state !== Stopping) {\n          this.crashed('http server closed');\n        } else if (!this.state.serialLink) {\n          this.stopped('stopped cleanly (from server close)');\n        }\n      });\n    });\n\n    s.on('close', () => {\n      this.state.serialLink = null;\n      if (this.lifecycle.state !== Stopping) {\n        this.crashed('serial port closed');\n      } else if (!this.state.server) {\n        this.stopped('stopped cleanly (from serialLink close)');\n      }\n    });\n  }\n\n  /**\n   * Called by worker manager or end-user to stop this worker.\n   */\n  stopWorker () {\n    this.stopping('closing serial link and server');\n    this.state.serialLink && this.state.serialLink.close();\n    this.state.server && this.state.serialLink.close();\n    // should be closed cleanly once server and serial link are closed\n  }\n}\n```\n\nDeclare available workers in a manifest:\n\n```javascript\nimport { CoveyManifest } from 'covey';\n\nconst manifest = new CoveyManifest();\n\n// Declare previously defined worker\nmanifest.declare(StreamSerialPortToHttp);\n```\n\nThen, create a manager somewhere with a manifest of available workers,\nand the standalone script that can be called to start foreign-process workers (optional):\n\n```javascript\nimport { CoveyManager } from 'covey';\n\nconst mgr = new CoveyManager(manifest, './worker.js');\n```\n\nFinally, communicate with your manager to start a group of workers:\n\n```javascript\nimport { CoveyGroup } from 'covey';\n\nmgr.runGroup(new CoveyGroup('myWorkers', [\n  new StreamSerialPortToHttp('/dev/tty.123', 9600, 7770).setOptions({ foreign: true }),\n  new StreamSerialPortToHttp('/dev/tty.234', 115200, 7771).setOptions({ foreign: true }),\n  new StreamSerialPortToHttp('/dev/tty.345', 921600, 7772).setOptions({ foreign: true })\n]));\n```\n\nIn addition to the options specific to a type of worker, all workers have common options\nlike `foreign`, which defaults to `true` (foreign workers are run in their own process;\nnon-foreign workers are run in the same process as the manager).\n\nThen, you can subscribe to manager events to receive notifications about workers,\nquery state, and perform other actions: TODO\n\n[forever]: https://www.npmjs.com/package/forever\n[worker-manager]: https://www.npmjs.com/package/worker-manager\n"
}