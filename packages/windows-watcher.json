{
  "name": "windows-watcher",
  "version": "0.0.1-pre4",
  "description": "Node.js directory watcher built with the native windows FileSystemWatcher",
  "keywords": [
    "watcher",
    "files",
    "directory",
    "folder"
  ],
  "homepage": "https://github.com/stephan-nordnes-eriksen/windows-watcher",
  "author": {
    "name": "Stephan Nordnes Eriksen",
    "url": "https://github.com/stephan-nordnes-eriksen"
  },
  "main": "./lib/watcher.js",
  "files": [
    "lib/watcher.js",
    "bin/NativeWatcher.dll"
  ],
  "repository": {
    "user": "stephan-nordnes-eriksen",
    "repo": "windows-watcher",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/stephan-nordnes-eriksen/windows-watcher/tarball/master",
    "clone_url": "https://github.com/stephan-nordnes-eriksen/windows-watcher",
    "https_url": "https://github.com/stephan-nordnes-eriksen/windows-watcher",
    "travis_url": "https://travis-ci.org/stephan-nordnes-eriksen/windows-watcher",
    "zip_url": "https://github.com/stephan-nordnes-eriksen/windows-watcher/archive/master.zip",
    "api_url": "https://api.github.com/repos/stephan-nordnes-eriksen/windows-watcher"
  },
  "scripts": {
    "test": "gulp test",
    "build": "gulp",
    "watch": "gulp watch",
    "testwatch": "gulp testwatch",
    "lint": "coffeelint -f coffeelint.json ./scr/ ./test/"
  },
  "dependencies": {
    "edge": "^0.10.1"
  },
  "optionalDependencies": {
    "edge": "^0.10.1"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "coffee-script": "^1.8.0",
    "gulp": "^3.8.6",
    "gulp-coffee": "^2.1.1",
    "gulp-istanbul": "^0.5.0",
    "gulp-mocha": "^2.0.0",
    "gulp-plumber": "^1.0.0",
    "gulp-util": "^3.0.0",
    "mocha": "^2.0.0",
    "sinon": "^1.9.1",
    "sinon-chai": "^2.5.0",
    "coffeelint": "^1.10.0"
  },
  "engines": {
    "node": ">=0.10.0",
    "npm": ">=1.2.10"
  },
  "license": "MIT",
  "gitHead": "f3ecd06c3f430c745c996a08c277f1e5bf763ab7",
  "_npmVersion": "2.11.3",
  "_nodeVersion": "0.12.7",
  "dist": {
    "shasum": "d9a27ab3ee89f11261ba8d2beea7d1facb58b058",
    "tarball": "http://registry.npmjs.org/windows-watcher/-/windows-watcher-0.0.1-pre4.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "0.0.1-pre",
      "date": "2015-09-14T13:38:44.710Z"
    },
    {
      "number": "0.0.1-pre2",
      "date": "2015-09-14T14:53:38.802Z"
    },
    {
      "number": "0.0.1-pre3",
      "date": "2015-09-14T17:26:32.575Z"
    },
    {
      "number": "0.0.1-pre4",
      "date": "2015-09-14T23:36:20.890Z"
    }
  ],
  "created": "2015-09-14T13:38:44.710Z",
  "modified": "2015-09-14T23:36:20.890Z",
  "lastPublisher": {
    "name": "stephan_ne",
    "email": "stephanruler@gmail.com"
  },
  "owners": [
    {
      "name": "stephan_ne",
      "email": "stephanruler@gmail.com"
    }
  ],
  "readme": "![WindowsWatcher](/WindowsWatcher.png?raw=true)\n\n# Windows Watcher\n\n#### Warning: Pre-release. Not suited for production.\n\n[![Dependency status](https://img.shields.io/david/stephan-nordnes-eriksen/windows-watcher.svg?style=flat)](https://david-dm.org/stephan-nordnes-eriksen/windows-watcher)\n[![devDependency Status](https://img.shields.io/david/dev/stephan-nordnes-eriksen/windows-watcher.svg?style=flat)](https://david-dm.org/stephan-nordnes-eriksen/windows-watcher#info=devDependencies)\n[![Build Status](https://img.shields.io/travis/stephan-nordnes-eriksen/windows-watcher.svg?style=flat&branch=master)](https://travis-ci.org/stephan-nordnes-eriksen/windows-watcher)\n\n[![NPM](https://nodei.co/npm/windows-watcher.svg?style=flat)](https://npmjs.org/package/windows-watcher)\n\nA Windows file system watcher utilizing the native FileSystemWatcher api for file events.\n\n## Installation\n\n    npm install windows-watcher\n\n## Usage Example\n\n### Watching Directories and files\n\n```javascript\nWindowsWatcher = require(\"windows-watcher\");\nwatcher = new WindowsWatcher();\ncallback = function(event){\n  switch (data[0]) {\n    case 'Changed':\n      console.log(\"File Changed: \" + data[1]);\n      break;\n    case 'Created':\n      console.log(\"File Created: \" + data[1]);\n      break;\n    case 'Deleted':\n      console.log(\"File Deleted: \" + data[1]);\n      break;\n    case 'Rename':\n      console.log(\"File Rename from: \" + data[1] + \" to \" + data[2]);\n  }\n}\nwatcher.watch(\"C:/\", callback);\nwatcher.watch(\"A:/\", callback);\nwatcher.watch(\"B:/\", callback);\nwatcher.watch(\"D:/\", callback);\nwatcher.watch(\"E:/\", callback);\nwatcher.watch(\"F:/\", callback);\nwatcher.watch(\"G:/\", callback);\nwatcher.watch(\"H:/\", callback);\nwatcher.watch(\"Z:/path/to/file.extension\", callback);\n//Ohh yeah! Performance is not an issue.\n\n//....\nwatcher.unwatch(\"C:/\");\nwatcher.unwatch(\"H:/\");\n\n```\n\n\n### Watching in Electron, and the like\nWindows Watcher uses [edge.js](http://tjanczuk.github.io/edge/) to run native code. Because edge.js needs special compilation in certain contexts, such as in [Electron](http://electron.atom.io/), you can provide your own electron instance. Windows Watcher will fallback to the standard [edge.js](http://tjanczuk.github.io/edge/) package if nothing is provided.\n\n```javascript\nWindowsWatcher = require(\"windows-watcher\");\nedge = require(\"electron-edge2\");\nwatcher = new WindowsWatcher(edge);\nwatcher.watch(\"C:/\", callback);\n//....\nwatcher.unwatch(\"C:/\");\n```\n\n\n### Advanced Watching Setup\n\n#### Disable Recursive Listening:\nIt is possible to make the watcher not care about sub-folders. The following script will yield resulst for files residing within `C:/` only. Changes to files like `C:/Users/whatever.txt` will not give a callback.\n\n```javascript\nWindowsWatcher = require(\"windows-watcher\");\nwatcher = new WindowsWatcher();\nwatcher.watch(\"C:/\",callback, false);\n\n```\n\n#### Filters\nIt is possible to provide filters to to filter out only certain file types. This filter is **exactly** the same as the native .NET [FileSystemWatcher filter](https://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.filter.aspx?cs-save-lang=1&cs-lang=csharp#code-snippet-1). This means that it is not possible to list more than one file type. If you want only `*.png` and `*.jpg`, then you have to call `watch` twice with both arguments. You can of course do the filtering yourself within the callback which might be an easier affair than dealing with the filter.\n\n```javascript\n//Given the above text, here is how to use the filter.\nWindowsWatcher = require(\"windows-watcher\");\nwatcher = new WindowsWatcher();\nrecursive = true; //or false. Whatever tickles your fancy.\nwatcher.watch(\"C:/\",callback, recursive, \"*.ogg\");\n```\n\nTo do your own filtering in JavaScript.\n\n```javascript\nWindowsWatcher = require(\"windows-watcher\");\nwatcher = new WindowsWatcher();\ncallback = new function(data){\n  if(data[1].match(/.*\\.png|.*\\.jpg|.*\\.jpeg|.q\\.tiff|.*\\.gif/)){\n    console.log(\"I care about you image! \" + data[1] + \". You were \" + data[0]);\n  }\n  else{\n    console.log(\"I am ignoring you weird file \" + data[1])\n  }\n}\nrecursive = true; //or false. Whatever tickles your fancy.\nwatcher.watch(\"C:/\",callback);\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright 2015 Stephan Nordnes Eriksen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n### Thanks to\n - Cray-Cray Design for logo.\n"
}