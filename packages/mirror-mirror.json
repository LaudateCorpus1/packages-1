{
  "name": "mirror-mirror",
  "version": "1.0.1",
  "description": "Test your UI changes in production before deploying to production",
  "main": "index.js",
  "scripts": {
    "lint": "eslint ./",
    "mocha": "mocha --timeout 20000",
    "test": "npm run lint && npm run mocha"
  },
  "repository": {
    "user": "matteofigus",
    "repo": "mirror-mirror",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/matteofigus/mirror-mirror/tarball/master",
    "clone_url": "https://github.com/matteofigus/mirror-mirror",
    "https_url": "https://github.com/matteofigus/mirror-mirror",
    "travis_url": "https://travis-ci.org/matteofigus/mirror-mirror",
    "zip_url": "https://github.com/matteofigus/mirror-mirror/archive/master.zip",
    "api_url": "https://api.github.com/repos/matteofigus/mirror-mirror"
  },
  "keywords": [
    "test",
    "phantom"
  ],
  "author": {
    "name": "Matteo Figus"
  },
  "license": "MIT",
  "homepage": "https://github.com/matteofigus/mirror-mirror",
  "dependencies": {
    "async": "^1.5.2",
    "blink-diff": "^1.0.12",
    "colors": "^1.1.2",
    "fs-extra": "^0.30.0",
    "joi": "^8.4.0",
    "lodash": "^4.11.2",
    "nightmare": "^2.4.0",
    "parse-domain": "^0.2.1"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^2.11.1",
    "eslint-config-defaults": "^9.0.0",
    "injectr": "^0.5.1",
    "mocha": "^2.4.5",
    "sinon": "^1.17.4"
  },
  "gitHead": "57165a034385f7a1fdab876e215ed9af6d089e1d",
  "_npmVersion": "2.15.1",
  "_nodeVersion": "4.4.4",
  "dist": {
    "shasum": "a131810bdfa41b6ef12f41243f5539f0f61a8910",
    "tarball": "http://registry.npmjs.org/mirror-mirror/-/mirror-mirror-1.0.1.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-05-10T01:11:23.911Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-05-11T09:36:44.878Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-05-17T01:09:20.150Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-05-22T16:38:32.137Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-05-23T00:08:07.535Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-06-04T18:06:10.926Z"
    }
  ],
  "created": "2016-05-10T01:11:23.911Z",
  "modified": "2016-06-04T18:06:10.926Z",
  "lastPublisher": {
    "name": "matteofigus",
    "email": "matteofigus@gmail.com"
  },
  "owners": [
    {
      "name": "matteofigus",
      "email": "matteofigus@gmail.com"
    }
  ],
  "readme": "mirror-mirror [![Build Status](https://secure.travis-ci.org/matteofigus/mirror-mirror.png?branch=master)](http://travis-ci.org/matteofigus/mirror-mirror) [![npm version](https://img.shields.io/npm/v/mirror-mirror.svg)](https://npmjs.org/package/mirror-mirror) [![Dependency Status](https://david-dm.org/matteofigus/mirror-mirror.svg)](https://david-dm.org/matteofigus/mirror-mirror)\n=============\n\nMagic mirror in my hand, tell me if my website will look ugly in production **before** deploying to production.\n\n![img](https://raw.githubusercontent.com/matteofigus/mirror-mirror/master/img/mirror.gif)\n\nThis is a wrapper around the wonderful [Nightmare.js](https://github.com/segmentio/nightmare) for:\n\n* Opening a matrix of urls and viewports with Chrome\n* Specify a set of operations to perform\n* Take a screenshot\n* Make some changes (like swapping a CSS file, changing Js or HTML)\n* Take another screenshot\n* Compare the screenshots and save a diff file with the highlighted differences\n\nMost important features: \n* Crazy quick compare to Selenium with Phantom\n* Able to hide/show Browser\n* Works with any OS\n* Able to use DevTools and do debugging with Chrome\n\n# Requirements\n\n* Node version: min: **>=4.2.X**\n* [How to use it on Headless CI Systems (Travis CI, Jenkins, etc.)](https://github.com/electron/electron/blob/master/docs/tutorial/testing-on-headless-ci.md)\n\nBuild status: Unix: \n\n# Install it\n\n```sh\n$ npm install mirror-mirror\n```\n\n# Use it\n\n```js\nvar mirror = require('mirror-mirror');\n\nvar runner = mirror();\n\nrunner.setup({\n  urls: {\n    home: 'https://www.amazon.com'\n  },\n\n  selector: '#nav-search',\n  transform: () => {\n    // Replace Amazon search with Google widget. Because it is funny.\n    return '<form name=\"cse\" id=\"searchbox_demo\" action=\"https://www.google.com/cse\">' +\n            '<input type=\"hidden\" name=\"cref\" value=\"\" />' +\n            '<input type=\"hidden\" name=\"ie\" value=\"utf-8\" />' +\n            '<input type=\"hidden\" name=\"hl\" value=\"\" />' +\n            '<input name=\"q\" type=\"text\" size=\"40\" />' +\n            '<input type=\"submit\" name=\"sa\" value=\"Search\" />' +\n            '</form>' +\n            '<script type=\"text/javascript\" src=\"https%3A%2F%2Fcse.google.com%2Fcse/tools/onthefly?form=searchbox_demo&lang=\"></script>';\n  },\n  screenshotsPath: './screenshots'\n});\n\nrunner.run((err, result) => {\n  console.log(result);\n  /*\n  {\n    home: {\n      after: '/Users/mfigus/Documents/os/mirror-mirror/screenshots/home-after.png',\n      before: '/Users/mfigus/Documents/os/mirror-mirror/screenshots/home-before.png',\n      diff: '/Users/mfigus/Documents/os/mirror-mirror/screenshots/home-diff.png',\n      isDifferent: true,\n      equality: 99.82844939446368\n    }\n  }\n  */\n});\n\n```\n\n# API\n\n1. [Set up an instance](#set-up-an-instance)\n2. [Configure the runner](#configure-the-runner)\n  * [action examples](#nightmare-actions-example)\n3. [Start the runner](#start-the-runner)\n\n### Set up an instance\n\n`var mirror = Mirror([NighmareOptions]);`\n\nLook at [Nighmare.js options](https://github.com/segmentio/nightmare#nightmareoptions).\n\n### Configure the runner\n\n`mirror.setup(mirrorOptions);`\n\nThis is an object with the following structure:\n\n|name|type|mandatory|description|\n|----|----|---------|-----------|\n|after|`array of functions`|no|An array of nightmareJs actions to perform after the transformation and before the second screenshots. [Look at the example below](#nightmare-actions-example)|\n|before|`array of functions`|no|An array of nightmareJs actions to perform before the first screenshots. [Look at the example below](#nightmare-actions-example)|\n|concurrency|`number`|no|Default 3, is the concurrency of tests|\n|cookies|`object`|no|Allows to specify cookies to be used for each request|\n|debug|`boolean`|no|When true, shows stuff in the console|\n|headers|`object`|no|Allows to specify headers to be used for each request|\n|retries|`number`|no|Default 3, number of retries after a failing session|\n|screenshotsPath|`string`|yes|The path where to save the screenshots|\n|selector|`string`|yes|The css selector for the DOM tree you want to transform. It can be anything [`document.querySelector`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector) can understand|\n|timeout|`number`|no|Default 20000, when the sessions is going to be restarted|\n|transform|`string` or `function`|yes|The transformation to apply to the selector. If `string`, element will be replaced with the markup provided in the string. When `function`, it needs to transform a string to be replaced in the selected DOM tree. The function will have an [element](https://developer.mozilla.org/en-US/docs/Web/API/element) as parameter - the result of previous selection|\n|urls|`object`|yes|The urls to test. Key is used to generate screenshots file name so keep it simple and without spaces and stuff|\n|viewports|`array of arrays`|no|Default `[[800, 600]]`, is an array containing all the viewport resolutions for executing the tests|\n\n#### Nightmare actions example\n\nThis example shows how to make a screenshot with a menu opened, assuming the transformation replaces the menu and then needs to run another javascript initialisation and then wait to complete before performing the same action again.\n\n```js\nmirror.setup({\n  ...\n  before: [\n    // Assuming jQuery is in the page\n    nightmare => nightmare.evaluate(() => $('navbar-button').click())\n  ],\n  after: [\n    (nightmare) => {\n      return nightmare.evaluate(() => {\n        window.menusReady = false;\n        window.menus.initialise(() => {\n          window.menusReady = true;\n        });\n      });\n    },\n    nightmare => nightmare.wait(() => window.menusReady === true),\n    nightmare => nightmare.evaluate(() => $('navbar-button').click())\n  ]\n});\n```\n\n### Start the runner\n\n`mirror.run(callback);`\n\nWhere callback is going to have an error and/or a response with the results. If any of the requests fails, the callback will include both an error + the response with succeeding screenshot links.\n\n# Contributing\n\nYes please. Open an issue first.\n\n# License\n\nMIT\n"
}