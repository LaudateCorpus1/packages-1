{
  "name": "electron-prebuilt-reentrant",
  "version": "0.34.1-0",
  "description": "Install electron (formerly called atom-shell) prebuilt binaries for command-line use using npm",
  "repository": {
    "user": "mafintosh",
    "repo": "electron-prebuilt",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mafintosh/electron-prebuilt/tarball/master",
    "clone_url": "https://github.com/mafintosh/electron-prebuilt",
    "https_url": "https://github.com/mafintosh/electron-prebuilt",
    "travis_url": "https://travis-ci.org/mafintosh/electron-prebuilt",
    "zip_url": "https://github.com/mafintosh/electron-prebuilt/archive/master.zip",
    "api_url": "https://api.github.com/repos/mafintosh/electron-prebuilt"
  },
  "scripts": {
    "cache-clean": "rm -rf ~/.electron && rm -rf dist",
    "postinstall": "node install.js",
    "pretest": "npm run cache-clean && node install.js",
    "test": "tape test/*.js"
  },
  "bin": {
    "electron": "cli.js"
  },
  "main": "index.js",
  "dependencies": {
    "electron-download": "^1.0.0",
    "extract-zip": "^1.0.3",
    "fs-extra": "^0.26.5"
  },
  "devDependencies": {
    "home-path": "^0.1.1",
    "path-exists": "^1.0.0",
    "tape": "^3.0.1"
  },
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "homepage": "https://github.com/mafintosh/electron-prebuilt",
  "gitHead": "a8a593984db32c71bddf1acbe39694d068dcdfc6",
  "_npmVersion": "2.14.7",
  "_nodeVersion": "4.2.1",
  "dist": {
    "shasum": "d2c45c733dc35359b4bd2a78e1c0d69899b17de8",
    "tarball": "http://registry.npmjs.org/electron-prebuilt-reentrant/-/electron-prebuilt-reentrant-0.34.1-0.tgz"
  },
  "versions": [
    {
      "number": "0.34.1-0",
      "date": "2016-03-10T18:46:22.961Z"
    }
  ],
  "created": "2016-03-10T18:46:22.961Z",
  "modified": "2016-03-10T18:46:22.961Z",
  "lastPublisher": {
    "name": "jibo",
    "email": "sdkearlyaccess@jibo.com"
  },
  "owners": [
    {
      "name": "jibo",
      "email": "sdkearlyaccess@jibo.com"
    }
  ],
  "readme": "# electron-prebuilt\n\n[![build status](http://img.shields.io/travis/mafintosh/electron-prebuilt.svg?style=flat)](http://travis-ci.org/mafintosh/electron-prebuilt)\n[![dat](http://img.shields.io/badge/Development%20sponsored%20by-dat-green.svg?style=flat)](http://dat-data.com/)\n\n![badge](https://nodei.co/npm/electron-prebuilt.png?downloads=true)\n\nInstall [electron](https://github.com/atom/electron) prebuilt binaries for command-line use using npm. This module helps you easily install the `electron` command for use on the command line without having to compile anything.\n\nElectron is a JavaScript runtime that bundles Node.js and Chromium. You use it similar to the `node` command on the command line for executing JavaScript programs. For more info you can read [this intro blog post](http://maxogden.com/electron-fundamentals.html) or dive into the [Electron documentation](https://github.com/atom/electron/tree/master/docs)\n\n## Installation\n\nDownload and install the latest build of electron for your OS and add it to your projects `package.json` as a `devDependency`:\n\n```\nnpm install electron-prebuilt --save-dev\n```\n\nThis is the preferred way to use electron, as it doesn't require users to install electron globally.\n\nYou can also use the `-g` flag (global) to symlink it into your PATH:\n\n```\nnpm install -g electron-prebuilt\n```\n\nIf that command fails with an `EACCESS` error you may have to run it again with `sudo`:\n\n```\nsudo npm install -g electron-prebuilt\n```\n\nNow you can just run `electron` to run electron:\n\n```\nelectron\n```\n\nIf you need to use an HTTP proxy you can [set these environment variables](https://github.com/request/request/tree/f0c4ec061141051988d1216c24936ad2e7d5c45d#controlling-proxy-behaviour-using-environment-variables)\n\nIf you want to change the architecture that is downloaded (e.g., `ia32` on an `x64` machine), you can use the `--arch` flag with npm install or set the `npm_config_arch` environment variable:\n```\nnpm install --arch=ia32 electron-prebuilt\n```\n\n## About\n\nWorks on Mac, Windows and Linux OSes that Electron supports (e.g. Electron [does not support Windows XP](https://github.com/atom/electron/issues/691)).\n\nThe version numbers of this module match the version number of the [offical Electron releases](https://github.com/atom/electron/releases), which do not follow [semantic versioning](http://semver.org/).\n\nThis module is automatically released whenever a new version of Electron is released thanks to [electron-prebuilt-updater](https://github.com/johnmuhl/electron-prebuilt-updater) written by [John Muhl](https://github.com/johnmuhl/).\n\n## Usage\n\nFirst you have to [write an electron application](https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md)\n\nThen you can run your app using:\n\n```\nelectron your-app/\n```\n\n## Related modules\n\n- [electron-packager](https://github.com/maxogden/electron-packager) - package and distribute your electron app in OS executables (.app, .exe etc)\n- [electron-builder](https://github.com/loopline-systems/electron-builder) - create installers for Windows and OS X. It's built to work together with electron-packager\n- [menubar](https://github.com/maxogden/menubar) - high level way to create menubar desktop applications with electron\n\nFind more at the [awesome-electron](https://github.com/sindresorhus/awesome-electron) list\n\n## Programmatic usage\n\nMost people use this from the command line, but if you require `electron-prebuilt` inside your node app it will return the file path to the binary.\nUse this to spawn electron from node scripts.\n\n``` js\nvar electron = require('electron-prebuilt')\nvar proc = require('child_process')\n\n// will something similar to print /Users/maf/.../Electron\nconsole.log(electron)\n\n// spawn electron\nvar child = proc.spawn(electron)\n```\n"
}