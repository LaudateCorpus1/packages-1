{
  "name": "autoupdaty",
  "version": "1.3.4",
  "description": "Autoupdater for Electron/NW.js apps",
  "main": "index.js",
  "scripts": {
    "test": "standard *.js; node test/*"
  },
  "repository": {
    "user": "Ivshti",
    "repo": "autoupdaty",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/Ivshti/autoupdaty/tarball/master",
    "clone_url": "https://github.com/Ivshti/autoupdaty",
    "https_url": "https://github.com/Ivshti/autoupdaty",
    "travis_url": "https://travis-ci.org/Ivshti/autoupdaty",
    "zip_url": "https://github.com/Ivshti/autoupdaty/archive/master.zip",
    "api_url": "https://api.github.com/repos/Ivshti/autoupdaty"
  },
  "keywords": [
    "autoupdater",
    "electron.nw.js"
  ],
  "author": {
    "name": "Ivo Georgiev",
    "email": "ivo@linvo.com",
    "url": "http://ivogeorgiev.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/Ivshti/autoupdaty",
  "dependencies": {
    "async": "^1.5.0",
    "gunzip-maybe": "^1.2.1",
    "needle": "^0.11.0",
    "pump": "^1.0.1",
    "tar-fs": "^1.9.0"
  },
  "devDependencies": {
    "tape": "^4.4.0",
    "standard": "^5.4.1"
  },
  "gitHead": "804568d9a83bb46c9bbe654c71c4ba7db8aaa93a",
  "_npmVersion": "2.7.5",
  "_nodeVersion": "0.12.2",
  "dist": {
    "shasum": "2f35e13ec9c2d82326ae431250a9023fe2fe1355",
    "tarball": "http://registry.npmjs.org/autoupdaty/-/autoupdaty-1.3.4.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-12-28T00:14:54.377Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-12-28T00:58:15.536Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-12-28T17:19:32.940Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-12-28T17:28:08.385Z"
    },
    {
      "number": "1.0.4",
      "date": "2015-12-29T15:53:47.009Z"
    },
    {
      "number": "1.1.0",
      "date": "2015-12-29T20:08:45.285Z"
    },
    {
      "number": "1.1.1",
      "date": "2015-12-29T22:03:11.654Z"
    },
    {
      "number": "1.1.2",
      "date": "2016-01-03T20:45:58.214Z"
    },
    {
      "number": "1.1.3",
      "date": "2016-01-03T20:46:22.616Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-01-05T14:55:05.348Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-02-08T15:18:55.908Z"
    },
    {
      "number": "1.3.1",
      "date": "2016-02-08T15:20:24.050Z"
    },
    {
      "number": "1.3.2",
      "date": "2016-02-08T16:15:15.826Z"
    },
    {
      "number": "1.3.3",
      "date": "2016-02-08T21:17:42.215Z"
    },
    {
      "number": "1.3.4",
      "date": "2016-02-19T16:37:00.075Z"
    }
  ],
  "created": "2015-12-28T00:14:54.377Z",
  "modified": "2016-02-19T16:37:00.075Z",
  "lastPublisher": {
    "name": "ivogeorgiev",
    "email": "ivo@linvo.com"
  },
  "owners": [
    {
      "name": "ivogeorgiev",
      "email": "ivo@linvo.com"
    }
  ],
  "readme": "# autoupdaty\nSimple auto-updater for Electron/NW.js apps.\n\nChecks for new versions and downloads them.\n\nIt has two modes: \n\n1. Download and verify a new asar/nw file.\n2. Download and verify a new installer\n\nIn our versions manifest, we specify ``runtimeVersion`` for every version. If the version has a different ``runtimeVersion``, that requires we do a full update (mode #2), otherwise we can do ASAR-only update - mode #1.\n\n## Documentation\n\n### Init\n``new autoUpdater(options)`` - inits an instance of our auto-updater\n\n### Options\n``version`` - object describing our current version - the one we're running\n\n**Example**\n```javascript\n{ version: \"2.1\", runtimeVersion: \"2.0\", released: \"Sun Dec 27 2015 18:41:58 GMT+0200 (EET)\" }\n```\n\n``manifestUrl`` - URL to .json of your versions manifest; could be an array of URLs if you want fallback(s)\n\n``downloadUrl`` - base URL of your download server\n\n``filter`` - filter function ran against every version from the manifest\n\n``fs`` - your own fs object; for example, for Electron apps use ``requre('original-fs')``\n\n**Example**\n```javascript\nfunction(ver) { return !ver.isBeta }\n```\n\n``getUpdateUrl`` - function to format the URL we get the new version from; arguments are ``getUpdateUrl(downloadUrl, isAsar, platform)``\n\nCan also return object of the format ``{ url: \"url to get from\", ungzip: false, untar: false, dest: \"file name\", checksumUrl: \"..\" }``\n\n``runtimeVerProp`` - property to use when parsing runtime version from the versions manifest; default is ``runtimeVersion``\n\n\n### Versions manifest\n\nYour versions manifest is a JSON file of array with objects describing each released version of your product.\n\n```javascript\n[\n  { version: \"2.1\", runtimeVersion: \"2.0\", released: \"Sun Dec 27 2015 18:41:58 GMT+0200 (EET)\" },\n  { version: \"2.2\", runtimeVersion: \"2.0\", released: \"Sun Dec 28 2015 18:00:00 GMT+0200 (EET)\", isBeta: true }\n]\n```\n\nThe required properties are ``version``, ``runtimeVersion`` and ``released``. Other than that, you can add any property you want for use in your ``filter`` function.\n\n### Methods \n\n``autoupdater.check(cb)`` - checks for new versions\n\n``autoupdater.prepare(version, [ options , ] cb)`` - prepares a new version\n\nThis downloads the new version. \n\nIf our current version has the same runtime, it will only download the ``.asar`` file. \n\nIf the update URL to the ASAR file ends in ``.gz`` (as the default ``getUpdateUrl`` assumes), then we'll un-gzip it on download and save it without the ``.gz`` extension.\n\nIf we're running a different runtime, this will download a new installer / bundle for the new version. This will either be an ``.exe``, ``.dmg`` or ``.tar.gz``. Use your own ``getUpdateUrl`` to modify this, for example if you want to use ``.deb`` for Linux.\n\n\n## Difference to Squirrel, Electron's default auto-updater\n\nThis was built primarily for in-house use for NW.js. It isn't documented perfectly and developed for generic use cases, so please use Electron's auto-updater unless you're very brave.\n\nThe reason to use `autoupdaty`, if it was a bit more mature, would be that it's incredibly simple and doesn't require any external dependencies (such as Squirrel's .NET). In other words, if you're looking for something simpler, more hackable and obvious in the way it works.\n"
}