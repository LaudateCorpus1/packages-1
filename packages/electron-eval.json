{
  "name": "electron-eval",
  "version": "0.9.7",
  "description": "Run code inside a hidden Electron window",
  "main": "index.js",
  "scripts": {
    "test": "standard src/*.js daemon.js test.js && tap test.js --cov",
    "test-tap": "tap test.js -Rtap",
    "test-lcov": "mkdir -p coverage && tap test.js -Rsilent --coverage-report=text-lcov > coverage/lcov.info",
    "build": "rm -rf lib && babel --presets es2015 src -d lib",
    "source": "rm -rf lib && ln -s src lib",
    "prepublish": "npm run build",
    "publish": "npm run source"
  },
  "keywords": [
    "electron",
    "eval",
    "hidden",
    "spawn"
  ],
  "author": {
    "name": "Matt Bell",
    "email": "mappum@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "cross-spawn": "^4.0.0",
    "electron-prebuilt": "^1.2.2",
    "ndjson": "^1.4.3",
    "headless": "https://github.com/paulkernfeld/node-headless/tarball/master"
  },
  "devDependencies": {
    "babel-cli": "^6.7.7",
    "babel-preset-es2015": "^6.6.0",
    "standard": "^6.0.4",
    "tap": "^5.1.1"
  },
  "optionalDependencies": {
    "headless": "https://github.com/paulkernfeld/node-headless/tarball/master"
  },
  "repository": {
    "user": "mappum",
    "repo": "electron-eval",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mappum/electron-eval/tarball/master",
    "clone_url": "https://github.com/mappum/electron-eval",
    "https_url": "https://github.com/mappum/electron-eval",
    "travis_url": "https://travis-ci.org/mappum/electron-eval",
    "zip_url": "https://github.com/mappum/electron-eval/archive/master.zip",
    "api_url": "https://api.github.com/repos/mappum/electron-eval"
  },
  "homepage": "https://github.com/mappum/electron-eval#readme",
  "gitHead": "9cc05117c47d5f38ae5098dfac25d4932906da73",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.6.0",
  "dist": {
    "shasum": "a0fdcb966097947df3ab33ef591693de7c84422f",
    "tarball": "http://registry.npmjs.org/electron-eval/-/electron-eval-0.9.7.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "0.0.0",
      "date": "2016-01-07T11:10:23.848Z"
    },
    {
      "number": "0.0.1",
      "date": "2016-01-07T11:39:47.417Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-01-07T20:30:28.701Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-01-09T19:36:41.459Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-01-19T01:44:24.022Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-02-07T21:29:06.074Z"
    },
    {
      "number": "0.2.2",
      "date": "2016-03-14T16:41:45.270Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-03-14T18:07:38.971Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-03-15T21:57:06.759Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-03-31T18:27:31.106Z"
    },
    {
      "number": "0.5.0",
      "date": "2016-03-31T22:03:55.250Z"
    },
    {
      "number": "0.6.0",
      "date": "2016-04-11T01:04:57.179Z"
    },
    {
      "number": "0.7.0",
      "date": "2016-04-27T04:49:23.078Z"
    },
    {
      "number": "0.7.1",
      "date": "2016-04-29T23:32:06.460Z"
    },
    {
      "number": "0.7.2",
      "date": "2016-05-01T06:34:41.841Z"
    },
    {
      "number": "0.7.3",
      "date": "2016-05-02T23:14:59.529Z"
    },
    {
      "number": "0.7.4",
      "date": "2016-05-24T22:27:14.150Z"
    },
    {
      "number": "0.7.5",
      "date": "2016-05-24T22:36:43.411Z"
    },
    {
      "number": "0.7.6",
      "date": "2016-05-24T22:39:19.726Z"
    },
    {
      "number": "0.7.7",
      "date": "2016-05-28T05:02:37.908Z"
    },
    {
      "number": "0.7.8",
      "date": "2016-05-28T05:10:16.137Z"
    },
    {
      "number": "0.7.9",
      "date": "2016-05-28T05:43:53.382Z"
    },
    {
      "number": "0.7.10",
      "date": "2016-05-28T07:11:02.571Z"
    },
    {
      "number": "0.7.11",
      "date": "2016-06-14T00:13:22.524Z"
    },
    {
      "number": "0.7.12",
      "date": "2016-06-14T00:14:21.986Z"
    },
    {
      "number": "0.8.0",
      "date": "2016-08-05T17:46:38.368Z"
    },
    {
      "number": "0.9.0",
      "date": "2016-08-19T03:39:55.019Z"
    },
    {
      "number": "0.9.1",
      "date": "2016-08-19T17:23:28.554Z"
    },
    {
      "number": "0.9.2",
      "date": "2016-08-28T01:19:05.502Z"
    },
    {
      "number": "0.9.3",
      "date": "2016-08-28T01:32:15.351Z"
    },
    {
      "number": "0.9.4",
      "date": "2016-08-28T01:36:36.192Z"
    },
    {
      "number": "0.9.5",
      "date": "2016-09-01T20:39:50.339Z"
    },
    {
      "number": "0.9.6",
      "date": "2016-09-28T21:18:30.550Z"
    },
    {
      "number": "0.9.7",
      "date": "2016-09-28T21:56:55.952Z"
    }
  ],
  "created": "2016-01-07T11:10:23.848Z",
  "modified": "2016-09-28T21:56:55.952Z",
  "lastPublisher": {
    "name": "mappum",
    "email": "mappum@gmail.com"
  },
  "owners": [
    {
      "name": "mappum",
      "email": "mappum@gmail.com"
    }
  ],
  "readme": "# electron-eval\n\n[![npm version](https://img.shields.io/npm/v/electron-eval.svg)](https://www.npmjs.com/package/electron-eval)\n[![Build Status](https://travis-ci.org/mappum/electron-eval.svg?branch=master)](https://travis-ci.org/mappum/electron-eval)\n[![Dependency Status](https://david-dm.org/mappum/electron-eval.svg)](https://david-dm.org/mappum/electron-eval)\n\nRun code inside a hidden Electron window\n\n`electron-eval` gives you a way to access a headless browser (Chromium) from Node.js. This can be useful for testing browser-specific code, or using web APIs that are in browsers but not yet in Node (such as [WebRTC](https://github.com/mappum/electron-webrtc)).\n\n## Running on Headless Machines\n\nThis module runs without any prior setup on non-headless machines.\n\nTo run on a headless Linux server, you'll need the `xvfb` package:\n\n\t$ sudo apt-get install xvfb\n\nTo run in Travis CI, see the [.travis.yml](https://github.com/mappum/electron-eval/blob/master/.travis.yml) file for this repo as an example of how to install the necessary packages.\n\n## Usage\n\n`npm install electron-eval`\n\n```js\nvar electronEval = require('electron-eval')\n\n// create new electron instance\nvar daemon = electronEval()\n\ndaemon.eval('JSON.stringify(window.location.href)', function (err, res) {\n  console.log(err, res)\n  // prints 'null file:///Users/mappum/Projects/electron-eval/index.html'\n})\n\n// use es6 multiline strings for longer pieces of code\ndaemon.eval(`\n  var i = 0\n  i += 10\n  i -= 2\n  i\n`, (err, res) => console.log(err, res))\n// prints 'null 8'\n\n// close the window when you are done with it\n// note that this happens automatically after the node process ends\ndaemon.close()\n```\n\n### Methods\n\n#### `var daemon = electronEval([opts])`\n\nCreates a new hidden Electron instance. This may be called many times to create many windows, but beware that Electron uses a lot of resources.\n\n`opts` may be an object containing the following keys:\n```js\n{\n  headless: Boolean // default: false\n  // whether or not we should run in headless mode (using Xvfb)\n  xvfb: Object // default: {}\n  // configures specific xvfb options (see: https://github.com/Rob--W/node-xvfb#usage)\n  timeout: Number // default: 10000\n  // how often to check if the parent node process is still\n  // alive (in milliseconds). If the node process is killed,\n  // Electron will close\n}\n```\n\n#### `daemon.eval(code, [opts], [callback])`\n\nEvaluates the `code` string in the Electron window, and calls   `callback(error, result)`. If `callback` is not provided and the eval causes an error, the daemon will emit an `error` event.\n\nThe `opts` object may contain:\n```js\n{\n  mainProcess: Boolean // default: false\n  // if true, the code will be evaluated in the Electron main process, rather than the Electron window\n}\n```\n\nNote that you may need to stringify the result value with `JSON.stringify()` so it will be sent properly across processes.\n\nIf `daemon.eval()` is called before the daemon has emitted its `ready` event, the code will be put in a queue and evaluated once the daemon is ready.\n\n#### `daemon.close()`\n\nCloses the Electron process and releases its resources.\n\nNote that the Electron process will automatically terminate when the node process exits, so this may not be necessary.\n\n#### `window.send(event, message)`\n\nThis method is implemented inside the Electron window, so it may be called from code evaluated by the daemon. It sends a message to the node process, which causes an event named `event` to be emitted on the `daemon` object.\n\nThis is useful when you need the browser window to send async messages to the node process.\n\n**Example:**\n```js\ndaemon.on('test', function (arg) {\n  console.log('got message: ' + arg)\n})\ndaemon.eval('window.send(\"test\", 123)')\n\n// the node process will print \"got message: 123\"\n```\n### Properties\n\n#### `daemon.child`\n\nA handle to the Electron daemon's process (of type [child_process.ChildProcess](https://nodejs.org/api/child_process.html#child_process_class_childprocess)).\n\n### Events\n\n#### - `ready`\nEmitted by `daemon` when the Electron window has been set up and is ready to eval code.\n#### - `error`\nEmitted by `daemon` when `daemon.eval()` evaluates code that throws an error, but no callback is provided.\n\n### Environment Variables\n\n#### `HEADLESS`\nSetting this variable to true also allows the module to go into headless mode.\n\n## Related\n\n[electron-spawn](https://github.com/maxogden/electron-spawn)\n"
}