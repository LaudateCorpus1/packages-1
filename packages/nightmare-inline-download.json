{
  "name": "nightmare-inline-download",
  "version": "0.2.2",
  "license": "MIT",
  "main": "./nightmare-inline-download.js",
  "description": "Add inline download management to NightmareJS",
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "user": "rosshinkley",
    "repo": "nightmare-inline-download",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/rosshinkley/nightmare-inline-download/tarball/master",
    "clone_url": "https://github.com/rosshinkley/nightmare-inline-download",
    "https_url": "https://github.com/rosshinkley/nightmare-inline-download",
    "travis_url": "https://travis-ci.org/rosshinkley/nightmare-inline-download",
    "zip_url": "https://github.com/rosshinkley/nightmare-inline-download/archive/master.zip",
    "api_url": "https://api.github.com/repos/rosshinkley/nightmare-inline-download"
  },
  "author": {
    "name": "Ross Hinkley"
  },
  "keywords": [
    "nightmare",
    "phantomjs",
    "download",
    "downloads"
  ],
  "peerDependencies": {
    "nightmare": "^2.5.2"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "sliced": "^1.0.1"
  },
  "devDependencies": {
    "async": "^1.5.2",
    "chai": "^3.5.0",
    "express": "^4.13.3",
    "mime": "^1.3.4",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.0",
    "mocha-generators": "^1.2.0",
    "rimraf": "^2.5.2",
    "serve-static": "^1.11.1"
  },
  "gitHead": "682a1fb197f6abefa0bf43163897b570223517cd",
  "homepage": "https://github.com/rosshinkley/nightmare-inline-download#readme",
  "_npmVersion": "3.9.5",
  "_nodeVersion": "6.2.2",
  "dist": {
    "shasum": "a8d6a824720528e43680dd199f23a39ce952f0ac",
    "tarball": "http://registry.npmjs.org/nightmare-inline-download/-/nightmare-inline-download-0.2.2.tgz"
  },
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-04-02T22:58:03.446Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-04-08T16:52:10.375Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-05-22T17:17:32.235Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-06-21T03:59:49.276Z"
    },
    {
      "number": "0.2.2",
      "date": "2016-07-08T21:10:02.641Z"
    }
  ],
  "created": "2016-04-02T22:58:03.446Z",
  "modified": "2016-07-08T21:10:02.641Z",
  "lastPublisher": {
    "name": "rosshinkley",
    "email": "rosshinkley@gmail.com"
  },
  "owners": [
    {
      "name": "rosshinkley",
      "email": "rosshinkley@gmail.com"
    }
  ],
  "readme": "nightmare-inline-download\n======================\n\nAdd inline download management to your [Nightmare](http://github.com/segmentio/nightmare) scripts.\n\n# Important Note\nIf you need to manage multiple downloads at the same time or want downloads to be processed in the background, check out the [Nightmare download manager](https://github.com/rosshinkley/nightmare-download-manager).\n\n## Usage\nRequire the library: and pass the Nightmare library as a reference to attach the plugin actions:\n\n```js\nvar Nightmare = require('nightmare');\nrequire('nightmare-inline-download')(Nightmare);\n```\n\n... and that's it.  You should now be able to handle downloads.\n\n### .download([path|action])\n\nAllows for downloads to be saved to a custom location or cancelled.  The possible values for `action` are `'cancel'`, `'continue'` for default behavior, or a file path (file name and extension inclusive) to save the download to an alternative location.  If yielded upon, `.download()` returns a hash of download information:\n\n* **filename**:  the filename the server sent.\n* **mimetype**: the mimetype of the download.\n* **receivedBytes**: the number of bytes received for a download.\n* **totalBytes**: the number of bytes to expect if `Content-length` is set as a header.\n* **url**: the address of where the download is being sent from.\n* **path**: specifies the save path for the download.\n* **state**: the state of the download.  At yield, `state` can be `'cancelled'`, `'interrupted'`, or `'completed'`.\n\n## Additional Nightmare Options\n\n### ignoreDownloads\nDefines whether or not all downloads should be ignored.\n\n### maxDownloadRequestWait\nSets the maximum time for the client to anticipate a `.download()` call.  If the call is not made, the download is automatically cancelled.\n\n### paths.downloads\nSets the Electron path for where downloads are saved.\n\n## Example\n\n```javascript\nvar Nightmare = require('nightmare');\nrequire('nightmare-inline-download')(Nightmare);\nvar nightmare = Nightmare();\nvar downloadInfo = nightmare\n  .goto('https://github.com/segmentio/nightmare')\n  .click('a[href=\"/segmentio/nightmare/archive/master.zip\"]')\n  .download('/some/other/path/master.zip');\n\n// ... do something with downloadInfo, in an evaluate for example ...\n\n  .end()\n  .then(()=>console.log('done'));\n```\n\n"
}