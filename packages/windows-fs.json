{
  "name": "windows-fs",
  "version": "1.2.0",
  "description": "Windows utilities when working with the file system",
  "main": "index.js",
  "scripts": {
    "lint": "standard",
    "release": "xyz",
    "test": "tape test/*.js | tap-spec",
    "docs": "documentation readme index.js -s \"API\""
  },
  "engines": {
    "node": "6.0.0"
  },
  "repository": {
    "user": "kanton-aargau",
    "repo": "windows-fs",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/kanton-aargau/windows-fs/tarball/master",
    "clone_url": "https://github.com/kanton-aargau/windows-fs",
    "https_url": "https://github.com/kanton-aargau/windows-fs",
    "travis_url": "https://travis-ci.org/kanton-aargau/windows-fs",
    "zip_url": "https://github.com/kanton-aargau/windows-fs/archive/master.zip",
    "api_url": "https://api.github.com/repos/kanton-aargau/windows-fs"
  },
  "keywords": [
    "Windows",
    "cmd",
    "drive mount",
    "os",
    "directory",
    "size",
    "unc",
    "path"
  ],
  "author": {
    "name": "Kanton Aargau"
  },
  "license": "MIT",
  "devDependencies": {
    "documentation": "^4.0.0-beta2",
    "standard": "^6.0.8",
    "tap-spec": "^4.1.1",
    "tape": "^4.5.1",
    "xyz": "^0.5.0"
  },
  "dependencies": {
    "buffered-spawn": "^3.0.0",
    "fswalk": "^1.2.0",
    "ramda": "^0.21.0",
    "windows-powershell": "^0.1.0"
  },
  "gitHead": "5267d34714e2aa2bd6937ed62caf076509ffdbbc",
  "homepage": "https://github.com/kanton-aargau/windows-fs#readme",
  "_npmVersion": "3.9.0",
  "_nodeVersion": "6.0.0",
  "dist": {
    "shasum": "fea9e70acf5cde6a07b2a3b096c5c98a91777452",
    "tarball": "http://registry.npmjs.org/windows-fs/-/windows-fs-1.2.0.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-04-05T09:50:44.617Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-04-19T09:58:36.475Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-04-21T07:52:33.909Z"
    },
    {
      "number": "0.3.0",
      "date": "2016-04-21T09:34:24.372Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-04-21T11:52:54.996Z"
    },
    {
      "number": "0.3.2",
      "date": "2016-04-22T07:53:44.288Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-04-25T07:17:37.313Z"
    },
    {
      "number": "0.4.1",
      "date": "2016-04-25T08:58:58.506Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-04-26T12:15:44.406Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-04-26T12:20:49.438Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-05-09T12:17:43.572Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-05-09T13:47:07.739Z"
    }
  ],
  "created": "2016-04-05T09:50:44.617Z",
  "modified": "2016-05-09T13:47:07.739Z",
  "lastPublisher": {
    "name": "kanton-aargau",
    "email": "fabian.eichenberger@ag.ch"
  },
  "owners": [
    {
      "name": "kanton-aargau",
      "email": "fabian.eichenberger@ag.ch"
    }
  ],
  "readme": "# windows-fs\n\n> :cyclone: Windows utilities when working with the file system. Intended for use with [electron](http://electron.atom.io/) or nodejs.\n\n[![NPM version][version-image]][version-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Js Standard Style][standard-image]][standard-url]\n\n## Installation\n\n```bash\nnpm install windows-fs\n```\n\n## Example\n\n```js\nimport { mount, statByDriveLetter } from 'windows-fs'\n\nmount('server', 'share')\n  .then(letter => statByDriveLetter(letter))\n  .then(log)\n// -> { freeSpace: 10700152832, size: 53579083776 }\n```\n\n> Note that all **paths** are written in **unix style** format to ease the developer pain from double escaping the backslash in windows. All **other path characteristics** stay the **same** (`a:/`, `//server`).\n\n## API\n\n### isMounted\n\nChecks if a given `unc` path is already mounted. If it's mounted returns\nthe drive letter otherwise returns undefined.\n\n**Parameters**\n\n-   `unc` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Unc like path `server/share$`\n\n**Examples**\n\n```javascript\nisMounted('server/share$')\n  .then((letter) => {\n    // mounted network drive hasn't been found\n    if (!letter) return\n    // found\n  })\n```\n\nReturns **([String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\|[undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined))** The drive letter or if not found `undefined`\n\n### mount\n\nMounts a network drive to the next available drive letter and returns a\nthe drive letter which it was mounted on.\n\n**Parameters**\n\n-   `unc` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** A UNC path like `//server`\n-   `path` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** A path like `some/path/to/folder`\n-   `credentials` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)=** `user` and `password` to log into a network\n\n**Examples**\n\n```javascript\n// (given letter Y: is free)\nmount('server', 'c$')\n  .then(log)\n  .catch((err) => console.error('failed to mount', err))\n// -> Y:\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** Resolves to the drive letter which the path was\nmounted on, rejects when the command fails\n\n### mountedDrives\n\nGets a list of mounted drive letters and their respective unc paths.\n\nReturns **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)** Array of { unc, letter } tuples\n\n### statByDriveLetter\n\nGets stats by a given drive `letter` like the current size of the hdd etc.\nThis also works for drives in a network. Use `statDrives()` when their are\nno login credentials, otherwise use this function to avoid firewall\nsettings.\n\n**Parameters**\n\n-   `letter` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The drive letter which the hdd was mounted on\n\n**Examples**\n\n```javascript\nstatByDriveLetter('Z:')\n// -> { freeSpace: 10700152832, size: 53579083776 }\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** A promise which resolves to `{ freeSpace, size }`\n\n### statDirectory\n\nGets various metadata about the directory and the files in it using\na recursive walk.\n\n**Parameters**\n\n-   `path` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Absolute path\n\n**Examples**\n\n```javascript\nstatDirectory('c:/temp/log')\n// -> { count: 4, size: 32636 }\n```\n\nReturns **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** Object with `size` (directory size in bytes),\n`count` (file count) and `files` (list of files in the directory and their\nrespective metadata)\n\n### statDrives\n\nGets various information about all the drives mounted on a given\n`computer`\n\n**Parameters**\n\n-   `computer` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Computer name\n\n**Examples**\n\n```javascript\nstatDrives('computer-name').then(log)\n// -> [{ deviceID: 'C:', freeSpace: 4324564, ...}, ...]\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** Resolves to `{ json, stdout, stderr }`\n\n### toUncPath\n\nCreates a windows path given a `server` name and a unix `path`.\n\n**Parameters**\n\n-   `server` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Server name\n-   `share` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Path\n\n**Examples**\n\n```javascript\ntoUncPath('server', 'some/path/to/a/log')\n// -> `\\\\server\\some\\path\\to\\a\\log`\n```\n\n### toWindowsPath\n\nReplaces `/` with `\\` so we can use an unix path and convert it to a\nwindows path.\n\n**Parameters**\n\n-   `path` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Unix style path\n\n**Examples**\n\n```javascript\ntoWindowsPath('some/random/folder')\n// -> some\\random\\folder\n```\n\nReturns **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Windows style path\n\n### unmount\n\nUnmounts a network drive given a `letter` and returns the `letter`.\n\n**Parameters**\n\n-   `letter` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Network drive letter\n\n**Examples**\n\n```javascript\n// (given letter Z: is mounted)\nunmount('Z:')\n  .then(log)\n  .catch((err) => console.error('failed to unmount', err))\n// -> Z:\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** Resolves to the drive letter when successful, rejects\nwhen the command fails\n\n## Tests\n\nThere is an extensive test suite which is not generalized for public tests because its not independent of the system it's running on. We haven't found a way to get around that for windows-like utilities.\n\n```bash\nnpm test\n```\n\n## License\n\n[MIT][license-url]\n\n[version-image]: https://img.shields.io/npm/v/windows-fs.svg?style=flat-square\n\n[version-url]: https://npmjs.org/package/windows-fs\n\n[david-image]: http://img.shields.io/david/kanton-aargau/windows-fs.svg?style=flat-square\n\n[david-url]: https://david-dm.org/kanton-aargau/windows-fs\n\n[standard-image]: https://img.shields.io/badge/code-standard-brightgreen.svg?style=flat-square\n\n[standard-url]: https://github.com/feross/standard\n\n[license-image]: http://img.shields.io/npm/l/windows-fs.svg?style=flat-square\n\n[license-url]: ./license\n"
}