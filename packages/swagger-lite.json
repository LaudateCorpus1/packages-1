{
  "package.json": true,
  "author": {
    "name": "kai zhu",
    "email": "kaizhu256@gmail.com"
  },
  "bin": {
    "swagger-lite": "index.js"
  },
  "dependencies": {
    "utility2": "2016.5.5"
  },
  "description": "this package will run a virtual swagger-ui server with persistent storage in the browser, that your webapp can use (in-place of a real backend)",
  "devDependencies": {
    "electron-lite": "github:kaizhu256/node-electron-lite#alpha"
  },
  "engines": {
    "node": ">=4.0"
  },
  "homepage": "https://github.com/kaizhu256/node-swagger-lite",
  "keywords": [
    "api",
    "admin",
    "admin-ui",
    "browser",
    "cms",
    "crud",
    "db",
    "light",
    "lightweight",
    "lite",
    "mongo",
    "mongodb",
    "nedb",
    "standalone",
    "swagger",
    "swagger-ui",
    "web"
  ],
  "license": "MIT",
  "name": "swagger-lite",
  "os": [
    "darwin",
    "linux"
  ],
  "repository": {
    "user": "kaizhu256",
    "repo": "node-swagger-lite",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/kaizhu256/node-swagger-lite/tarball/master",
    "clone_url": "https://github.com/kaizhu256/node-swagger-lite",
    "https_url": "https://github.com/kaizhu256/node-swagger-lite",
    "travis_url": "https://travis-ci.org/kaizhu256/node-swagger-lite",
    "zip_url": "https://github.com/kaizhu256/node-swagger-lite/archive/master.zip",
    "api_url": "https://api.github.com/repos/kaizhu256/node-swagger-lite"
  },
  "scripts": {
    "build-app": "npm test --mode-test-case=testCase_build_app && utility2-jslint tmp/build/app/assets.app.js",
    "build-ci": "utility2 shRun shReadmeBuild",
    "build-doc": "npm test --mode-test-case=testCase_build_doc",
    "example.js": "utility2 shRunScreenCapture shReadmeTestJs example.js",
    "start": "export PORT=${PORT:-8080} && export npm_config_mode_auto_restart=1 && utility2 shRun shIstanbulCover node test.js",
    "start-heroku": "export npm_config_mode_backend=1 && npm start ",
    "test": "export PORT=$(utility2 shServerPortRandom) && utility2 test node test.js",
    "test-published": "utility2 shRun shNpmTestPublished"
  },
  "version": "2016.5.4",
  "_npmVersion": "3.9.5",
  "_nodeVersion": "6.2.2",
  "dist": {
    "shasum": "3c95c6e31c55561c2f7a54e2ecd7fc3b29f8cf13",
    "tarball": "http://registry.npmjs.org/swagger-lite/-/swagger-lite-2016.5.4.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "2015.11.1",
      "date": "2015-11-22T15:47:49.249Z"
    },
    {
      "number": "2015.11.2",
      "date": "2015-11-24T07:13:59.909Z"
    },
    {
      "number": "2015.11.3",
      "date": "2015-11-25T01:14:49.281Z"
    },
    {
      "number": "2015.11.4",
      "date": "2015-11-25T07:47:49.052Z"
    },
    {
      "number": "2015.11.5",
      "date": "2015-11-25T16:25:44.080Z"
    },
    {
      "number": "2015.11.6",
      "date": "2015-11-25T19:51:22.430Z"
    },
    {
      "number": "2015.11.7",
      "date": "2015-12-04T13:21:22.555Z"
    },
    {
      "number": "2015.11.8",
      "date": "2015-12-14T19:56:38.909Z"
    },
    {
      "number": "2015.11.9",
      "date": "2015-12-24T07:44:05.900Z"
    },
    {
      "number": "2015.11.10",
      "date": "2015-12-29T20:18:29.276Z"
    },
    {
      "number": "2015.12.1",
      "date": "2016-01-03T18:22:32.574Z"
    },
    {
      "number": "2015.12.2",
      "date": "2016-01-05T14:51:54.856Z"
    },
    {
      "number": "2015.12.3",
      "date": "2016-01-06T07:46:39.307Z"
    },
    {
      "number": "2015.12.4",
      "date": "2016-01-10T13:55:26.377Z"
    },
    {
      "number": "2015.12.5",
      "date": "2016-01-11T09:18:14.324Z"
    },
    {
      "number": "2015.12.6",
      "date": "2016-01-15T17:41:09.099Z"
    },
    {
      "number": "2016.1.1",
      "date": "2016-02-14T13:44:29.628Z"
    },
    {
      "number": "2016.1.2",
      "date": "2016-02-22T03:51:38.987Z"
    },
    {
      "number": "2016.1.3",
      "date": "2016-02-29T11:55:51.020Z"
    },
    {
      "number": "2016.1.4",
      "date": "2016-03-03T07:05:29.080Z"
    },
    {
      "number": "2016.1.5",
      "date": "2016-03-08T16:18:09.607Z"
    },
    {
      "number": "2016.2.1",
      "date": "2016-03-19T09:17:57.692Z"
    },
    {
      "number": "2016.2.2",
      "date": "2016-04-03T10:56:07.268Z"
    },
    {
      "number": "2016.2.3",
      "date": "2016-04-19T22:35:38.747Z"
    },
    {
      "number": "2016.3.1",
      "date": "2016-04-28T10:19:13.314Z"
    },
    {
      "number": "2016.4.1",
      "date": "2016-05-12T18:07:24.768Z"
    },
    {
      "number": "2016.4.2",
      "date": "2016-05-20T14:46:46.086Z"
    },
    {
      "number": "2016.4.3",
      "date": "2016-05-30T12:01:43.283Z"
    },
    {
      "number": "2016.5.1",
      "date": "2016-06-08T16:01:20.741Z"
    },
    {
      "number": "2016.5.2",
      "date": "2016-06-12T01:01:18.911Z"
    },
    {
      "number": "2016.5.3",
      "date": "2016-06-15T14:21:23.208Z"
    },
    {
      "number": "2016.5.4",
      "date": "2016-07-01T01:21:28.244Z"
    }
  ],
  "created": "2015-11-22T15:47:49.249Z",
  "modified": "2016-07-01T01:21:28.244Z",
  "lastPublisher": {
    "name": "kaizhu",
    "email": "kaizhu256@gmail.com"
  },
  "owners": [
    {
      "name": "kaizhu",
      "email": "kaizhu256@gmail.com"
    }
  ],
  "readme": "swagger-lite\n============\nthis package will run a virtual swagger-ui server with persistent storage in the browser, that your webapp can use (in-place of a real backend)\n\n[![travis-ci.org build-status](https://api.travis-ci.org/kaizhu256/node-swagger-lite.svg)](https://travis-ci.org/kaizhu256/node-swagger-lite)\n\n[![NPM](https://nodei.co/npm/swagger-lite.png?downloads=true)](https://www.npmjs.com/package/swagger-lite)\n\n[![package-listing](https://kaizhu256.github.io/node-swagger-lite/build/screen-capture.gitLsTree.svg)](https://github.com/kaizhu256/node-swagger-lite)\n\n\n\n# documentation\n#### todo\n- add middlewareAcl\n- datatable - add sort-by-field\n- add notification system\n- add post-crud-middleware for pet photoUrl\n- rename collectDoc to something better\n- change api crudCreateOrReplaceMany to crudCreateOrReplaceManyByKeyUnique\n- add api userPasswordChange\n- add message-param to assertions in swgg.validateByPropDef\n- add logging feature\n- add cached version crudGetManyByQueryCached\n- none\n\n#### change since ddb48891\n- npm publish 2016.5.4\n- fix internal tests for heroku backend\n- none\n\n#### this package requires\n- darwin or linux os\n- chromium-based browser or firefox browser\n\n#### differences from swagger-spec @ https://github.com/OAI/OpenAPI-Specification/blob/394ffd3ff3e2fe0029a821170937a8154b04e0ba/versions/2.0.md\n- content-type \"application/xml\" is not currently supported\n- array-parameters are serialized using JSON.stringify, and the \"collectionFormat\" field is ignored\n\n#### api-doc\n- [https://kaizhu256.github.io/node-swagger-lite/build/doc.api.html](https://kaizhu256.github.io/node-swagger-lite/build/doc.api.html)\n\n[![api-doc](https://kaizhu256.github.io/node-swagger-lite/build/screen-capture.docApiCreate.browser._2Fhome_2Ftravis_2Fbuild_2Fkaizhu256_2Fnode-swagger-lite_2Ftmp_2Fbuild_2Fdoc.api.html.png)](https://kaizhu256.github.io/node-swagger-lite/build/doc.api.html)\n\n\n\n# live test-server\n- [https://kaizhu256.github.io/node-swagger-lite/build..beta..travis-ci.org/app/index.html](https://kaizhu256.github.io/node-swagger-lite/build..beta..travis-ci.org/app/index.html)\n\n[![github.com test-server](https://kaizhu256.github.io/node-swagger-lite/build/screen-capture.githubDeploy.browser._2Fnode-swagger-lite_2Fbuild..alpha..travis-ci.org_2Fapp_2Findex.html.png)](https://kaizhu256.github.io/node-swagger-lite/build..beta..travis-ci.org/app/index.html)\n\n\n\n# build-status [![travis-ci.org build-status](https://api.travis-ci.org/kaizhu256/node-swagger-lite.svg)](https://travis-ci.org/kaizhu256/node-swagger-lite)\n[![build commit status](https://kaizhu256.github.io/node-swagger-lite/build/build.badge.svg)](https://travis-ci.org/kaizhu256/node-swagger-lite)\n\n| git-branch : | [master](https://github.com/kaizhu256/node-swagger-lite/tree/master) | [beta](https://github.com/kaizhu256/node-swagger-lite/tree/beta) | [alpha](https://github.com/kaizhu256/node-swagger-lite/tree/alpha)|\n|--:|:--|:--|:--|\n| test-server 1 : | [![github.com test-server](https://kaizhu256.github.io/node-swagger-lite/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-swagger-lite/build..master..travis-ci.org/app/index.html) | [![github.com test-server](https://kaizhu256.github.io/node-swagger-lite/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-swagger-lite/build..beta..travis-ci.org/app/index.html) | [![github.com test-server](https://kaizhu256.github.io/node-swagger-lite/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-swagger-lite/build..alpha..travis-ci.org/app/index.html)|\n| test-server 2 : | [![heroku.com test-server](https://kaizhu256.github.io/node-swagger-lite/heroku-logo.75x25.png)](https://hrku01-swagger-lite-master.herokuapp.com) | [![heroku.com test-server](https://kaizhu256.github.io/node-swagger-lite/heroku-logo.75x25.png)](https://hrku01-swagger-lite-beta.herokuapp.com) | [![heroku.com test-server](https://kaizhu256.github.io/node-swagger-lite/heroku-logo.75x25.png)](https://hrku01-swagger-lite-alpha.herokuapp.com)|\n| test-report : | [![test-report](https://kaizhu256.github.io/node-swagger-lite/build..master..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-swagger-lite/build..master..travis-ci.org/test-report.html) | [![test-report](https://kaizhu256.github.io/node-swagger-lite/build..beta..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-swagger-lite/build..beta..travis-ci.org/test-report.html) | [![test-report](https://kaizhu256.github.io/node-swagger-lite/build..alpha..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-swagger-lite/build..alpha..travis-ci.org/test-report.html)|\n| coverage : | [![istanbul coverage](https://kaizhu256.github.io/node-swagger-lite/build..master..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-swagger-lite/build..master..travis-ci.org/coverage.html/index.html) | [![istanbul coverage](https://kaizhu256.github.io/node-swagger-lite/build..beta..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-swagger-lite/build..beta..travis-ci.org/coverage.html/index.html) | [![istanbul coverage](https://kaizhu256.github.io/node-swagger-lite/build..alpha..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-swagger-lite/build..alpha..travis-ci.org/coverage.html/index.html)|\n| build-artifacts : | [![build-artifacts](https://kaizhu256.github.io/node-swagger-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-swagger-lite/tree/gh-pages/build..master..travis-ci.org) | [![build-artifacts](https://kaizhu256.github.io/node-swagger-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-swagger-lite/tree/gh-pages/build..beta..travis-ci.org) | [![build-artifacts](https://kaizhu256.github.io/node-swagger-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-swagger-lite/tree/gh-pages/build..alpha..travis-ci.org)|\n\n#### master branch\n- stable branch\n- HEAD should be tagged, npm-published package\n\n#### beta branch\n- semi-stable branch\n- HEAD should be latest, npm-published package\n\n#### alpha branch\n- unstable branch\n- HEAD is arbitrary\n- commit history may be rewritten\n\n\n\n# quickstart web example\n![screen-capture](https://kaizhu256.github.io/node-swagger-lite/build/screen-capture.testExampleJs.browser..png)\n\n#### to run this example, follow the instruction in the script below\n- [example.js](https://kaizhu256.github.io/node-utility2/build/example.js)\n```javascript\n/*\nexample.js\n\nthis node script will run a standalone swagger-ui server backed by nedb\n\ninstruction\n    1. save this js script as example.js\n    2. run the shell command:\n        $ npm install swagger-lite && export PORT=8081 && node example.js\n    3. open a browser to http://localhost:8081\n    4. interact with the swagger-ui server\n*/\n\n/* istanbul instrument in package swagger-lite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        /* istanbul ignore next */\n        // init local\n        local = local.modeJs === 'browser'\n            ? window.swgg.local\n            : module.isRollup\n            ? module\n            : require('swagger-lite').local;\n        // export local\n        local.global.local = local;\n        local.middlewareCrudCustom = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will run custom-crud-operations\n         */\n            var crud, modeNext, onNext, result;\n            modeNext = 0;\n            onNext = function (error, data) {\n                modeNext = error\n                    ? Infinity\n                    : modeNext + 1;\n                switch (modeNext) {\n                case 1:\n                    crud = request.swgg.crud;\n                    switch (crud.operationId.split('.')[0]) {\n                    // coverage-hack - test error handling-behavior\n                    case 'crudErrorPre':\n                        onNext(local.utility2.errorDefault);\n                        return;\n                    case 'getInventory':\n                        crud.collection.find({}, { status: 1 }, onNext);\n                        break;\n                    default:\n                        modeNext = Infinity;\n                        onNext();\n                    }\n                    break;\n                case 2:\n                    switch (crud.operationId.split('.')[0]) {\n                    case 'getInventory':\n                        result = {};\n                        data.forEach(function (element) {\n                            result[element.status] = result[element.status] || 0;\n                            result[element.status] += 1;\n                        });\n                        onNext(null, result);\n                        break;\n                    }\n                    break;\n                case 3:\n                    local.swgg.serverRespondJsonapi(request, response, error, data);\n                    break;\n                default:\n                    nextMiddleware(error, data);\n                }\n            };\n            onNext();\n        };\n        local.middlewareInitCustom = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will custom-init the request and response\n         */\n            // enable cors\n            // http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n            response.setHeader(\n                'Access-Control-Allow-Methods',\n                'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\n            );\n            response.setHeader('Access-Control-Allow-Origin', '*');\n            // init content-type\n            response.setHeader('Content-Type', 'application/json; charset=UTF-8');\n            // ignore .map files\n            if (request.urlParsed.pathname.slice(-4) === '.map') {\n                local.utility2.serverRespondDefault(request, response, 404);\n                return;\n            }\n            nextMiddleware();\n        };\n        // init middleware\n        local.middleware = local.utility2.middlewareGroupCreate([\n            local.utility2.middlewareInit,\n            local.utility2.middlewareAssetsCached,\n            local.swgg.middlewareRouter,\n            local.swgg.middlewareUserLogin,\n            local.middlewareInitCustom,\n            local.swgg.middlewareJsonpStateGet,\n            local.utility2.middlewareBodyRead,\n            local.swgg.middlewareBodyParse,\n            local.swgg.middlewareValidate,\n            local.middlewareCrudCustom,\n            local.swgg.middlewareCrudBuiltin,\n            local.swgg.middlewareCrudEnd\n        ]);\n        // init error-middleware\n        local.middlewareError = local.swgg.middlewareError;\n        // run server-test\n        local.utility2.testRunServer(local);\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        /* istanbul ignore next */\n        local.testRun = function (event) {\n            if (local.utility2.modeTest) {\n                return;\n            }\n            switch (event && event.currentTarget.id) {\n            case 'testRunButton1':\n                local.modeTest = true;\n                local.utility2.testRun(local);\n                break;\n            case 'swggButtonNedbReset1':\n                window.swgg.nedbReset(function () {\n                    location.reload();\n                });\n                break;\n            }\n        };\n        // init event-handling\n        document.querySelector('#swggButtonNedbReset1')\n            .addEventListener('click', local.testRun);\n        document.querySelector('#testRunButton1').addEventListener('click', local.testRun);\n        // init ui\n        local.swgg.uiEventListenerDict['.onEventUiReload']();\n        break;\n\n\n\n    // run node js-env code - post-init\n    case 'node':\n        // export local\n        module.exports = local;\n        // init assets\n        local.utility2.tryCatchOnError(function () {\n            local.utility2.assetsDict['/assets.example.js'] =\n                local.fs.readFileSync(__filename, 'utf8');\n        }, local.utility2.nop);\n        /* jslint-ignore-begin */\n        // https://github.com/swagger-api/swagger-ui/blob/v2.1.3/dist/index.html\n        local.utility2.templateIndexHtml = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<title>\\n\\\n{{envDict.npm_package_name}} v{{envDict.npm_package_version}}\\n\\\n</title>\\n\\\n<link href=\"assets.swgg.css\" rel=\"stylesheet\">\\n\\\n<link href=\"assets.utility2.css\" rel=\"stylesheet\">\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background-color: #fff;\\n\\\n    font-family: Helvetica Neue,Helvetica,Arial,sans-serif;\\n\\\n}\\n\\\nbody > button {\\n\\\n    width: 10rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.testReportDiv {\\n\\\n    display: none;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n    <div class=\"ajaxProgressDiv\" style=\"display: block;\">\\n\\\n        <div class=\"ajaxProgressBarDiv ajaxProgressBarDivLoading\">loading</div>\\n\\\n    </div>\\n\\\n    <h1>\\n\\\n        <a\\n\\\n            {{#if envDict.npm_package_homepage}}\\n\\\n            href=\"{{envDict.npm_package_homepage}}\"\\n\\\n            {{/if envDict.npm_package_homepage}}\\n\\\n            target=\"_blank\"\\n\\\n        >{{envDict.npm_package_name}} v{{envDict.npm_package_version}}</a>\\n\\\n        {{#if envDict.NODE_ENV}}\\n\\\n        (NODE_ENV={{envDict.NODE_ENV}})\\n\\\n        {{/if envDict.NODE_ENV}}\\n\\\n    </h1>\\n\\\n    <h3>{{envDict.npm_package_description}}</h3>\\n\\\n    <h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n    <button id=\"testRunButton1\">run internal test</button><br>\\n\\\n    <button id=\"swggButtonNedbReset1\">reset nedb database</button><br>\\n\\\n    <div class=\"testReportDiv\" style=\"display: none;\"></div>\\n\\\n\\n\\\n    <div class=\"swggUiContainer\">\\n\\\n    <form class=\"header tr\">\\n\\\n        <a class=\"td1\" href=\"http://swagger.io\" target=\"_blank\">swagger</a>\\n\\\n        <input\\n\\\n            class=\"flex1 td2\"\\n\\\n            placeholder=\"http://petstore.swagger.io/v2/swagger.json\"\\n\\\n            type=\"text\"\\n\\\n            value=\"api/v0/swagger.json\"\\n\\\n        >\\n\\\n    </form>\\n\\\n    <div class=\"reset\"></div>\\n\\\n    </div>\\n\\\n    {{#if isRollup}}\\n\\\n    <script src=\"assets.app.min.js\"></script>\\n\\\n    <script src=\"jsonp.swgg.stateGet?callback=window.swgg.stateInit\"></script>\\n\\\n    {{#unless isRollup}}\\n\\\n    <script src=\"assets.utility2.rollup.js\"></script>\\n\\\n    <script src=\"assets.swgg.js\"></script>\\n\\\n    <script src=\"assets.swgg.lib.swagger-ui.js\"></script>\\n\\\n    <script src=\"jsonp.swgg.stateGet?callback=window.swgg.stateInit\"></script>\\n\\\n<script>\\n\\\n/*jslint browser: true*/\\n\\\nwindow.utility2.onReadyBefore.counter += 1;\\n\\\n</script>\\n\\\n    <script src=\"assets.example.js\"></script>\\n\\\n    <script src=\"assets.test.js\"></script>\\n\\\n<script>\\n\\\n/*jslint browser: true*/\\n\\\nwindow.utility2.onReadyBefore();\\n\\\n</script>\\n\\\n    {{/if isRollup}}\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        local.utility2.assetsDict['/'] = local.utility2.templateRender(\n            local.utility2.templateIndexHtml,\n            { envDict: local.utility2.envDict }\n        );\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        // init petstore-api - frontend\n        local.tmp =\n            JSON.parse(local.utility2.assetsDict['/assets.swgg.lib.swagger.petstore.json']);\n        delete local.tmp.basePath;\n        delete local.tmp.host;\n        delete local.tmp.schemes;\n        local.swgg.apiDictUpdate(local.tmp);\n        // init petstore-api - backend\n        local.swgg.apiDictUpdate({\n            definitions: {\n                File: {\n                    allOf: [{ $ref: '#/definitions/BuiltinFile' }]\n                },\n                Pet: {\n                    properties: {\n                        _id: { readOnly: true, type: 'string' },\n                        createdAt: { format: 'date-time', readOnly: true, type: 'string' },\n                        id: { default: 1, minimum: 1 },\n                        updatedAt: { format: 'date-time', readOnly: true, type: 'string' }\n                    }\n                },\n                Order: {\n                    properties: {\n                        _id: { readOnly: true, type: 'string' },\n                        createdAt: { format: 'date-time', readOnly: true, type: 'string' },\n                        id: { default: 1, minimum: 1 },\n                        updatedAt: { format: 'date-time', readOnly: true, type: 'string' }\n                    }\n                },\n                User: {\n                    allOf: [{ $ref: '#/definitions/BuiltinUser' }],\n                    properties: {\n                        _id: { readOnly: true, type: 'string' },\n                        createdAt: { format: 'date-time', readOnly: true, type: 'string' },\n                        email: { default: 'a@a.com', format: 'email' },\n                        id: { default: 1, minimum: 1 },\n                        updatedAt: { format: 'date-time', readOnly: true, type: 'string' }\n                    }\n                }\n            },\n            tags: [{ description: 'builtin-file model', name: 'file' }],\n            'x-swgg-apiDict': {\n                'file crudCountManyByQuery': {\n                    _schemaName: 'File'\n                },\n                'file crudCreateOrReplaceOneByKeyUnique.id.id': {\n                    _schemaName: 'File'\n                },\n                'file crudDeleteOneByKeyUnique.id.id': {\n                    _schemaName: 'File'\n                },\n                'file crudGetManyByQuery': {\n                    _schemaName: 'File'\n                },\n                'file crudUpdateOneByKeyUnique.id.id': {\n                    _schemaName: 'File'\n                },\n                'file fileGetOneByKeyUnique.id.id': {\n                    _schemaName: 'File'\n                },\n                'file fileUploadManyByForm.1': {\n                    _schemaName: 'File'\n                },\n                'pet addPet': {\n                    _operationId: 'crudCreateOrReplaceOneByKeyUnique.petId.id',\n                    _schemaName: 'Pet'\n                },\n                'pet crudGetManyByQuery': {\n                    _schemaName: 'Pet'\n                },\n                'pet deletePet': {\n                    _operationId: 'crudDeleteOneByKeyUnique.petId.id',\n                    _schemaName: 'Pet'\n                },\n                'pet findPetsByStatus': {\n                    _operationId: 'crudGetManyByQuery',\n                    _queryWhere: '{\"status\":{\"$in\":{{status jsonStringify}}}}',\n                    _schemaName: 'Pet'\n                },\n                'pet findPetsByTags': {\n                    _operationId: 'crudGetManyByQuery',\n                    _queryWhere: '{\"tags.name\":{\"$in\":{{tags jsonStringify}}}}',\n                    _schemaName: 'Pet'\n                },\n                'pet getPetById': {\n                    _operationId: 'crudGetOneByKeyUnique.petId.id',\n                    _schemaName: 'Pet'\n                },\n                'pet updatePet': {\n                    _operationId: 'crudUpdateOneByKeyUnique.petId.id',\n                    _schemaName: 'Pet'\n                },\n                'pet updatePetWithForm': {\n                    _operationId: 'crudUpdateOneByKeyUnique.petId.id',\n                    _schemaName: 'Pet'\n                },\n                'pet uploadFile': {\n                    _operationId: 'fileUploadManyByForm',\n                    _schemaName: 'User'\n                },\n                'store crudGetManyByQuery': {\n                    _schemaName: 'Order'\n                },\n                'store crudUpdateOneByKeyUnique.id.id': {\n                    _schemaName: 'Order'\n                },\n                'store deleteOrder': {\n                    _operationId: 'crudDeleteOneByKeyUnique.orderId.id',\n                    _schemaName: 'Order'\n                },\n                'store getInventory': {\n                    _schemaName: 'Order'\n                },\n                'store getOrderById': {\n                    _operationId: 'crudGetOneByKeyUnique.orderId.id',\n                    _schemaName: 'Order'\n                },\n                'store placeOrder': {\n                    _operationId: 'crudCreateOrReplaceOneByKeyUnique.orderId.id',\n                    _schemaName: 'Order'\n                },\n                'user createUser': {\n                    _operationId: 'crudCreateOrReplaceOneByKeyUnique.username.username',\n                    _schemaName: 'User'\n                },\n                'user createUsersWithArrayInput': {\n                    _operationId: 'crudCreateOrReplaceMany',\n                    _schemaName: 'User'\n                },\n                'user createUsersWithListInput': {\n                    _operationId: 'crudCreateOrReplaceMany',\n                    _schemaName: 'User'\n                },\n                'user crudCountManyByQuery': {\n                    _schemaName: 'User'\n                },\n                'user crudCreateOrReplaceOneByKeyUnique.username.username': {\n                    _schemaName: 'User'\n                },\n                'user crudDeleteOneByKeyUnique.username.username': {\n                    _schemaName: 'User'\n                },\n                'user crudGetManyByQuery': {\n                    _schemaName: 'User'\n                },\n                'user crudUpdateOneByKeyUnique.username.username': {\n                    _schemaName: 'User'\n                },\n                'user deleteUser': {\n                    _operationId: 'crudDeleteOneByKeyUnique.username.username',\n                    _schemaName: 'User'\n                },\n                'user getUserByName': {\n                    _operationId: 'crudGetOneByKeyUnique.username.username',\n                    _schemaName: 'User'\n                },\n                'user loginUser': {\n                    _operationId: 'userLoginByPassword',\n                    _schemaName: 'User'\n                },\n                'user logoutUser': {\n                    _operationId: 'userLogout',\n                    _schemaName: 'User'\n                },\n                'user updateUser': {\n                    _operationId: 'crudUpdateOneByKeyUnique.username.username',\n                    _schemaName: 'User'\n                },\n                'user userLoginByPassword': {\n                    _schemaName: 'User'\n                },\n                'user userLogout': {\n                    _schemaName: 'User'\n                }\n            },\n            'x-swgg-datatableDict': {\n                file: {\n                    crudCreateOrReplaceOneByKeyUnique:\n                        'file crudCreateOrReplaceOneByKeyUnique.id.id',\n                    crudDeleteOneByKeyUnique:\n                        'file crudDeleteOneByKeyUnique.id.id',\n                    crudGetManyByQuery: 'file crudGetManyByQuery',\n                    keyUnique: 'id',\n                    queryLimit: 20,\n                    schema: { $ref: '#/definitions/File' }\n                },\n                pet: {\n                    crudCreateOrReplaceOneByKeyUnique: 'pet addPet',\n                    crudDeleteOneByKeyUnique: 'pet deletePet',\n                    crudGetManyByQuery: 'pet crudGetManyByQuery',\n                    keyUnique: 'id',\n                    queryLimit: 20,\n                    schema: { $ref: '#/definitions/Pet' }\n                },\n                store: {\n                    crudCreateOrReplaceOneByKeyUnique: 'store placeOrder',\n                    crudDeleteOneByKeyUnique: 'store deleteOrder',\n                    crudGetManyByQuery: 'store crudGetManyByQuery',\n                    keyUnique: 'id',\n                    queryLimit: 20,\n                    schema: { $ref: '#/definitions/Order' }\n                },\n                user: {\n                    crudCreateOrReplaceOneByKeyUnique: 'user createUser',\n                    crudDeleteOneByKeyUnique: 'user deleteUser',\n                    crudGetManyByQuery: 'user crudGetManyByQuery',\n                    keyUnique: 'username',\n                    queryLimit: 20,\n                    schema: { $ref: '#/definitions/User' }\n                }\n            }\n        });\n        // init collectionList-fixtures\n        local.utility2.onReadyBefore.counter += 1;\n        local.swgg.collectionListInit([{\n            collectDocList: [{\n                id: '00_test_swaggerUiLogoSmall',\n                fileBlob: local.swgg.templateSwaggerUiLogoSmallBase64,\n                fileContentType: 'image/png',\n                fileDescription: 'swagger-ui logo',\n                fileFilename: 'swaggerUiLogoSmall.png'\n            }],\n            drop: true,\n            ensureIndexList: [{\n                fieldName: 'id',\n                unique: true\n            }],\n            name: 'File'\n        }, {\n            collectDocList: local.swgg.collectDocListRandomCreate({\n                collectDocList: [{\n                    id: 0,\n                    name: 'birdie',\n                    photoUrls: [],\n                    status: 'available',\n                    tags: [{ name: 'bird'}]\n                }, {\n                    id: 1,\n                    name: 'doggie',\n                    status: 'pending',\n                    photoUrls: [],\n                    tags: [{ name: 'dog'}]\n                }, {\n                    id: 2,\n                    name: 'fishie',\n                    photoUrls: [],\n                    status: 'sold',\n                    tags: [{ name: 'fish'}]\n                }],\n                // init 100 extra random pets\n                length: 100,\n                override: function (options) {\n                    return {\n                        id: options.ii + 100,\n                        name: local.utility2.listGetElementRandom(\n                            ['birdie', 'doggie', 'fishie']\n                        ) + '-' + (options.ii + 100),\n                        tags: [\n                            { name: local.utility2.listGetElementRandom(['female', 'male']) },\n                            { name: Math.random().toString(36).slice(2) }\n                        ]\n                    };\n                },\n                properties: local.swgg.swaggerJson.definitions.Pet.properties\n            }),\n            drop: true,\n            ensureIndexList: [{\n                fieldName: 'id',\n                unique: true\n            }],\n            name: 'Pet'\n        }, {\n            collectDocList: local.swgg.collectDocListRandomCreate({\n                collectDocList: [{\n                    id: 0,\n                    petId: 0,\n                    status: 'available'\n                }, {\n                    id: 1,\n                    petId: 1,\n                    status: 'pending'\n                }, {\n                    id: 2,\n                    petId: 2,\n                    status: 'sold'\n                }],\n                // init 100 extra random orders\n                length: 100,\n                override: function (options) {\n                    return {\n                        id: options.ii + 100,\n                        petId: options.ii + 100\n                    };\n                },\n                properties: local.swgg.swaggerJson.definitions.Order.properties\n            }),\n            drop: true,\n            ensureIndexList: [{\n                fieldName: 'id',\n                unique: true\n            }],\n            name: 'Order'\n        }, {\n            collectDocList: local.swgg.collectDocListRandomCreate({\n                collectDocList: [{\n                    email: 'admin@admin.com',\n                    firstName: 'admin',\n                    id: 0,\n                    lastName: '',\n                    password: local.utility2.bcryptHashCreate('secret', 1),\n                    phone: '1234-5678',\n                    username: 'admin'\n                }, {\n                    email: 'jane@doe.com',\n                    firstName: 'jane',\n                    id: 1,\n                    lastName: 'doe',\n                    password: local.utility2.bcryptHashCreate('secret', 1),\n                    phone: '1234-5678',\n                    username: 'jane.doe'\n                }, {\n                    email: 'john@doe.com',\n                    firstName: 'john',\n                    id: 2,\n                    lastName: 'doe',\n                    password: local.utility2.bcryptHashCreate('secret', 1),\n                    phone: '1234-5678',\n                    username: 'john.doe'\n                }],\n                // init 100 extra random users\n                length: 100,\n                override: function (options) {\n                    return {\n                        firstName: local.utility2.listGetElementRandom(\n                            ['alice', 'bob', 'jane', 'john']\n                        ) + '-' + (options.ii + 100),\n                        id: options.ii + 100,\n                        lastName: local.utility2.listGetElementRandom(['doe', 'smith']) +\n                            '-' + (options.ii + 100),\n                        password: local.utility2.bcryptHashCreate('secret', 1),\n                        tags: [\n                            { name: local.utility2.listGetElementRandom(['female', 'male']) },\n                            { name: Math.random().toString(36).slice(2) }\n                        ]\n                    };\n                },\n                properties: local.swgg.swaggerJson.definitions.User.properties\n            }),\n            drop: true,\n            ensureIndexList: [{\n                fieldName: 'email',\n                unique: true\n            }, {\n                fieldName: 'id',\n                unique: true\n            }, {\n                fieldName: 'username',\n                unique: true\n            }],\n            name: 'User'\n        }], local.utility2.onReadyBefore);\n    }());\n}());\n```\n\n#### output from electron-lite\n![screen-capture](https://kaizhu256.github.io/node-swagger-lite/build/screen-capture.testExampleJs.browser..png)\n\n#### output from shell\n![screen-capture](https://kaizhu256.github.io/node-swagger-lite/build/screen-capture.testExampleJs.svg)\n\n\n\n# package.json\n```json\n{\n    \"package.json\": true,\n    \"author\": \"kai zhu <kaizhu256@gmail.com>\",\n    \"bin\": { \"swagger-lite\": \"index.js\" },\n    \"dependencies\": {\n        \"utility2\": \"2016.5.5\"\n    },\n    \"description\": \"{{packageJson.description}}\",\n    \"devDependencies\": {\n        \"electron-lite\": \"kaizhu256/node-electron-lite#alpha\"\n    },\n    \"engines\": { \"node\": \">=4.0\" },\n    \"homepage\": \"https://github.com/kaizhu256/node-swagger-lite\",\n    \"keywords\": [\n        \"api\", \"admin\", \"admin-ui\",\n        \"browser\",\n        \"cms\", \"crud\",\n        \"db\",\n        \"light\", \"lightweight\", \"lite\",\n        \"mongo\", \"mongodb\",\n        \"nedb\",\n        \"standalone\", \"swagger\", \"swagger-ui\",\n        \"web\"\n    ],\n    \"license\": \"MIT\",\n    \"name\": \"swagger-lite\",\n    \"os\": [\"darwin\", \"linux\"],\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/kaizhu256/node-swagger-lite.git\"\n    },\n    \"scripts\": {\n        \"build-app\": \"npm test --mode-test-case=testCase_build_app && \\\nutility2-jslint tmp/build/app/assets.app.js\",\n        \"build-ci\": \"utility2 shRun shReadmeBuild\",\n        \"build-doc\": \"npm test --mode-test-case=testCase_build_doc\",\n        \"example.js\": \"utility2 shRunScreenCapture shReadmeTestJs example.js\",\n        \"start\": \"\\\nexport PORT=${PORT:-8080} && \\\nexport npm_config_mode_auto_restart=1 && \\\nutility2 shRun shIstanbulCover node test.js\",\n        \"start-heroku\": \"\\\nexport npm_config_mode_backend=1 && \\\nnpm start \\\n\",\n        \"test\": \"\\\nexport PORT=$(utility2 shServerPortRandom) && \\\nutility2 test node test.js\",\n        \"test-published\": \"utility2 shRun shNpmTestPublished\"\n    },\n    \"version\": \"2016.5.4\"\n}\n```\n\n\n\n# changelog of last 50 commits\n[![screen-capture](https://kaizhu256.github.io/node-swagger-lite/build/screen-capture.gitLog.svg)](https://github.com/kaizhu256/node-swagger-lite/commits)\n\n\n\n# internal build-script\n- build.sh\n```shell\n# build.sh\n\n# this shell script will run the build for this package\n\nshBuildCiTestPre() {(set -e\n# this function will run the pre-test build\n    # test example js script\n    (export MODE_BUILD=testExampleJs &&\n        export npm_config_timeout_exit=10000 &&\n        npm run example.js) || return $?\n)}\n\nshBuildCiTestPost() {(set -e\n# this function will run the post-test build\n    # if running legacy-node, then return\n    [ \"$(node --version)\" \\< \"v5.0\" ] && return || true\n    export NODE_ENV=production\n    # deploy app to gh-pages\n    export TEST_URL=\"https://$(printf \"$GITHUB_REPO\" | \\\n        sed 's/\\//.github.io\\//')/build..$CI_BRANCH..travis-ci.org/app/index.html\"\n    (export MODE_BUILD=githubDeploy &&\n        shGithubDeploy) || return $?\n    # test deployed app to gh-pages\n    (export MODE_BUILD=githubTest &&\n        export modeBrowserTest=test &&\n        export url=\"$TEST_URL?modeTest=consoleLogResult&timeExit={{timeExit}}\" &&\n        shBrowserTest) || return $?\n    # deploy app to heroku\n    export HEROKU_REPO=\"hrku01-$npm_package_name-$CI_BRANCH\"\n    export TEST_URL=\"https://$HEROKU_REPO.herokuapp.com\"\n    shGitRepoBranchUpdateLocal() {(set -e\n    # this function will local-update git-repo-branch\n        cp \"$npm_config_dir_build/app/assets.app.js\" .\n    )}\n    (export MODE_BUILD=herokuDeploy &&\n        shHerokuDeploy) || return $?\n    # test deployed app to heroku\n    (export MODE_BUILD=herokuTest &&\n        export modeBrowserTest=test &&\n        export url=\"$TEST_URL?modeTest=consoleLogResult&timeExit={{timeExit}}\" &&\n        shBrowserTest) || return $?\n)}\n\nshBuild() {(set -e\n# this function will run the main build\n    # init env\n    . node_modules/.bin/utility2 && shInit\n    # cleanup github-gh-pages dir\n    # export BUILD_GITHUB_UPLOAD_PRE_SH=\"rm -fr build\"\n    # init github-gh-pages commit-limit\n    export COMMIT_LIMIT=16\n    # if branch is alpha, beta, or master, then run default build\n    if [ \"$CI_BRANCH\" = alpha ] ||\n        [ \"$CI_BRANCH\" = beta ] ||\n        [ \"$CI_BRANCH\" = master ]\n    then\n        shBuildCiDefault\n    fi\n)}\nshBuild\n```\n"
}