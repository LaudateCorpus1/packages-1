{
  "name": "network-har",
  "version": "0.5.5",
  "description": "CLI utility to retrieve network activity in HAR (HTTP Archive) format",
  "repository": {
    "user": "alexbardas",
    "repo": "network-har",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/alexbardas/network-har/tarball/master",
    "clone_url": "https://github.com/alexbardas/network-har",
    "https_url": "https://github.com/alexbardas/network-har",
    "travis_url": "https://travis-ci.org/alexbardas/network-har",
    "zip_url": "https://github.com/alexbardas/network-har/archive/master.zip",
    "api_url": "https://api.github.com/repos/alexbardas/network-har"
  },
  "keywords": [
    "har",
    "network",
    "testing",
    "performance",
    "electron",
    "docker"
  ],
  "main": "index.js",
  "scripts": {
    "test": "standard"
  },
  "author": {
    "name": "Alex Bardas",
    "email": "alex.bardas@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "standard": "^8.3.0"
  },
  "dependencies": {
    "commander": "^2.9.0",
    "nightmare": "^2.7.0",
    "nightmare-har-plugin": "^0.9.0"
  },
  "bin": {
    "network-har": "bin/network-har"
  },
  "gitHead": "49f66c21106246b32fc9d33999247b11e65f1d17",
  "homepage": "https://github.com/alexbardas/network-har#readme",
  "_npmVersion": "3.10.3",
  "_nodeVersion": "6.5.0",
  "dist": {
    "shasum": "0eff56a128f067cb5d6eebdd7663b8fe8ab8131c",
    "tarball": "http://registry.npmjs.org/network-har/-/network-har-0.5.5.tgz"
  },
  "versions": [
    {
      "number": "0.5.0",
      "date": "2016-10-09T23:03:23.625Z"
    },
    {
      "number": "0.5.1",
      "date": "2016-10-09T23:13:55.981Z"
    },
    {
      "number": "0.5.2",
      "date": "2016-10-10T18:16:20.766Z"
    },
    {
      "number": "0.5.3",
      "date": "2016-10-10T18:18:23.409Z"
    },
    {
      "number": "0.5.4",
      "date": "2016-10-10T18:22:02.644Z"
    },
    {
      "number": "0.5.5",
      "date": "2016-10-11T23:30:51.024Z"
    }
  ],
  "created": "2016-10-09T23:03:23.625Z",
  "modified": "2016-10-11T23:30:51.024Z",
  "lastPublisher": {
    "name": "alexbardas",
    "email": "alexbardas@gmail.com"
  },
  "owners": [
    {
      "name": "alexbardas",
      "email": "alexbardas@gmail.com"
    }
  ],
  "readme": "network-har\n===========\n\n[![Build Status](https://travis-ci.org/alexbardas/network-har.svg?branch=master)](https://travis-ci.org/alexbardas/network-har)\n[![Docker Pulls](https://img.shields.io/docker/pulls/alexbardas/network-har.svg)](https://hub.docker.com/r/alexbardas/network-har)\n\n- [What is network-har?](#what-is-network-har)\n- [Use cases](#use-cases)\n- [Getting started](#getting-started)\n- [Options](#options)\n- [Examples](#examples)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n\n\n## What is network-har?\nCLI utility that uses [Nightmare.js](https://nightmarejs.org) and the [nightmare har plugin](https://github.com/alexbardas/nightmare-har-plugin) to capture network activity in HAR (HTTP Archive) format. It also provides a docker image which retrieves the HAR by running nightmarejs headlessly.\n\n\n## Use cases\n- integration testing (are specific requests being made? how often?)\n- performance testing (HAR contains detailed timing information of the network requests)\n- getting page weight, number of js / css / ajax / font / ... requests\n\n\n## Getting started\nOnly *1 command* is required to be executed to retrive the network information. Can be used as a:\n1. nodejs binary: `network-har [options]`\n2. docker image (runs in a headless electron environment): `docker run --rm alexbardas/network-har [options]`\n\n### 1. From nodejs\n##### Install\n`npm install -g network-har`\n\n##### Usage\n`network-har [options]`\n\n### 2. From docker\n##### Install\n`docker pull alexbardas/network-har`\n\n##### Usage\n`docker run --rm alexbardas/network-har [options]`\n\nGain access inside the container:\n```sh\ndocker run -it --entrypoint=/bin/bash --rm alexbardas/network-har\nroot@containerid:/src# ./network-har.sh [options]\n```\n\n##### Usefulness\nThe `network-har.sh` (docker's image entrypoint) can be used to headlessly retrieve the network information in a CI step which is based on the `alexbardas/network-har` docker image.\n\n[Jq](https://stedolan.github.io/jq/) command line JSON preprocessor is already installed on the provided docker image, so the json HAR output can be very easily parsed inside the container.\n\n### API\nThe following commands can be interchangeable, but they depend on the executing environment:\n- `network-har [options]` (if nodejs is available and the `network-har` npm package is installed and if the environment already has an X server -> many ifs)\n- `docker run --rm alexbardas/network-har [options]` (if docker is installed)\n- `./network-har.sh [options]` (inside a docker container created from the provided image. Useful in a CI step)\n\n\n## Options\n##### `--help`\nPrints detailed help information.\n```sh\ndocker run --rm alexbardas/network-har --help\n```\n\n##### `--debug` (optional, no extra arguments)\nOpens a minimal window manager ([`jwm`](http://joewing.net/projects/jwm/)) and a vnc server ([`x11vnc`](http://www.karlrunge.com/x11vnc/)) in the docker container to allow remote debugging. Connect with a vnc viewer to localhost:5900 using the password `secret`.\nFree VNC viewers:\n- for macOS: Screen Sharing (comes with every macOS version)\n- for windows: [TightVNC](http://www.tightvnc.com/)\n\n##### `--url string` (required)\nThe website for which the har information is needed.\n```sh\ndocker run --rm alexbardas/network-har \\\n  --url https://news.ycombinator.com\n```\n\n##### `--header string:string` (optional, default: none)\nAdditional headers to be added to the http request. Can be used multiple times.\n```sh\ndocker run --rm alexbardas/network-har \\\n  --url https://news.ycombinator.com \\\n  --header \"Cache-Control:no-cache\" \\\n  --header \"Accept-Language:en-us\"\n```\n\n##### `--retries number` (optional, default: 2)\nNumber of maximum retries for getting the network HAR in case the the command fails with a network error. Useful because electron can have intermittent network failures.\n```sh\ndocker run --rm alexbardas/network-har \\\n  --url https://news.ycombinator.com \\\n  --retries 3\n```\n\n##### `--useragent string` (optional, default: none)\nOverrides default electron useragent with a new value.\n```sh\ndocker run --rm alexbardas/network-har \\\n  --url https://news.ycombinator.com \\\n  --useragent \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2860.0 Safari/537.36\"\n```\n\n##### `--viewport number,number` (optional, default: 375,667)\nOverrides default electron viewport with new values.\n```sh\ndocker run --rm alexbardas/network-har \\\n  --url https://news.ycombinator.com \\\n  --viewport 1366,768\n```\n\n##### `--wait number` (optional, default: 5000)\nWaits for the specified number of ms after the request is made until retrieving the network information.\n```sh\ndocker run --rm alexbardas/network-har \\\n  --url https://news.ycombinator.com \\\n  --wait 10000\n```\n\n##### `--wait string` (optional, default: none)\nWaits for a specific element defined by a string selector to be available in the DOM.\n```sh\ndocker run --rm alexbardas/network-har \\\n  --url https://news.ycombinator.com \\\n  --wait \"#hnmain\"\n```\n\n## Examples\nRetrieve the network HAR for hackernews for:\n- `1024x768` viewport\n- `network-har` useragent\n- `Cache-Control: no-cache` and `Accept-Language: en-US` headers\n- `10s` wait time for network resources\n- `3` maximum retries\n- '#hnmain' waits for the element having this selector to be in the DOM\n\n```\ndocker run --rm alexbardas/network-har \\\n  --url https://news.ycombinator.com \\\n  --useragent \"network-har\" \\\n  --viewport 1024,768 \\\n  --header \"Cache-Control:no-cache\" \\\n  --header \"Accept-Language:en-US\" \\\n  --retries 3 \\\n  --wait \"#hnmain\"\n```\n\n## Debugging\nNodejs binary:\n- It's most likely in this case that a X Window System is already present. Because it needs to open devtools in order to record the network activity and devtools works only when the electron browser is displayed, the debugging should be done directly in this environment.\n\nDocker image:\n- There is an extra option which allows remote debugging: `--debug`. An extra window manager and vnc server are started in order to enable debugging from the user's host machine inside the docker container.\n\n## Contributing\n\n1. `Network-har` is an open source project and welcome contributions.\n\n2. See [CONTRIBUTING.md](https://github.com/alexbardas/network-har/blob/master/CONTRIBUTING.md) to get your local environment set up.\n"
}