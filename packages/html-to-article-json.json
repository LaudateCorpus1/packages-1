{
  "name": "html-to-article-json",
  "version": "1.14.1",
  "description": "Converting HTML to article-json",
  "main": "dist/index.js",
  "scripts": {
    "benchmark": "babel-node benchmark/node.js",
    "example": "beefy example/client.js --index example/index.html --open -- --transform babelify",
    "lint": "semistandard | snazzy",
    "build": "rm -rf dist && babel lib --out-dir dist",
    "prepublish": "npm run build",
    "postpublish": "rm -rf dist",
    "test": "npm run lint && npm run test:node && npm run test:coverage && npm run test:check-coverage && npm run test:browser",
    "test:browser": "browserify -t [babelify --presets [es2015] --plugins [static-fs] ] -d test/*-test.js | testron | faucet",
    "test:coverage": "nyc babel-tape-runner test/*-test.js",
    "test:check-coverage": "nyc check-coverage --lines 100 --functions 100 --branches 100",
    "open-coverage": "npm run test:coverage && nyc report --reporter=lcov && open coverage/lcov-report/index.html",
    "test:node": "babel-tape-runner test/*-test.js"
  },
  "repository": {
    "user": "micnews",
    "repo": "html-to-article-json",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/micnews/html-to-article-json/tarball/master",
    "clone_url": "https://github.com/micnews/html-to-article-json",
    "https_url": "https://github.com/micnews/html-to-article-json",
    "travis_url": "https://travis-ci.org/micnews/html-to-article-json",
    "zip_url": "https://github.com/micnews/html-to-article-json/archive/master.zip",
    "api_url": "https://api.github.com/repos/micnews/html-to-article-json"
  },
  "author": {
    "name": "mic.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/micnews/html-to-article-json#readme",
  "devDependencies": {
    "babel-cli": "^6.4.5",
    "babel-plugin-static-fs": "^1.1.0",
    "babel-preset-es2015": "^6.3.13",
    "babel-tape-runner": "^2.0.0",
    "babelify": "^7.2.0",
    "beefy": "^2.1.5",
    "browserify": "^13.0.0",
    "electron-prebuilt": "^0.37.2",
    "faucet": "0.0.1",
    "nyc": "^6.0.0",
    "pre-commit": "^1.1.1",
    "semistandard": "^8.0.0",
    "snazzy": "^4.0.0",
    "tape": "^4.4.0",
    "tape-catch": "^1.0.4",
    "testron": "^1.2.0",
    "tsml": "^1.0.1",
    "watchify": "^3.4.0"
  },
  "dependencies": {
    "block-elements": "^1.1.0",
    "embedly-url": "^1.0.0",
    "embeds": "^2.5.0",
    "es6-set": "^0.1.2",
    "generate-function": "^2.0.0",
    "get-youtube-id": "^1.0.0",
    "lodash.find": "^4.2.0",
    "lodash.last": "^3.0.0",
    "lodash.map": "^4.2.0",
    "lodash.startswith": "^4.0.0",
    "lodash.values": "^4.1.0",
    "query-dom": "^3.0.0"
  },
  "pre-commit": [
    "test:coverage"
  ],
  "gitHead": "147efbe9a502edc3ae84e89f164bd6ee1707d3ba",
  "_npmVersion": "3.9.5",
  "_nodeVersion": "4.0.0",
  "dist": {
    "shasum": "2c887d79cf1b68fea3b8e4e01ae2fe44c7e91be7",
    "tarball": "http://registry.npmjs.org/html-to-article-json/-/html-to-article-json-1.14.1.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2016-01-25T17:26:25.351Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-01-25T17:52:45.283Z"
    },
    {
      "number": "0.1.2",
      "date": "2016-01-25T18:02:42.724Z"
    },
    {
      "number": "0.1.3",
      "date": "2016-01-25T18:23:46.163Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-01-27T17:54:01.638Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-01-27T21:55:39.684Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-01-27T23:36:56.785Z"
    },
    {
      "number": "1.3.0",
      "date": "2016-01-28T11:03:24.338Z"
    },
    {
      "number": "1.4.0",
      "date": "2016-01-28T16:14:21.895Z"
    },
    {
      "number": "1.5.0",
      "date": "2016-01-28T17:17:47.505Z"
    },
    {
      "number": "1.6.0",
      "date": "2016-01-29T23:36:24.452Z"
    },
    {
      "number": "1.7.0",
      "date": "2016-01-30T23:38:16.470Z"
    },
    {
      "number": "1.8.0",
      "date": "2016-01-31T23:37:28.741Z"
    },
    {
      "number": "1.8.1",
      "date": "2016-02-01T18:54:22.701Z"
    },
    {
      "number": "1.9.0",
      "date": "2016-02-06T19:08:12.840Z"
    },
    {
      "number": "1.9.1",
      "date": "2016-02-16T13:30:02.287Z"
    },
    {
      "number": "1.9.2",
      "date": "2016-03-04T13:26:09.271Z"
    },
    {
      "number": "1.10.0",
      "date": "2016-03-09T21:31:10.480Z"
    },
    {
      "number": "1.11.0",
      "date": "2016-04-09T17:26:20.157Z"
    },
    {
      "number": "1.12.0",
      "date": "2016-04-21T12:33:44.625Z"
    },
    {
      "number": "1.12.1",
      "date": "2016-04-21T13:30:14.326Z"
    },
    {
      "number": "1.12.2",
      "date": "2016-04-25T08:17:25.572Z"
    },
    {
      "number": "1.12.3",
      "date": "2016-04-25T09:12:46.880Z"
    },
    {
      "number": "1.12.4",
      "date": "2016-04-27T11:29:30.960Z"
    },
    {
      "number": "1.12.5",
      "date": "2016-05-16T19:54:58.167Z"
    },
    {
      "number": "1.13.0",
      "date": "2016-05-27T08:42:59.405Z"
    },
    {
      "number": "1.14.0",
      "date": "2016-06-20T12:58:15.168Z"
    },
    {
      "number": "1.14.1",
      "date": "2016-07-01T12:03:08.506Z"
    }
  ],
  "created": "2016-01-25T17:26:25.351Z",
  "modified": "2016-07-01T12:03:08.506Z",
  "lastPublisher": {
    "name": "ellell",
    "email": "lisaovermyr@gmail.com"
  },
  "owners": [
    {
      "name": "ellell",
      "email": "lisaovermyr@gmail.com"
    },
    {
      "name": "iefserge",
      "email": "shayief@gmail.com"
    },
    {
      "name": "kesla",
      "email": "david.bjorklund@gmail.com"
    }
  ],
  "readme": "# html-to-article-json[![Build Status](https://travis-ci.org/micnews/html-to-article-json.svg?branch=master)](https://travis-ci.org/micnews/html-to-article-json)\n\n**html-to-article-json** parses & normalizes html to a well-structured & easy to use article json format.\n\nThe parsing logic is based on real articles - with sometimes very weird html - so please open an issue if some html doesn't get parsed correctly!\n\n## Installation\n\n```shell\nnpm install html-to-article-json\n```\n\n## Usage\n\n### node.js\n\n```js\nvar htmlToArticleJson = require('html-to-article-json')(opts);\nvar htmlString = '<p>Foo<b>bar</b></p>';\nvar articleJson = htmlToArticleJson(htmlString);\n```\n\n### browserify\n\nUsing browseriy html-to-article-json can also use DOM as input in the browser!\n\n```js\nvar htmlToArticleJson = require('html-to-article-json')(opts);\nvar domElement = document.querySelector('article');\nvar articleJson = htmlToArticleJson(domElement);\n```\n\n## Format\n\n`article-json` consists of a list of nodes, each node representing a block of content.\n\nPlease see the example (`npm run example`) for a simple WYSIWYG editor & the corresponding article json.\n\n### Text\n\n```json\n{\n  \"type\": \"paragraph\",\n  \"children\": [{\n    \"type\": \"text\",\n    \"content\": \"Hello, \",\n    \"href\": null,\n    \"italic\": false,\n    \"bold\": false\n  }, {\n    \"type\": \"text\",\n    \"content\": \"mic.com\",\n    \"href\": \"http://www.mic.com\",\n    \"italic\": true,\n    \"bold\": false\n  }]\n}\n```\n\nThe above is an example of a text node - corresponding to something like `<p>Hello, <a href=\"mic.com\"><b>mic.com</b></a>`.\n\nA text content node is defined by it's visual representation rather than it's code - so `html-to-article-json` will parse `<a href=\"mic.com\"><b>mic.com</b></a>` and `<b><a href=\"mic.com\">mic.com</a></b>` to the same json object.\n\nValid text nodes are `paragraph`, `header1`, `header2`, `header3`, `header4`, `header5` & `header6`.\n\n### Embeds\n\n```json\n{\n  \"type\": \"embed\",\n  \"embedType\": \"youtube\",\n  \"youtubeId\": \"eBYFOJxZx4Q\",\n  \"caption\": [{\n    \"type\": \"text\",\n    \"content\": \"Here's a video from \",\n    \"href\": null,\n    \"italic\": false,\n    \"bold\": false\n  }, {\n    \"type\": \"text\",\n    \"content\": \"mic.com\",\n    \"href\": \"http://www.mic.com\",\n    \"italic\": true,\n    \"bold\": false\n  }]\n}\n```\n\nThe above is an example of an embed node - corresponding to a youtube embed. The caption format is the same as the `children` array we have in the `Text` example.\n"
}