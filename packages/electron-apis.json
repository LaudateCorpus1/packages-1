{
  "name": "electron-apis",
  "description": "A JSON object describing Electron's APIs",
  "version": "2.0.2",
  "author": {
    "name": "Zeke Sikelianos",
    "email": "zeke@sikelianos.com",
    "url": "http://zeke.sikelianos.com"
  },
  "dependencies": {
    "decamelize": "^1.2.0",
    "electron-docs": "^1.1.0",
    "lodash.find": "^4.3.0",
    "lodash.pick": "^4.2.1",
    "marky-markdown-lite": "^1.1.0",
    "omit-empty": "^0.4.1",
    "pify": "^2.3.0",
    "to-markdown": "^3.0.0"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "heads": "^1.1.0",
    "mocha": "^2.5.3",
    "standard": "^7.1.2"
  },
  "homepage": "https://github.com/zeke/electron-apis#readme",
  "keywords": [
    "api",
    "documentation",
    "electron",
    "json",
    "markdown",
    "node",
    "schema"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "user": "zeke",
    "repo": "electron-apis",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/zeke/electron-apis/tarball/master",
    "clone_url": "https://github.com/zeke/electron-apis",
    "https_url": "https://github.com/zeke/electron-apis",
    "travis_url": "https://travis-ci.org/zeke/electron-apis",
    "zip_url": "https://github.com/zeke/electron-apis/archive/master.zip",
    "api_url": "https://api.github.com/repos/zeke/electron-apis"
  },
  "scripts": {
    "test": "mocha && standard"
  },
  "standard": {
    "env": {
      "mocha": true
    }
  },
  "gitHead": "7ac7864c8ec8d865c77bfda4949a7dcbb4dec97a",
  "_npmVersion": "3.9.3",
  "_nodeVersion": "6.2.1",
  "dist": {
    "shasum": "14db12f04e0aee5e66b6d0808eb22940fc039aae",
    "tarball": "http://registry.npmjs.org/electron-apis/-/electron-apis-2.0.2.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-06-21T22:53:52.606Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-06-21T22:57:25.395Z"
    },
    {
      "number": "1.2.0",
      "date": "2016-06-22T05:15:32.932Z"
    },
    {
      "number": "2.0.0",
      "date": "2016-06-30T23:26:52.058Z"
    },
    {
      "number": "2.0.1",
      "date": "2016-06-30T23:35:53.600Z"
    },
    {
      "number": "2.0.2",
      "date": "2016-06-30T23:38:37.659Z"
    }
  ],
  "created": "2016-06-21T22:53:52.606Z",
  "modified": "2016-06-30T23:38:37.659Z",
  "lastPublisher": {
    "name": "zeke",
    "email": "zeke@sikelianos.com"
  },
  "owners": [
    {
      "name": "zeke",
      "email": "zeke@sikelianos.com"
    }
  ],
  "readme": "# electron-apis [![Build Status](https://travis-ci.org/zeke/electron-apis.svg?branch=master)](https://travis-ci.org/zeke/electron-apis)\n\nA JSON object describing [Electron's APIs](http://electron.atom.io/docs/api/).\n\nSee [apis.json](/apis.json) or explore the object in the node repl:\n\n```js\nnpm i -g trymodule && trymodule electron-apis\n```\n\n## Installation\n\nThe module exports a function that parses markdown docs in a given directory,\nthen returns a JSON representation of the docs.\n\n```sh\nnpm install electron-apis --save\n```\n\n## Usage\n\n```js\nconst lint = require('electron-apis')\nconst docPath = './vendor/electron/docs/api'\n\nlint(docPath).then(function (apis) {\n  // `apis` is an array of API objects. To find one:\n  const win = apis.find(api => api.name === 'BrowserWindow')\n\n  win.events.length\n  // => 25\n\n  win.events[0]\n  // {\n  //   \"name\": \"page-title-updated\",\n  //   \"description\": \"Emitted when the document...\",\n  //   \"returns\": [\n  //     {\n  //       \"name\": \"event\",\n  //       \"type\": \"Event\"\n  //     }\n  //   ]\n  // }\n\n  win.instanceMethods[20]\n  // {\n  //   name: 'setSize',\n  //   signature: '(width, height[, animate])'\n  // }\n})\n```\n\n## How It Works\n\nThe linter starts with [a list of all the API names](/lib/seeds.json)\nas well as booleans indicating if they're available on the\n[Main Process](https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md)\nor the\n[Renderer Process](https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md)\n(or both).\n\nEach API's structure is inferred by parsing its raw markdown documentation from\nthe [electron repo](https://github.com/electron/electron/tree/master/docs/api).\nThe [electron-docs](https://github.com/zeke/electron-docs) module abstracts away\nthe challenges of fetching file contents in bulk.\n\nElectron's API documentation adheres to\n[Electron Coding Style](https://github.com/electron/electron/blob/master/docs/development/coding-style.md#naming-things)\nand the\n[Electron Styleguide](https://github.com/electron/electron/blob/master/docs/styleguide.md),\nso its content can be programmatically parsed. To make the content easy to parse,\nthe raw markdown is converted to HTML using\n[marky-markdown-lite](https://ghub.io/marky-markdown-lite),\nwhich returns a [cheerio](https://ghub.io/cheerio) DOM object that can be queried\nand traversed using familiar CSS selectors.\n\nThe result is an array of APIs. The following\nmetadata is included for each API, where appropriate:\n\n- name\n- description\n- type (Class or Object)\n- process (main, renderer, or both)\n- methods\n- instance methods\n- events\n- website URL\n- GitHub repository URL\n\n## Dependencies\n\nNone\n\n## Dev Dependencies\n\n- [chai](https://github.com/chaijs/chai): BDD/TDD assertion library for node.js and the browser. Test framework agnostic.\n- [decamelize](https://github.com/sindresorhus/decamelize): Convert a camelized string into a lowercased one with a custom separator: unicornRainbow â†’ unicorn_rainbow\n- [electron-docs](https://github.com/zeke/electron-docs): Fetch Electron documentation as raw markdown strings\n- [heads](https://github.com/zeke/heads): Make parallel HEAD requests for an array of URLs and get back their HTTP status codes.\n- [lodash.find](https://github.com/lodash/lodash): The lodash method `_.find` exported as a module.\n- [marky-markdown-lite](https://github.com/zeke/marky-markdown-lite): A version of marky-markdown that does less\n- [mocha](https://github.com/mochajs/mocha): simple, flexible, fun test framework\n- [omit-empty](https://github.com/jonschlinkert/omit-empty): Recursively omit empty properties from an object. Omits empty objects, arrays, strings or zero.\n- [standard](https://github.com/feross/standard): JavaScript Standard Style\n\n\n## Related\n\n- https://github.com/atom/autocomplete-atom-api\n- https://kapeli.com/docsets#dashDocset\n- [issue: Publish the public API as JSON](https://github.com/electron/electron/issues/3375)\n- https://raw.githubusercontent.com/atom/autocomplete-atom-api/master/completions.json\n- [devdocs.io](http://devdocs.io/)\n- [Node.js - About this Documentation](https://nodejs.org/dist/latest-v6.x/docs/api/documentation.html)\n\n## License\n\nMIT\n"
}