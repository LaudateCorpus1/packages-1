{
  "name": "henderson",
  "version": "1.0.1",
  "description": "A tiny event emitter-based finite state machine with promises",
  "main": "henderson.js",
  "scripts": {
    "develop": "onchange 'henderson.js' 'test/*' -- npm run test:node",
    "minify": "uglifyjs henderson.js -o henderson.min.js -c --m",
    "test:node": "electron-mocha --reporter spec ./test",
    "test:browser": "electron-mocha --renderer --preload test/browser-shim.js --preload henderson.js --reporter spec ./test",
    "test:minified": "electron-mocha --renderer --preload test/browser-shim.js --preload henderson.min.js --reporter spec ./test"
  },
  "repository": {
    "user": "orbitbot",
    "repo": "henderson",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/orbitbot/henderson/tarball/master",
    "clone_url": "https://github.com/orbitbot/henderson",
    "https_url": "https://github.com/orbitbot/henderson",
    "travis_url": "https://travis-ci.org/orbitbot/henderson",
    "zip_url": "https://github.com/orbitbot/henderson/archive/master.zip",
    "api_url": "https://api.github.com/repos/orbitbot/henderson"
  },
  "files": [
    "henderson.js",
    "henderson.min.js"
  ],
  "keywords": [
    "statemachine",
    "fsm",
    "state",
    "event",
    "promise",
    "promises"
  ],
  "author": {
    "name": "Patrik Johnson",
    "email": "patrik@zebros.fi"
  },
  "license": "ISC",
  "homepage": "https://github.com/orbitbot/henderson#readme",
  "devDependencies": {
    "chai": "3.5.0",
    "electron-mocha": "2.0.0",
    "onchange": "2.4.0",
    "sinon": "1.17.4",
    "uglify-js": "2.6.2"
  },
  "gitHead": "ec7e812eb6e60468d942b782b35209415a05fa20",
  "_npmVersion": "2.15.1",
  "_nodeVersion": "4.4.4",
  "dist": {
    "shasum": "1bd3f6e5f5517d6102c663c6e62e13a71ceb00c1",
    "tarball": "http://registry.npmjs.org/henderson/-/henderson-1.0.1.tgz"
  },
  "versions": [
    {
      "number": "0.9.0",
      "date": "2016-05-04T19:34:31.909Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-05-19T21:42:57.560Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-07-10T14:16:02.296Z"
    }
  ],
  "created": "2016-05-04T19:34:31.909Z",
  "modified": "2016-07-10T14:16:02.296Z",
  "lastPublisher": {
    "name": "orbitbot",
    "email": "patrik@zebros.fi"
  },
  "owners": [
    {
      "name": "orbitbot",
      "email": "patrik@zebros.fi"
    }
  ],
  "readme": "# henderson\n> A tiny event emitter-based finite state machine, with promises\n\n[![Build Status](https://travis-ci.org/orbitbot/henderson.svg?branch=master)](https://travis-ci.org/orbitbot/henderson)\n![Uncompressed size](https://badge-size.herokuapp.com/orbitbot/henderson/master/henderson.js?color=red)\n![minfied size](https://badge-size.herokuapp.com/orbitbot/henderson/master/henderson.min.js?color=yellow&label=minfied size)\n![minfied+gzipped size](https://badge-size.herokuapp.com/orbitbot/henderson/master/henderson.min.js?label=gzipped.min&compression=gzip)\n\nA tiny finite state machine library with asynchronous state transfers, based on an event-emitter. `henderson` is the promise-based version of [`pastafarian`](https://github.com/orbitbot/pastafarian).\n\n###### Features\n- tiny finite state machine library, only slightly bigger than its synchronous cousin [`pastafarian`](https://github.com/orbitbot/pastafarian)\n- simple but powerful API\n- works without dependencies on modern browsers (see requirements)\n- well below 100 LOC, small enough to read and understand immediately\n\n<br>\n\n### Example\n\n```js\nvar state = new StateMachine({\n  initial : 'start',\n  states  : {\n    start : ['end', 'start'],\n    end   : ['start']\n  }\n});\n\nstate.on('*', function(prev, next) {\n  console.log('State changed from ' + prev + ' to ' + next);\n});\n\nstate\n  .on('before:start', function(prev, param) {\n    console.log('Reset with param === \"foo\": ' + param === 'foo');\n  })\n  .on('after:start', function(next) {\n    console.log('Going to ' + next);\n  })\n  .on('end', function(prev, param) {\n    return new Promise(function(resolve) {\n      setTimeout(function() {\n        console.log('Now at end, 2 + 2 = ' + param);\n        resolve();\n      }, 1500);\n    });\n  });\n\nstate.go('end', 2 + 2)\n  .then(function() {\n    console.log('Transition finished!');\n  });\n\nstate.reset = state.go.bind(state, 'start');\nstate.reset('foo');\n```\n\n### Installation\n\nRight click to save or use the URLs in your script tags\n\n- [`henderson.js`](https://cdn.rawgit.com/orbitbot/henderson/master/henderson.js)\n- [`henderson.min.js`](https://cdn.rawgit.com/orbitbot/henderson/master/henderson.min.js)\n\nor use\n\n```sh\n$ npm install henderson\n$ bower install henderson\n```\n\nIf you're using `henderson` in a browser environment, the constructor is attached to the `StateMachine` global.\n\n<br>\n\n### Usage\n\n`henderson` is very similar in usage to [`pastafarian`](https://github.com/orbitbot/pastafarian) and most of the documentation in that project can be directly applied to `henderson` as well.\n\n##### Differences to `pastafarian`\n\nGiven `var fsm = new StateMachine(config)`,\n\n| feature           | `pastafarian` | `henderson` | comment                                                               |\n|:------------------|:--------------|:------------|:----------------------------------------------------------------------|\n| config.initial    | Y             | Y           | identical                                                             |\n| config.states     | Y             | Y           | identical                                                             |\n| config.error      | Y             | N           | use the error callback on the promise returned from `fsm.go`          |\n| `fsm.bind`        | Y             | Y           | identical                                                             |\n| `fsm.on`          | Y             | Y           | identical                                                             |\n| `fsm.unbind`      | Y             | Y           | identical                                                             |\n| `fsm.go`          | Y             | Y           | returns a promise, which is resolved when all callbacks have finished |\n| `fsm.current`     | Y             | Y           | identical                                                             |\n| `fsm.transitions` | Y             | Y           | identical                                                             |\n| `fsm.error`       | Y             | N           | use the error callback on the promise returned from `fsm.go`          |\n\n\n- no error handling through try/catch blocks or with a defined error handler function, use `.catch` on individual `.go` calls instead\n\n**`fsm.go(state /* ...args */) â‡’ Promise`**\n\nTransitions the state machine to `state` and causes any registered callbacks for this transition (including `before:`, `after:` and wildcard callbacks) to be triggered. All parameters after `state` are passed on to each callback along with the states involved in the transition, see the [Event callback API](github.com/orbitbot/pastafarian/blob/master/README.md#event-callback-api) for the exact signatures.\n\n`fsm.go` returns a promise that will be resolved when all the callbacks registered for the transition have finished. If you want to wait for the completion of some functionality in a callback before the next is processed, return a promise in the callback function.\n\n<br>\n\n##### Error handling\n\n`fsm.go` will return a Promise, and the transition promise will reject if any of the transition callbacks either return a rejected promise or an uncaught exception is thrown. In the case that an illegal transition is attempted, the `.catch` error callback will be called with an *IllegalTransitionException*:\n\n###### IllegalTransitionException\n\n`henderson` defines a custom exception which is generated when the transitions array of the current state doesn't contain the state (next) passed to `fsm.go`:\n\n- name : `IllegalTransitionException`\n- message : `Transition from <current> to <next> is not allowed`\n- prev : `<current>`\n- attempt : `<next>`\n\nThe exception is generated inside the library, but in modern environments it should contain a stacktrace that allows you to track which line caused the exception.\n\n<br>\n\n### Requirements\n\n`henderson` internally uses promises and expects an implementation to be available with `new Promise(function(resolve, reject) { ... })`. Otherwise, an environment providing ES5-support is enough (Array.indexOf and Array.reduce are used internally).\n\n<br>\n\n### Colophon\n\nThe event emitter pattern that `henderson` uses at its core is based on [microevent.js](https://github.com/jeromeetienne/microevent.js).\n\n<br>\n\n### License\n\n`henderson` is ISC licensed.\n\n<br>\n\n### Development\n\nA basic development workflow is defined using npm run scripts. Get started with\n\n```sh\n$ git clone https://github.com/orbitbot/henderson\n$ npm install\n$ npm run develop\n```\n\nBugfixes and improvements are welcome, however, please open an Issue to discuss any larger changes beforehand, and consider if functionality can be implemented with a simple monkey-patching extension script. Useful extensions are more than welcome!\n"
}