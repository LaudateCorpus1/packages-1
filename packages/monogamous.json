{
  "name": "monogamous",
  "version": "1.0.3",
  "description": "boot single-instance application",
  "main": "./dist/monogamous.js",
  "scripts": {
    "clean": "rimraf dist/* && mkdir dist || true",
    "test": "babel-tape-runner ./tests/**/*-test.js | faucet",
    "build": "npm run clean && babel src --out-dir dist",
    "prepublish": "npm run build && npm test"
  },
  "repository": {
    "user": "mnichols",
    "repo": "monogamous",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/mnichols/monogamous/tarball/master",
    "clone_url": "https://github.com/mnichols/monogamous",
    "https_url": "https://github.com/mnichols/monogamous",
    "travis_url": "https://travis-ci.org/mnichols/monogamous",
    "zip_url": "https://github.com/mnichols/monogamous/archive/master.zip",
    "api_url": "https://api.github.com/repos/mnichols/monogamous"
  },
  "keywords": [
    "single",
    "instance",
    "electron",
    "flatulence"
  ],
  "author": {
    "name": "Mike Nichols",
    "email": "nichols.mike.s@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/mnichols/monogamous",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-tape-runner": "^1.2.0",
    "faucet": "0.0.1",
    "rimraf": "^2.4.3",
    "tape": "^4.2.0"
  },
  "dependencies": {
    "minimist": "^1.2.0",
    "stampit": "^2.1.0"
  },
  "gitHead": "a4591b3af049d64e78eabd323101b0d386e0a288",
  "_npmVersion": "2.11.3",
  "_nodeVersion": "0.12.7",
  "dist": {
    "shasum": "eee6b48e7965faa3abe07e2348ccaa0251331a8f",
    "tarball": "http://registry.npmjs.org/monogamous/-/monogamous-1.0.3.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "1.0.0",
      "date": "2015-09-06T06:53:00.725Z"
    },
    {
      "number": "1.0.1",
      "date": "2015-09-06T20:55:52.569Z"
    },
    {
      "number": "1.0.2",
      "date": "2015-09-06T22:05:39.041Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-09-06T22:15:56.557Z"
    }
  ],
  "created": "2015-09-06T06:53:00.725Z",
  "modified": "2015-09-06T22:15:56.557Z",
  "lastPublisher": {
    "name": "mnichols",
    "email": "nichols.mike.s@gmail.com"
  },
  "owners": [
    {
      "name": "mnichols",
      "email": "nichols.mike.s@gmail.com"
    }
  ],
  "readme": "# Monogamous\n\n> Only one instance of an app at a time.\n\n[![Build Status: Linux](https://travis-ci.org/mnichols/monogamous.svg?branch=master)](https://travis-ci.org/mnichols/monogamous)\n[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/14ud4t906nm8earn/branch/master?svg=true)](https://ci.appveyor.com/project/MikeNichols/monogamous/branch/master)\n\n## Install\n\n`npm install monogamous`\n\n## Usage (using Electron as an example)\n\n#### Decorating main process entrypoint\n```js\n\n//index.js\nimport monogamous from 'monogamous'\nimport main from './main' //main process app stuff\nimport app from 'app'\n\nbooter = monogamous({ sock: 'myapp'}, { other: 'args'})\n/**\n* this presumes your `app.on('ready')` is inside your boot method\n*/\nbooter.on('boot', main.boot.bind(main))\nbooter.on('reboot', main.reboot.bind(main))\nbooter.on('error', function(err) { console.error('ops', err) })\n\nbooter.boot({ more: 'args'})\n```\n\n#### Inside main process entrypoint\n```js\n\n//index.js\nimport monogamous from 'monogamous'\nimport main from './main' //main process app stuff\nimport app from 'app'\n\nbooter = monogamous({ sock: 'myapp'}, { other: 'args'})\n\nbooter.on('boot', main.boot.bind(main))\nbooter.on('reboot', main.reboot.bind(main))\nbooter.on('error', function(err) { console.error('ops', err) })\n\n//electron's ready event gets it going\napp.on('ready', booter.boot.bind(booter))\n```\n\n## Events\n\n- `boot`   : raised if an instance is not running. Your app may start up pristine here\n- `reboot` : another instance was attempted.\n- `end`    : a call to `end()` shutdown the instance server\n\n`boot` and `reboot` events receive an merged arguments object merging the following inputs,\nin order of precedence:\n\n- args passed to monogamous creation; eg `monogamous({ sock: 'foo'}, {these:'arepassedthru'})`\n- process argv , hashed (using [minimist](https://www.npmjs.com/package/minimist))\n- args passed to `boot`; eg `mono.boot({ these:'arealsopassedthru'})` \n\n\n## API\n\n**Monogamous Factory**\n\n```js\n//only the 'sock' property is required to name your socket\nlet booter = monogamous({ sock: 'keepitsimple' }, [other args...])\n\n```\n\n**Instance Methods**\n\n- `boot([args])` : {Function} tries to connect to `sock`;failure to connect means an instance is running\n- `end()`        : {Function} closes socket server\n\n"
}