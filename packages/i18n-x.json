{
  "name": "i18n-x",
  "version": "0.1.1",
  "description": "i18n middleware for Express focused on simplicity and modularity (ability to change localization dir dinamically)",
  "author": {
    "name": "Alexander Zubakov",
    "email": "developer@xinit.ru"
  },
  "license": "MIT",
  "keywords": [
    "i18n",
    "internationalization",
    "localization",
    "express",
    "express.js",
    "expressjs"
  ],
  "main": "./lib/i18n.js",
  "repository": {
    "user": "kolonist",
    "repo": "node-i18n-x",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/kolonist/node-i18n-x/tarball/master",
    "clone_url": "https://github.com/kolonist/node-i18n-x",
    "https_url": "https://github.com/kolonist/node-i18n-x",
    "travis_url": "https://travis-ci.org/kolonist/node-i18n-x",
    "zip_url": "https://github.com/kolonist/node-i18n-x/archive/master.zip",
    "api_url": "https://api.github.com/repos/kolonist/node-i18n-x"
  },
  "scripts": {
    "test": "NODE_ENV=development node test/index.js"
  },
  "dependencies": {
    "accept-language-parser": "*",
    "sprintf": "*",
    "mkdirp": "*",
    "flat": "*"
  },
  "devDependencies": {
    "express": "*",
    "cookie-parser": "*",
    "pug": "2.0.0-alpha6"
  },
  "gitHead": "07c3777c140f075fa7b0e6d7d392a745e71bf695",
  "homepage": "https://github.com/kolonist/node-i18n-x#readme",
  "_npmVersion": "3.10.6",
  "_nodeVersion": "6.5.0",
  "dist": {
    "shasum": "63940f3c3b477aee97359b39b25a9a457240debc",
    "tarball": "http://registry.npmjs.org/i18n-x/-/i18n-x-0.1.1.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2016-08-05T21:58:48.092Z"
    },
    {
      "number": "0.0.2",
      "date": "2016-08-20T12:35:16.034Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-08-21T20:54:15.929Z"
    },
    {
      "number": "0.1.1",
      "date": "2016-09-03T16:00:39.308Z"
    }
  ],
  "created": "2016-08-05T21:58:48.092Z",
  "modified": "2016-09-03T16:00:39.308Z",
  "lastPublisher": {
    "name": "rukolonist",
    "email": "developer@xinit.ru"
  },
  "owners": [
    {
      "name": "rukolonist",
      "email": "developer@xinit.ru"
    }
  ],
  "readme": "# i18n-x\ni18n middleware for Express, inspired by\n[i18n-node](https://github.com/mashpie/i18n-node) and\n[i18n-node-2](https://github.com/jeresig/i18n-node-2) libraries.\n\nIn opposite to libraries mentioned above this one cannot be used separately but\nonly as Express middleware.\n\nThis library is minimalistic and easy to use alternative to libraries mentioned\nabove with ability to dinamically change directory with localization files\n(e.g. if you have several independant modules and each has own templates and own\nlocale files).\n\n# Installation\n```bash\nnpm i i18n-x --save\n```\n\n# Usage\n## Main application:\n```javascript\n'use strict'\n\nconst path         = require('path');\nconst express      = require('express');\nconst cookieParser = require('cookie-parser');\n\n// this library\nconst i18n = require('i18n-x');\n\n// create Express application\nconst app = express();\napp.use(cookieParser());\n\n// enable i18n\napp.use(i18n({\n      // array of locales to use in application\n      locales: ['en', 'ru']\n}));\n\n// use Pug (formerly Jade)\napp.set('view engine', 'pug');\n\n// handle user request\napp.get('/', (req, res) => {\n    // template path\n    const template = path.resolve(__dirname, 'template', 'template.pug');\n\n    // current locale\n    const options = { locale: req.i18n.getLocale() };\n    res.render(template, options);\n});\n\n// run Express application\napp.listen(3000, () => {\n    console.log('Test app listening on port 3000!');\n});\n```\n\n## `${__dirname}`/template/template.pug:\n```jade\ndoctype html\nhtml(lang= __('lang'))\n    head\n        title= __('title')\n\n    body\n        h1= __('node-i18n-x test page')\n        h2 #{__('current locale:')} #{locale}\n\n        h2= __('try these links:')\n        ol\n            li\n                a(href=\"/\") #{__('default lang')}\n            li\n                a(href=\"/?lang=en\") #{__('manually set default lang')}\n            li\n                a(href=\"/?lang=ru\") #{__('russian lang')}\n```\n\n`__()` function will be exported to templates through `res.locals.__()`.<br>\nIf you need to use `__()` in your program directly, you should use\n`req.i18n.__()`.\n\n## locales/en.json:\n```json\n{\n    \"lang\": \"en\",\n    \"title\": \"Page title\",\n    \"node-i18n-x test page\": \"Test page of node-i18n-x\",\n    \"try these links:\": \"Try these links:\",\n    \"default lang\": \"Default language\",\n    \"manually set default lang\": \"Manually set default language\",\n    \"russian lang\": \"Russian localization\",\n}\n\n```\n\nYou need file with the same structure named `ru.json` to contain translation for\nkey phrases from template. If there is no such file then it will be created\nautomatically with all keys you used in templates or in program itself using\n`__()` function.\n\n`locales` in current application is default directory to store localization JSON\nfiles. You can change it per application in `i18n({baseDir, directory})`\nfunction  or per request using `req.i18n.setBaseDir()` and\n`req.i18n.setDirectory()`.\n\nPath to localization JSON files defined using `baseDir` and `directory` in the\nfollowing way:<br>\n`baseDir + directory + '/*.json'`\n\nAll localization files cached by library when they are first used so you don't\nneed to worry about file system performance.\n\n# API\n## `i18n(options)`\nThis is the only function exported by `i18n-x`. Used to initialize Express\nmiddleware.\n\n### Parameters\n#### `options`\nKey-value object with the following optional keys:\n```javascript\n{\n      locales       : ['en']\n    , defaultLocale : 'en'\n    , jointDir      : 'locales'\n    , baseDir       : '.'\n    , directory     : 'locales'\n    , queryParamName: 'lang'\n    , cookieName    : 'lang'\n    , sessionVarName: 'lang'\n    , envVarName    : 'LANG'\n    , json_space    : 4\n    , order: [\n          'query'\n        , 'session'\n        , 'cookie'\n        , 'subdomain'\n        , 'headers'\n        , 'environment'\n    ]\n}\n```\n\n##### `locales`\n`array` containing `strings` with locales your application supports.<br>\n**Default**: `['en']`\n\nThe only parameter you really need to start wotking with the library. Provided\nvalues can be used as values of corresponding cookies, query params, subdomains,\netc. You also need localization JSON files with names from this array and\n`.json` extention.\n\n##### `defaultLocale`\n`string` containing locale to use when other locale is not provided to your\napplication or can't be defined for some reason.<br>\n**Default**: `'en'`\n\n##### `jointDir`\n`string` containing directory with localization files common for all\napplication.<br>\n**Default**: `'locales'`\n\nThis directory will be read and cached at the start of the application when\nlibrary initialized and it cannot be changed later. Use it to localize common\nparts of application, e.g. main menu or footer.\n\nIf you use the same localization string in this common file and in unit\nspecific file defined by `baseDir` and `directory` then value from specific\nfile will be used.\n\nIf this directory or file for some language not exists then it will be ignored.\n\n##### `baseDir`\n`string` containing base directory for constructing localization file path<br>\n**Default**: `'.'`\n\nPath to localization JSON files defined using `options.baseDir` and `options.directory` in the following way:\n```javascript\npath = require('path');\npath.join(options.baseDir, options.directory, `${locale}.json`\n```\n\nwhere `locale` is one of `options.locales`.<br>\nIf directory or filename not exists then it will be created by this library.\n\n##### `directory`\n`string` containing directory for constructing localization file path<br>\n**Default**: `'locales'`\n\nSee `baseDir` description above to know how Path to localization files\ndefined.\n\n##### `queryParamName`\n`string` containing query string parameter (e.g. `?lang=ru`) to define\nlocalization<br>\n**Default**: `'lang'`\n\nThis parameter will be automatically used by library to define current locale.\n\n##### `cookieName`\n`string` containing name of cookie to define localization<br>\n**Default**: `'lang'`\n\nThis parameter will be automatically used by library to define current locale.\nNote that you need to load special Express middleware to work with cookies\nbefore using this library.\n\n##### `sessionVarName`\n`string` containing name of session variable to define localization<br>\n**Default**: `'lang'`\n\nThis parameter will be automatically used by library to define current locale.\nYou probably need Express middleware to work with sessions to be loaded before\nthis library.\n\n##### `envVarName`\n`string` containing name of environment variable to define localization<br>\n**Default**: `'LANG'`\n\nThis parameter will be automatically used by library to define current locale.\n\n##### `json_space`\n`[integer, string]` contain third parameter of `JSON.stringify()` function which\nused to store localization files<br>\n**Default**: `4`\n\n\n##### `order`\n`array` containing `strings` to define order of checks used to define current\nlocale<br>\n**Default**:\n```javascript\n[\n      'query'       // use GET query string to define locale\n    , 'session'     // use session\n    , 'cookie'      // use cookie\n    , 'subdomain'   // use domain with biggest level, i.e. 'ru' in ru.zerofq.com\n    , 'headers'     // use Accept-Language HTTP request header\n    , 'environment' // use environment variable (i.e. for electron apps)\n]\n```\n\nYou can remove any of these params (or even all of them to set locale manually\nwith `req.i18n.setLocale()` function) or place them in order you wish.\n\nLocale will be set by first acceptable method in array. That means that for\ndefault value of `order` locale will be set by query if it exists and correct.\nIf query parameter from `options.queryParamName` does not exists in query then\nlocale will be set from session. If there is no session or there are\nno `options.sessionVarName` in session then cookie will be used and so on. If\nlocale could not be set by any of mentioned methods then default locale\n(`options.defaultLocale`) will be used.\n\n### Example\n```javascript\nconst i18n = require('i18n-x');\n\napp.use(i18n({\n      locales      : ['en', 'ru']\n    , defaultLocale: 'ru'\n    , baseDir      : path.join(__dirname, 'index')\n    , order        : ['query', 'session']\n}));\n```\n\nAfter applying middleware you can use `i18n` object in Express request object in\nall other middlewares:\n\n```javascript\napp.get('/', (req, res) => {\n    const options = { locale: req.i18n.getLocale() };\n});\n```\n\nAlso you can use `__()` function in your templates:\n\n```jade\ndoctype html\nhtml(lang= __('lang'))\n    head\n        title= __('title')\n    body\n        h1= __('node-i18n-x test page')\n```\n\n## `req.i18n`\n### `req.i18n.getLocales()`\nReturn array of locales used by application. It is value defined\nin `options.locales`.\n\n**Return** *`array`* Locales.\n\n### `req.i18n.getLocale()`\nReturn current locale automatically defined by library using methods mentioned\nin `options.order`. It always one of `options.locales` values.\n\n**Return** *`string`* Current locale.\n\n### `req.i18n.setLocale(locale)`\nAllows you to set locale manually.\n\n**Param** *`string`* `locale` Locale you want to use in current request. Should\nbe one of `options.locales`.\n\n**Return** *`boolean`* If locale was successfully set by this function call then\nreturn value is `true`. If function fails for some reason (i.e. you used string\nnod defined in `options.locales`) then it returns `false` and does not change\nlocale previously defined by library.\n\n### `req.i18n.setBaseDir(dirname)`\nSet base directory for localization files. This function affects only on current\nrequest and doesn't change options set in `i18n()`.\n\nIt's recommended that you will change only `baseDir` in your code and don't\ntouch `directory` option. Using this function you can organise your project this\nmanner:\n```\n+ root app dir/\n    |- app.js\n    +- routes/\n        +- main/\n        |   |- route.js\n        |   |- template.pug\n        |   +- locales/\n        |       |- en.json\n        |       |- ru.json\n        |\n        +- unit1/\n        |   |- route.js\n        |   |- template.pug\n        |   +- locales/\n        |       |- en.json\n        |       |- ru.json\n        |\n        +- unit2/\n        |   |- route.js\n        |   |- template.pug\n        |   +- locales/\n        |       |- en.json\n        |       |- ru.json\n        ...\n```\n\nIn this example you should write your routes something like this:\n\n```javascript\napp.get('/1', (req, res) => {\n    // base directory is directory where this route allocated\n    const baseDir = __dirname;\n\n    const template = path.join(baseDir, 'template.pug');\n\n    // now localisation files will be in `${__dirname}/locales/`\n    req.i18n.setBaseDir(baseDir);\n\n    res.render(template, options);\n});\n```\n\n**Param** *`string`* `dirname` Directory path.\n\n### `req.i18n.setDirectory(dirname)`\nSet trailing part of path where localization JSON files allocated. This function\naffects only on current request and doesn't change options set in `i18n()`.\n\nDefault value is `locales` and you probably don't need to change it using this\nfunction, but you can change `baseDir` instead.\n\nIf you want to change this directory to whole application you can do it\nin `i18n(options)` while middleware initialization.\n\n**Param** *`string`* `dirname` Directory path.\n\n### `req.i18n.__(str, params = null)`\nTranslate string using `str` as key in localization file defined by current\nlocale.\n\n**Param** *`string`* `str` String to translate.<br>\n**Param** *`array`* `params` Array of arguments to use in `vsprintf()` function\nfrom [sprintf](https://github.com/alexei/sprintf.js) library or `null` if there\nis no need to additionally format string (default).\n"
}