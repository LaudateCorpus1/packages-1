{
  "name": "electron-updater-sqlseer",
  "version": "0.2.1",
  "description": "Cross platform auto-updater for electron applications",
  "main": "index.js",
  "author": {
    "name": "Evolve LLC"
  },
  "license": "MIT",
  "keywords": [
    "electron"
  ],
  "homepage": "https://github.com/evolvelabs/electron-updater",
  "repository": {
    "user": "evolvelabs",
    "repo": "electron-updater",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/evolvelabs/electron-updater/tarball/master",
    "clone_url": "https://github.com/evolvelabs/electron-updater",
    "https_url": "https://github.com/evolvelabs/electron-updater",
    "travis_url": "https://travis-ci.org/evolvelabs/electron-updater",
    "zip_url": "https://github.com/evolvelabs/electron-updater/archive/master.zip",
    "api_url": "https://api.github.com/repos/evolvelabs/electron-updater"
  },
  "scripts": {
    "test": "mocha"
  },
  "bin": {
    "electron-updater": "./bin/cli",
    "elup": "./bin/cli"
  },
  "dependencies": {
    "appdirectory": "^0.1.0",
    "async": "^0.9.0",
    "commander": "^2.8.1",
    "glob": "^5.0.14",
    "minimist": "^1.1.1",
    "request": "^2.63.0",
    "semver": "^4.3.3",
    "spin": "0.0.1",
    "tar-stream": "^1.1.4",
    "unzip": "^0.1.11"
  },
  "devDependencies": {
    "chai": "^2.3.0",
    "mocha": "^2.2.4",
    "proxyquire": "^1.4.0",
    "sinon": "^1.14.1"
  },
  "gitHead": "9872e942bd03b8a532ed94747a8add95bf1ce92f",
  "bundleDependencies": [
    "appdirectory",
    "async",
    "glob",
    "minimist",
    "request",
    "semver",
    "spin",
    "tar-stream",
    "unzip"
  ],
  "_npmVersion": "2.14.2",
  "_nodeVersion": "4.0.0",
  "dist": {
    "shasum": "d490cf5e36715c7725e0099d540f61833c93bee5",
    "tarball": "http://registry.npmjs.org/electron-updater-sqlseer/-/electron-updater-sqlseer-0.2.1.tgz"
  },
  "versions": [
    {
      "number": "0.1.3",
      "date": "2015-09-18T18:56:56.173Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-09-24T04:19:17.578Z"
    },
    {
      "number": "0.2.1",
      "date": "2015-09-24T05:15:17.285Z"
    }
  ],
  "created": "2015-09-18T18:56:56.173Z",
  "modified": "2015-09-24T05:15:17.285Z",
  "lastPublisher": {
    "name": "snowcxt",
    "email": "snowcxt@gmail.com"
  },
  "owners": [
    {
      "name": "snowcxt",
      "email": "snowcxt@gmail.com"
    }
  ],
  "readme": "# electron-updater \r\nCross platform auto-updater for electron apps\r\n\r\n[![Build Status](https://travis-ci.org/EvolveLabs/electron-updater.svg?branch=master)](https://travis-ci.org/EvolveLabs/electron-updater)\r\n\r\n# Install\r\nThere are three main packages that make up the `electron-updater`. \r\n\r\n    $ npm install electron-updater --save\r\n    $ npm install electron-plugins --save\r\n    $ npm install electron-updater-tools -g\r\n    \r\nThe [electron-updater](htps://npmjs.org/package/electron-updater) package itself runs in your app's main process and does the actual updating. The [electron-plugins](https://npmjs.org/package/electron-plugins) project specifically loads the plugins downloaded by the updater in the render process. The third project, [electron-updater-tools](https://npmjs.org/package/electron-updater-tools) contains various scripts useful for building native electron addons as well as linking plugins during development time.\r\n    \r\n# Usage\r\nIntegrate the electron-updater into your electron main process. Below is a simplified example of the [Electron Quick Start](http://electron.atom.io/docs/latest/tutorial/quick-start/#write-your-first-electron-app) code with the `electron-updater` mixed in.\r\n## Example main.js\r\n```JavaScript\r\nvar app = require('app'),\r\n    BrowserWindow = require('browser-window'),\r\n    updater = require('electron-updater')\r\n\r\nvar mainWindow = null\r\n\r\napp.on('ready', function() {\r\n    updater.on('ready', function () {\r\n        mainWindow = new BrowserWindow({width: 800, height: 600})\r\n        mainWindow.loadUrl('file://' + __dirname + '/index.html')\r\n        mainWindow.openDevTools({detach:true})        \r\n        mainWindow.on('closed', function() {\r\n            mainWindow = null;\r\n        })\r\n    })\r\n    updater.on('updateRequired', function () {        \r\n        app.quit();\r\n    })\r\n    updater.on('updateAvailable', function () {\r\n        mainWindow.webContents.send('update-available');\r\n    })\r\n    updater.start()\r\n})\r\n```\r\n\r\n## Example index.js (running in render process)\r\n```JavaScript\r\nvar plugins = require('electron-plugins'),\r\n\tipc = require('ipc')\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n\tvar context = { document: document }\r\n\tplugins.load(context, function (err, loaded) {\r\n\t\tif(err) return console.error(err)\r\n\t\tconsole.log('Plugins loaded successfully.')\r\n\t})\r\n})\r\n\r\nipc.on('update-available', function () {\r\n\tconsole.log('there is an update available for download')\r\n})\r\n```\r\n\r\n# Publishing Updates\r\nThere are two kinds of updates you can publish:\r\n * The Application itself\r\n * Plugins\r\n\r\nBoth kinds of updatable packages are distributed through [npm](http://npmjs.org). This means that publishing updates to your application and plugins are essentially done like this:\r\n```\r\n$ npm pack\r\n$ npm pub\r\n```\r\nThe application will periodically check npm for updates to any packages and update them when it can.\r\n\r\n## Hosting your own npm server\r\nIf you are developing a commercial application, or just want to control distribution yourself, you should host your own packages on your own npm server.\r\n\r\nAdd a path to your registry in the applications `package.json`:\r\n```\r\n  \"registry\": \"http://npm.mycompany.com:4873\",\r\n```\r\nTo tell npm to use this registry also, create a [.npmrc file](https://docs.npmjs.com/files/npmrc) in your application root directory containing:\r\n```\r\nregistry=http://npm.mycompany.com:4873\r\n```\r\n\r\nFortunately, hosting your own npm server is very easy to do with [sinopia](http://npmjs.org/packages/sinopia).\r\n```\r\n$ npm install sinopia -g\r\n$ sinopia\r\n```\r\nTo run sinopia as a service, you can use [forever](http://npmjs.org/packages/forever).\r\n```\r\n$ npm install forever -g\r\n$ forever start sinopia\r\n```\r\n\r\n## Plugins\r\nPlugins are different than normal dependencies. To establish a link to a plugin, add a `plugins` entry into your applications `package.json`:\r\n```\r\n  \"dependencies\": {\r\n    # ...\r\n  },\r\n  \"plugins\": {\r\n    \"electron-updater-example-plugin\": \"~0.1.0\"\r\n  },\r\n```\r\nWhen your application runs it will download and install these plugins into your users [AppDirectory.userData()](https://www.npmjs.com/package/appdirectory) folder. The main benefits of plugins is:\r\n * Gauranteed user directory, does not require elevation to update.\r\n * Supports side-by-side installation, so they can be updated while the app is running.\r\n * Application can be refreshed instead of restarted to apply updates.\r\n * Load arbitrary plugins using [electron-plugins](https://npmjs.org/packages/electron-plugins), instead of having fixed dependencies only.\r\n\r\nIn the `userData` folder there is also a `.current` file created, which is used to maintain the list of currently installed plugins. You can add items to that file to install non-default plugins.\r\n\r\n# Distributing binaries\r\nTODO...\r\n\r\n### Related\r\nSee the [`electron-builder`](https://www.npmjs.com/package/electron-builder) project for creating installers for\r\nvarious platforms.\r\n"
}