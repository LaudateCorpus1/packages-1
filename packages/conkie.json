{
  "name": "conkie",
  "version": "1.1.6",
  "description": "JavaScript desktop widgets",
  "main": "app.js",
  "bin": {
    "conkie": "./start.js"
  },
  "keywords": [
    "desktop",
    "widgets",
    "conky",
    "stats"
  ],
  "repository": {
    "user": "hash-bang",
    "repo": "conkie",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/hash-bang/conkie/tarball/master",
    "clone_url": "https://github.com/hash-bang/conkie",
    "https_url": "https://github.com/hash-bang/conkie",
    "travis_url": "https://travis-ci.org/hash-bang/conkie",
    "zip_url": "https://github.com/hash-bang/conkie/archive/master.zip",
    "api_url": "https://api.github.com/repos/hash-bang/conkie"
  },
  "author": {
    "name": "Matt Carter",
    "email": "m@ttcarter.com"
  },
  "license": "MIT",
  "scripts": {
    "start": "electron --enable-transparent-visuals --disable-gpu app.js",
    "test": "mocha"
  },
  "dependencies": {
    "async-chainable": "^1.8.1",
    "async-chainable-exec": "^1.3.0",
    "box-sizing": "^1.0.1",
    "colors": "^1.1.2",
    "commander": "^2.9.0",
    "conkie-stats": "^1.3.10",
    "ejs": "^2.4.2",
    "electron-prebuilt": "^1.2.5",
    "lodash": "^4.13.1",
    "module-finder": "git+https://github.com/hash-bang/module-finder.git",
    "temp": "^0.8.3"
  },
  "gitHead": "81b10324a10453cd43f67e026bf1dd0384c39246",
  "homepage": "https://github.com/hash-bang/conkie#readme",
  "_npmVersion": "3.8.7",
  "_nodeVersion": "4.3.0",
  "dist": {
    "shasum": "49e74ffb9a9b0f1b747bcd566e36db04e5f4be9f",
    "tarball": "http://registry.npmjs.org/conkie/-/conkie-1.1.6.tgz"
  },
  "stars": 1,
  "versions": [
    {
      "number": "0.0.1",
      "date": "2015-12-31T02:40:11.201Z"
    },
    {
      "number": "0.0.3",
      "date": "2016-01-02T05:56:08.117Z"
    },
    {
      "number": "0.0.4",
      "date": "2016-01-02T08:28:44.301Z"
    },
    {
      "number": "0.0.5",
      "date": "2016-01-02T08:33:19.993Z"
    },
    {
      "number": "0.0.6",
      "date": "2016-01-09T02:11:42.185Z"
    },
    {
      "number": "0.0.7",
      "date": "2016-01-09T02:19:00.773Z"
    },
    {
      "number": "0.0.8",
      "date": "2016-01-09T04:11:20.710Z"
    },
    {
      "number": "0.0.9",
      "date": "2016-01-09T04:21:08.902Z"
    },
    {
      "number": "0.0.10",
      "date": "2016-01-09T04:25:15.877Z"
    },
    {
      "number": "0.0.11",
      "date": "2016-01-09T04:28:10.430Z"
    },
    {
      "number": "0.0.12",
      "date": "2016-01-09T19:53:59.294Z"
    },
    {
      "number": "0.0.13",
      "date": "2016-01-09T19:56:51.634Z"
    },
    {
      "number": "0.0.14",
      "date": "2016-01-10T03:27:47.853Z"
    },
    {
      "number": "0.0.15",
      "date": "2016-01-10T04:53:41.922Z"
    },
    {
      "number": "1.0.0",
      "date": "2016-01-11T06:27:58.267Z"
    },
    {
      "number": "1.0.1",
      "date": "2016-01-13T03:21:39.589Z"
    },
    {
      "number": "1.0.2",
      "date": "2016-01-13T05:59:48.499Z"
    },
    {
      "number": "1.0.3",
      "date": "2016-01-14T03:22:43.455Z"
    },
    {
      "number": "1.0.4",
      "date": "2016-01-14T04:28:05.564Z"
    },
    {
      "number": "1.0.5",
      "date": "2016-01-14T23:22:30.711Z"
    },
    {
      "number": "1.1.0",
      "date": "2016-02-12T03:08:25.055Z"
    },
    {
      "number": "1.1.1",
      "date": "2016-02-14T04:02:27.302Z"
    },
    {
      "number": "1.1.2",
      "date": "2016-02-14T04:33:17.379Z"
    },
    {
      "number": "1.1.3",
      "date": "2016-02-14T23:55:13.320Z"
    },
    {
      "number": "1.1.4",
      "date": "2016-02-16T00:00:55.378Z"
    },
    {
      "number": "1.1.5",
      "date": "2016-07-06T01:45:58.787Z"
    },
    {
      "number": "1.1.6",
      "date": "2016-07-11T02:11:51.231Z"
    }
  ],
  "created": "2015-12-31T02:40:11.201Z",
  "modified": "2016-07-11T02:11:51.231Z",
  "lastPublisher": {
    "name": "hash-bang",
    "email": "m@ttcarter.com"
  },
  "owners": [
    {
      "name": "hash-bang",
      "email": "m@ttcarter.com"
    }
  ],
  "readme": "Conkie\n======\nNodeJS + Electron desktop widgets.\n\nThis project is designed to replace the seminal [Conky project](https://github.com/brndnmtthws/conky) by Brenden Matthews with a Browser based desktop widget (Yes this is similar to how Windows '98 worked but less horrifying).\n\nConkie relies on a few things to gather system statistics. The upstream repo [Conkie-Stats](https://github.com/hash-bang/Conkie-Stats) details these. Basic install info is provided below.\n\n![Fullscreen Widget Setup](docs/img/full.jpg)\n\n\n**ARE YOU A DESIGNER?**\n\nPlease get in touch. I could really do with a bit of design help with perfecting this project.\n\nI'm happy to help anyone who has an existing Conky theme that needs to be converted over to Conkie. Please [contact me](mailto:matt@mfdc.biz).\n\n\nFeatures\n--------\n\n* HTML based layout - style your desktop widgets just as you would a web page\n* Theme based customizability - create your own skins or use the provided examples\n* Modular themes - NPM managed themes can import their own dependencies as needed\n* Low power mode - when on battery the refresh rate changes (set with `--refresh` and `--refresh-battery`) so its less of battery hog\n* Modular system statistics - lots of functionality including CPU, Memory, Disks, IO usage, Dropbox and more.\n\n\n\nInstalling\n==========\n\n\t# Install Node + NPM - see https://nodejs.org/en/download\n\n\t# Install all Conkie's external statistics gathering tools\n\tsudo apt-get install bwm-ng lm-sensors iotop wmctrl\n\n\t# Install Conkie itself and a theme\n\tnpm install -g conkie conkie-theme-default\n\n\nRun Conkie as a background process with (this also uses `nice` to make sure Conkie sits in the idle update time of your CPU):\n\n\tnice conkie --background\n\nTo specify a specific theme (instead of the default) either provide the path to the HTML file or the name of the NPM module:\n\n\tconkie --background --theme conkie-theme-foobar\n\nUse `--help` for other command line help.\n\n\nThemes\n=======\nConkie themes are a single HTML file which links to other required assets. You can override the default theme file by specifying `--theme <path to html file|npm module name>`.\n\nTo create a Conkie theme simply design your webpage as you require and make a call to `require('electron').ipcRenderer.on('updateStats', ...)` to gather system statistics. A simple example is provided in the [themes](./themes) folder. You may also be interested in the source of [Conkie-Theme-Default](FIXME) NPM module which is the default shipped Conkie theme.\n\n\n**Tips:**\n\n* To keep NPM happy, all dependencies should be NPM modules themselves. For example if you require Bootstrap use the NPM version of Bootstrap and load via `var bootstrap = require('bootstrap')` somewhere in your themes JavaScript files. Make sure you include this as a dependency in your `package.json` file so NPM pulls in whats needed during the install.\n* A lot of weird kludges and fixes exist to try and load and rewrite your widgets contents inline. See the bottom of this README for the nasty internal details. Should Conkie be screwing up your theme try using lots of verbosity (e.g. `-vvvv`) to see what its doing. If its still acting strange please get in touch.\n* Running Conkie with the `--debug` flag opens the theme in a Electron development console. This is useful to see console output.\n* Running Connie with the `--debug-stats` flag dumps the stats object to the console on each refresh.\n\n\nTheme API Reference\n-------------------\nThe following objects are provided as callbacks within the internal IPC `updateState` listener.\n\nAll system information is provided via the [Conkie-Stats](https://github.com/hash-bang/Conkie-Stats) NPM module. See its documentation for a list of modules and data feeds it supports.\n\n**Simple example**\n\nThe following code within a themes JavaScript will register with the main Conkie process, request `cpu` and `memory` modules be loaded and then listen for data feeds.\n\n\trequire('electron').ipcRenderer\n\n\t\t// Listen to stats updates\n\t\t.on('updateStats', function(e, data) {\n\t\t\t// data now has `system`, `ram`, `net` etc. subkeys\n\t\t\t// Do something with this data\n\t\t})\n\n\t\t// Request statistics feeds\n\t\t.send('statsRegister', ['cpu', 'memory'])\n\n\t\t// Setup any stats options\n\t\t.send('statsSettings', {})\n\n\t\t// Setup the window position\n\t\t.send('setPosition', {left: 10, top: 10, width: 200, height: 100%'})\n\n\n**EVENT: updateStats(event, stats)**\n\nReceive a stats object from the [Conkie-Stats](https://github.com/hash-bang/Conkie-Stats) module. The available data depends on what modules were registered using the `registerStats()` message.\n\n\n**METHOD: setPosition(obj)**\n\nSet the position of the widget on the screen.\n\nThe payload for this message is an object composed of one or more of the following:\n\n| Key             | Type                | Default              | Description                   |\n|-----------------|---------------------|----------------------|-------------------------------|\n| `left`          | Number, String      | 10                   | The left offset of the widget |\n| `top`           | Number, String      | 10                   | The top offset of the widget  |\n| `width`         | Number, String      | \"33%\"                | The width of the widget       |\n| `height`        | Number, String      | \"100%\"               | The height of the widget      |\n\nThese values can be straight Numbers, negative numbers for right / bottom alignment (e.g. `{left: -10}` => align to right edge minus 10 pixels), \"center\", \"middle\" or any other value accepted by the [box-sizing](https://github.com/hash-bang/box-sizing) NPM utility module. See its documentation for the full range of parameters it will accept.\n\n\n\n**METHOD: statsRegister(...mods)**\n\nRequest the registration of the given modules from Conkie-Stats. This message can accept an array of modules or each module as a separate argument.\n\n\n**METHOD: statsSettings(settingsObject)**\n\nSet the Conkie-Stats settings object. This usually tweaks the behaviour of various modules to do things like ignoring specific network adapter or limiting the number of returned processes. See the Conkie-Stats module for valid settings.\n\n\n\nDetailed Theme loading process\n------------------------------\nAt the moment a fair amount of workarounds are in place to fix up various weird Electron issues (such as loading inline CSS).\n\nThe theme file gets read into memory then re-written on the fly to read each external JS / CSS asset and insert it into the file as inline content. In *most* cases this should be sufficient but it is a pretty horrible kludge. This is because Electron apps straddle the boundary between desktop apps and web pages where stuff like loading external CSS is still a bit iffy. Please get in touch with feedback if the solution I've implemented is needlessly insane but I honestly couldn't find a decent method of loading CSS from NPM modules.\n\n\nTODO\n====\n\n* **Mac compatibility** - Not being a Mac user I cant really help here until I manage to track one down. This applies equally to the Conkie-Stats package where we need to gather system stats in a decently cross-platform way.\n* **Windows compatibility** - Like Mac compatibility this should be possible given enough time and inclination. If anyone wishes to volunteer their time I would be grateful.\n"
}