{
  "name": "ionizer",
  "version": "2.0.1",
  "description": "rebuild native node modules against the electron runtime",
  "main": "lib/main.js",
  "scripts": {
    "test": "node test/index.js | faucet",
    "lint": "jshint .",
    "validate": "npm ls",
    "preversion": "git checkout master && git pull && npm ls",
    "publish-patch": "npm run preversion && npm version patch && git push origin master --tags && npm publish --verbose",
    "publish-minor": "npm run preversion && npm version minor && git push origin master --tags && npm publish --verbose",
    "publish-major": "npm run preversion && npm version major && git push origin master --tags && npm publish --verbose"
  },
  "bin": {
    "ionizer": "lib/cli.js"
  },
  "repository": {
    "user": "cdaringe",
    "repo": "ionizer",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/cdaringe/ionizer/tarball/master",
    "clone_url": "https://github.com/cdaringe/ionizer",
    "https_url": "https://github.com/cdaringe/ionizer",
    "travis_url": "https://travis-ci.org/cdaringe/ionizer",
    "zip_url": "https://github.com/cdaringe/ionizer/archive/master.zip",
    "api_url": "https://api.github.com/repos/cdaringe/ionizer"
  },
  "keywords": [
    "electron"
  ],
  "author": {
    "name": "cdaringe"
  },
  "license": "MIT",
  "homepage": "https://github.com/cdaringe/ionizer",
  "dependencies": {
    "bluebirdify": "1.1.0",
    "commander": "2.9.0",
    "lodash": "3.10.1",
    "npm": "2.14.14",
    "rimraf": "2.4.3",
    "squish-squash": "1.0.3",
    "winston": "2.1.1"
  },
  "devDependencies": {
    "tape": "4.2.1",
    "ampersand-app": "1.0.4",
    "electron-prebuilt": "0.35.4",
    "faucet": "0.0.1",
    "http-server": "0.8.5",
    "mock-npm-install": "1.0.4",
    "precommit-hook": "3.0.0"
  },
  "pre-commit": [
    "lint",
    "validate",
    "test"
  ],
  "gitHead": "8c7fc41dc676a0f3c3933e8781b47062cc193121",
  "_npmVersion": "2.14.14",
  "_nodeVersion": "4.2.4",
  "dist": {
    "shasum": "e2bf1001feffbb9700aad42ae874e095d303b6ca",
    "tarball": "http://registry.npmjs.org/ionizer/-/ionizer-2.0.1.tgz"
  },
  "stars": 2,
  "versions": [
    {
      "number": "1.0.1",
      "date": "2015-12-14T20:51:39.016Z"
    },
    {
      "number": "1.0.3",
      "date": "2015-12-15T03:51:15.895Z"
    },
    {
      "number": "1.0.5",
      "date": "2015-12-18T00:32:07.956Z"
    },
    {
      "number": "1.0.6",
      "date": "2015-12-18T00:56:40.842Z"
    },
    {
      "number": "1.0.7",
      "date": "2015-12-18T01:20:55.602Z"
    },
    {
      "number": "1.0.8",
      "date": "2015-12-18T18:02:16.083Z"
    },
    {
      "number": "2.0.0",
      "date": "2015-12-27T23:21:13.849Z"
    },
    {
      "number": "2.0.1",
      "date": "2015-12-31T04:14:37.429Z"
    }
  ],
  "created": "2015-12-14T20:51:39.016Z",
  "modified": "2015-12-31T04:14:37.429Z",
  "lastPublisher": {
    "name": "cdaringe",
    "email": "cdaringe@gmail.com"
  },
  "owners": [
    {
      "name": "cdaringe",
      "email": "cdaringe@gmail.com"
    }
  ],
  "readme": "# ionizer\n\nBuild [electron](atom/electron) compatible modules while working in any version of nodejs.\n\n<img width=\"100px\" height=\"100px\" src=\"img/ionizer_rounded.png\"></img>\n\n[ ![Codeship Status for cdaringe/ionizer](https://codeship.com/projects/f1c1b6b0-7bb1-0133-ed8b-3a9edbaef368/status?branch=master)](https://codeship.com/projects/119677)\n\n## about\nyour system's version of `nodejs` most likely does _not_ match the version\nthat [electron](atom/electron) runs behind the scenes.  this can be problematic. dependencies commonly execute build process\nwhilst installing them.  perhaps you have seen `node-gyp` build [addons](https://nodejs.org/api/addons.html) when installing something via npm?\nFor example, suppose\n\n- you are developing on nodejs `0.12.7`\n- your electron application under the hood runs iojs `2.5.0`\n- you install `npm install --save node-sass`\n- you `require('node-sass')` into you electron application and run it...\n- YOUR APP CRASHES! :(  `node-sass` was built for `0.12.7 (module version 14)`, not for `2.5.0 (module version 44)`\n- you run `ionizer -q`, which rebuilds your dependencies to work with your electron version.\n- reload your app.  all is zen!\n\n## installation\nThis package is hosted on [npm](npm/npm).  See the [ionizer package page](https://www.npmjs.com/package/ionizer).\n\n```sh\nnpm install --save-dev ionizer\n```\n\n## basic usage\ni recommend installing `electron-prebuilt` into your package for no-brainer rebuilds.\n`ionizer` first tests for `electron-prebuilt` in your project and will rebuild with that if present (and if you don't explicitly specify an electron-path). `npm install --save electron-prebuilt`.\n\nwhenever you install a new npm package into your electron project, rerun ionizer:\n\n```json2\n// package.json\n{\n    ...\n    scripts: {\n        \"postinstall\": \"ionizer -q\", // or ...\n        \"postinstall\": \"ionizer -q --limit=leveldown,some-pkg\",\n    }\n}\n```\n\nif you want to fine tune your rebuilds, try a rebuild script!\n\n```json\n// inside your package.json\n...\n  \"scripts\": {\n      \"postinstall\": \"node .ionizer.js\"\n  }\n...\n```\n\n```js\n// .ionizer.js\n// advanced rebuilding (see simpler package.json example above)\nvar fs = require('fs');\nvar path = require('path');\nvar pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\nvar _ = require('lodash');\nvar electronVersion = _.get(pkg, 'dependencies.electron-prebuilt') || _.get(pkg, 'electron-version');\nelectronVersion = electronVersion.match(/\\d+\\.\\d+\\.\\d+$/)[0];\nvar ionizer = require('ionizer');\nionizer.setLogLevel('verbose');\n\n// test if rebuilding necessary\nionizer.shouldRebuild('/Users/username/ ... /Electron'); // electron path, see node_modules/electron-prebuilt/path.txt\n.then(function(rslt) {\n    if (!rslt.shouldRebuild) { process.exit(0); }\n    return ionizer.installNodeHeaders(electronVersion)\n    .then(function initRebuild() {\n        return ionizer.rebuild({\n            electronVersion: electronVersion,\n            modulesDir: './node_modules',\n            quick: true,\n            ignore: ['webpack', 'babel', 'react', 'redux', 'pouchy']\n        });\n    });\n})\n.catch(function(err) {\n    console.error(err.message);\n});\n\n```\n\n## options\nas demonstrated above, this package supports two modes:\n\n1. cli mode\n1. package mode\n\nthe API when consumed as a package does not have a full doc set yet--please see the example above.  the options to `ionizer` are the same to the cli as they are to `ionizer.rebuild` in the library.  those may be found **[here](https://github.com/cdaringe/ionizer/blob/master/lib/cli.js#L21)**.\n\n## note\n\n### beta\nionizer works, but it's in beta.  despite the API not being published formally now,\nit _will_ change in 2.0.0.  expect at least new method names.  the CLI options are not anticipated to change @2.0.0.\n\n### fork'n'h4ck3d\nionizer was initially a fork off of [electron-rebuild](electronjs/electronjs-rebuild), so make sure to give those guys a shout out.  this package was created to improve performance, development experience, and add some features.  some dependencies _will build with ionizer_ that _won't build with electron-rebuild_, although windows support is still lacking in ionizer (help requested for add windows support to [squish-squash](https://github.com/cdaringe/squish-squash)).  notable differences between the packages are:\n\n1. more reliable rebuilds.  ionizer runs the _actual_ electron node process when rebuilding packages\n1. faster rebuilds.  rather than rebuilding your entire _node_modules_ folder, you can limit the builds to certain packages.  and keep a record/cache of those packages that have already been rebuilt (so as to not redundantly rebuild them)\n1. pure es5. no es6 compilation required for backwards compatibility\n    1. improves testing, building, & distribution speed\n1. faster tests.  network tests are mocked out. once basic resources are cached.\n\n# todo\n- [ ] windows support (`squish-squash`)\n- [ ] add doc blocks and gen API docs\n- [ ] fix test ECONN issue for connecting to local file server\n- [ ] support building against global electron (vs. electron-prebuilt or loose binary)\n- [ ] general API tidy!\n\n# changelog\n1.x - release\n2.0.0 - drop `--verbose` in favor of `--log-level=[winston-log-levels]`\n\n[cdaringe.com](http://www.cdaringe.com)\n"
}