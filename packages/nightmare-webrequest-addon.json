{
  "name": "nightmare-webrequest-addon",
  "version": "1.0.0",
  "description": "webRequest API addon",
  "main": "nightmare-webrequest-addon.js",
  "scripts": {
    "test": "mocha --harmony "
  },
  "repository": {
    "user": "kyungw00k",
    "repo": "nightmare-webrequest-addon",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/kyungw00k/nightmare-webrequest-addon/tarball/master",
    "clone_url": "https://github.com/kyungw00k/nightmare-webrequest-addon",
    "https_url": "https://github.com/kyungw00k/nightmare-webrequest-addon",
    "travis_url": "https://travis-ci.org/kyungw00k/nightmare-webrequest-addon",
    "zip_url": "https://github.com/kyungw00k/nightmare-webrequest-addon/archive/master.zip",
    "api_url": "https://api.github.com/repos/kyungw00k/nightmare-webrequest-addon"
  },
  "keywords": [
    "nightmare",
    "webrequest"
  ],
  "author": {
    "name": "Kyungwook Park"
  },
  "license": "MIT",
  "homepage": "https://github.com/kyungw00k/nightmare-webrequest-addon#readme",
  "dependencies": {
    "debug": "^2.2.0",
    "nightmare": "^2.3.4",
    "sliced": "^1.0.1"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "express": "^4.13.4",
    "mocha": "^2.4.5",
    "mocha-generators": "^1.2.0",
    "really-need": "^1.9.2",
    "rimraf": "^2.5.2",
    "serve-static": "^1.10.2"
  },
  "gitHead": "f484626eac9f6342506bf3d216b073c95cadc28c",
  "_npmVersion": "3.7.3",
  "_nodeVersion": "5.9.0",
  "dist": {
    "shasum": "49260fed77f91906b4ab9457990421366b5ba619",
    "tarball": "http://registry.npmjs.org/nightmare-webrequest-addon/-/nightmare-webrequest-addon-1.0.0.tgz"
  },
  "versions": [
    {
      "number": "1.0.0",
      "date": "2016-04-25T15:29:30.741Z"
    }
  ],
  "created": "2016-04-25T15:29:30.741Z",
  "modified": "2016-04-25T15:29:30.741Z",
  "lastPublisher": {
    "name": "kyungw00k",
    "email": "parksama@gmail.com"
  },
  "owners": [
    {
      "name": "kyungw00k",
      "email": "parksama@gmail.com"
    }
  ],
  "readme": "# nightmare-webrequest-api\n> The `webRequest` API set allows to intercept and modify contents of a request at various stages of its lifetime.\n> (from https://github.com/electron/electron/blob/master/docs/api/session.md#seswebrequest)\n\nThis is the wrapper of Electron API `session.webRequest`.\n\n## Install\n```\nnpm install --save nightmare-webrequest-addon\n```\n\n## Usage\n\n### `nightmare.onBeforeRequest([filter, ]listener)`\n* `filter` Object\n* `listener` Function\n\nThe `listener` will be called with `listener(details, callback)` when a request\nis about to occur.\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `uploadData` Array (optional)\n* `callback` Function\n\nThe `uploadData` is an array of `data` objects:\n\n* `data` Object\n  * `bytes` Buffer - Content being sent.\n  * `file` String - Path of file being uploaded.\n\nThe `callback` has to be called with an `response` object:\n\n* `response` Object\n  * `cancel` Boolean (optional)\n  * `redirectURL` String (optional) - The original request is prevented from\n    being sent or completed, and is instead redirected to the given URL.\n\n**Note: `listener` is Electron-side context, cannot access any variable/function outside of `listener`**\n\nIf you want to use `details` Object in the nodeJS-side, use `nightmare.on('onBeforeRequest', callback)`\n \nThe `callback` has to be called with an `details` object:\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `uploadData` Array (optional)\n  \nSee the [example](test/webrequest-on-before-request.spec.js).\n\n### `nightmare.onBeforeSendHeaders([filter, ]listener)`\n\n* `filter` Object\n* `listener` Function\n\nThe `listener` will be called with `listener(details, callback)` before sending\nan HTTP request, once the request headers are available. This may occur after a\nTCP connection is made to the server, but before any http data is sent.\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `requestHeaders` Object\n* `callback` Function\n\nThe `callback` has to be called with an `response` object:\n\n* `response` Object\n  * `cancel` Boolean (optional)\n  * `requestHeaders` Object (optional) - When provided, request will be made\n    with these headers.\n\n**Note: `listener` is Electron-side context, cannot access any variable/function outside of `listener`**\n\nIf you want to use `details` Object in the nodeJS-side, use `nightmare.on('onBeforeSendHeaders', callback)`\n \nThe `callback` has to be called with an `details` object:\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `requestHeaders` Object\n\nSee the [example](test/webrequest-on-before-send-headers.spec.js).\n\n### `nightmare.onSendHeaders([filter, ]listener)`\n\n* `filter` Object\n* `listener` Function\n\nThe `listener` will be called with `listener(details)` just before a request is\ngoing to be sent to the server, modifications of previous `onBeforeSendHeaders`\nresponse are visible by the time this listener is fired.\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `requestHeaders` Object\n  \n**Note: `listener` is Electron-side context, cannot access any variable/function outside of `listener`**\n\nIf you want to use `details` Object in the nodeJS-side, use `nightmare.on('onBeforeSendHeaders', callback)`\n\nThe `callback` has to be called with an `details` object:\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `requestHeaders` Object\n  \nSee the [example](test/webrequest-on-send-headers.spec.js).\n\n### `nightmare.onHeadersReceived([filter,]listener)`\n\n* `filter` Object\n* `listener` Function\n\nThe `listener` will be called with `listener(details, callback)` when HTTP\nresponse headers of a request have been received.\n\n* `details` Object\n  * `id` String\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `statusLine` String\n  * `statusCode` Integer\n  * `responseHeaders` Object\n* `callback` Function\n\nThe `callback` has to be called with an `response` object:\n\n* `response` Object\n  * `cancel` Boolean\n  * `responseHeaders` Object (optional) - When provided, the server is assumed\n    to have responded with these headers.\n  * `statusLine` String (optional) - Should be provided when overriding\n    `responseHeaders` to change header status otherwise original response\n    header's status will be used.\n    \n**Note: `listener` is Electron-side context, cannot access any variable/function outside of `listener`**\n\nIf you want to use `details` Object in the nodeJS-side, use `nightmare.on('onHeadersReceived', callback)`\n\nThe `callback` has to be called with an `details` object:\n\n* `details` Object\n  * `id` String\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `statusLine` String\n  * `statusCode` Integer\n  * `responseHeaders` Object\n\nSee the [example](test/webrequest-on-headers-received.spec.js).\n\n### `nightmare.onResponseStarted([filter, ]listener)`\n\n* `filter` Object\n* `listener` Function\n\nThe `listener` will be called with `listener(details)` when first byte of the\nresponse body is received. For HTTP requests, this means that the status line\nand response headers are available.\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `responseHeaders` Object\n  * `fromCache` Boolean - Indicates whether the response was fetched from disk\n    cache.\n  * `statusCode` Integer\n  * `statusLine` String\n\n**Note: `listener` is Electron-side context, cannot access any variable/function outside of `listener`**\n\nIf you want to use `details` Object in the nodeJS-side, use `nightmare.on('onResponseStarted', callback)`\n\nThe `callback` has to be called with an `details` object:\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `responseHeaders` Object\n  * `fromCache` Boolean - Indicates whether the response was fetched from disk\n    cache.\n  * `statusCode` Integer\n  * `statusLine` String\n\nSee the [example](test/webrequest-on-response-started.spec.js).\n\n### `nightmare.onBeforeRedirect([filter, ]listener)`\n\n* `filter` Object\n* `listener` Function\n\nThe `listener` will be called with `listener(details)` when a server initiated\nredirect is about to occur.\n\n* `details` Object\n  * `id` String\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `redirectURL` String\n  * `statusCode` Integer\n  * `ip` String (optional) - The server IP address that the request was\n    actually sent to.\n  * `fromCache` Boolean\n  * `responseHeaders` Object\n\n**Note: `listener` is Electron-side context, cannot access any variable/function outside of `listener`**\n\nIf you want to use `details` Object in the nodeJS-side, use `nightmare.on('onBeforeRedirect', callback)`\n\nThe `callback` has to be called with an `details` object:\n\n* `details` Object\n  * `id` String\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `redirectURL` String\n  * `statusCode` Integer\n  * `ip` String (optional) - The server IP address that the request was\n    actually sent to.\n  * `fromCache` Boolean\n  * `responseHeaders` Object\n\nSee the [example](test/webrequest-on-before-redirect.spec.js).\n\n### `nightmare.onCompleted([filter, ]listener)`\n\n* `filter` Object\n* `listener` Function\n\nThe `listener` will be called with `listener(details)` when a request is\ncompleted.\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `responseHeaders` Object\n  * `fromCache` Boolean\n  * `statusCode` Integer\n  * `statusLine` String\n  \n**Note: `listener` is Electron-side context, cannot access any variable/function outside of `listener`**\n\nIf you want to use `details` Object in the nodeJS-side, use `nightmare.on('onCompleted', callback)`\n\nThe `callback` has to be called with an `details` object:\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `responseHeaders` Object\n  * `fromCache` Boolean\n  * `statusCode` Integer\n  * `statusLine` String\n\nSee the [example](test/webrequest-on-completed.spec.js).\n\n### `nightmare.onErrorOccurred([filter, ]listener)`\n\n* `filter` Object\n* `listener` Function\n\nThe `listener` will be called with `listener(details)` when an error occurs.\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `fromCache` Boolean\n  * `error` String - The error description.\n  \n**Note: `listener` is Electron-side context, cannot access any variable/function outside of `listener`**\n\nIf you want to use `details` Object in the nodeJS-side, use `nightmare.on('onErrorOccurred', callback)`\n\nThe `callback` has to be called with an `details` object:\n\n* `details` Object\n  * `id` Integer\n  * `url` String\n  * `method` String\n  * `resourceType` String\n  * `timestamp` Double\n  * `fromCache` Boolean\n  * `error` String - The error description.\n\nSee the [example](test/webrequest-on-error-occurred.spec.js).\n\n## Thanks to [@rosshinkley](https://github.com/rosshinkley/)\nThis module is heavily inspired by [nightmare-load-filter](https://github.com/rosshinkley/nightmare-load-filter)\n\n## License\nMIT\n"
}