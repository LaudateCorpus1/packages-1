{
  "name": "typhonjs-core-gulptasks",
  "version": "0.6.0",
  "homepage": "https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/",
  "description": "Provides common gulp tasks shared by TyphonJS and beyond for JSPM / SystemJS projects.",
  "license": "MPL-2.0",
  "author": {
    "name": "Mike Leahy"
  },
  "repository": {
    "user": "typhonjs-node-gulp",
    "repo": "typhonjs-core-gulptasks",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/typhonjs-node-gulp/typhonjs-core-gulptasks/tarball/master",
    "clone_url": "https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks",
    "https_url": "https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks",
    "travis_url": "https://travis-ci.org/typhonjs-node-gulp/typhonjs-core-gulptasks",
    "zip_url": "https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/archive/master.zip",
    "api_url": "https://api.github.com/repos/typhonjs-node-gulp/typhonjs-core-gulptasks"
  },
  "dependencies": {
    "fs-extra": "^0.26.0",
    "run-sequence": "^1.0.0",
    "strip-json-comments": "^2.0.0",
    "yargs": "^4.0.0"
  },
  "devDependencies": {
    "gulp": "^3.0.0",
    "gulp-task-listing": "^1.0.0",
    "jspm": "^0.16.0",
    "typhonjs-config-eslint": "^0.4.0",
    "typhonjs-npm-build-test": "^0.1.0"
  },
  "main": "dist/index.js",
  "engines": {
    "npm": ">=3.x"
  },
  "scripts": {
    "build": "babel-node ./node_modules/typhonjs-npm-scripts-build-babel/scripts/build.js",
    "prepublish": "node ./node_modules/typhonjs-npm-scripts-publish/scripts/prepublish.js"
  },
  "keywords": [
    "electron",
    "esdoc",
    "eslint",
    "gulp",
    "jspm",
    "systemjs",
    "tasks",
    "typhonjs"
  ],
  "files": [
    "dist",
    "src",
    "AUTHORS.md"
  ],
  "gitHead": "12460d6e997c7a2f891c40814c75970dccaf6c1d",
  "_npmVersion": "3.5.3",
  "_nodeVersion": "5.2.0",
  "dist": {
    "shasum": "4419404fea96dc9e3a56d13356b1c79f41061681",
    "tarball": "http://registry.npmjs.org/typhonjs-core-gulptasks/-/typhonjs-core-gulptasks-0.6.0.tgz"
  },
  "versions": [
    {
      "number": "0.0.1",
      "date": "2015-11-05T11:33:43.493Z"
    },
    {
      "number": "0.1.0",
      "date": "2015-11-05T11:39:07.925Z"
    },
    {
      "number": "0.1.1",
      "date": "2015-11-06T16:29:22.390Z"
    },
    {
      "number": "0.2.0",
      "date": "2015-11-07T06:01:21.044Z"
    },
    {
      "number": "0.3.0",
      "date": "2015-11-08T09:59:00.421Z"
    },
    {
      "number": "0.3.1",
      "date": "2016-01-07T10:06:47.250Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-01-12T08:27:59.956Z"
    },
    {
      "number": "0.4.1",
      "date": "2016-01-18T05:52:13.105Z"
    },
    {
      "number": "0.4.2",
      "date": "2016-01-22T12:53:24.565Z"
    },
    {
      "number": "0.5.0",
      "date": "2016-01-27T22:01:24.267Z"
    },
    {
      "number": "0.6.0",
      "date": "2016-03-14T00:56:14.397Z"
    }
  ],
  "created": "2015-11-05T11:33:43.493Z",
  "modified": "2016-03-14T00:56:14.397Z",
  "lastPublisher": {
    "name": "typhonrt",
    "email": "support@typhonrt.org"
  },
  "owners": [
    {
      "name": "typhonrt",
      "email": "support@typhonrt.org"
    }
  ],
  "readme": "![typhonjs-core-gulptasks](http://i.imgur.com/KqIyNtd.png)\n\n[![NPM](https://img.shields.io/npm/v/typhonjs-core-gulptasks.svg?label=npm)](https://www.npmjs.com/package/typhonjs-core-gulptasks)\n[![Code Style](https://img.shields.io/badge/code%20style-allman-yellowgreen.svg?style=flat)](https://en.wikipedia.org/wiki/Indent_style#Allman_style)\n[![License](https://img.shields.io/badge/license-MPLv2-yellowgreen.svg?style=flat)](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/LICENSE)\n[![Gitter](https://img.shields.io/gitter/room/typhonjs/TyphonJS.svg)](https://gitter.im/typhonjs/TyphonJS)\n\n[![Build Status](https://travis-ci.org/typhonjs-node-gulp/typhonjs-core-gulptasks.svg?branch=master)](https://travis-ci.org/typhonjs-node-gulp/typhonjs-core-gulptasks)\n[![Dependency Status](https://www.versioneye.com/user/projects/56dd82bb1535730033988367/badge.svg?style=flat)](https://www.versioneye.com/user/projects/56dd82bb1535730033988367)\n\nProvides common shared [Gulp](http://gulpjs.com/) tasks for [TyphonJS](https://github.com/typhonjs/typhonjs-overview) and beyond for those using [JSPM](http://jspm.io) / [SystemJS](https://github.com/systemjs/systemjs). By packaging all common Gulp tasks as a NPM module this fascilitates sharing the tasks across several projects / repos having one authoritative and versioned source for these tasks and all dependencies. Various JSPM & NPM CLI functions are wrapped as tasks allowing execution from IDEs which support Gulp. \n\nPlease note as of the `0.6.0` release that dependencies for the tasks defined below are no longer bundled with `typhonjs-core-gulptasks` and need to be separately installed for the associated tasks to be loaded. For seamless integration for ESDoc and ESLint tasks consider loading [typhonjs-npm-build-test](https://www.npmjs.com/package/typhonjs-npm-build-test) as a dev dependency.\n\nFor the latest significant changes please see the [CHANGELOG](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/CHANGELOG.md).\n\nThe following tasks are available and defined in `typhonjs-core-gulptasks` with the following categories:\n\n- `electron`:\n  - [`electron-package-<platform>-<arch>`](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/electron.js#L133) - Invokes [electron-packager](https://www.npmjs.com/package/electron-packager) with the options from `.electronrc` in the root path. Default values are provided for `platform` -> 'process.platform', `arch` -> 'process.arch', `source` -> '.' and `out` -> 'build' if not supplied. For options to provide in `.electronrc` please see:\nhttps://www.npmjs.com/package/electron-packager#programmatic-api\n\n  - [electron-start](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/electron.js#L57) - Spawns `electron .` starting the app defined in `package.json->main` entry in the root path. \n\n  - [electron-start-debug](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/electron.js#L65) - Spawns `electron --debug=5858 .` starting the app defined in `package.json->main` entry in the root path. \n\n- `esdocs`:\n  - [esdocs](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/esdoc.js#L56) - Creates ES6 documentation with [ESDocs](https://esdoc.org/) via [esdoc](https://www.npmjs.com/package/esdoc) which must be installed separately outputting to the location specified by `.esdocrc` or `esdoc.json`. Consider using [typhonjs-npm-build-test](https://www.npmjs.com/package/typhonjs-npm-build-test) as a dev dependency for [esdoc-plugin-jspm](https://www.npmjs.com/package/esdoc-plugin-jspm) and [esdoc-plugin-extends-replace](https://www.npmjs.com/package/esdoc-plugin-extends-replace) support.\n\n- `eslint`:\n  - [eslint](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/eslint.js#L33) - Runs [ESLint](http://eslint.org/) via [eslint](https://www.npmjs.com/package/eslint) using `.eslintrc` outputting to console and failing on any errors. Consider using [typhonjs-npm-build-test](https://www.npmjs.com/package/typhonjs-npm-build-test) as a dev dependency which includes `eslint` as a dependency.\n\n- `jspm`:\n  - [jspm-bundle](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/jspm.js#L86) - Creates one or more bundles defined in `./config/bundle-config.json` or `./config/bundle-config-travis.json` (Add `--travis` argument to run minimal in memory bundle op for Travis CI.). When running from the command line you may use `gulp jspm-bundle --bundleConfig=<path/to/custom/config.json>` to use a specific customized bundle configuration. \n\n  - [jspm-clear-config](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/jspm.js#L214) - Removes all `paths` and `map` entries that may be populated in the primary JSPM config file. Performs a git commit if the config file was modified.\n\n  - [jspm-dl-loader](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/jspm.js#L291) - Executes `jspm dl-loader` via JSPM CLI.\n\n  - [jspm-inspect](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/jspm.js#L306) - Executes `jspm inspect` via JSPM CLI.\n\n  - [jspm-install](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/jspm.js#L321) - Executes `jspm install` via JSPM CLI.\n  \n- `jspm-test`:\n  - [jspm-test-basic](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/jspm-test.js#L34) - Sets process.env.TRAVIS for in memory bundling and runs `eslint` and `jspm-bundle` tasks for basic testing.\n\n  - [jspm-test-basic-git-push](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/jspm-test.js#L52) - Verifies the build by running `jspm-test-basic` and on success executes `git push`. \n\n- `npm`:\n  - [npm-install](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/npm.js#L32) - Executes `npm install` via NPM CLI.\n\n  - [npm-list-depth-0](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/npm.js#L47) - Executes `npm list --depth=0` via NPM CLI.\n\n  - [npm-outdated](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/npm.js#L62) - Executes `npm outdated` via NPM CLI.\n\n  - [npm-uninstall](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/npm.js#L77) - Executes `npm uninstall` via NPM CLI.\n\n  - [npm-update](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/npm.js#L93) - Executes `npm update` via NPM CLI.\n\n  - [npm-update-dev](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/npm.js#L108) - Executes `npm update --dev` via NPM CLI.\n\n- `npm-scripts`:\n  - [`npm-run-<script name>`](https://github.com/typhonjs-node-gulp/typhonjs-core-gulptasks/blob/master/src/tasks/npm-scripts.js#L34) - Creates Gulp tasks dynamically generated from script entries found in `package.json` in the `rootPath`. Executes `npm run <script name>` via NPM CLI.\n\nImporting and using `typhonjs-core-gulptasks` is easy and streamlined. \n\nFirst include it as an entry in `devDependencies` in `package.json`:\n```\n{\n  ...\n  \n  \"devDependencies\": {\n    \"gulp\": \"^3.9.0\",\n    \"jspm\": \"^0.16.0\",\n    \"typhonjs-core-gulptasks\": \"^0.6.0\",\n    \"typhonjs-npm-build-test\": \"^0.1.0\"\n  }\n}\n```\n\nThen create a minimal `gulpfile.js`:\n```\nvar gulp = require('gulp');\n\n// Require all `typhonjs-core-gulptasks`; please note that typhonjs-core-gulptasks is now ES6 so `default` is required.\nrequire('typhonjs-core-gulptasks').default(gulp, { rootPath: __dirname, srcGlob: './src/**/*.js' });\n```\n\nor better yet if using Babel / `typhonjs-npm-build-test` create a minimal ES6 `gulpfile.babel.js`:\n```\nimport gulp          from 'gulp';\nimport gulpTasks     from 'typhonjs-core-gulptasks';\n\n// Import all tasks and set `rootPath` to the base project path and `srcGlob` to all JS sources in `./src`.\ngulpTasks(gulp, { rootPath: __dirname, srcGlob: ['./src/**/*.js'] });\n```\n\n\nRequired options:\n\n- `rootPath` - The root path where `package.json` is located for the given project that may contain [JSPM directives](https://github.com/jspm/registry/wiki/Configuring-Packages-for-jspm).\n\n- `srcGlob` - Defines a [string or array of strings](https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpsrcglobs-options) for the location of local sources to be manipulated by the following tasks: `eslint`.\n\nOptional configuration parameters:\n\n`configDir` - The directory where configuration files for various tasks such as `jspm-bundle` are stored; default \n(`./config`).\n\n- `excludeTasks` - An array of strings which specifies particular categories of tasks to exclude.\n\n- `importTasks` - An array of strings which specifies which categories of tasks to load. This allows only exposing certain tasks that are relevant for a given project. For instance several TyphonJS Node packages only use `eslint` and `npm`. Available task categories include: 'electron', 'esdoc', 'eslint', 'jspm', 'jspm-test', 'npm' and 'npm-scripts'.\n\n--------\n\nThe [Electron](http://electron.atom.io/) tasks require that NPM modules [electron-packager](https://www.npmjs.com/package/electron-packager) and [electron-prebuilt](https://www.npmjs.com/package/electron-prebuilt) are installed in addition to an `.electronrc` configuration file located in the root path. `.electronrc` contains optional parameters for invoking electron-packager. Default values are provided for `platform` -> 'process.platform', `arch` -> 'process.arch', `source` -> '.' and `out` -> 'build' if not supplied. If the above requirements are met these tasks will be available. For options to provide in `.electronrc` please see:\nhttps://www.npmjs.com/package/electron-packager#programmatic-api\n\nFor a complete example please see:  [electron-backbone-es6-localstorage-todos](https://github.com/typhonjs-demos-deploy-electron/electron-backbone-es6-localstorage-todos)\n\nThe `esdoc` task requires a valid `.esdocrc` or `esdoc.json` [configuration file](https://esdoc.org/config.html) file in the root project path.\n\nThe `eslint` task requires a valid [.eslintrc](http://eslint.org/docs/user-guide/configuring.html) file in the root project path. \n\nThe `jspm-bundle` task requires two configuration files to be defined in `./config`:\n- `./config/bundle-config.json` - Provides the main bundle configuration.\n\n- `./config/bundle-config-travis.json` - Provides the testing / Travis bundle configuration which is used for an in memory bundle op by SystemJS Builder.\n\nYou may use comments in the bundle-config JSON files as they are stripped. \n\nThe following is an example entry:\n```\n{\n  \"entryPoints\":\n  [\n    {\n      \"buildType\": \"buildStatic\",         // (Optional) 'buildStatic' is the default; use 'bundle' for non-SFX build.\n      \"inMemoryBuild\": false              // (Optional) Indicates in memory build; may omit `dest<X>` entries.\n      \"destBaseDir\": \"./dist\",            // Root destination directory for bundle output.\n      \"destFilename\": \"<filename>.js\",    // Destination bundle file name.\n      \"formats\": [\"amd\", \"cjs\", \"umd\"],   // Module format to use / also defines destination sub-directory.\n      \"mangle\": false,                    // Uglify mangle property used by SystemJS Builder.\n      \"minify\": false,                    // Minify property used by SystemJS Builder.\n      \"src\": \"<dir>/<filename>.js\",       // Entry source point for SystemJS Builder\n      \"extraConfig\":                      // (Optional) Defines additional JSPM config parameters to load after\n      {                                   // ./config.js is loaded. Provide a string or array of strings and they\n        \"meta\":                           // will be interpreted as an additional configuration file styled like\n        {                                 // `config.js` or provide an object hash which is loaded directly.  This\n          \"jquery\": { \"build\": false },   // example skips building `jquery` and `underscore`.\n          \"underscore\": { \"build\": false }\n        }\n      },\n      \"builderOptions\":                   // (Optional) an object hash of any valid parameters for SystemJS Builder. This \n      {                                   // example sets `globalDeps` for associating `jquery` and `underscore` for UMD  \n        \"globalDeps\":                     // and global bundles.\n        {\n          \"jquery\": \"$\",\n          \"underscore\": \"_\"\n        }\n      }\n    }\n  ]\n}\n```\n\nPlease note that `extraConfig` can be a string or array of strings of filepaths relative to the project root path that defines an additional JSPM styled configuration file like `config.js` (wrapped in a `System.config({ ... });` statement). This is particularly useful to define additional user supplied mapped paths that incorporate normalized JSPM package paths resolved from `config.js`. If an object literal / hash is supplied it is loaded directly.\n\nPlease note that `builderOptions` may include any valid optional parameters that SystemJS Builder supports.\n\nFor a comprehensive demo and tutorial see the [backbone-es6-localstorage-todos](https://github.com/typhonjs-demos/backbone-es6-localstorage-todos) repo which uses `typhonjs-core-gulptasks`.\n\ntyphonjs-core-gulptasks (c) 2015-present Michael Leahy, TyphonRT, Inc.\n\ntyphonjs-core-gulptasks may be freely distributed under the MPLv2.0 license.\n"
}