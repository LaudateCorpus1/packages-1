{
  "name": "piri-piri",
  "version": "0.4.0",
  "description": "piri-piri is a browser orchestration to enable decentralized browser applications tests. Ah and it is hot :)",
  "main": "src/index.js",
  "scripts": {
    "test": "mocha tests/test-*.js",
    "lint": "standard",
    "test-old": "node ./node_modules/.bin/lab tests/spicy-test.js",
    "test-farm": "node ./node_modules/.bin/lab tests/farm-test.js"
  },
  "repository": {
    "user": "diasdavid",
    "repo": "piri-piri",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/diasdavid/piri-piri/tarball/master",
    "clone_url": "https://github.com/diasdavid/piri-piri",
    "https_url": "https://github.com/diasdavid/piri-piri",
    "travis_url": "https://travis-ci.org/diasdavid/piri-piri",
    "zip_url": "https://github.com/diasdavid/piri-piri/archive/master.zip",
    "api_url": "https://api.github.com/repos/diasdavid/piri-piri"
  },
  "author": {
    "name": "David Dias",
    "email": "daviddias.p@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/diasdavid/piri-piri",
  "dependencies": {
    "electron-spawn": "^3.3.0",
    "socket.io": "^1.4.5",
    "socket.io-client": "^1.4.5"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.4.5",
    "piri-piri.client": "^0.3.0",
    "pre-commit": "^1.1.2",
    "standard": "^6.0.4"
  },
  "gitHead": "4514b7de3e4cb241603eb2fab94327db809e30f4",
  "_npmVersion": "3.5.3",
  "_nodeVersion": "5.5.0",
  "dist": {
    "shasum": "7c6f9a08c29498d115a7e16e5b76a32982cd9185",
    "tarball": "http://registry.npmjs.org/piri-piri/-/piri-piri-0.4.0.tgz"
  },
  "stars": 3,
  "versions": [
    {
      "number": "0.1.0",
      "date": "2014-10-30T23:34:23.034Z"
    },
    {
      "number": "0.2.0",
      "date": "2014-11-11T06:32:18.579Z"
    },
    {
      "number": "0.3.0",
      "date": "2014-11-12T12:37:55.760Z"
    },
    {
      "number": "0.3.1",
      "date": "2014-12-05T21:13:30.741Z"
    },
    {
      "number": "0.4.0",
      "date": "2016-02-08T22:57:28.987Z"
    }
  ],
  "created": "2014-10-30T23:34:23.034Z",
  "modified": "2016-02-08T22:57:28.987Z",
  "lastPublisher": {
    "name": "daviddias",
    "email": "daviddias.p@gmail.com"
  },
  "owners": [
    {
      "name": "daviddias",
      "email": "daviddias.p@gmail.com"
    }
  ],
  "readme": "piri-piri\n=========\n\n> [**`piri-piri`**](https://en.wikipedia.org/wiki/Piri_piri) is a browser orchestration to enable decentralized browser applications tests. Ah and it is hot :)\n\n[![](https://img.shields.io/badge/project-WebCompute-blue.svg?style=flat-square)](https://github.com/diasdavid/WebCompute)\n\n![](/img/logo.png)\n\n\n# Why does it exist\n\nThere are a panoply of excellent browser testing frameworks and services available today, however their focus is on testing browser implementations (CSS, HTML and JavaScript) and user interactions of the apps their are testing (clicks, mouse movements, what the user sees). \n\nWhen it comes to testing to test a decentralized browser app or library, the focus stops being how a browser implements a specific behaviour, but how the decentralized network handles node joins and leaves and if nodes are effectively communicating between each other. In this scenario, we have several events that the server never sees or that the server never instructs the clients to do, so we need to create a new way to coordinate the browser joins and leaves and also how they interact between each other remotely and this is were `piri-piri` comes into play.\n\n\nThe specific set of problems `piri-piri` tries to solve:\n\n- browser times X, where 1<=X<=virtually unlimited - Most browser testing frameworks only let you launch a couple of browsers at a time, `piri-piri` aims to launch several browsers and/or tabs to load a webpage, in a local or distributed fashion.\n\n- instruct browsers on demand - Since there is a ton of stuff happening on browser decentralized apps, we can't just write a script to test and listen to events that happens in a single browser, there are triggers coming from all of them.\n\n- gather information and evaluate the state as a whole - collect the events and data generated by each browser and assess if the order was correct with pseudo external consistency\n\n**why `piri-piri`? Well, to be honest, since I got to learn about SauceLabs in 2012 (during LXJS over some Nachos and Tabasco Hot Sauce), browser testing for me was always connected to spicy and sauce, so that inspired me to pick the one that is very famous on the portuguese cousine, that is, `piri-piri` :)\n\n# How to use it (API)\n\n```JavaScript\nconst pp = require('piri-piri')\n```\n\n## Starting piri-piri\n\npiri-piri needs to get initialized in order to create a WebSockets server which will be used as the bridge to transfer messages between your Node.js process where tests and assertions are being run and the browsers that get instantiated. To start it, do:\n\n```JavaScript\npp.start((err) => {\n  done()\n})\n```\n\n## Launching an instance\n\nIn fact, what will get launched are headless electron processes.\n\n```JavaScript\npp.browser.spawn(<scriptPath>, <quantity>, (err) => {\n  if (err) { }\n  // ..\n})\n```\n\n`scriptPath` is the path to the script that you want to run in the browser\n\n## How should your script to run on the browser look like\n\n```JavaScript\nconst ppc = require('../../src').client\n\nmodule.exports = function (args) {\n  ppc.connect((err, socket) => { // do this when you want to tell piri-piri that your app is ready\n    if (err) {\n      return console.log(err)\n    }\n    socket.on('exit', ppc.exit)\n  })\n}\n```\n\n### Instruct a comamnd, a 'sum function' example\n\nbrowser app\n\n```JavaScript\nconst ppc = require('../../src').client\n\nmodule.exports = function (args) {\n  ppc.handle('sum', (arr) => {\n    var sum = Number(arr[0] + arr[1])\n    ppc.send(sum)\n  })\n\n  ppc.connect((err) => {\n    if (err) {\n      return console.log(err)\n    }\n  })\n}\n```\n\ntests side\n\n```JavaScript\npp.browser.spawn('./tests/scripts/method.js', 1, (err) => {\n  if (err) { }\n  var id = Object.keys(pp.clients)[0] // should be 0, electron is not being properly closed\n  pp.browser.send(id, 'sum', 2, 2)\n  setTimeout(() => {\n    console.log(pp.clients[id].msgs[0]) // the \n    pp.browser.send(id, 'exit')\n  }, 500)\n})\n```\n\n# Initial Development\n\nThe initial development for this project was supported by INESC-ID, during the development of David Dias' M.Sc\n\n[![](https://img.shields.io/badge/INESC-GSD-brightgreen.svg?style=flat-square)](http://www.gsd.inesc-id.pt/) \n[![](https://img.shields.io/badge/TÃ‰CNICO-LISBOA-blue.svg?style=flat-square)](http://tecnico.ulisboa.pt/) \n\n[![](https://cldup.com/pgZbzoshyV-3000x3000.png)](http://www.gsd.inesc-id.pt/)\n"
}